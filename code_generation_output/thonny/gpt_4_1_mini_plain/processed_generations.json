{"task_id": 223, "project": "test-apps/thonny", "module": "thonny.token_utils", "predictions": ["def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return fr\"(?P<{name}>{pattern})\"", "def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return rf\"(?P<{name}>{pattern})\"", "def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    pattern = \"|\".join(alternates)\n    return f\"(?P<{name}>{pattern})\"", "def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    return r\"(?P<%s>%s)\" % (name, '|'.join(alternates))", "def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return rf\"(?P<{name}>{pattern})\""], "test": ["\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return fr\"(?P<{name}>{pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return rf\"(?P<{name}>{pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    pattern = \"|\".join(alternates)\n    return f\"(?P<{name}>{pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    return r\"(?P<%s>%s)\" % (name, '|'.join(alternates))\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    import re\n    pattern = '|'.join(re.escape(alt) for alt in alternates)\n    return rf\"(?P<{name}>{pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n"]}
{"task_id": 224, "project": "test-apps/thonny", "module": "thonny.ast_utils", "predictions": ["def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    if not hasattr(node, 'children') or not node.children:\n        return None\n    for child in reversed(node.children):\n        if skip_incorrect and getattr(child, 'incorrect', False):\n            continue\n        return child\n    return None", "def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    try:\n        children = list(node.get_children())\n    except Exception:\n        if skip_incorrect:\n            return None\n        else:\n            raise\n    \n    # reverse iterate children to find the last focusable child\n    for child in reversed(children):\n        # assuming a method or attribute that checks focusability\n        if hasattr(child, \"is_focusable\") and child.is_focusable():\n            return child\n        # if no is_focusable method, we consider nodes that have children as potentially focusable\n        if hasattr(child, \"get_children\"):\n            last = get_last_child(child, skip_incorrect=skip_incorrect)\n            if last:\n                return last\n    return None", "def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    children = getattr(node, 'children', [])\n    if not children:\n        return None\n\n    for child in reversed(children):\n        if skip_incorrect and getattr(child, 'is_incorrect', False):\n            continue\n        if hasattr(child, 'is_focusable') and child.is_focusable:\n            return child\n        # Recursively check child's last child\n        last_child = get_last_child(child, skip_incorrect=skip_incorrect)\n        if last_child:\n            return last_child\n    return None", "def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    if not node or not hasattr(node, 'children') or not node.children:\n        return None\n\n    # Iterate over children in reverse to find the last focusable child\n    for child in reversed(node.children):\n        if skip_incorrect and not getattr(child, 'is_correct', True):\n            continue\n        # Check if child has further children - recurse into the last child's subtree\n        last = get_last_child(child, skip_incorrect)\n        if last:\n            return last\n        # If no deeper focusable child found, check if this child is focusable\n        if getattr(child, 'is_focusable', True):\n            return child\n        \n    return None", "def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    children = getattr(node, 'children', None)\n    if not children:\n        return None\n    for child in reversed(children):\n        if skip_incorrect and getattr(child, 'incorrect', False):\n            continue\n        if hasattr(child, 'focusable') and child.focusable:\n            return child\n        last = get_last_child(child, skip_incorrect)\n        if last:\n            return last\n    return None"], "test": ["\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    if not hasattr(node, 'children') or not node.children:\n        return None\n    for child in reversed(node.children):\n        if skip_incorrect and getattr(child, 'incorrect', False):\n            continue\n        return child\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    try:\n        children = list(node.get_children())\n    except Exception:\n        if skip_incorrect:\n            return None\n        else:\n            raise\n    \n    # reverse iterate children to find the last focusable child\n    for child in reversed(children):\n        # assuming a method or attribute that checks focusability\n        if hasattr(child, \"is_focusable\") and child.is_focusable():\n            return child\n        # if no is_focusable method, we consider nodes that have children as potentially focusable\n        if hasattr(child, \"get_children\"):\n            last = get_last_child(child, skip_incorrect=skip_incorrect)\n            if last:\n                return last\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    children = getattr(node, 'children', [])\n    if not children:\n        return None\n\n    for child in reversed(children):\n        if skip_incorrect and getattr(child, 'is_incorrect', False):\n            continue\n        if hasattr(child, 'is_focusable') and child.is_focusable:\n            return child\n        # Recursively check child's last child\n        last_child = get_last_child(child, skip_incorrect=skip_incorrect)\n        if last_child:\n            return last_child\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    if not node or not hasattr(node, 'children') or not node.children:\n        return None\n\n    # Iterate over children in reverse to find the last focusable child\n    for child in reversed(node.children):\n        if skip_incorrect and not getattr(child, 'is_correct', True):\n            continue\n        # Check if child has further children - recurse into the last child's subtree\n        last = get_last_child(child, skip_incorrect)\n        if last:\n            return last\n        # If no deeper focusable child found, check if this child is focusable\n        if getattr(child, 'is_focusable', True):\n            return child\n        \n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n    children = getattr(node, 'children', None)\n    if not children:\n        return None\n    for child in reversed(children):\n        if skip_incorrect and getattr(child, 'incorrect', False):\n            continue\n        if hasattr(child, 'focusable') and child.focusable:\n            return child\n        last = get_last_child(child, skip_incorrect)\n        if last:\n            return last\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()"]}
