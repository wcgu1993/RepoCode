{"task_id": 223, "project": "test-apps/thonny", "module": "thonny.token_utils", "predictions": ["import re\nimport builtins\nimport keyword\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    if not isinstance(name, str) or not name:\n        raise ValueError(\"Group name must be a non-empty string.\")\n    if not isinstance(alternates, (list, tuple)):\n        raise TypeError(\"Alternates must be a list or tuple of strings.\")\n    if not alternates:\n        # An empty list of alternates would match nothing.\n        # This could be handled by returning a pattern that matches nothing,\n        # or by raising an error. For now, let's make it match an empty string\n        # or just return the group with no content, depending on intent.\n        # A common regex pattern for \"nothing\" is `a^` or similar.\n        # However, a named group must have content.\n        # If the intent is to allow the group to be empty, it should be `(?P<name>)`.\n        # If it's to match absolutely nothing, `(?!)` is a common idiom, but cannot be named.\n        # Let's assume the alternates will be used to match actual content,\n        # so an empty list of alternates should result in a pattern that matches nothing.\n        # A simple way to achieve this for a named group is to match an impossible sequence.\n        # For a named group, the structure `(?P<name>)` means the group *can* be empty.\n        # If it should match *nothing*, maybe `(?P<name>a^)`\n        # Or, given it's for \"alternates\", it probably expects some alternates.\n        # For robustness, let's return a pattern that matches nothing if no alternates are given,\n        # but still provides the named group.\n        # One option: f\"(?P<{name}>$a^)\" -- this literally matches nothing, but the group is present.\n        # Simpler: just match an empty string if the list is empty, allowing the group to exist but be empty.\n        # This aligns with how `re.escape('')` works.\n        # The group would match, but its content would be empty.\n        alternates_pattern = \"\"\n    else:\n        # Escape each alternate string to treat them as literal patterns\n        # within the regex, preventing special regex characters from being\n        # interpreted as regex syntax.\n        escaped_alternates = [re.escape(alt) for alt in alternates]\n        # Join the escaped alternates with the regex OR operator (|)\n        alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named group pattern\n    # (?P<name>pattern) creates a named capturing group.\n    return f\"(?P<{name}>{alternates_pattern})\"", "import re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # To ensure that each alternate string is treated literally in the regular expression,\n    # we must escape any characters within them that have special meaning in regex.\n    # The `re.escape()` function is specifically designed for this purpose.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternate strings with the regex \"OR\" operator (|).\n    # This creates a pattern that matches any one of the provided alternates.\n    # If the `alternates` list is empty, `str.join()` will result in an empty string.\n    joined_alternates = \"|\".join(escaped_alternates)\n\n    # Construct the final regular expression pattern.\n    # `(?P<name>...)` defines a named capturing group in Python's regex syntax.\n    # The content of this group will be the `joined_alternates` pattern.\n    return f\"(?P<{name}>{joined_alternates})\"", "import re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate string to ensure they are treated as literal\n    # sequences in the regular expression, preventing any special regex\n    # characters within them from being misinterpreted.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternates with the '|' (OR) operator,\n    # so the pattern matches any one of the provided strings.\n    # If alternates is empty, joined_alternates will be an empty string.\n    joined_alternates = \"|\".join(escaped_alternates)\n\n    # Construct the final pattern using a named group (?P<name>...)\n    # This allows the matched substring to be retrieved by its 'name'.\n    # If joined_alternates is empty, the result will be (?P<name>),\n    # which is a valid regex that matches nothing.\n    pattern = f\"(?P<{name}>{joined_alternates})\"\n\n    return pattern", "import re\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate string to ensure it's treated as a literal\n    # within the regular expression. This is crucial to prevent special\n    # regex characters in the alternates from being interpreted.\n    escaped_alternates = [re.escape(s) for s in alternates]\n\n    # Join the escaped alternates with the '|' (OR) operator to create\n    # a pattern that matches any of them.\n    alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named capturing group pattern.\n    # (?P<name>pattern) is the syntax for a named group in Python's re module.\n    # The 'name' itself does not need escaping as it's part of the regex syntax.\n    return f\"(?P<{name}>{alternates_pattern})\"", "import re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate to ensure any regex special characters (like '.', '*', '+', '?', etc.)\n    # within the alternate strings are treated as literal characters, not regex metacharacters.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternates with the regex OR operator '|'.\n    # If 'alternates' is an empty list, 'alternates_pattern' will be an empty string.\n    alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named group pattern using an f-string.\n    # The format is (?P<name>pattern), where 'pattern' is the joined alternates.\n    # If 'alternates_pattern' is empty, the group will match an empty string.\n    return f\"(?P<{name}>{alternates_pattern})\""], "test": ["\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\nimport re\nimport builtins\nimport keyword\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    if not isinstance(name, str) or not name:\n        raise ValueError(\"Group name must be a non-empty string.\")\n    if not isinstance(alternates, (list, tuple)):\n        raise TypeError(\"Alternates must be a list or tuple of strings.\")\n    if not alternates:\n        # An empty list of alternates would match nothing.\n        # This could be handled by returning a pattern that matches nothing,\n        # or by raising an error. For now, let's make it match an empty string\n        # or just return the group with no content, depending on intent.\n        # A common regex pattern for \"nothing\" is `a^` or similar.\n        # However, a named group must have content.\n        # If the intent is to allow the group to be empty, it should be `(?P<name>)`.\n        # If it's to match absolutely nothing, `(?!)` is a common idiom, but cannot be named.\n        # Let's assume the alternates will be used to match actual content,\n        # so an empty list of alternates should result in a pattern that matches nothing.\n        # A simple way to achieve this for a named group is to match an impossible sequence.\n        # For a named group, the structure `(?P<name>)` means the group *can* be empty.\n        # If it should match *nothing*, maybe `(?P<name>a^)`\n        # Or, given it's for \"alternates\", it probably expects some alternates.\n        # For robustness, let's return a pattern that matches nothing if no alternates are given,\n        # but still provides the named group.\n        # One option: f\"(?P<{name}>$a^)\" -- this literally matches nothing, but the group is present.\n        # Simpler: just match an empty string if the list is empty, allowing the group to exist but be empty.\n        # This aligns with how `re.escape('')` works.\n        # The group would match, but its content would be empty.\n        alternates_pattern = \"\"\n    else:\n        # Escape each alternate string to treat them as literal patterns\n        # within the regex, preventing special regex characters from being\n        # interpreted as regex syntax.\n        escaped_alternates = [re.escape(alt) for alt in alternates]\n        # Join the escaped alternates with the regex OR operator (|)\n        alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named group pattern\n    # (?P<name>pattern) creates a named capturing group.\n    return f\"(?P<{name}>{alternates_pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\nimport re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # To ensure that each alternate string is treated literally in the regular expression,\n    # we must escape any characters within them that have special meaning in regex.\n    # The `re.escape()` function is specifically designed for this purpose.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternate strings with the regex \"OR\" operator (|).\n    # This creates a pattern that matches any one of the provided alternates.\n    # If the `alternates` list is empty, `str.join()` will result in an empty string.\n    joined_alternates = \"|\".join(escaped_alternates)\n\n    # Construct the final regular expression pattern.\n    # `(?P<name>...)` defines a named capturing group in Python's regex syntax.\n    # The content of this group will be the `joined_alternates` pattern.\n    return f\"(?P<{name}>{joined_alternates})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\nimport re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate string to ensure they are treated as literal\n    # sequences in the regular expression, preventing any special regex\n    # characters within them from being misinterpreted.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternates with the '|' (OR) operator,\n    # so the pattern matches any one of the provided strings.\n    # If alternates is empty, joined_alternates will be an empty string.\n    joined_alternates = \"|\".join(escaped_alternates)\n\n    # Construct the final pattern using a named group (?P<name>...)\n    # This allows the matched substring to be retrieved by its 'name'.\n    # If joined_alternates is empty, the result will be (?P<name>),\n    # which is a valid regex that matches nothing.\n    pattern = f\"(?P<{name}>{joined_alternates})\"\n\n    return pattern\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\nimport re\nimport builtins\nimport keyword\n\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate string to ensure it's treated as a literal\n    # within the regular expression. This is crucial to prevent special\n    # regex characters in the alternates from being interpreted.\n    escaped_alternates = [re.escape(s) for s in alternates]\n\n    # Join the escaped alternates with the '|' (OR) operator to create\n    # a pattern that matches any of them.\n    alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named capturing group pattern.\n    # (?P<name>pattern) is the syntax for a named group in Python's re module.\n    # The 'name' itself does not need escaping as it's part of the regex syntax.\n    return f\"(?P<{name}>{alternates_pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nimport builtins\nimport keyword\n\n\nimport re\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    # Escape each alternate to ensure any regex special characters (like '.', '*', '+', '?', etc.)\n    # within the alternate strings are treated as literal characters, not regex metacharacters.\n    escaped_alternates = [re.escape(alt) for alt in alternates]\n\n    # Join the escaped alternates with the regex OR operator '|'.\n    # If 'alternates' is an empty list, 'alternates_pattern' will be an empty string.\n    alternates_pattern = \"|\".join(escaped_alternates)\n\n    # Construct the named group pattern using an f-string.\n    # The format is (?P<name>pattern), where 'pattern' is the joined alternates.\n    # If 'alternates_pattern' is empty, the group will match an empty string.\n    return f\"(?P<{name}>{alternates_pattern})\"\n\n\nKEYWORD = r\"\\b\" + matches_any(\"keyword\", keyword.kwlist) + r\"\\b\"\n_builtinlist = [\n    str(name) for name in dir(builtins) if not name.startswith(\"_\") and name not in keyword.kwlist\n]\n\n_builtinlist.append(\"self\")\n_builtinlist.append(\"cls\")\n\n\nBUILTIN = r\"([^.'\\\"\\\\#]\\b|^)\" + matches_any(\"builtin\", _builtinlist) + r\"\\b\"\nNUMBER = matches_any(\n    \"number\",\n    [\n        r\"\\b0[bB][_0-1]+\",\n        r\"\\b0[oO][_0-7]+\",\n        r\"\\b0[xX][_0-9a-fA-F]+\",\n        r\"\\b(\\d[_\\d]*(\\.[_\\d]*)?|\\.\\d[_\\d]*)([eE][+-]?[_\\d]+)?j?\",\n    ],\n)\n\nCOMMENT = matches_any(\"comment\", [r\"#[^\\n]*\"])\nMAGIC_COMMAND = matches_any(\"magic\", [r\"^%[^\\n]*\"]) \nSTRINGPREFIX = r\"(\\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR|rb|rB|Rb|RB|f|F|fr|Fr|fR|FR|rf|rF|Rf|RF)?\"\n\nSQSTRING_OPEN = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*\\n?\"\nSQSTRING_CLOSED = STRINGPREFIX + r\"'[^'\\\\\\n]*(\\\\.[^'\\\\\\n]*)*'\"\n\nDQSTRING_OPEN = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\\n?'\nDQSTRING_CLOSED = STRINGPREFIX + r'\"[^\"\\\\\\n]*(\\\\.[^\"\\\\\\n]*)*\"'\n\nSQ3STRING = STRINGPREFIX + r\"'''[^'\\\\]*((\\\\.|'(?!''))[^'\\\\]*)*(''')?\"\nDQ3STRING = STRINGPREFIX + r'\"\"\"[^\"\\\\]*((\\\\.|\"(?!\"\"))[^\"\\\\]*)*(\"\"\")?'\n\nSQ3DELIMITER = STRINGPREFIX + \"'''\"\nDQ3DELIMITER = STRINGPREFIX + '\"\"\"'\nCOMMENT_WITH_Q3DELIMITER = matches_any(\"q3comment\", [r\"#[^\\n]*('''|\\\"\\\"\\\")[^\\n]*\"])\n\nSTRING_OPEN = matches_any(\"open_string\", [SQSTRING_OPEN, DQSTRING_OPEN])\nSTRING_CLOSED = matches_any(\"string\", [SQSTRING_CLOSED, DQSTRING_CLOSED])\nSTRING3_DELIMITER = matches_any(\"DELIMITER3\", [SQ3DELIMITER, DQ3DELIMITER])\nSTRING3 = matches_any(\"string3\", [DQ3STRING, SQ3STRING])\n\nTAB = matches_any(\"tab\", \"\\t\")\n\n\nimport pickle\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\ntest_1()\n\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\ntest_3()\n\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\ntest_4()\n\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\ntest_6()\n\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\ntest_7()\n\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\ntest_8()\n\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\ntest_9()\n\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\ntest_10()\n\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\ntest_12()\n\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\ntest_13()\n\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\ntest_14()\n\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\ntest_17()\n\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\ntest_18()\n\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\ntest_21()\n\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\ntest_22()\n\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\ntest_26()\n\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\ntest_27()\n\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\ntest_29()\n\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\ntest_35()\n\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\ntest_36()\n\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\ntest_37()\n\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\ntest_38()\n\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\ntest_40()\n\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\ntest_41()\n\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\ntest_42()\n\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\ntest_43()\n\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\ntest_2()\n\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\ntest_15()\n\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\ntest_19()\n\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\ntest_20()\n\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\ntest_24()\n\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\ntest_25()\n\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\ntest_30()\n\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\ntest_32()\n\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\ntest_33()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\ntest_34()\n\n\n"]}
{"task_id": 224, "project": "test-apps/thonny", "module": "thonny.ast_utils", "predictions": ["import ast\nfrom typing import Union\n\n# --- Context Function Implementations (with assumed correct signatures) ---\n# We provide fallback local implementations for ok_node and last_ok in case\n# thonny.ast_utils is not installed or if their signatures truly do not\n# match the assumed ones (which would make the skip_incorrect parameter\n# of get_last_child non-functional via imports).\n\ntry:\n    # Attempt to import the functions from Thonny's ast_utils.\n    # This assumes they are available and correctly handle the 'skip_incorrect' parameter.\n    from thonny.ast_utils import ok_node, last_ok\nexcept ImportError:\n    # Fallback implementations if thonny.ast_utils is not available or\n    # if there's a mismatch in the expected function signatures (e.g., for skip_incorrect).\n    # These local versions mirror the description and ensure 'skip_incorrect' is functional.\n\n    # Context Function 4: ok_node (modified to explicitly accept skip_incorrect)\n    def ok_node(node, skip_incorrect=True):\n        if node is None:\n            return None\n\n        # The context implied this assert for type checking.\n        assert isinstance(node, (ast.expr, ast.stmt)), f\"Expected AST expression or statement, got {type(node)}\"\n\n        if skip_incorrect and getattr(node, \"incorrect_range\", False):\n            return None\n\n        return node\n\n    # Context Function 2: last_ok (modified to explicitly accept skip_incorrect)\n    def last_ok(nodes, skip_incorrect=True):\n        for i in range(len(nodes) - 1, -1, -1):\n            # Pass skip_incorrect to ok_node\n            if ok_node(nodes[i], skip_incorrect=skip_incorrect):\n                node = nodes[i]\n                if isinstance(node, ast.Starred):\n                    # For ast.Starred, check its value, also passing skip_incorrect\n                    if ok_node(node.value, skip_incorrect=skip_incorrect):\n                        return node.value\n                    else:\n                        return None\n                else:\n                    return nodes[i]\n\n        return None\n\n# --- Query Function Implementation ---\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    candidate_children = []\n    # Iterate through all direct child nodes of the given AST node.\n    # ast.iter_child_nodes is the standard way to get direct children.\n    for child in ast.iter_child_nodes(node):\n        # A \"focusable\" child in this context typically refers to an\n        # expression (ast.expr) or a statement (ast.stmt).\n        if isinstance(child, (ast.expr, ast.stmt)):\n            candidate_children.append(child)\n\n    # Use the 'last_ok' helper function to find the last valid/focusable\n    # child among the collected candidates.\n    # We pass the 'skip_incorrect' parameter, which 'last_ok' (and internally 'ok_node')\n    # will use to filter out nodes marked with 'incorrect_range'.\n    return last_ok(candidate_children, skip_incorrect=skip_incorrect)", "import ast\nfrom typing import Union\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    def _is_focusable(child_node, skip_incorrect_check):\n        \"\"\"\n        Helper function to determine if a given AST node is \"focusable\".\n        A node is considered focusable if it is an AST expression or statement,\n        and not marked as \"incorrect_range\" if `skip_incorrect_check` is True.\n        This internal helper is based on the logic seen in `ok_node` from context.\n        \"\"\"\n        if child_node is None:\n            return False\n\n        # Only expressions (ast.expr) and statements (ast.stmt) are considered focusable.\n        # ast.expr is a base class for all expression nodes.\n        # ast.stmt is a base class for all statement nodes.\n        if not isinstance(child_node, (ast.expr, ast.stmt)):\n            return False\n\n        # If skip_incorrect_check is True, and the node has an 'incorrect_range'\n        # attribute set to True, then it's not considered focusable.\n        # This attribute is typically added by tools like asttokens or Thonny's\n        # own parsing process (e.g., via mark_text_ranges called by parse_source).\n        if skip_incorrect_check and getattr(child_node, \"incorrect_range\", False):\n            return False\n\n        return True\n\n    # ast.iter_child_nodes yields all direct children of the node that are themselves\n    # AST nodes. This is the most robust way to get all immediate sub-nodes.\n    # Convert to a list to allow reverse iteration by index.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate through the children in reverse order to find the last focusable one.\n    # This aligns with the \"last child\" requirement.\n    for i in range(len(children) - 1, -1, -1):\n        child = children[i]\n        # Check if the current child node is focusable using our helper.\n        if _is_focusable(child, skip_incorrect):\n            return child\n\n    # If no focusable child is found after checking all direct children, return None.\n    return None", "import ast\nfrom typing import Union\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Helper function to determine if a node is \"ok\" based on the criteria\n    # for being a focusable child. This logic is derived from the `ok_node`\n    # context function, adapted to accept the `skip_incorrect` parameter.\n    def _is_node_ok(target_node: ast.AST, current_skip_incorrect: bool) -> bool:\n        if target_node is None:\n            return False\n\n        # A focusable node must be an expression or a statement.\n        # This aligns with the `assert isinstance(node, (ast.expr, ast.stmt))`\n        # in the `ok_node` context function.\n        if not isinstance(target_node, (ast.expr, ast.stmt)):\n            return False\n\n        # If skipping incorrect nodes is enabled, check for the 'incorrect_range' attribute.\n        # This attribute is commonly added by AST parsing and marking libraries like asttokens,\n        # indicating parts of the code that couldn't be correctly parsed or have issues.\n        if current_skip_incorrect and getattr(target_node, \"incorrect_range\", False):\n            return False\n\n        return True\n\n    # Get all direct children of the given node.\n    # ast.iter_child_nodes yields nodes in their order of appearance in the source code.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate through the children in reverse order to find the *last* one that is focusable.\n    for child in reversed(children):\n        # Check if the current child node meets the general \"ok\" criteria.\n        if _is_node_ok(child, skip_incorrect):\n            # Special handling for `ast.Starred` nodes, as observed in the `last_ok`\n            # context function. For `Starred` nodes, the \"focusable\" part is typically\n            # considered to be its inner value.\n            if isinstance(child, ast.Starred):\n                # If the value inside the `Starred` node is also \"ok\", then return that value.\n                if _is_node_ok(child.value, skip_incorrect):\n                    return child.value\n                else:\n                    # If the value is not \"ok\", this specific `Starred` node (and its value)\n                    # is not considered the \"last focusable\" in its current form.\n                    # We continue the search to the previous child to find another candidate.\n                    # This differs from the `last_ok` context function which would return\n                    # None immediately in this case, but is more consistent with finding\n                    # the \"last\" valid child if others exist earlier.\n                    continue\n            else:\n                # If the child is not a `Starred` node and it is \"ok\", it's the last focusable child.\n                return child\n\n    # If no focusable child is found after checking all children, return None.\n    return None", "import ast\nfrom typing import Union\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Ensure the input node is an AST node.\n    if not isinstance(node, ast.AST):\n        return None\n\n    # Get all direct children nodes of the given node.\n    # Convert the iterator to a list so we can iterate in reverse efficiently.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate from the last child backwards to find the last focusable one.\n    for i in range(len(children) - 1, -1, -1):\n        child = children[i]\n\n        # Apply validity checks, similar to what a generalized 'ok_node' would do,\n        # using the 'skip_incorrect' parameter provided to this function.\n\n        # 1. Skip if the child node itself is None (should not happen with ast.iter_child_nodes, but good for robustness).\n        if child is None:\n            continue\n\n        # 2. A focusable child must be an expression (ast.expr) or a statement (ast.stmt).\n        if not isinstance(child, (ast.expr, ast.stmt)):\n            continue\n\n        # 3. Apply 'incorrect_range' filtering if 'skip_incorrect' is True.\n        # The 'getattr' call safely checks for the 'incorrect_range' attribute,\n        # which might be added by libraries like asttokens, defaulting to False if not present.\n        if skip_incorrect and getattr(child, \"incorrect_range\", False):\n            continue\n\n        # 4. Special handling for 'ast.Starred' nodes.\n        # As observed in 'last_ok' context function, for 'ast.Starred', the focusable\n        # part is typically its 'value' attribute. We apply the same validity checks to it.\n        if isinstance(child, ast.Starred):\n            starred_value = child.value\n            \n            # Apply the same set of checks to the 'value' within the Starred node.\n            if starred_value is None:\n                continue\n            if not isinstance(starred_value, (ast.expr, ast.stmt)):\n                continue\n            if skip_incorrect and getattr(starred_value, \"incorrect_range\", False):\n                continue\n            \n            # If the value inside the Starred node is valid, return it as the last focusable child.\n            return starred_value\n        else:\n            # For all other non-Starred nodes, if it passed all the above checks,\n            # it is the last valid and focusable child we are looking for.\n            return child\n\n    # If the loop completes without finding any focusable child, return None.\n    return None", "import ast\nfrom typing import Union\n\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Define a local helper function mimicking thonny.ast_utils.ok_node\n    # to correctly handle the 'skip_incorrect' parameter from get_last_child.\n    def _ok_node(n: ast.AST, skip_incorrect_param: bool) -> Union[ast.expr, ast.stmt, None]:\n        \"\"\"\n        Local helper that determines if an AST node is valid and should be processed\n        as a focusable expression or statement.\n        \"\"\"\n        if n is None:\n            return None\n\n        # As per the query's goal \"focusable child expression or child statement\",\n        # we only consider nodes that are instances of ast.expr or ast.stmt.\n        if not isinstance(n, (ast.expr, ast.stmt)):\n            return None\n\n        # Filter out nodes marked as 'incorrect_range' if skip_incorrect_param is True.\n        if skip_incorrect_param and getattr(n, \"incorrect_range\", False):\n            return None\n\n        return n\n\n    # Define a local helper function mimicking thonny.ast_utils.last_ok\n    # to correctly handle the 'skip_incorrect' parameter.\n    def _last_ok(nodes: list[ast.AST], skip_incorrect_param: bool) -> Union[ast.expr, ast.stmt, None]:\n        \"\"\"\n        Local helper that locates the last valid/focusable node in a sequence by\n        iterating backward. Handles ast.Starred nodes by checking their inner value.\n        \"\"\"\n        # Iterate backward through the list of nodes\n        for i in range(len(nodes) - 1, -1, -1):\n            current_node = nodes[i]\n            valid_node = _ok_node(current_node, skip_incorrect_param)\n\n            if valid_node:\n                # If the valid node is an ast.Starred, check its value as per original last_ok behavior.\n                if isinstance(valid_node, ast.Starred):\n                    starred_value = _ok_node(valid_node.value, skip_incorrect_param)\n                    if starred_value:\n                        return starred_value\n                    else:\n                        # If the value of Starred node is not valid, continue searching for other valid nodes.\n                        continue\n                else:\n                    # If it's a valid non-Starred node, return it.\n                    return valid_node\n        return None\n\n    if not isinstance(node, ast.AST):\n        return None\n\n    all_children_in_order = []\n    # ast.iter_fields iterates through all direct child nodes defined in the\n    # node's _fields attribute. This typically provides them in a left-to-right\n    # or top-to-bottom order as they appear in the source code.\n    for field_name, field_value in ast.iter_fields(node):\n        if isinstance(field_value, ast.AST):\n            # If the field value is a single AST node, add it to the list.\n            all_children_in_order.append(field_value)\n        elif isinstance(field_value, list):\n            # If the field value is a list (e.g., 'body', 'args', 'elts'),\n            # iterate through it and add any AST nodes found within.\n            for item in field_value:\n                if isinstance(item, ast.AST):\n                    all_children_in_order.append(item)\n\n    # Pass the collected children to _last_ok. Since _last_ok iterates backward,\n    # and all_children_in_order is structured from earliest to latest appearance,\n    # _last_ok will correctly identify the \"last\" focusable child.\n    return _last_ok(all_children_in_order, skip_incorrect)"], "test": ["\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\nimport ast\nfrom typing import Union\n\n# --- Context Function Implementations (with assumed correct signatures) ---\n# We provide fallback local implementations for ok_node and last_ok in case\n# thonny.ast_utils is not installed or if their signatures truly do not\n# match the assumed ones (which would make the skip_incorrect parameter\n# of get_last_child non-functional via imports).\n\ntry:\n    # Attempt to import the functions from Thonny's ast_utils.\n    # This assumes they are available and correctly handle the 'skip_incorrect' parameter.\n    from thonny.ast_utils import ok_node, last_ok\nexcept ImportError:\n    # Fallback implementations if thonny.ast_utils is not available or\n    # if there's a mismatch in the expected function signatures (e.g., for skip_incorrect).\n    # These local versions mirror the description and ensure 'skip_incorrect' is functional.\n\n    # Context Function 4: ok_node (modified to explicitly accept skip_incorrect)\n    def ok_node(node, skip_incorrect=True):\n        if node is None:\n            return None\n\n        # The context implied this assert for type checking.\n        assert isinstance(node, (ast.expr, ast.stmt)), f\"Expected AST expression or statement, got {type(node)}\"\n\n        if skip_incorrect and getattr(node, \"incorrect_range\", False):\n            return None\n\n        return node\n\n    # Context Function 2: last_ok (modified to explicitly accept skip_incorrect)\n    def last_ok(nodes, skip_incorrect=True):\n        for i in range(len(nodes) - 1, -1, -1):\n            # Pass skip_incorrect to ok_node\n            if ok_node(nodes[i], skip_incorrect=skip_incorrect):\n                node = nodes[i]\n                if isinstance(node, ast.Starred):\n                    # For ast.Starred, check its value, also passing skip_incorrect\n                    if ok_node(node.value, skip_incorrect=skip_incorrect):\n                        return node.value\n                    else:\n                        return None\n                else:\n                    return nodes[i]\n\n        return None\n\n# --- Query Function Implementation ---\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    candidate_children = []\n    # Iterate through all direct child nodes of the given AST node.\n    # ast.iter_child_nodes is the standard way to get direct children.\n    for child in ast.iter_child_nodes(node):\n        # A \"focusable\" child in this context typically refers to an\n        # expression (ast.expr) or a statement (ast.stmt).\n        if isinstance(child, (ast.expr, ast.stmt)):\n            candidate_children.append(child)\n\n    # Use the 'last_ok' helper function to find the last valid/focusable\n    # child among the collected candidates.\n    # We pass the 'skip_incorrect' parameter, which 'last_ok' (and internally 'ok_node')\n    # will use to filter out nodes marked with 'incorrect_range'.\n    return last_ok(candidate_children, skip_incorrect=skip_incorrect)\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\nimport ast\nfrom typing import Union\n\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    def _is_focusable(child_node, skip_incorrect_check):\n        \"\"\"\n        Helper function to determine if a given AST node is \"focusable\".\n        A node is considered focusable if it is an AST expression or statement,\n        and not marked as \"incorrect_range\" if `skip_incorrect_check` is True.\n        This internal helper is based on the logic seen in `ok_node` from context.\n        \"\"\"\n        if child_node is None:\n            return False\n\n        # Only expressions (ast.expr) and statements (ast.stmt) are considered focusable.\n        # ast.expr is a base class for all expression nodes.\n        # ast.stmt is a base class for all statement nodes.\n        if not isinstance(child_node, (ast.expr, ast.stmt)):\n            return False\n\n        # If skip_incorrect_check is True, and the node has an 'incorrect_range'\n        # attribute set to True, then it's not considered focusable.\n        # This attribute is typically added by tools like asttokens or Thonny's\n        # own parsing process (e.g., via mark_text_ranges called by parse_source).\n        if skip_incorrect_check and getattr(child_node, \"incorrect_range\", False):\n            return False\n\n        return True\n\n    # ast.iter_child_nodes yields all direct children of the node that are themselves\n    # AST nodes. This is the most robust way to get all immediate sub-nodes.\n    # Convert to a list to allow reverse iteration by index.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate through the children in reverse order to find the last focusable one.\n    # This aligns with the \"last child\" requirement.\n    for i in range(len(children) - 1, -1, -1):\n        child = children[i]\n        # Check if the current child node is focusable using our helper.\n        if _is_focusable(child, skip_incorrect):\n            return child\n\n    # If no focusable child is found after checking all direct children, return None.\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\nimport ast\nfrom typing import Union\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Helper function to determine if a node is \"ok\" based on the criteria\n    # for being a focusable child. This logic is derived from the `ok_node`\n    # context function, adapted to accept the `skip_incorrect` parameter.\n    def _is_node_ok(target_node: ast.AST, current_skip_incorrect: bool) -> bool:\n        if target_node is None:\n            return False\n\n        # A focusable node must be an expression or a statement.\n        # This aligns with the `assert isinstance(node, (ast.expr, ast.stmt))`\n        # in the `ok_node` context function.\n        if not isinstance(target_node, (ast.expr, ast.stmt)):\n            return False\n\n        # If skipping incorrect nodes is enabled, check for the 'incorrect_range' attribute.\n        # This attribute is commonly added by AST parsing and marking libraries like asttokens,\n        # indicating parts of the code that couldn't be correctly parsed or have issues.\n        if current_skip_incorrect and getattr(target_node, \"incorrect_range\", False):\n            return False\n\n        return True\n\n    # Get all direct children of the given node.\n    # ast.iter_child_nodes yields nodes in their order of appearance in the source code.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate through the children in reverse order to find the *last* one that is focusable.\n    for child in reversed(children):\n        # Check if the current child node meets the general \"ok\" criteria.\n        if _is_node_ok(child, skip_incorrect):\n            # Special handling for `ast.Starred` nodes, as observed in the `last_ok`\n            # context function. For `Starred` nodes, the \"focusable\" part is typically\n            # considered to be its inner value.\n            if isinstance(child, ast.Starred):\n                # If the value inside the `Starred` node is also \"ok\", then return that value.\n                if _is_node_ok(child.value, skip_incorrect):\n                    return child.value\n                else:\n                    # If the value is not \"ok\", this specific `Starred` node (and its value)\n                    # is not considered the \"last focusable\" in its current form.\n                    # We continue the search to the previous child to find another candidate.\n                    # This differs from the `last_ok` context function which would return\n                    # None immediately in this case, but is more consistent with finding\n                    # the \"last\" valid child if others exist earlier.\n                    continue\n            else:\n                # If the child is not a `Starred` node and it is \"ok\", it's the last focusable child.\n                return child\n\n    # If no focusable child is found after checking all children, return None.\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\nimport ast\nfrom typing import Union\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Ensure the input node is an AST node.\n    if not isinstance(node, ast.AST):\n        return None\n\n    # Get all direct children nodes of the given node.\n    # Convert the iterator to a list so we can iterate in reverse efficiently.\n    children = list(ast.iter_child_nodes(node))\n\n    # Iterate from the last child backwards to find the last focusable one.\n    for i in range(len(children) - 1, -1, -1):\n        child = children[i]\n\n        # Apply validity checks, similar to what a generalized 'ok_node' would do,\n        # using the 'skip_incorrect' parameter provided to this function.\n\n        # 1. Skip if the child node itself is None (should not happen with ast.iter_child_nodes, but good for robustness).\n        if child is None:\n            continue\n\n        # 2. A focusable child must be an expression (ast.expr) or a statement (ast.stmt).\n        if not isinstance(child, (ast.expr, ast.stmt)):\n            continue\n\n        # 3. Apply 'incorrect_range' filtering if 'skip_incorrect' is True.\n        # The 'getattr' call safely checks for the 'incorrect_range' attribute,\n        # which might be added by libraries like asttokens, defaulting to False if not present.\n        if skip_incorrect and getattr(child, \"incorrect_range\", False):\n            continue\n\n        # 4. Special handling for 'ast.Starred' nodes.\n        # As observed in 'last_ok' context function, for 'ast.Starred', the focusable\n        # part is typically its 'value' attribute. We apply the same validity checks to it.\n        if isinstance(child, ast.Starred):\n            starred_value = child.value\n            \n            # Apply the same set of checks to the 'value' within the Starred node.\n            if starred_value is None:\n                continue\n            if not isinstance(starred_value, (ast.expr, ast.stmt)):\n                continue\n            if skip_incorrect and getattr(starred_value, \"incorrect_range\", False):\n                continue\n            \n            # If the value inside the Starred node is valid, return it as the last focusable child.\n            return starred_value\n        else:\n            # For all other non-Starred nodes, if it passed all the above checks,\n            # it is the last valid and focusable child we are looking for.\n            return child\n\n    # If the loop completes without finding any focusable child, return None.\n    return None\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\nimport ast\nfrom typing import Union\n\n\ndef extract_text_range(source, text_range):\n    if isinstance(source, bytes):\n        # TODO: may be wrong encoding\n        source = source.decode(\"utf-8\")\n\n    lines = source.splitlines(True)\n    # get relevant lines\n    lines = lines[text_range.lineno - 1 : text_range.end_lineno]\n\n    # trim last and first lines\n    lines[-1] = lines[-1][: text_range.end_col_offset]\n    lines[0] = lines[0][text_range.col_offset :]\n    return \"\".join(lines)\n\n\ndef find_expression(start_node, text_range):\n    for node in ast.walk(start_node):\n        if (\n            isinstance(node, ast.expr)\n            and node.lineno == text_range.lineno\n            and node.col_offset == text_range.col_offset\n            and node.end_lineno == text_range.end_lineno\n            and node.end_col_offset == text_range.end_col_offset\n        ):\n            return node\n\n    return None\n\n\ndef parse_source(source: bytes, filename=\"<unknown>\", mode=\"exec\", fallback_to_one_char=False):\n    root = ast.parse(source, filename, mode)\n    mark_text_ranges(root, source, fallback_to_one_char)\n    return root\n\n\nimport ast\nfrom typing import Union\n\n\ndef get_last_child(node: ast.AST, skip_incorrect: bool = True) -> Union[ast.expr, ast.stmt, None]:\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    # Define a local helper function mimicking thonny.ast_utils.ok_node\n    # to correctly handle the 'skip_incorrect' parameter from get_last_child.\n    def _ok_node(n: ast.AST, skip_incorrect_param: bool) -> Union[ast.expr, ast.stmt, None]:\n        \"\"\"\n        Local helper that determines if an AST node is valid and should be processed\n        as a focusable expression or statement.\n        \"\"\"\n        if n is None:\n            return None\n\n        # As per the query's goal \"focusable child expression or child statement\",\n        # we only consider nodes that are instances of ast.expr or ast.stmt.\n        if not isinstance(n, (ast.expr, ast.stmt)):\n            return None\n\n        # Filter out nodes marked as 'incorrect_range' if skip_incorrect_param is True.\n        if skip_incorrect_param and getattr(n, \"incorrect_range\", False):\n            return None\n\n        return n\n\n    # Define a local helper function mimicking thonny.ast_utils.last_ok\n    # to correctly handle the 'skip_incorrect' parameter.\n    def _last_ok(nodes: list[ast.AST], skip_incorrect_param: bool) -> Union[ast.expr, ast.stmt, None]:\n        \"\"\"\n        Local helper that locates the last valid/focusable node in a sequence by\n        iterating backward. Handles ast.Starred nodes by checking their inner value.\n        \"\"\"\n        # Iterate backward through the list of nodes\n        for i in range(len(nodes) - 1, -1, -1):\n            current_node = nodes[i]\n            valid_node = _ok_node(current_node, skip_incorrect_param)\n\n            if valid_node:\n                # If the valid node is an ast.Starred, check its value as per original last_ok behavior.\n                if isinstance(valid_node, ast.Starred):\n                    starred_value = _ok_node(valid_node.value, skip_incorrect_param)\n                    if starred_value:\n                        return starred_value\n                    else:\n                        # If the value of Starred node is not valid, continue searching for other valid nodes.\n                        continue\n                else:\n                    # If it's a valid non-Starred node, return it.\n                    return valid_node\n        return None\n\n    if not isinstance(node, ast.AST):\n        return None\n\n    all_children_in_order = []\n    # ast.iter_fields iterates through all direct child nodes defined in the\n    # node's _fields attribute. This typically provides them in a left-to-right\n    # or top-to-bottom order as they appear in the source code.\n    for field_name, field_value in ast.iter_fields(node):\n        if isinstance(field_value, ast.AST):\n            # If the field value is a single AST node, add it to the list.\n            all_children_in_order.append(field_value)\n        elif isinstance(field_value, list):\n            # If the field value is a list (e.g., 'body', 'args', 'elts'),\n            # iterate through it and add any AST nodes found within.\n            for item in field_value:\n                if isinstance(item, ast.AST):\n                    all_children_in_order.append(item)\n\n    # Pass the collected children to _last_ok. Since _last_ok iterates backward,\n    # and all_children_in_order is structured from earliest to latest appearance,\n    # _last_ok will correctly identify the \"last\" focusable child.\n    return _last_ok(all_children_in_order, skip_incorrect)\n\n\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\n\n\nimport pickle\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\ntest_0()\n\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\ntest_2()\n\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\ntest_7()\n\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\ntest_25()\n\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\ntest_68()\n\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\ntest_76()\n\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\ntest_78()\n\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\ntest_93()\n\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\ntest_95()\n\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\ntest_108()\n\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\ntest_141()\n\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\ntest_142()\n\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\ntest_148()\n\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\ntest_168()\n\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\ntest_172()\n\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\ntest_174()\n\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\ntest_180()\n\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\ntest_181()\n\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\ntest_182()\n\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\ntest_198()\n\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\ntest_200()\n\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\ntest_205()\n\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\ntest_210()\n\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\ntest_218()\n\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\ntest_241()\n\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\ntest_250()\n\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\ntest_255()\n\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\ntest_260()\n\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\ntest_261()\n\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\ntest_268()\n\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\ntest_287()\n\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\ntest_299()\n\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\ntest_300()\n\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\ntest_304()\n\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\ntest_305()\n\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\ntest_314()\n\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\ntest_320()\n\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\ntest_326()\n\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\ntest_327()\n\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\ntest_333()\n\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\ntest_342()\n\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\ntest_349()\n\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\ntest_362()\n\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\ntest_376()\n\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\ntest_379()\n\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\ntest_4()\n\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\ntest_8()\n\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\ntest_12()\n\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_16()\n\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\ntest_21()\n\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\ntest_27()\n\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_34()\n\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\ntest_39()\n\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\ntest_47()\n\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\ntest_53()\n\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\ntest_70()\n\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\ntest_74()\n\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\ntest_81()\n\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\ntest_90()\n\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_97()\n\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\ntest_98()\n\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_99()\n\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\ntest_103()\n\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\ntest_110()\n\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\ntest_114()\n\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\ntest_115()\n\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\ntest_116()\n\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\ntest_123()\n\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\ntest_127()\n\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\ntest_128()\n\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\ntest_129()\n\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\ntest_130()\n\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\ntest_133()\n\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\ntest_138()\n\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\ntest_149()\n\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\ntest_155()\n\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\ntest_162()\n\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\ntest_163()\n\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\ntest_164()\n\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\ntest_165()\n\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\ntest_166()\n\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\ntest_173()\n\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\ntest_175()\n\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_177()\n\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\ntest_179()\n\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\ntest_183()\n\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\ntest_186()\n\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\ntest_196()\n\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\ntest_199()\n\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\ntest_208()\n\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_219()\n\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\ntest_222()\n\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\ntest_223()\n\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\ntest_224()\n\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\ntest_225()\n\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\ntest_226()\n\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\ntest_229()\n\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\ntest_234()\n\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\ntest_243()\n\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\ntest_247()\n\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\ntest_249()\n\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\ntest_252()\n\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\ntest_253()\n\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\ntest_263()\n\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\ntest_267()\n\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_274()\n\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\ntest_275()\n\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\ntest_276()\n\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\ntest_277()\n\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\ntest_280()\n\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\ntest_281()\n\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\ntest_284()\n\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\ntest_290()\n\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\ntest_291()\n\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\ntest_293()\n\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\ntest_295()\n\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_298()\n\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\ntest_301()\n\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\ntest_348()\n\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\ntest_352()\n\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\ntest_356()\n\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\ntest_371()\n\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\ntest_377()\n\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\ntest_378()\n\n\ndef test_extra_4():\n    assert get_last_child(ast.parse(\"()\").body[0].value) is None\ntest_extra_4()\n\ndef test_extra_5():\n    assert get_last_child(ast.parse(\"[]\").body[0].value) is None\ntest_extra_5()\n\ndef test_extra_6():\n    assert get_last_child(ast.parse(\"{ }\").body[0].value) is None\ntest_extra_6()\n\ndef test_extra_7():\n    assert get_last_child(ast.parse(\"x[:]\").body[0].value.slice) is None\ntest_extra_7()\n\ndef test_extra_8():\n    node = ast.parse(\"x[::]\").body[0].value.slice\n    node.dims = []\n    assert get_last_child(node) is None\ntest_extra_8()\n\ndef test_extra_10():\n    assert isinstance(get_last_child(ast.parse(\"(1, 2, 3)\").body[0].value, skip_incorrect = False), ast.Num)\ntest_extra_10()"]}
