{"task_id": 354, "project": "test-apps/PySnooper", "module": "pysnooper.utils", "predictions": ["import re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # Pattern that matches \" at 0x...\" memory address parts in repr strings\n    # Example: <SomeClass at 0x10f6b41f0> -> <SomeClass>\n    return re.sub(r' at 0x[a-f0-9A-F]+', '', item_repr)", "import re\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    return DEFAULT_REPR_RE.sub('', item_repr)", "import re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # The pattern matches ' at 0x...' where ... is hex digits of length at least 4\n    # This is typically the memory address part in default reprs\n    return re.sub(r' at 0x[a-f0-9A-F]{4,}', '', item_repr)", "import re\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    return DEFAULT_REPR_RE.sub('', item_repr)", "import re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # The default Python repr for objects often includes the memory address in the form 'at 0x...'.\n    # We use the given DEFAULT_REPR_RE pattern (from file content) to remove that part.\n    # The pattern is: r' at 0x[a-f0-9A-F]{4,}'\n    # Replace it with an empty string.\n    return re.sub(r' at 0x[a-f0-9A-F]{4,}', '', item_repr)"], "test": ["\nimport sys\nsys.path.insert(1, \"/input/test-apps/PySnooper\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\n\nimport abc\nimport re\n\nimport sys\nfrom pysnooper.pycompat import ABC, string_types, collections_abc\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\n\nclass WritableStream(ABC):\n    @abc.abstractmethod\n    def write(self, s):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented\n\n\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError # IronPython weirdness.\n)\n\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef get_repr_function(item, custom_repr):\n    for condition, action in custom_repr:\n        if isinstance(condition, type):\n            condition = lambda x, y=condition: isinstance(x, y)\n        if condition(item):\n            return action\n    return repr\n\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\n\nimport re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # Pattern that matches \" at 0x...\" memory address parts in repr strings\n    # Example: <SomeClass at 0x10f6b41f0> -> <SomeClass>\n    return re.sub(r' at 0x[a-f0-9A-F]+', '', item_repr)\n\n\ndef get_shortish_repr(item, custom_repr=(), max_length=None, normalize=False):\n    repr_function = get_repr_function(item, custom_repr)\n    try:\n        r = repr_function(item)\n    except Exception:\n        r = 'REPR FAILED'\n    r = r.replace('\\r', '').replace('\\n', '')\n    if normalize:\n        r = normalize_repr(r)\n    if max_length:\n        r = truncate(r, max_length)\n    return r\n\n\ndef truncate(string, max_length):\n    if (max_length is None) or (len(string) <= max_length):\n        return string\n    else:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        return u'{}...{}'.format(string[:left], string[-right:])\n\n\ndef ensure_tuple(x):\n    if isinstance(x, collections_abc.Iterable) and \\\n                                               not isinstance(x, string_types):\n        return tuple(x)\n    else:\n        return (x,)\n\n\n\n\n\nimport pickle\ndef test_0():\n    assert normalize_repr(repr(set())) == \"set()\"\ntest_0()\n\ndef test_1():\n    assert normalize_repr(repr(re.compile('Hello'))) == repr(re.compile('Hello'))\ntest_1()\n\ndef test_3():\n    assert normalize_repr(repr([1,2])) == repr([1,2])\ntest_3()\n\ndef test_4():\n    assert \"a=2\" == normalize_repr(\"a=2\")\ntest_4()\n\ndef test_5():\n    assert normalize_repr(repr(None))==\"None\"\ntest_5()\n\ndef test_6():\n    assert normalize_repr('<pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<pytest.config.Config>'\ntest_6()\n\ndef test_7():\n    assert normalize_repr(\"object\") == \"object\"\ntest_7()\n\ndef test_8():\n    assert normalize_repr(repr(123))=='123'\ntest_8()\n\ndef test_9():\n    assert normalize_repr(repr({1,2,3}))  == repr({1,2,3})\ntest_9()\n\ndef test_11():\n    assert normalize_repr(repr('1234')) == repr('1234')\ntest_11()\n\ndef test_12():\n    assert \"a=2\" == normalize_repr(\"a=2 at 0x0354345\")\ntest_12()\n\ndef test_13():\n    assert normalize_repr(repr(bytearray(b'Hello'))) == repr(bytearray(b'Hello'))\ntest_13()\n\ndef test_14():\n    assert normalize_repr(\"[NoneType at 0x7f23b4004060]\") == \"[NoneType]\"\ntest_14()\n\ndef test_15():\n    assert normalize_repr(repr(dict(a=1,b=2))) == \"{'a': 1, 'b': 2}\"\ntest_15()\n\ndef test_17():\n    assert normalize_repr(repr(1 + 2j)) == repr(1 + 2j)\ntest_17()\n\ndef test_19():\n    assert normalize_repr(repr({1,2,3})) == \"{1, 2, 3}\"\ntest_19()\n\ndef test_20():\n    assert normalize_repr(repr({'Hello', 'World'})) == repr({'Hello', 'World'})\ntest_20()\n\ndef test_22():\n    assert normalize_repr(repr({1: 2, 3: 4}.items()))=='dict_items([(1, 2), (3, 4)])'\ntest_22()\n\ndef test_23():\n    assert normalize_repr(repr(u'Hello'))  == repr(u'Hello')\ntest_23()\n\ndef test_24():\n    assert normalize_repr(repr('foo')) == repr(str('foo'))\ntest_24()\n\ndef test_25():\n    assert normalize_repr(repr(frozenset(['Hello', 'World']))) == repr(frozenset(['Hello', 'World']))\ntest_25()\n\ndef test_26():\n    assert normalize_repr(repr([1,2,3])) == '[1, 2, 3]'\ntest_26()\n\ndef test_27():\n    assert normalize_repr(repr(list(range(1)))) == \"[0]\"\ntest_27()\n\ndef test_28():\n    assert normalize_repr(repr({'foo':'bar'})) == \"{'foo': 'bar'}\"\ntest_28()\n\ndef test_29():\n    assert normalize_repr(repr(frozenset()))=='frozenset()'\ntest_29()\n\ndef test_30():\n    assert normalize_repr(repr({'Hello': 'World'})) == repr({'Hello': 'World'})\ntest_30()\n\ndef test_31():\n    assert normalize_repr(repr({1:2})) == \"{1: 2}\"\ntest_31()\n\ndef test_32():\n    assert normalize_repr(repr('foo')) == \"'foo'\"\ntest_32()\n\ndef test_33():\n    assert normalize_repr(\"'foo' at 0x017EEACD2B57D0\") == \"'foo'\"\ntest_33()\n\ndef test_34():\n    assert normalize_repr(repr(set([3,2,1]))) == \\\n            \"{1, 2, 3}\"\ntest_34()\n\ndef test_35():\n    assert normalize_repr('<_pytest.runner.CallInfo object at 0x106587788>') \\\n            == '<_pytest.runner.CallInfo object>'\ntest_35()\n\ndef test_36():\n    assert normalize_repr(\"a.b.c\") == \"a.b.c\"\ntest_36()\n\ndef test_37():\n    assert normalize_repr(repr(b'Hello')) == repr(b'Hello')\ntest_37()\n\ndef test_39():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == \"<module_name.MyObj object>\"\ntest_39()\n\ndef test_40():\n    assert normalize_repr(repr({1, 2, 3})) == repr(set([1, 2, 3]))\ntest_40()\n\ndef test_41():\n    assert normalize_repr(repr(123))      == repr(123)\ntest_41()\n\ndef test_42():\n    assert normalize_repr(repr(list(range(3)))) == \"[0, 1, 2]\"\ntest_42()\n\ndef test_43():\n    assert normalize_repr('<_pytest.config.Config object at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config object>'\ntest_43()\n\ndef test_44():\n    assert normalize_repr(repr({1: 1, 2: 2})) == repr({1: 1, 2: 2})\ntest_44()\n\ndef test_45():\n    assert normalize_repr(\"object at 0x1313131\") == \"object\"\ntest_45()\n\ndef test_46():\n    assert normalize_repr(repr(range(1000)))==\"range(0, 1000)\"\ntest_46()\n\ndef test_47():\n    assert normalize_repr(repr('foo')) == repr('foo')\ntest_47()\n\ndef test_48():\n    assert normalize_repr(repr(set([1,2,3])))=='{1, 2, 3}'\ntest_48()\n\ndef test_49():\n    assert normalize_repr(\n            '[<nose.case.Test object at 0x103a2a290>, <nose.case.Test object at 0x103a2a2d0>]') == '[<nose.case.Test object>, <nose.case.Test object>]'\ntest_49()\n\ndef test_50():\n    assert normalize_repr(repr(frozenset([1,2,3])))=='frozenset({1, 2, 3})'\ntest_50()\n\ndef test_51():\n    assert normalize_repr(repr(u'úniço∂e'))  == repr(u'úniço∂e')\ntest_51()\n\ndef test_53():\n    assert normalize_repr(repr(frozenset([1, 2, 3]))) == \"frozenset({1, 2, 3})\"\ntest_53()\n\ndef test_54():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  != normalize_repr(\"u'sdfgh' at 0x1234\")\ntest_54()\n\ndef test_55():\n    assert normalize_repr('''<__main__.A object at 0x7f681d36bd98>''') \\\n        == '''<__main__.A object>'''\ntest_55()\n\ndef test_56():\n    assert normalize_repr(repr((1, 2, 3))) == normalize_repr(repr((1, 2, 3)))\ntest_56()\n\ndef test_57():\n    assert normalize_repr(\"(NoneType at 0x7f23b4004060)\") == \"(NoneType)\"\ntest_57()\n\ndef test_58():\n    assert normalize_repr(repr(list(range(5)))) == '[0, 1, 2, 3, 4]'\ntest_58()\n\ndef test_59():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}') == '<__main__.A object>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}'\ntest_59()\n\ndef test_60():\n    assert normalize_repr(repr(frozenset(['Hello']))) == repr(frozenset(['Hello']))\ntest_60()\n\ndef test_63():\n    assert normalize_repr(repr(None)) == repr(None)\ntest_63()\n\ndef test_64():\n    assert normalize_repr(repr({'a': 1, 'b': 2})) == \"{'a': 1, 'b': 2}\"\ntest_64()\n\ndef test_65():\n    assert normalize_repr(repr(None))=='None'\ntest_65()\n\ndef test_66():\n    assert normalize_repr(repr(dict(a=1, b=2))) == \"{'a': 1, 'b': 2}\"\ntest_66()\n\ndef test_67():\n    assert normalize_repr(repr(\"abc\")) == repr(\"abc\")\ntest_67()\n\ndef test_68():\n    assert normalize_repr(\" 123\") == \" 123\"\ntest_68()\n\ndef test_69():\n    assert normalize_repr(repr({})) == '{}'\ntest_69()\n\ndef test_71():\n    assert normalize_repr(repr({1,2,3})) == '{1, 2, 3}'\ntest_71()\n\ndef test_72():\n    assert normalize_repr(repr(u'a')) == repr(u'a')\ntest_72()\n\ndef test_74():\n    assert normalize_repr(repr({}))=='{}'\ntest_74()\n\ndef test_75():\n    assert normalize_repr(repr(set())) == repr(set())\ntest_75()\n\ndef test_76():\n    assert normalize_repr(repr([1,2,3,4,5])     ) == repr([1,2,3,4,5])\ntest_76()\n\ndef test_78():\n    assert normalize_repr(repr(u'Hello World!')  ) == repr(u'Hello World!')\ntest_78()\n\ndef test_79():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo at 0x1293939\")\ntest_79()\n\ndef test_80():\n    assert normalize_repr(repr({1: 2}))   == repr({1: 2})\ntest_80()\n\ndef test_81():\n    assert normalize_repr(repr(u'Hello \\U0001f47e')) == repr(u'Hello \\U0001f47e')\ntest_81()\n\ndef test_83():\n    assert normalize_repr(repr('unicode'))   == repr('unicode')\ntest_83()\n\ndef test_84():\n    assert normalize_repr(\"123\") == \"123\"\ntest_84()\n\ndef test_86():\n    assert normalize_repr('<function f1 at 0x10245a670>') == normalize_repr('<function f1 at 0x20245a670>')\ntest_86()\n\ndef test_87():\n    assert normalize_repr('0x12345678') == '0x12345678'\ntest_87()\n\ndef test_88():\n    assert normalize_repr(repr(slice(1,2,3))) == 'slice(1, 2, 3)'\ntest_88()\n\ndef test_89():\n    assert normalize_repr('abcd at 0x12345678') == 'abcd'\ntest_89()\n\ndef test_90():\n    assert normalize_repr(repr({1:2})) == '{1: 2}'\ntest_90()\n\ndef test_92():\n    assert normalize_repr(repr([\"Hello\", \"World\"]) ) == repr([\"Hello\", \"World\"])\ntest_92()\n\ndef test_93():\n    assert normalize_repr(repr(list(range(2)))) == \"[0, 1]\"\ntest_93()\n\ndef test_94():\n    assert normalize_repr(repr('test')) == \"'test'\"\ntest_94()\n\ndef test_95():\n    assert normalize_repr(repr(dict(a=1,b=2,c=3))) == \\\n            \"{'a': 1, 'b': 2, 'c': 3}\"\ntest_95()\n\ndef test_96():\n    assert normalize_repr(repr(1)) == repr(1)\ntest_96()\n\ndef test_98():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == normalize_repr(\n        \"<module_name.MyObj object at 0x107f9a6d0>\"\n    )\ntest_98()\n\ndef test_99():\n    assert normalize_repr(repr(42))      == repr(42)\ntest_99()\n\ndef test_100():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo\")\ntest_100()\n\ndef test_101():\n    assert normalize_repr(repr(()))=='()'\ntest_101()\n\ndef test_103():\n    assert normalize_repr('<_pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config>'\ntest_103()\n\ndef test_105():\n    assert normalize_repr(repr([]))       == repr([])\ntest_105()\n\ndef test_107():\n    assert normalize_repr(repr([])) == '[]'\ntest_107()\n\ndef test_108():\n    assert normalize_repr(repr({1: 2, 3: 4}.keys()))=='dict_keys([1, 3])'\ntest_108()\n\ndef test_109():\n    assert normalize_repr(repr({1, 2}))   == repr({1, 2})\ntest_109()\n\ndef test_110():\n    assert normalize_repr(repr(u'a')) != repr(u'a'+u' ')\ntest_110()\n\ndef test_111():\n    assert normalize_repr(repr({1:2,3:4})) == repr({1:2,3:4})\ntest_111()\n\ndef test_112():\n    assert normalize_repr(\"a foo <foo.bar object at 0x7f87740f9e10>\") == \"a foo <foo.bar object>\"\ntest_112()\n\ndef test_113():\n    assert normalize_repr(repr(None)) == 'None'\ntest_113()\n\ndef test_114():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  == normalize_repr(\"u'sdf' at 0xabcd\")\ntest_114()\n\ndef test_115():\n    assert normalize_repr(repr([1, 2, 3])) == '[1, 2, 3]'\ntest_115()\n\ndef test_116():\n    assert normalize_repr(\"test() at 0x12345\") == \"test()\"\ntest_116()\n\ndef test_118():\n    assert normalize_repr(repr(frozenset())) == repr(frozenset())\ntest_118()\n\ndef test_119():\n    assert normalize_repr(repr({0, 1})) == \"{0, 1}\"\ntest_119()\n\ndef test_120():\n    assert normalize_repr(repr([0, 1, 2]))   == repr([0, 1, 2])\ntest_120()\n\ndef test_121():\n    assert normalize_repr(\n        \"<pytest.fixtures.FixtureRequest object at 0x108283448>\"\n    ) == \"<pytest.fixtures.FixtureRequest object>\"\ntest_121()\n\ndef test_122():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>') == '<__main__.A object>'\ntest_122()\n\ndef test_123():\n    assert normalize_repr(repr(1.0)) == repr(1.0)\ntest_123()\n\ndef test_124():\n    assert normalize_repr(repr(\"abc\"))==\"'abc'\"\ntest_124()\n\ndef test_125():\n    assert normalize_repr(repr(set(['Hello', 'World']))) == repr(set(['Hello', 'World']))\ntest_125()\n\ndef test_126():\n    assert normalize_repr(repr('Hello World!')  ) == repr('Hello World!')\ntest_126()\n\ndef test_127():\n    assert normalize_repr(\"NoneType at 0x7f23b4004060\") == \"NoneType\"\ntest_127()\n\ndef test_128():\n    assert normalize_repr(repr({3:2})) == \\\n            \"{3: 2}\"\ntest_128()\n\ndef test_129():\n    assert normalize_repr(\"'foo'\") == \"'foo'\"\ntest_129()\n\ndef test_130():\n    assert normalize_repr(repr(set()))=='set()'\ntest_130()\n\ndef test_131():\n    assert normalize_repr(\"a.b.c at 0x123456789\") == \"a.b.c\"\ntest_131()\n\ndef test_132():\n    assert normalize_repr(repr({1: 2, 3: 4}.values()))=='dict_values([2, 4])'\ntest_132()\n\ndef test_133():\n    assert normalize_repr('abcd') == 'abcd'\ntest_133()\n\ndef test_134():\n    assert normalize_repr('<unittest.case._SubTestCase object at 0x106597788>') \\\n            == '<unittest.case._SubTestCase object>'\ntest_134()\n\ndef test_135():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: 0x7f5dbe7bce10') == '<__main__.A object>: 0x7f5dbe7bce10'\ntest_135()\n\ndef test_136():\n    assert normalize_repr(repr('foobar')) == repr('foobar')\ntest_136()\n\ndef test_138():\n    assert normalize_repr(repr(None))     == repr(None)\ntest_138()\n\ndef test_139():\n    assert normalize_repr(repr((1,2,3)))=='(1, 2, 3)'\ntest_139()\n\ndef test_140():\n    assert normalize_repr(repr({1,2,3})) == repr({1,2,3})\ntest_140()\n\ndef test_142():\n    assert normalize_repr(repr(u'\\U0001f47e')) == repr(u'\\U0001f47e')\ntest_142()\n\ndef test_143():\n    assert normalize_repr(repr([]))=='[]'\ntest_143()\n\ndef test_144():\n    assert normalize_repr(repr(u'Hello')) == repr(u'Hello')\ntest_144()\n\ndef test_145():\n    assert normalize_repr(repr({1, 2, 3})) == \"{1, 2, 3}\"\ntest_145()\n\ndef test_146():\n    assert normalize_repr(repr((u\"hi\", 2))) == \"('hi', 2)\"\ntest_146()\n\ndef test_148():\n    assert normalize_repr(repr({1, 2, 3})) == repr({1, 2, 3})\ntest_148()\n\ndef test_149():\n    assert normalize_repr(repr({'Hello'})) == repr({'Hello'})\ntest_149()\n\ndef test_150():\n    assert normalize_repr('<function f1 at 0x10245a670>') != '<function f1 at 0x10245a670>'\ntest_150()\n\ndef test_151():\n    assert normalize_repr(\"'foo' at 0x7eeacd2b57d0\") == \"'foo'\"\ntest_151()\n\ndef test_152():\n    assert normalize_repr(repr('Hello'))  == repr('Hello')\ntest_152()\n\ndef test_153():\n    assert normalize_repr(repr(5)) == '5'\ntest_153()\n\ndef test_154():\n    assert normalize_repr(repr({'a', 'b', 'c'})) == \"{'a', 'b', 'c'}\"\ntest_154()\n\ndef test_155():\n    assert normalize_repr(repr({'foo': {'bar'}})) == \"{'foo': {'bar'}}\"\ntest_155()\n\ndef test_156():\n    assert normalize_repr(repr(range(3))) == 'range(0, 3)'\ntest_156()\n\ndef test_157():\n    assert normalize_repr('<pytest.config.Config object at 0x106587788>') \\\n            == '<pytest.config.Config object>'\ntest_157()\n\ndef test_158():\n    assert normalize_repr(repr('hello'))  == \"'hello'\"\ntest_158()\n\ndef test_159():\n    assert normalize_repr('<function f1 at 0x10245a670>') == '<function f1>'\ntest_159()\n\ndef test_160():\n    assert normalize_repr(repr([1,2,3]))=='[1, 2, 3]'\ntest_160()\n\ndef test_161():\n    assert normalize_repr(repr(7)) == '7'\ntest_161()\n\ndef test_162():\n    assert normalize_repr(repr({1, 2}))       == repr({1, 2})\ntest_162()\n\ndef test_163():\n    assert normalize_repr('abcd at 0x1234567890') == 'abcd'\ntest_163()\n\ndef test_164():\n    assert normalize_repr(repr({123: 456}))=='{123: 456}'\ntest_164()\n\ndef test_165():\n    assert normalize_repr(repr((1,2,3))) == '(1, 2, 3)'\ntest_165()\n\ndef test_2():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"u'sdf'\") == output\ntest_2()\n\ndef test_10():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 0x2222\") == output\ntest_10()\n\ndef test_16():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"'a' object at 0x122f810\") == output\ntest_16()\n\ndef test_18():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.values())) == output\ntest_18()\n\ndef test_21():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set([1,2,3]))) == output\ntest_21()\n\ndef test_38():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2, 3:4})) == output\ntest_38()\n\ndef test_52():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2})) == output\ntest_52()\n\ndef test_61():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set(['hi', 'hello', 'bye']))) == output\ntest_61()\n\ndef test_62():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=[], c=3))) == output\ntest_62()\n\ndef test_70():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.items())) == output\ntest_70()\n\ndef test_73():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"\"\"\n    <__main__.MyObj object at 0x10c707050>\"\"\" ) == output\ntest_73()\n\ndef test_77():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_77\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(frozenset([1,2,3]))) == output\ntest_77()\n\ndef test_82():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({'foo','bar'})) == output\ntest_82()\n\ndef test_85():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b={}, c=3))) == output\ntest_85()\n\ndef test_91():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.keys())) == output\ntest_91()\n\ndef test_97():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(np.array(['hi']))) == output\ntest_97()\n\ndef test_102():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(\"abc\")) == output\ntest_102()\n\ndef test_104():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\n        \"set(['i', 's', 'm', 'h', 'u', 't', 'e', 'r'])\") == output\ntest_104()\n\ndef test_106():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=2, c=3))) == output\ntest_106()\n\ndef test_137():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 \\n at 0x2222\") == output\ntest_137()\n\ndef test_141():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_141\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(object())) == output\ntest_141()\n\ndef test_147():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"[1, 2, 3, 4, 5]\") == output\ntest_147()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/PySnooper\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\n\nimport abc\nimport re\n\nimport sys\nfrom pysnooper.pycompat import ABC, string_types, collections_abc\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\n\nclass WritableStream(ABC):\n    @abc.abstractmethod\n    def write(self, s):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented\n\n\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError # IronPython weirdness.\n)\n\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef get_repr_function(item, custom_repr):\n    for condition, action in custom_repr:\n        if isinstance(condition, type):\n            condition = lambda x, y=condition: isinstance(x, y)\n        if condition(item):\n            return action\n    return repr\n\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\n\nimport re\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    return DEFAULT_REPR_RE.sub('', item_repr)\n\n\ndef get_shortish_repr(item, custom_repr=(), max_length=None, normalize=False):\n    repr_function = get_repr_function(item, custom_repr)\n    try:\n        r = repr_function(item)\n    except Exception:\n        r = 'REPR FAILED'\n    r = r.replace('\\r', '').replace('\\n', '')\n    if normalize:\n        r = normalize_repr(r)\n    if max_length:\n        r = truncate(r, max_length)\n    return r\n\n\ndef truncate(string, max_length):\n    if (max_length is None) or (len(string) <= max_length):\n        return string\n    else:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        return u'{}...{}'.format(string[:left], string[-right:])\n\n\ndef ensure_tuple(x):\n    if isinstance(x, collections_abc.Iterable) and \\\n                                               not isinstance(x, string_types):\n        return tuple(x)\n    else:\n        return (x,)\n\n\n\n\n\nimport pickle\ndef test_0():\n    assert normalize_repr(repr(set())) == \"set()\"\ntest_0()\n\ndef test_1():\n    assert normalize_repr(repr(re.compile('Hello'))) == repr(re.compile('Hello'))\ntest_1()\n\ndef test_3():\n    assert normalize_repr(repr([1,2])) == repr([1,2])\ntest_3()\n\ndef test_4():\n    assert \"a=2\" == normalize_repr(\"a=2\")\ntest_4()\n\ndef test_5():\n    assert normalize_repr(repr(None))==\"None\"\ntest_5()\n\ndef test_6():\n    assert normalize_repr('<pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<pytest.config.Config>'\ntest_6()\n\ndef test_7():\n    assert normalize_repr(\"object\") == \"object\"\ntest_7()\n\ndef test_8():\n    assert normalize_repr(repr(123))=='123'\ntest_8()\n\ndef test_9():\n    assert normalize_repr(repr({1,2,3}))  == repr({1,2,3})\ntest_9()\n\ndef test_11():\n    assert normalize_repr(repr('1234')) == repr('1234')\ntest_11()\n\ndef test_12():\n    assert \"a=2\" == normalize_repr(\"a=2 at 0x0354345\")\ntest_12()\n\ndef test_13():\n    assert normalize_repr(repr(bytearray(b'Hello'))) == repr(bytearray(b'Hello'))\ntest_13()\n\ndef test_14():\n    assert normalize_repr(\"[NoneType at 0x7f23b4004060]\") == \"[NoneType]\"\ntest_14()\n\ndef test_15():\n    assert normalize_repr(repr(dict(a=1,b=2))) == \"{'a': 1, 'b': 2}\"\ntest_15()\n\ndef test_17():\n    assert normalize_repr(repr(1 + 2j)) == repr(1 + 2j)\ntest_17()\n\ndef test_19():\n    assert normalize_repr(repr({1,2,3})) == \"{1, 2, 3}\"\ntest_19()\n\ndef test_20():\n    assert normalize_repr(repr({'Hello', 'World'})) == repr({'Hello', 'World'})\ntest_20()\n\ndef test_22():\n    assert normalize_repr(repr({1: 2, 3: 4}.items()))=='dict_items([(1, 2), (3, 4)])'\ntest_22()\n\ndef test_23():\n    assert normalize_repr(repr(u'Hello'))  == repr(u'Hello')\ntest_23()\n\ndef test_24():\n    assert normalize_repr(repr('foo')) == repr(str('foo'))\ntest_24()\n\ndef test_25():\n    assert normalize_repr(repr(frozenset(['Hello', 'World']))) == repr(frozenset(['Hello', 'World']))\ntest_25()\n\ndef test_26():\n    assert normalize_repr(repr([1,2,3])) == '[1, 2, 3]'\ntest_26()\n\ndef test_27():\n    assert normalize_repr(repr(list(range(1)))) == \"[0]\"\ntest_27()\n\ndef test_28():\n    assert normalize_repr(repr({'foo':'bar'})) == \"{'foo': 'bar'}\"\ntest_28()\n\ndef test_29():\n    assert normalize_repr(repr(frozenset()))=='frozenset()'\ntest_29()\n\ndef test_30():\n    assert normalize_repr(repr({'Hello': 'World'})) == repr({'Hello': 'World'})\ntest_30()\n\ndef test_31():\n    assert normalize_repr(repr({1:2})) == \"{1: 2}\"\ntest_31()\n\ndef test_32():\n    assert normalize_repr(repr('foo')) == \"'foo'\"\ntest_32()\n\ndef test_33():\n    assert normalize_repr(\"'foo' at 0x017EEACD2B57D0\") == \"'foo'\"\ntest_33()\n\ndef test_34():\n    assert normalize_repr(repr(set([3,2,1]))) == \\\n            \"{1, 2, 3}\"\ntest_34()\n\ndef test_35():\n    assert normalize_repr('<_pytest.runner.CallInfo object at 0x106587788>') \\\n            == '<_pytest.runner.CallInfo object>'\ntest_35()\n\ndef test_36():\n    assert normalize_repr(\"a.b.c\") == \"a.b.c\"\ntest_36()\n\ndef test_37():\n    assert normalize_repr(repr(b'Hello')) == repr(b'Hello')\ntest_37()\n\ndef test_39():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == \"<module_name.MyObj object>\"\ntest_39()\n\ndef test_40():\n    assert normalize_repr(repr({1, 2, 3})) == repr(set([1, 2, 3]))\ntest_40()\n\ndef test_41():\n    assert normalize_repr(repr(123))      == repr(123)\ntest_41()\n\ndef test_42():\n    assert normalize_repr(repr(list(range(3)))) == \"[0, 1, 2]\"\ntest_42()\n\ndef test_43():\n    assert normalize_repr('<_pytest.config.Config object at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config object>'\ntest_43()\n\ndef test_44():\n    assert normalize_repr(repr({1: 1, 2: 2})) == repr({1: 1, 2: 2})\ntest_44()\n\ndef test_45():\n    assert normalize_repr(\"object at 0x1313131\") == \"object\"\ntest_45()\n\ndef test_46():\n    assert normalize_repr(repr(range(1000)))==\"range(0, 1000)\"\ntest_46()\n\ndef test_47():\n    assert normalize_repr(repr('foo')) == repr('foo')\ntest_47()\n\ndef test_48():\n    assert normalize_repr(repr(set([1,2,3])))=='{1, 2, 3}'\ntest_48()\n\ndef test_49():\n    assert normalize_repr(\n            '[<nose.case.Test object at 0x103a2a290>, <nose.case.Test object at 0x103a2a2d0>]') == '[<nose.case.Test object>, <nose.case.Test object>]'\ntest_49()\n\ndef test_50():\n    assert normalize_repr(repr(frozenset([1,2,3])))=='frozenset({1, 2, 3})'\ntest_50()\n\ndef test_51():\n    assert normalize_repr(repr(u'úniço∂e'))  == repr(u'úniço∂e')\ntest_51()\n\ndef test_53():\n    assert normalize_repr(repr(frozenset([1, 2, 3]))) == \"frozenset({1, 2, 3})\"\ntest_53()\n\ndef test_54():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  != normalize_repr(\"u'sdfgh' at 0x1234\")\ntest_54()\n\ndef test_55():\n    assert normalize_repr('''<__main__.A object at 0x7f681d36bd98>''') \\\n        == '''<__main__.A object>'''\ntest_55()\n\ndef test_56():\n    assert normalize_repr(repr((1, 2, 3))) == normalize_repr(repr((1, 2, 3)))\ntest_56()\n\ndef test_57():\n    assert normalize_repr(\"(NoneType at 0x7f23b4004060)\") == \"(NoneType)\"\ntest_57()\n\ndef test_58():\n    assert normalize_repr(repr(list(range(5)))) == '[0, 1, 2, 3, 4]'\ntest_58()\n\ndef test_59():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}') == '<__main__.A object>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}'\ntest_59()\n\ndef test_60():\n    assert normalize_repr(repr(frozenset(['Hello']))) == repr(frozenset(['Hello']))\ntest_60()\n\ndef test_63():\n    assert normalize_repr(repr(None)) == repr(None)\ntest_63()\n\ndef test_64():\n    assert normalize_repr(repr({'a': 1, 'b': 2})) == \"{'a': 1, 'b': 2}\"\ntest_64()\n\ndef test_65():\n    assert normalize_repr(repr(None))=='None'\ntest_65()\n\ndef test_66():\n    assert normalize_repr(repr(dict(a=1, b=2))) == \"{'a': 1, 'b': 2}\"\ntest_66()\n\ndef test_67():\n    assert normalize_repr(repr(\"abc\")) == repr(\"abc\")\ntest_67()\n\ndef test_68():\n    assert normalize_repr(\" 123\") == \" 123\"\ntest_68()\n\ndef test_69():\n    assert normalize_repr(repr({})) == '{}'\ntest_69()\n\ndef test_71():\n    assert normalize_repr(repr({1,2,3})) == '{1, 2, 3}'\ntest_71()\n\ndef test_72():\n    assert normalize_repr(repr(u'a')) == repr(u'a')\ntest_72()\n\ndef test_74():\n    assert normalize_repr(repr({}))=='{}'\ntest_74()\n\ndef test_75():\n    assert normalize_repr(repr(set())) == repr(set())\ntest_75()\n\ndef test_76():\n    assert normalize_repr(repr([1,2,3,4,5])     ) == repr([1,2,3,4,5])\ntest_76()\n\ndef test_78():\n    assert normalize_repr(repr(u'Hello World!')  ) == repr(u'Hello World!')\ntest_78()\n\ndef test_79():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo at 0x1293939\")\ntest_79()\n\ndef test_80():\n    assert normalize_repr(repr({1: 2}))   == repr({1: 2})\ntest_80()\n\ndef test_81():\n    assert normalize_repr(repr(u'Hello \\U0001f47e')) == repr(u'Hello \\U0001f47e')\ntest_81()\n\ndef test_83():\n    assert normalize_repr(repr('unicode'))   == repr('unicode')\ntest_83()\n\ndef test_84():\n    assert normalize_repr(\"123\") == \"123\"\ntest_84()\n\ndef test_86():\n    assert normalize_repr('<function f1 at 0x10245a670>') == normalize_repr('<function f1 at 0x20245a670>')\ntest_86()\n\ndef test_87():\n    assert normalize_repr('0x12345678') == '0x12345678'\ntest_87()\n\ndef test_88():\n    assert normalize_repr(repr(slice(1,2,3))) == 'slice(1, 2, 3)'\ntest_88()\n\ndef test_89():\n    assert normalize_repr('abcd at 0x12345678') == 'abcd'\ntest_89()\n\ndef test_90():\n    assert normalize_repr(repr({1:2})) == '{1: 2}'\ntest_90()\n\ndef test_92():\n    assert normalize_repr(repr([\"Hello\", \"World\"]) ) == repr([\"Hello\", \"World\"])\ntest_92()\n\ndef test_93():\n    assert normalize_repr(repr(list(range(2)))) == \"[0, 1]\"\ntest_93()\n\ndef test_94():\n    assert normalize_repr(repr('test')) == \"'test'\"\ntest_94()\n\ndef test_95():\n    assert normalize_repr(repr(dict(a=1,b=2,c=3))) == \\\n            \"{'a': 1, 'b': 2, 'c': 3}\"\ntest_95()\n\ndef test_96():\n    assert normalize_repr(repr(1)) == repr(1)\ntest_96()\n\ndef test_98():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == normalize_repr(\n        \"<module_name.MyObj object at 0x107f9a6d0>\"\n    )\ntest_98()\n\ndef test_99():\n    assert normalize_repr(repr(42))      == repr(42)\ntest_99()\n\ndef test_100():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo\")\ntest_100()\n\ndef test_101():\n    assert normalize_repr(repr(()))=='()'\ntest_101()\n\ndef test_103():\n    assert normalize_repr('<_pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config>'\ntest_103()\n\ndef test_105():\n    assert normalize_repr(repr([]))       == repr([])\ntest_105()\n\ndef test_107():\n    assert normalize_repr(repr([])) == '[]'\ntest_107()\n\ndef test_108():\n    assert normalize_repr(repr({1: 2, 3: 4}.keys()))=='dict_keys([1, 3])'\ntest_108()\n\ndef test_109():\n    assert normalize_repr(repr({1, 2}))   == repr({1, 2})\ntest_109()\n\ndef test_110():\n    assert normalize_repr(repr(u'a')) != repr(u'a'+u' ')\ntest_110()\n\ndef test_111():\n    assert normalize_repr(repr({1:2,3:4})) == repr({1:2,3:4})\ntest_111()\n\ndef test_112():\n    assert normalize_repr(\"a foo <foo.bar object at 0x7f87740f9e10>\") == \"a foo <foo.bar object>\"\ntest_112()\n\ndef test_113():\n    assert normalize_repr(repr(None)) == 'None'\ntest_113()\n\ndef test_114():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  == normalize_repr(\"u'sdf' at 0xabcd\")\ntest_114()\n\ndef test_115():\n    assert normalize_repr(repr([1, 2, 3])) == '[1, 2, 3]'\ntest_115()\n\ndef test_116():\n    assert normalize_repr(\"test() at 0x12345\") == \"test()\"\ntest_116()\n\ndef test_118():\n    assert normalize_repr(repr(frozenset())) == repr(frozenset())\ntest_118()\n\ndef test_119():\n    assert normalize_repr(repr({0, 1})) == \"{0, 1}\"\ntest_119()\n\ndef test_120():\n    assert normalize_repr(repr([0, 1, 2]))   == repr([0, 1, 2])\ntest_120()\n\ndef test_121():\n    assert normalize_repr(\n        \"<pytest.fixtures.FixtureRequest object at 0x108283448>\"\n    ) == \"<pytest.fixtures.FixtureRequest object>\"\ntest_121()\n\ndef test_122():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>') == '<__main__.A object>'\ntest_122()\n\ndef test_123():\n    assert normalize_repr(repr(1.0)) == repr(1.0)\ntest_123()\n\ndef test_124():\n    assert normalize_repr(repr(\"abc\"))==\"'abc'\"\ntest_124()\n\ndef test_125():\n    assert normalize_repr(repr(set(['Hello', 'World']))) == repr(set(['Hello', 'World']))\ntest_125()\n\ndef test_126():\n    assert normalize_repr(repr('Hello World!')  ) == repr('Hello World!')\ntest_126()\n\ndef test_127():\n    assert normalize_repr(\"NoneType at 0x7f23b4004060\") == \"NoneType\"\ntest_127()\n\ndef test_128():\n    assert normalize_repr(repr({3:2})) == \\\n            \"{3: 2}\"\ntest_128()\n\ndef test_129():\n    assert normalize_repr(\"'foo'\") == \"'foo'\"\ntest_129()\n\ndef test_130():\n    assert normalize_repr(repr(set()))=='set()'\ntest_130()\n\ndef test_131():\n    assert normalize_repr(\"a.b.c at 0x123456789\") == \"a.b.c\"\ntest_131()\n\ndef test_132():\n    assert normalize_repr(repr({1: 2, 3: 4}.values()))=='dict_values([2, 4])'\ntest_132()\n\ndef test_133():\n    assert normalize_repr('abcd') == 'abcd'\ntest_133()\n\ndef test_134():\n    assert normalize_repr('<unittest.case._SubTestCase object at 0x106597788>') \\\n            == '<unittest.case._SubTestCase object>'\ntest_134()\n\ndef test_135():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: 0x7f5dbe7bce10') == '<__main__.A object>: 0x7f5dbe7bce10'\ntest_135()\n\ndef test_136():\n    assert normalize_repr(repr('foobar')) == repr('foobar')\ntest_136()\n\ndef test_138():\n    assert normalize_repr(repr(None))     == repr(None)\ntest_138()\n\ndef test_139():\n    assert normalize_repr(repr((1,2,3)))=='(1, 2, 3)'\ntest_139()\n\ndef test_140():\n    assert normalize_repr(repr({1,2,3})) == repr({1,2,3})\ntest_140()\n\ndef test_142():\n    assert normalize_repr(repr(u'\\U0001f47e')) == repr(u'\\U0001f47e')\ntest_142()\n\ndef test_143():\n    assert normalize_repr(repr([]))=='[]'\ntest_143()\n\ndef test_144():\n    assert normalize_repr(repr(u'Hello')) == repr(u'Hello')\ntest_144()\n\ndef test_145():\n    assert normalize_repr(repr({1, 2, 3})) == \"{1, 2, 3}\"\ntest_145()\n\ndef test_146():\n    assert normalize_repr(repr((u\"hi\", 2))) == \"('hi', 2)\"\ntest_146()\n\ndef test_148():\n    assert normalize_repr(repr({1, 2, 3})) == repr({1, 2, 3})\ntest_148()\n\ndef test_149():\n    assert normalize_repr(repr({'Hello'})) == repr({'Hello'})\ntest_149()\n\ndef test_150():\n    assert normalize_repr('<function f1 at 0x10245a670>') != '<function f1 at 0x10245a670>'\ntest_150()\n\ndef test_151():\n    assert normalize_repr(\"'foo' at 0x7eeacd2b57d0\") == \"'foo'\"\ntest_151()\n\ndef test_152():\n    assert normalize_repr(repr('Hello'))  == repr('Hello')\ntest_152()\n\ndef test_153():\n    assert normalize_repr(repr(5)) == '5'\ntest_153()\n\ndef test_154():\n    assert normalize_repr(repr({'a', 'b', 'c'})) == \"{'a', 'b', 'c'}\"\ntest_154()\n\ndef test_155():\n    assert normalize_repr(repr({'foo': {'bar'}})) == \"{'foo': {'bar'}}\"\ntest_155()\n\ndef test_156():\n    assert normalize_repr(repr(range(3))) == 'range(0, 3)'\ntest_156()\n\ndef test_157():\n    assert normalize_repr('<pytest.config.Config object at 0x106587788>') \\\n            == '<pytest.config.Config object>'\ntest_157()\n\ndef test_158():\n    assert normalize_repr(repr('hello'))  == \"'hello'\"\ntest_158()\n\ndef test_159():\n    assert normalize_repr('<function f1 at 0x10245a670>') == '<function f1>'\ntest_159()\n\ndef test_160():\n    assert normalize_repr(repr([1,2,3]))=='[1, 2, 3]'\ntest_160()\n\ndef test_161():\n    assert normalize_repr(repr(7)) == '7'\ntest_161()\n\ndef test_162():\n    assert normalize_repr(repr({1, 2}))       == repr({1, 2})\ntest_162()\n\ndef test_163():\n    assert normalize_repr('abcd at 0x1234567890') == 'abcd'\ntest_163()\n\ndef test_164():\n    assert normalize_repr(repr({123: 456}))=='{123: 456}'\ntest_164()\n\ndef test_165():\n    assert normalize_repr(repr((1,2,3))) == '(1, 2, 3)'\ntest_165()\n\ndef test_2():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"u'sdf'\") == output\ntest_2()\n\ndef test_10():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 0x2222\") == output\ntest_10()\n\ndef test_16():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"'a' object at 0x122f810\") == output\ntest_16()\n\ndef test_18():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.values())) == output\ntest_18()\n\ndef test_21():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set([1,2,3]))) == output\ntest_21()\n\ndef test_38():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2, 3:4})) == output\ntest_38()\n\ndef test_52():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2})) == output\ntest_52()\n\ndef test_61():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set(['hi', 'hello', 'bye']))) == output\ntest_61()\n\ndef test_62():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=[], c=3))) == output\ntest_62()\n\ndef test_70():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.items())) == output\ntest_70()\n\ndef test_73():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"\"\"\n    <__main__.MyObj object at 0x10c707050>\"\"\" ) == output\ntest_73()\n\ndef test_77():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_77\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(frozenset([1,2,3]))) == output\ntest_77()\n\ndef test_82():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({'foo','bar'})) == output\ntest_82()\n\ndef test_85():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b={}, c=3))) == output\ntest_85()\n\ndef test_91():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.keys())) == output\ntest_91()\n\ndef test_97():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(np.array(['hi']))) == output\ntest_97()\n\ndef test_102():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(\"abc\")) == output\ntest_102()\n\ndef test_104():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\n        \"set(['i', 's', 'm', 'h', 'u', 't', 'e', 'r'])\") == output\ntest_104()\n\ndef test_106():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=2, c=3))) == output\ntest_106()\n\ndef test_137():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 \\n at 0x2222\") == output\ntest_137()\n\ndef test_141():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_141\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(object())) == output\ntest_141()\n\ndef test_147():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"[1, 2, 3, 4, 5]\") == output\ntest_147()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/PySnooper\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\n\nimport abc\nimport re\n\nimport sys\nfrom pysnooper.pycompat import ABC, string_types, collections_abc\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\n\nclass WritableStream(ABC):\n    @abc.abstractmethod\n    def write(self, s):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented\n\n\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError # IronPython weirdness.\n)\n\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef get_repr_function(item, custom_repr):\n    for condition, action in custom_repr:\n        if isinstance(condition, type):\n            condition = lambda x, y=condition: isinstance(x, y)\n        if condition(item):\n            return action\n    return repr\n\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\n\nimport re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # The pattern matches ' at 0x...' where ... is hex digits of length at least 4\n    # This is typically the memory address part in default reprs\n    return re.sub(r' at 0x[a-f0-9A-F]{4,}', '', item_repr)\n\n\ndef get_shortish_repr(item, custom_repr=(), max_length=None, normalize=False):\n    repr_function = get_repr_function(item, custom_repr)\n    try:\n        r = repr_function(item)\n    except Exception:\n        r = 'REPR FAILED'\n    r = r.replace('\\r', '').replace('\\n', '')\n    if normalize:\n        r = normalize_repr(r)\n    if max_length:\n        r = truncate(r, max_length)\n    return r\n\n\ndef truncate(string, max_length):\n    if (max_length is None) or (len(string) <= max_length):\n        return string\n    else:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        return u'{}...{}'.format(string[:left], string[-right:])\n\n\ndef ensure_tuple(x):\n    if isinstance(x, collections_abc.Iterable) and \\\n                                               not isinstance(x, string_types):\n        return tuple(x)\n    else:\n        return (x,)\n\n\n\n\n\nimport pickle\ndef test_0():\n    assert normalize_repr(repr(set())) == \"set()\"\ntest_0()\n\ndef test_1():\n    assert normalize_repr(repr(re.compile('Hello'))) == repr(re.compile('Hello'))\ntest_1()\n\ndef test_3():\n    assert normalize_repr(repr([1,2])) == repr([1,2])\ntest_3()\n\ndef test_4():\n    assert \"a=2\" == normalize_repr(\"a=2\")\ntest_4()\n\ndef test_5():\n    assert normalize_repr(repr(None))==\"None\"\ntest_5()\n\ndef test_6():\n    assert normalize_repr('<pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<pytest.config.Config>'\ntest_6()\n\ndef test_7():\n    assert normalize_repr(\"object\") == \"object\"\ntest_7()\n\ndef test_8():\n    assert normalize_repr(repr(123))=='123'\ntest_8()\n\ndef test_9():\n    assert normalize_repr(repr({1,2,3}))  == repr({1,2,3})\ntest_9()\n\ndef test_11():\n    assert normalize_repr(repr('1234')) == repr('1234')\ntest_11()\n\ndef test_12():\n    assert \"a=2\" == normalize_repr(\"a=2 at 0x0354345\")\ntest_12()\n\ndef test_13():\n    assert normalize_repr(repr(bytearray(b'Hello'))) == repr(bytearray(b'Hello'))\ntest_13()\n\ndef test_14():\n    assert normalize_repr(\"[NoneType at 0x7f23b4004060]\") == \"[NoneType]\"\ntest_14()\n\ndef test_15():\n    assert normalize_repr(repr(dict(a=1,b=2))) == \"{'a': 1, 'b': 2}\"\ntest_15()\n\ndef test_17():\n    assert normalize_repr(repr(1 + 2j)) == repr(1 + 2j)\ntest_17()\n\ndef test_19():\n    assert normalize_repr(repr({1,2,3})) == \"{1, 2, 3}\"\ntest_19()\n\ndef test_20():\n    assert normalize_repr(repr({'Hello', 'World'})) == repr({'Hello', 'World'})\ntest_20()\n\ndef test_22():\n    assert normalize_repr(repr({1: 2, 3: 4}.items()))=='dict_items([(1, 2), (3, 4)])'\ntest_22()\n\ndef test_23():\n    assert normalize_repr(repr(u'Hello'))  == repr(u'Hello')\ntest_23()\n\ndef test_24():\n    assert normalize_repr(repr('foo')) == repr(str('foo'))\ntest_24()\n\ndef test_25():\n    assert normalize_repr(repr(frozenset(['Hello', 'World']))) == repr(frozenset(['Hello', 'World']))\ntest_25()\n\ndef test_26():\n    assert normalize_repr(repr([1,2,3])) == '[1, 2, 3]'\ntest_26()\n\ndef test_27():\n    assert normalize_repr(repr(list(range(1)))) == \"[0]\"\ntest_27()\n\ndef test_28():\n    assert normalize_repr(repr({'foo':'bar'})) == \"{'foo': 'bar'}\"\ntest_28()\n\ndef test_29():\n    assert normalize_repr(repr(frozenset()))=='frozenset()'\ntest_29()\n\ndef test_30():\n    assert normalize_repr(repr({'Hello': 'World'})) == repr({'Hello': 'World'})\ntest_30()\n\ndef test_31():\n    assert normalize_repr(repr({1:2})) == \"{1: 2}\"\ntest_31()\n\ndef test_32():\n    assert normalize_repr(repr('foo')) == \"'foo'\"\ntest_32()\n\ndef test_33():\n    assert normalize_repr(\"'foo' at 0x017EEACD2B57D0\") == \"'foo'\"\ntest_33()\n\ndef test_34():\n    assert normalize_repr(repr(set([3,2,1]))) == \\\n            \"{1, 2, 3}\"\ntest_34()\n\ndef test_35():\n    assert normalize_repr('<_pytest.runner.CallInfo object at 0x106587788>') \\\n            == '<_pytest.runner.CallInfo object>'\ntest_35()\n\ndef test_36():\n    assert normalize_repr(\"a.b.c\") == \"a.b.c\"\ntest_36()\n\ndef test_37():\n    assert normalize_repr(repr(b'Hello')) == repr(b'Hello')\ntest_37()\n\ndef test_39():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == \"<module_name.MyObj object>\"\ntest_39()\n\ndef test_40():\n    assert normalize_repr(repr({1, 2, 3})) == repr(set([1, 2, 3]))\ntest_40()\n\ndef test_41():\n    assert normalize_repr(repr(123))      == repr(123)\ntest_41()\n\ndef test_42():\n    assert normalize_repr(repr(list(range(3)))) == \"[0, 1, 2]\"\ntest_42()\n\ndef test_43():\n    assert normalize_repr('<_pytest.config.Config object at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config object>'\ntest_43()\n\ndef test_44():\n    assert normalize_repr(repr({1: 1, 2: 2})) == repr({1: 1, 2: 2})\ntest_44()\n\ndef test_45():\n    assert normalize_repr(\"object at 0x1313131\") == \"object\"\ntest_45()\n\ndef test_46():\n    assert normalize_repr(repr(range(1000)))==\"range(0, 1000)\"\ntest_46()\n\ndef test_47():\n    assert normalize_repr(repr('foo')) == repr('foo')\ntest_47()\n\ndef test_48():\n    assert normalize_repr(repr(set([1,2,3])))=='{1, 2, 3}'\ntest_48()\n\ndef test_49():\n    assert normalize_repr(\n            '[<nose.case.Test object at 0x103a2a290>, <nose.case.Test object at 0x103a2a2d0>]') == '[<nose.case.Test object>, <nose.case.Test object>]'\ntest_49()\n\ndef test_50():\n    assert normalize_repr(repr(frozenset([1,2,3])))=='frozenset({1, 2, 3})'\ntest_50()\n\ndef test_51():\n    assert normalize_repr(repr(u'úniço∂e'))  == repr(u'úniço∂e')\ntest_51()\n\ndef test_53():\n    assert normalize_repr(repr(frozenset([1, 2, 3]))) == \"frozenset({1, 2, 3})\"\ntest_53()\n\ndef test_54():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  != normalize_repr(\"u'sdfgh' at 0x1234\")\ntest_54()\n\ndef test_55():\n    assert normalize_repr('''<__main__.A object at 0x7f681d36bd98>''') \\\n        == '''<__main__.A object>'''\ntest_55()\n\ndef test_56():\n    assert normalize_repr(repr((1, 2, 3))) == normalize_repr(repr((1, 2, 3)))\ntest_56()\n\ndef test_57():\n    assert normalize_repr(\"(NoneType at 0x7f23b4004060)\") == \"(NoneType)\"\ntest_57()\n\ndef test_58():\n    assert normalize_repr(repr(list(range(5)))) == '[0, 1, 2, 3, 4]'\ntest_58()\n\ndef test_59():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}') == '<__main__.A object>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}'\ntest_59()\n\ndef test_60():\n    assert normalize_repr(repr(frozenset(['Hello']))) == repr(frozenset(['Hello']))\ntest_60()\n\ndef test_63():\n    assert normalize_repr(repr(None)) == repr(None)\ntest_63()\n\ndef test_64():\n    assert normalize_repr(repr({'a': 1, 'b': 2})) == \"{'a': 1, 'b': 2}\"\ntest_64()\n\ndef test_65():\n    assert normalize_repr(repr(None))=='None'\ntest_65()\n\ndef test_66():\n    assert normalize_repr(repr(dict(a=1, b=2))) == \"{'a': 1, 'b': 2}\"\ntest_66()\n\ndef test_67():\n    assert normalize_repr(repr(\"abc\")) == repr(\"abc\")\ntest_67()\n\ndef test_68():\n    assert normalize_repr(\" 123\") == \" 123\"\ntest_68()\n\ndef test_69():\n    assert normalize_repr(repr({})) == '{}'\ntest_69()\n\ndef test_71():\n    assert normalize_repr(repr({1,2,3})) == '{1, 2, 3}'\ntest_71()\n\ndef test_72():\n    assert normalize_repr(repr(u'a')) == repr(u'a')\ntest_72()\n\ndef test_74():\n    assert normalize_repr(repr({}))=='{}'\ntest_74()\n\ndef test_75():\n    assert normalize_repr(repr(set())) == repr(set())\ntest_75()\n\ndef test_76():\n    assert normalize_repr(repr([1,2,3,4,5])     ) == repr([1,2,3,4,5])\ntest_76()\n\ndef test_78():\n    assert normalize_repr(repr(u'Hello World!')  ) == repr(u'Hello World!')\ntest_78()\n\ndef test_79():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo at 0x1293939\")\ntest_79()\n\ndef test_80():\n    assert normalize_repr(repr({1: 2}))   == repr({1: 2})\ntest_80()\n\ndef test_81():\n    assert normalize_repr(repr(u'Hello \\U0001f47e')) == repr(u'Hello \\U0001f47e')\ntest_81()\n\ndef test_83():\n    assert normalize_repr(repr('unicode'))   == repr('unicode')\ntest_83()\n\ndef test_84():\n    assert normalize_repr(\"123\") == \"123\"\ntest_84()\n\ndef test_86():\n    assert normalize_repr('<function f1 at 0x10245a670>') == normalize_repr('<function f1 at 0x20245a670>')\ntest_86()\n\ndef test_87():\n    assert normalize_repr('0x12345678') == '0x12345678'\ntest_87()\n\ndef test_88():\n    assert normalize_repr(repr(slice(1,2,3))) == 'slice(1, 2, 3)'\ntest_88()\n\ndef test_89():\n    assert normalize_repr('abcd at 0x12345678') == 'abcd'\ntest_89()\n\ndef test_90():\n    assert normalize_repr(repr({1:2})) == '{1: 2}'\ntest_90()\n\ndef test_92():\n    assert normalize_repr(repr([\"Hello\", \"World\"]) ) == repr([\"Hello\", \"World\"])\ntest_92()\n\ndef test_93():\n    assert normalize_repr(repr(list(range(2)))) == \"[0, 1]\"\ntest_93()\n\ndef test_94():\n    assert normalize_repr(repr('test')) == \"'test'\"\ntest_94()\n\ndef test_95():\n    assert normalize_repr(repr(dict(a=1,b=2,c=3))) == \\\n            \"{'a': 1, 'b': 2, 'c': 3}\"\ntest_95()\n\ndef test_96():\n    assert normalize_repr(repr(1)) == repr(1)\ntest_96()\n\ndef test_98():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == normalize_repr(\n        \"<module_name.MyObj object at 0x107f9a6d0>\"\n    )\ntest_98()\n\ndef test_99():\n    assert normalize_repr(repr(42))      == repr(42)\ntest_99()\n\ndef test_100():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo\")\ntest_100()\n\ndef test_101():\n    assert normalize_repr(repr(()))=='()'\ntest_101()\n\ndef test_103():\n    assert normalize_repr('<_pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config>'\ntest_103()\n\ndef test_105():\n    assert normalize_repr(repr([]))       == repr([])\ntest_105()\n\ndef test_107():\n    assert normalize_repr(repr([])) == '[]'\ntest_107()\n\ndef test_108():\n    assert normalize_repr(repr({1: 2, 3: 4}.keys()))=='dict_keys([1, 3])'\ntest_108()\n\ndef test_109():\n    assert normalize_repr(repr({1, 2}))   == repr({1, 2})\ntest_109()\n\ndef test_110():\n    assert normalize_repr(repr(u'a')) != repr(u'a'+u' ')\ntest_110()\n\ndef test_111():\n    assert normalize_repr(repr({1:2,3:4})) == repr({1:2,3:4})\ntest_111()\n\ndef test_112():\n    assert normalize_repr(\"a foo <foo.bar object at 0x7f87740f9e10>\") == \"a foo <foo.bar object>\"\ntest_112()\n\ndef test_113():\n    assert normalize_repr(repr(None)) == 'None'\ntest_113()\n\ndef test_114():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  == normalize_repr(\"u'sdf' at 0xabcd\")\ntest_114()\n\ndef test_115():\n    assert normalize_repr(repr([1, 2, 3])) == '[1, 2, 3]'\ntest_115()\n\ndef test_116():\n    assert normalize_repr(\"test() at 0x12345\") == \"test()\"\ntest_116()\n\ndef test_118():\n    assert normalize_repr(repr(frozenset())) == repr(frozenset())\ntest_118()\n\ndef test_119():\n    assert normalize_repr(repr({0, 1})) == \"{0, 1}\"\ntest_119()\n\ndef test_120():\n    assert normalize_repr(repr([0, 1, 2]))   == repr([0, 1, 2])\ntest_120()\n\ndef test_121():\n    assert normalize_repr(\n        \"<pytest.fixtures.FixtureRequest object at 0x108283448>\"\n    ) == \"<pytest.fixtures.FixtureRequest object>\"\ntest_121()\n\ndef test_122():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>') == '<__main__.A object>'\ntest_122()\n\ndef test_123():\n    assert normalize_repr(repr(1.0)) == repr(1.0)\ntest_123()\n\ndef test_124():\n    assert normalize_repr(repr(\"abc\"))==\"'abc'\"\ntest_124()\n\ndef test_125():\n    assert normalize_repr(repr(set(['Hello', 'World']))) == repr(set(['Hello', 'World']))\ntest_125()\n\ndef test_126():\n    assert normalize_repr(repr('Hello World!')  ) == repr('Hello World!')\ntest_126()\n\ndef test_127():\n    assert normalize_repr(\"NoneType at 0x7f23b4004060\") == \"NoneType\"\ntest_127()\n\ndef test_128():\n    assert normalize_repr(repr({3:2})) == \\\n            \"{3: 2}\"\ntest_128()\n\ndef test_129():\n    assert normalize_repr(\"'foo'\") == \"'foo'\"\ntest_129()\n\ndef test_130():\n    assert normalize_repr(repr(set()))=='set()'\ntest_130()\n\ndef test_131():\n    assert normalize_repr(\"a.b.c at 0x123456789\") == \"a.b.c\"\ntest_131()\n\ndef test_132():\n    assert normalize_repr(repr({1: 2, 3: 4}.values()))=='dict_values([2, 4])'\ntest_132()\n\ndef test_133():\n    assert normalize_repr('abcd') == 'abcd'\ntest_133()\n\ndef test_134():\n    assert normalize_repr('<unittest.case._SubTestCase object at 0x106597788>') \\\n            == '<unittest.case._SubTestCase object>'\ntest_134()\n\ndef test_135():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: 0x7f5dbe7bce10') == '<__main__.A object>: 0x7f5dbe7bce10'\ntest_135()\n\ndef test_136():\n    assert normalize_repr(repr('foobar')) == repr('foobar')\ntest_136()\n\ndef test_138():\n    assert normalize_repr(repr(None))     == repr(None)\ntest_138()\n\ndef test_139():\n    assert normalize_repr(repr((1,2,3)))=='(1, 2, 3)'\ntest_139()\n\ndef test_140():\n    assert normalize_repr(repr({1,2,3})) == repr({1,2,3})\ntest_140()\n\ndef test_142():\n    assert normalize_repr(repr(u'\\U0001f47e')) == repr(u'\\U0001f47e')\ntest_142()\n\ndef test_143():\n    assert normalize_repr(repr([]))=='[]'\ntest_143()\n\ndef test_144():\n    assert normalize_repr(repr(u'Hello')) == repr(u'Hello')\ntest_144()\n\ndef test_145():\n    assert normalize_repr(repr({1, 2, 3})) == \"{1, 2, 3}\"\ntest_145()\n\ndef test_146():\n    assert normalize_repr(repr((u\"hi\", 2))) == \"('hi', 2)\"\ntest_146()\n\ndef test_148():\n    assert normalize_repr(repr({1, 2, 3})) == repr({1, 2, 3})\ntest_148()\n\ndef test_149():\n    assert normalize_repr(repr({'Hello'})) == repr({'Hello'})\ntest_149()\n\ndef test_150():\n    assert normalize_repr('<function f1 at 0x10245a670>') != '<function f1 at 0x10245a670>'\ntest_150()\n\ndef test_151():\n    assert normalize_repr(\"'foo' at 0x7eeacd2b57d0\") == \"'foo'\"\ntest_151()\n\ndef test_152():\n    assert normalize_repr(repr('Hello'))  == repr('Hello')\ntest_152()\n\ndef test_153():\n    assert normalize_repr(repr(5)) == '5'\ntest_153()\n\ndef test_154():\n    assert normalize_repr(repr({'a', 'b', 'c'})) == \"{'a', 'b', 'c'}\"\ntest_154()\n\ndef test_155():\n    assert normalize_repr(repr({'foo': {'bar'}})) == \"{'foo': {'bar'}}\"\ntest_155()\n\ndef test_156():\n    assert normalize_repr(repr(range(3))) == 'range(0, 3)'\ntest_156()\n\ndef test_157():\n    assert normalize_repr('<pytest.config.Config object at 0x106587788>') \\\n            == '<pytest.config.Config object>'\ntest_157()\n\ndef test_158():\n    assert normalize_repr(repr('hello'))  == \"'hello'\"\ntest_158()\n\ndef test_159():\n    assert normalize_repr('<function f1 at 0x10245a670>') == '<function f1>'\ntest_159()\n\ndef test_160():\n    assert normalize_repr(repr([1,2,3]))=='[1, 2, 3]'\ntest_160()\n\ndef test_161():\n    assert normalize_repr(repr(7)) == '7'\ntest_161()\n\ndef test_162():\n    assert normalize_repr(repr({1, 2}))       == repr({1, 2})\ntest_162()\n\ndef test_163():\n    assert normalize_repr('abcd at 0x1234567890') == 'abcd'\ntest_163()\n\ndef test_164():\n    assert normalize_repr(repr({123: 456}))=='{123: 456}'\ntest_164()\n\ndef test_165():\n    assert normalize_repr(repr((1,2,3))) == '(1, 2, 3)'\ntest_165()\n\ndef test_2():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"u'sdf'\") == output\ntest_2()\n\ndef test_10():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 0x2222\") == output\ntest_10()\n\ndef test_16():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"'a' object at 0x122f810\") == output\ntest_16()\n\ndef test_18():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.values())) == output\ntest_18()\n\ndef test_21():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set([1,2,3]))) == output\ntest_21()\n\ndef test_38():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2, 3:4})) == output\ntest_38()\n\ndef test_52():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2})) == output\ntest_52()\n\ndef test_61():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set(['hi', 'hello', 'bye']))) == output\ntest_61()\n\ndef test_62():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=[], c=3))) == output\ntest_62()\n\ndef test_70():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.items())) == output\ntest_70()\n\ndef test_73():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"\"\"\n    <__main__.MyObj object at 0x10c707050>\"\"\" ) == output\ntest_73()\n\ndef test_77():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_77\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(frozenset([1,2,3]))) == output\ntest_77()\n\ndef test_82():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({'foo','bar'})) == output\ntest_82()\n\ndef test_85():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b={}, c=3))) == output\ntest_85()\n\ndef test_91():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.keys())) == output\ntest_91()\n\ndef test_97():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(np.array(['hi']))) == output\ntest_97()\n\ndef test_102():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(\"abc\")) == output\ntest_102()\n\ndef test_104():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\n        \"set(['i', 's', 'm', 'h', 'u', 't', 'e', 'r'])\") == output\ntest_104()\n\ndef test_106():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=2, c=3))) == output\ntest_106()\n\ndef test_137():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 \\n at 0x2222\") == output\ntest_137()\n\ndef test_141():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_141\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(object())) == output\ntest_141()\n\ndef test_147():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"[1, 2, 3, 4, 5]\") == output\ntest_147()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/PySnooper\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\n\nimport abc\nimport re\n\nimport sys\nfrom pysnooper.pycompat import ABC, string_types, collections_abc\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\n\nclass WritableStream(ABC):\n    @abc.abstractmethod\n    def write(self, s):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented\n\n\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError # IronPython weirdness.\n)\n\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef get_repr_function(item, custom_repr):\n    for condition, action in custom_repr:\n        if isinstance(condition, type):\n            condition = lambda x, y=condition: isinstance(x, y)\n        if condition(item):\n            return action\n    return repr\n\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\n\nimport re\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    return DEFAULT_REPR_RE.sub('', item_repr)\n\n\ndef get_shortish_repr(item, custom_repr=(), max_length=None, normalize=False):\n    repr_function = get_repr_function(item, custom_repr)\n    try:\n        r = repr_function(item)\n    except Exception:\n        r = 'REPR FAILED'\n    r = r.replace('\\r', '').replace('\\n', '')\n    if normalize:\n        r = normalize_repr(r)\n    if max_length:\n        r = truncate(r, max_length)\n    return r\n\n\ndef truncate(string, max_length):\n    if (max_length is None) or (len(string) <= max_length):\n        return string\n    else:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        return u'{}...{}'.format(string[:left], string[-right:])\n\n\ndef ensure_tuple(x):\n    if isinstance(x, collections_abc.Iterable) and \\\n                                               not isinstance(x, string_types):\n        return tuple(x)\n    else:\n        return (x,)\n\n\n\n\n\nimport pickle\ndef test_0():\n    assert normalize_repr(repr(set())) == \"set()\"\ntest_0()\n\ndef test_1():\n    assert normalize_repr(repr(re.compile('Hello'))) == repr(re.compile('Hello'))\ntest_1()\n\ndef test_3():\n    assert normalize_repr(repr([1,2])) == repr([1,2])\ntest_3()\n\ndef test_4():\n    assert \"a=2\" == normalize_repr(\"a=2\")\ntest_4()\n\ndef test_5():\n    assert normalize_repr(repr(None))==\"None\"\ntest_5()\n\ndef test_6():\n    assert normalize_repr('<pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<pytest.config.Config>'\ntest_6()\n\ndef test_7():\n    assert normalize_repr(\"object\") == \"object\"\ntest_7()\n\ndef test_8():\n    assert normalize_repr(repr(123))=='123'\ntest_8()\n\ndef test_9():\n    assert normalize_repr(repr({1,2,3}))  == repr({1,2,3})\ntest_9()\n\ndef test_11():\n    assert normalize_repr(repr('1234')) == repr('1234')\ntest_11()\n\ndef test_12():\n    assert \"a=2\" == normalize_repr(\"a=2 at 0x0354345\")\ntest_12()\n\ndef test_13():\n    assert normalize_repr(repr(bytearray(b'Hello'))) == repr(bytearray(b'Hello'))\ntest_13()\n\ndef test_14():\n    assert normalize_repr(\"[NoneType at 0x7f23b4004060]\") == \"[NoneType]\"\ntest_14()\n\ndef test_15():\n    assert normalize_repr(repr(dict(a=1,b=2))) == \"{'a': 1, 'b': 2}\"\ntest_15()\n\ndef test_17():\n    assert normalize_repr(repr(1 + 2j)) == repr(1 + 2j)\ntest_17()\n\ndef test_19():\n    assert normalize_repr(repr({1,2,3})) == \"{1, 2, 3}\"\ntest_19()\n\ndef test_20():\n    assert normalize_repr(repr({'Hello', 'World'})) == repr({'Hello', 'World'})\ntest_20()\n\ndef test_22():\n    assert normalize_repr(repr({1: 2, 3: 4}.items()))=='dict_items([(1, 2), (3, 4)])'\ntest_22()\n\ndef test_23():\n    assert normalize_repr(repr(u'Hello'))  == repr(u'Hello')\ntest_23()\n\ndef test_24():\n    assert normalize_repr(repr('foo')) == repr(str('foo'))\ntest_24()\n\ndef test_25():\n    assert normalize_repr(repr(frozenset(['Hello', 'World']))) == repr(frozenset(['Hello', 'World']))\ntest_25()\n\ndef test_26():\n    assert normalize_repr(repr([1,2,3])) == '[1, 2, 3]'\ntest_26()\n\ndef test_27():\n    assert normalize_repr(repr(list(range(1)))) == \"[0]\"\ntest_27()\n\ndef test_28():\n    assert normalize_repr(repr({'foo':'bar'})) == \"{'foo': 'bar'}\"\ntest_28()\n\ndef test_29():\n    assert normalize_repr(repr(frozenset()))=='frozenset()'\ntest_29()\n\ndef test_30():\n    assert normalize_repr(repr({'Hello': 'World'})) == repr({'Hello': 'World'})\ntest_30()\n\ndef test_31():\n    assert normalize_repr(repr({1:2})) == \"{1: 2}\"\ntest_31()\n\ndef test_32():\n    assert normalize_repr(repr('foo')) == \"'foo'\"\ntest_32()\n\ndef test_33():\n    assert normalize_repr(\"'foo' at 0x017EEACD2B57D0\") == \"'foo'\"\ntest_33()\n\ndef test_34():\n    assert normalize_repr(repr(set([3,2,1]))) == \\\n            \"{1, 2, 3}\"\ntest_34()\n\ndef test_35():\n    assert normalize_repr('<_pytest.runner.CallInfo object at 0x106587788>') \\\n            == '<_pytest.runner.CallInfo object>'\ntest_35()\n\ndef test_36():\n    assert normalize_repr(\"a.b.c\") == \"a.b.c\"\ntest_36()\n\ndef test_37():\n    assert normalize_repr(repr(b'Hello')) == repr(b'Hello')\ntest_37()\n\ndef test_39():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == \"<module_name.MyObj object>\"\ntest_39()\n\ndef test_40():\n    assert normalize_repr(repr({1, 2, 3})) == repr(set([1, 2, 3]))\ntest_40()\n\ndef test_41():\n    assert normalize_repr(repr(123))      == repr(123)\ntest_41()\n\ndef test_42():\n    assert normalize_repr(repr(list(range(3)))) == \"[0, 1, 2]\"\ntest_42()\n\ndef test_43():\n    assert normalize_repr('<_pytest.config.Config object at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config object>'\ntest_43()\n\ndef test_44():\n    assert normalize_repr(repr({1: 1, 2: 2})) == repr({1: 1, 2: 2})\ntest_44()\n\ndef test_45():\n    assert normalize_repr(\"object at 0x1313131\") == \"object\"\ntest_45()\n\ndef test_46():\n    assert normalize_repr(repr(range(1000)))==\"range(0, 1000)\"\ntest_46()\n\ndef test_47():\n    assert normalize_repr(repr('foo')) == repr('foo')\ntest_47()\n\ndef test_48():\n    assert normalize_repr(repr(set([1,2,3])))=='{1, 2, 3}'\ntest_48()\n\ndef test_49():\n    assert normalize_repr(\n            '[<nose.case.Test object at 0x103a2a290>, <nose.case.Test object at 0x103a2a2d0>]') == '[<nose.case.Test object>, <nose.case.Test object>]'\ntest_49()\n\ndef test_50():\n    assert normalize_repr(repr(frozenset([1,2,3])))=='frozenset({1, 2, 3})'\ntest_50()\n\ndef test_51():\n    assert normalize_repr(repr(u'úniço∂e'))  == repr(u'úniço∂e')\ntest_51()\n\ndef test_53():\n    assert normalize_repr(repr(frozenset([1, 2, 3]))) == \"frozenset({1, 2, 3})\"\ntest_53()\n\ndef test_54():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  != normalize_repr(\"u'sdfgh' at 0x1234\")\ntest_54()\n\ndef test_55():\n    assert normalize_repr('''<__main__.A object at 0x7f681d36bd98>''') \\\n        == '''<__main__.A object>'''\ntest_55()\n\ndef test_56():\n    assert normalize_repr(repr((1, 2, 3))) == normalize_repr(repr((1, 2, 3)))\ntest_56()\n\ndef test_57():\n    assert normalize_repr(\"(NoneType at 0x7f23b4004060)\") == \"(NoneType)\"\ntest_57()\n\ndef test_58():\n    assert normalize_repr(repr(list(range(5)))) == '[0, 1, 2, 3, 4]'\ntest_58()\n\ndef test_59():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}') == '<__main__.A object>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}'\ntest_59()\n\ndef test_60():\n    assert normalize_repr(repr(frozenset(['Hello']))) == repr(frozenset(['Hello']))\ntest_60()\n\ndef test_63():\n    assert normalize_repr(repr(None)) == repr(None)\ntest_63()\n\ndef test_64():\n    assert normalize_repr(repr({'a': 1, 'b': 2})) == \"{'a': 1, 'b': 2}\"\ntest_64()\n\ndef test_65():\n    assert normalize_repr(repr(None))=='None'\ntest_65()\n\ndef test_66():\n    assert normalize_repr(repr(dict(a=1, b=2))) == \"{'a': 1, 'b': 2}\"\ntest_66()\n\ndef test_67():\n    assert normalize_repr(repr(\"abc\")) == repr(\"abc\")\ntest_67()\n\ndef test_68():\n    assert normalize_repr(\" 123\") == \" 123\"\ntest_68()\n\ndef test_69():\n    assert normalize_repr(repr({})) == '{}'\ntest_69()\n\ndef test_71():\n    assert normalize_repr(repr({1,2,3})) == '{1, 2, 3}'\ntest_71()\n\ndef test_72():\n    assert normalize_repr(repr(u'a')) == repr(u'a')\ntest_72()\n\ndef test_74():\n    assert normalize_repr(repr({}))=='{}'\ntest_74()\n\ndef test_75():\n    assert normalize_repr(repr(set())) == repr(set())\ntest_75()\n\ndef test_76():\n    assert normalize_repr(repr([1,2,3,4,5])     ) == repr([1,2,3,4,5])\ntest_76()\n\ndef test_78():\n    assert normalize_repr(repr(u'Hello World!')  ) == repr(u'Hello World!')\ntest_78()\n\ndef test_79():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo at 0x1293939\")\ntest_79()\n\ndef test_80():\n    assert normalize_repr(repr({1: 2}))   == repr({1: 2})\ntest_80()\n\ndef test_81():\n    assert normalize_repr(repr(u'Hello \\U0001f47e')) == repr(u'Hello \\U0001f47e')\ntest_81()\n\ndef test_83():\n    assert normalize_repr(repr('unicode'))   == repr('unicode')\ntest_83()\n\ndef test_84():\n    assert normalize_repr(\"123\") == \"123\"\ntest_84()\n\ndef test_86():\n    assert normalize_repr('<function f1 at 0x10245a670>') == normalize_repr('<function f1 at 0x20245a670>')\ntest_86()\n\ndef test_87():\n    assert normalize_repr('0x12345678') == '0x12345678'\ntest_87()\n\ndef test_88():\n    assert normalize_repr(repr(slice(1,2,3))) == 'slice(1, 2, 3)'\ntest_88()\n\ndef test_89():\n    assert normalize_repr('abcd at 0x12345678') == 'abcd'\ntest_89()\n\ndef test_90():\n    assert normalize_repr(repr({1:2})) == '{1: 2}'\ntest_90()\n\ndef test_92():\n    assert normalize_repr(repr([\"Hello\", \"World\"]) ) == repr([\"Hello\", \"World\"])\ntest_92()\n\ndef test_93():\n    assert normalize_repr(repr(list(range(2)))) == \"[0, 1]\"\ntest_93()\n\ndef test_94():\n    assert normalize_repr(repr('test')) == \"'test'\"\ntest_94()\n\ndef test_95():\n    assert normalize_repr(repr(dict(a=1,b=2,c=3))) == \\\n            \"{'a': 1, 'b': 2, 'c': 3}\"\ntest_95()\n\ndef test_96():\n    assert normalize_repr(repr(1)) == repr(1)\ntest_96()\n\ndef test_98():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == normalize_repr(\n        \"<module_name.MyObj object at 0x107f9a6d0>\"\n    )\ntest_98()\n\ndef test_99():\n    assert normalize_repr(repr(42))      == repr(42)\ntest_99()\n\ndef test_100():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo\")\ntest_100()\n\ndef test_101():\n    assert normalize_repr(repr(()))=='()'\ntest_101()\n\ndef test_103():\n    assert normalize_repr('<_pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config>'\ntest_103()\n\ndef test_105():\n    assert normalize_repr(repr([]))       == repr([])\ntest_105()\n\ndef test_107():\n    assert normalize_repr(repr([])) == '[]'\ntest_107()\n\ndef test_108():\n    assert normalize_repr(repr({1: 2, 3: 4}.keys()))=='dict_keys([1, 3])'\ntest_108()\n\ndef test_109():\n    assert normalize_repr(repr({1, 2}))   == repr({1, 2})\ntest_109()\n\ndef test_110():\n    assert normalize_repr(repr(u'a')) != repr(u'a'+u' ')\ntest_110()\n\ndef test_111():\n    assert normalize_repr(repr({1:2,3:4})) == repr({1:2,3:4})\ntest_111()\n\ndef test_112():\n    assert normalize_repr(\"a foo <foo.bar object at 0x7f87740f9e10>\") == \"a foo <foo.bar object>\"\ntest_112()\n\ndef test_113():\n    assert normalize_repr(repr(None)) == 'None'\ntest_113()\n\ndef test_114():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  == normalize_repr(\"u'sdf' at 0xabcd\")\ntest_114()\n\ndef test_115():\n    assert normalize_repr(repr([1, 2, 3])) == '[1, 2, 3]'\ntest_115()\n\ndef test_116():\n    assert normalize_repr(\"test() at 0x12345\") == \"test()\"\ntest_116()\n\ndef test_118():\n    assert normalize_repr(repr(frozenset())) == repr(frozenset())\ntest_118()\n\ndef test_119():\n    assert normalize_repr(repr({0, 1})) == \"{0, 1}\"\ntest_119()\n\ndef test_120():\n    assert normalize_repr(repr([0, 1, 2]))   == repr([0, 1, 2])\ntest_120()\n\ndef test_121():\n    assert normalize_repr(\n        \"<pytest.fixtures.FixtureRequest object at 0x108283448>\"\n    ) == \"<pytest.fixtures.FixtureRequest object>\"\ntest_121()\n\ndef test_122():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>') == '<__main__.A object>'\ntest_122()\n\ndef test_123():\n    assert normalize_repr(repr(1.0)) == repr(1.0)\ntest_123()\n\ndef test_124():\n    assert normalize_repr(repr(\"abc\"))==\"'abc'\"\ntest_124()\n\ndef test_125():\n    assert normalize_repr(repr(set(['Hello', 'World']))) == repr(set(['Hello', 'World']))\ntest_125()\n\ndef test_126():\n    assert normalize_repr(repr('Hello World!')  ) == repr('Hello World!')\ntest_126()\n\ndef test_127():\n    assert normalize_repr(\"NoneType at 0x7f23b4004060\") == \"NoneType\"\ntest_127()\n\ndef test_128():\n    assert normalize_repr(repr({3:2})) == \\\n            \"{3: 2}\"\ntest_128()\n\ndef test_129():\n    assert normalize_repr(\"'foo'\") == \"'foo'\"\ntest_129()\n\ndef test_130():\n    assert normalize_repr(repr(set()))=='set()'\ntest_130()\n\ndef test_131():\n    assert normalize_repr(\"a.b.c at 0x123456789\") == \"a.b.c\"\ntest_131()\n\ndef test_132():\n    assert normalize_repr(repr({1: 2, 3: 4}.values()))=='dict_values([2, 4])'\ntest_132()\n\ndef test_133():\n    assert normalize_repr('abcd') == 'abcd'\ntest_133()\n\ndef test_134():\n    assert normalize_repr('<unittest.case._SubTestCase object at 0x106597788>') \\\n            == '<unittest.case._SubTestCase object>'\ntest_134()\n\ndef test_135():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: 0x7f5dbe7bce10') == '<__main__.A object>: 0x7f5dbe7bce10'\ntest_135()\n\ndef test_136():\n    assert normalize_repr(repr('foobar')) == repr('foobar')\ntest_136()\n\ndef test_138():\n    assert normalize_repr(repr(None))     == repr(None)\ntest_138()\n\ndef test_139():\n    assert normalize_repr(repr((1,2,3)))=='(1, 2, 3)'\ntest_139()\n\ndef test_140():\n    assert normalize_repr(repr({1,2,3})) == repr({1,2,3})\ntest_140()\n\ndef test_142():\n    assert normalize_repr(repr(u'\\U0001f47e')) == repr(u'\\U0001f47e')\ntest_142()\n\ndef test_143():\n    assert normalize_repr(repr([]))=='[]'\ntest_143()\n\ndef test_144():\n    assert normalize_repr(repr(u'Hello')) == repr(u'Hello')\ntest_144()\n\ndef test_145():\n    assert normalize_repr(repr({1, 2, 3})) == \"{1, 2, 3}\"\ntest_145()\n\ndef test_146():\n    assert normalize_repr(repr((u\"hi\", 2))) == \"('hi', 2)\"\ntest_146()\n\ndef test_148():\n    assert normalize_repr(repr({1, 2, 3})) == repr({1, 2, 3})\ntest_148()\n\ndef test_149():\n    assert normalize_repr(repr({'Hello'})) == repr({'Hello'})\ntest_149()\n\ndef test_150():\n    assert normalize_repr('<function f1 at 0x10245a670>') != '<function f1 at 0x10245a670>'\ntest_150()\n\ndef test_151():\n    assert normalize_repr(\"'foo' at 0x7eeacd2b57d0\") == \"'foo'\"\ntest_151()\n\ndef test_152():\n    assert normalize_repr(repr('Hello'))  == repr('Hello')\ntest_152()\n\ndef test_153():\n    assert normalize_repr(repr(5)) == '5'\ntest_153()\n\ndef test_154():\n    assert normalize_repr(repr({'a', 'b', 'c'})) == \"{'a', 'b', 'c'}\"\ntest_154()\n\ndef test_155():\n    assert normalize_repr(repr({'foo': {'bar'}})) == \"{'foo': {'bar'}}\"\ntest_155()\n\ndef test_156():\n    assert normalize_repr(repr(range(3))) == 'range(0, 3)'\ntest_156()\n\ndef test_157():\n    assert normalize_repr('<pytest.config.Config object at 0x106587788>') \\\n            == '<pytest.config.Config object>'\ntest_157()\n\ndef test_158():\n    assert normalize_repr(repr('hello'))  == \"'hello'\"\ntest_158()\n\ndef test_159():\n    assert normalize_repr('<function f1 at 0x10245a670>') == '<function f1>'\ntest_159()\n\ndef test_160():\n    assert normalize_repr(repr([1,2,3]))=='[1, 2, 3]'\ntest_160()\n\ndef test_161():\n    assert normalize_repr(repr(7)) == '7'\ntest_161()\n\ndef test_162():\n    assert normalize_repr(repr({1, 2}))       == repr({1, 2})\ntest_162()\n\ndef test_163():\n    assert normalize_repr('abcd at 0x1234567890') == 'abcd'\ntest_163()\n\ndef test_164():\n    assert normalize_repr(repr({123: 456}))=='{123: 456}'\ntest_164()\n\ndef test_165():\n    assert normalize_repr(repr((1,2,3))) == '(1, 2, 3)'\ntest_165()\n\ndef test_2():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"u'sdf'\") == output\ntest_2()\n\ndef test_10():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 0x2222\") == output\ntest_10()\n\ndef test_16():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"'a' object at 0x122f810\") == output\ntest_16()\n\ndef test_18():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.values())) == output\ntest_18()\n\ndef test_21():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set([1,2,3]))) == output\ntest_21()\n\ndef test_38():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2, 3:4})) == output\ntest_38()\n\ndef test_52():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2})) == output\ntest_52()\n\ndef test_61():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set(['hi', 'hello', 'bye']))) == output\ntest_61()\n\ndef test_62():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=[], c=3))) == output\ntest_62()\n\ndef test_70():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.items())) == output\ntest_70()\n\ndef test_73():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"\"\"\n    <__main__.MyObj object at 0x10c707050>\"\"\" ) == output\ntest_73()\n\ndef test_77():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_77\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(frozenset([1,2,3]))) == output\ntest_77()\n\ndef test_82():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({'foo','bar'})) == output\ntest_82()\n\ndef test_85():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b={}, c=3))) == output\ntest_85()\n\ndef test_91():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.keys())) == output\ntest_91()\n\ndef test_97():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(np.array(['hi']))) == output\ntest_97()\n\ndef test_102():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(\"abc\")) == output\ntest_102()\n\ndef test_104():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\n        \"set(['i', 's', 'm', 'h', 'u', 't', 'e', 'r'])\") == output\ntest_104()\n\ndef test_106():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=2, c=3))) == output\ntest_106()\n\ndef test_137():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 \\n at 0x2222\") == output\ntest_137()\n\ndef test_141():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_141\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(object())) == output\ntest_141()\n\ndef test_147():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"[1, 2, 3, 4, 5]\") == output\ntest_147()\n\n\n", "\nimport sys\nsys.path.insert(1, \"/input/test-apps/PySnooper\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\n\n\nimport abc\nimport re\n\nimport sys\nfrom pysnooper.pycompat import ABC, string_types, collections_abc\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\n\nclass WritableStream(ABC):\n    @abc.abstractmethod\n    def write(self, s):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is WritableStream:\n            return _check_methods(C, 'write')\n        return NotImplemented\n\n\n\nfile_reading_errors = (\n    IOError,\n    OSError,\n    ValueError # IronPython weirdness.\n)\n\n\n\ndef shitcode(s):\n    return ''.join(\n        (c if (0 < ord(c) < 256) else '?') for c in s\n    )\n\n\ndef get_repr_function(item, custom_repr):\n    for condition, action in custom_repr:\n        if isinstance(condition, type):\n            condition = lambda x, y=condition: isinstance(x, y)\n        if condition(item):\n            return action\n    return repr\n\n\nDEFAULT_REPR_RE = re.compile(r' at 0x[a-f0-9A-F]{4,}')\n\n\nimport re\n\ndef normalize_repr(item_repr):\n    \"\"\"Remove memory address (0x...) from a default python repr\"\"\"\n    # The default Python repr for objects often includes the memory address in the form 'at 0x...'.\n    # We use the given DEFAULT_REPR_RE pattern (from file content) to remove that part.\n    # The pattern is: r' at 0x[a-f0-9A-F]{4,}'\n    # Replace it with an empty string.\n    return re.sub(r' at 0x[a-f0-9A-F]{4,}', '', item_repr)\n\n\ndef get_shortish_repr(item, custom_repr=(), max_length=None, normalize=False):\n    repr_function = get_repr_function(item, custom_repr)\n    try:\n        r = repr_function(item)\n    except Exception:\n        r = 'REPR FAILED'\n    r = r.replace('\\r', '').replace('\\n', '')\n    if normalize:\n        r = normalize_repr(r)\n    if max_length:\n        r = truncate(r, max_length)\n    return r\n\n\ndef truncate(string, max_length):\n    if (max_length is None) or (len(string) <= max_length):\n        return string\n    else:\n        left = (max_length - 3) // 2\n        right = max_length - 3 - left\n        return u'{}...{}'.format(string[:left], string[-right:])\n\n\ndef ensure_tuple(x):\n    if isinstance(x, collections_abc.Iterable) and \\\n                                               not isinstance(x, string_types):\n        return tuple(x)\n    else:\n        return (x,)\n\n\n\n\n\nimport pickle\ndef test_0():\n    assert normalize_repr(repr(set())) == \"set()\"\ntest_0()\n\ndef test_1():\n    assert normalize_repr(repr(re.compile('Hello'))) == repr(re.compile('Hello'))\ntest_1()\n\ndef test_3():\n    assert normalize_repr(repr([1,2])) == repr([1,2])\ntest_3()\n\ndef test_4():\n    assert \"a=2\" == normalize_repr(\"a=2\")\ntest_4()\n\ndef test_5():\n    assert normalize_repr(repr(None))==\"None\"\ntest_5()\n\ndef test_6():\n    assert normalize_repr('<pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<pytest.config.Config>'\ntest_6()\n\ndef test_7():\n    assert normalize_repr(\"object\") == \"object\"\ntest_7()\n\ndef test_8():\n    assert normalize_repr(repr(123))=='123'\ntest_8()\n\ndef test_9():\n    assert normalize_repr(repr({1,2,3}))  == repr({1,2,3})\ntest_9()\n\ndef test_11():\n    assert normalize_repr(repr('1234')) == repr('1234')\ntest_11()\n\ndef test_12():\n    assert \"a=2\" == normalize_repr(\"a=2 at 0x0354345\")\ntest_12()\n\ndef test_13():\n    assert normalize_repr(repr(bytearray(b'Hello'))) == repr(bytearray(b'Hello'))\ntest_13()\n\ndef test_14():\n    assert normalize_repr(\"[NoneType at 0x7f23b4004060]\") == \"[NoneType]\"\ntest_14()\n\ndef test_15():\n    assert normalize_repr(repr(dict(a=1,b=2))) == \"{'a': 1, 'b': 2}\"\ntest_15()\n\ndef test_17():\n    assert normalize_repr(repr(1 + 2j)) == repr(1 + 2j)\ntest_17()\n\ndef test_19():\n    assert normalize_repr(repr({1,2,3})) == \"{1, 2, 3}\"\ntest_19()\n\ndef test_20():\n    assert normalize_repr(repr({'Hello', 'World'})) == repr({'Hello', 'World'})\ntest_20()\n\ndef test_22():\n    assert normalize_repr(repr({1: 2, 3: 4}.items()))=='dict_items([(1, 2), (3, 4)])'\ntest_22()\n\ndef test_23():\n    assert normalize_repr(repr(u'Hello'))  == repr(u'Hello')\ntest_23()\n\ndef test_24():\n    assert normalize_repr(repr('foo')) == repr(str('foo'))\ntest_24()\n\ndef test_25():\n    assert normalize_repr(repr(frozenset(['Hello', 'World']))) == repr(frozenset(['Hello', 'World']))\ntest_25()\n\ndef test_26():\n    assert normalize_repr(repr([1,2,3])) == '[1, 2, 3]'\ntest_26()\n\ndef test_27():\n    assert normalize_repr(repr(list(range(1)))) == \"[0]\"\ntest_27()\n\ndef test_28():\n    assert normalize_repr(repr({'foo':'bar'})) == \"{'foo': 'bar'}\"\ntest_28()\n\ndef test_29():\n    assert normalize_repr(repr(frozenset()))=='frozenset()'\ntest_29()\n\ndef test_30():\n    assert normalize_repr(repr({'Hello': 'World'})) == repr({'Hello': 'World'})\ntest_30()\n\ndef test_31():\n    assert normalize_repr(repr({1:2})) == \"{1: 2}\"\ntest_31()\n\ndef test_32():\n    assert normalize_repr(repr('foo')) == \"'foo'\"\ntest_32()\n\ndef test_33():\n    assert normalize_repr(\"'foo' at 0x017EEACD2B57D0\") == \"'foo'\"\ntest_33()\n\ndef test_34():\n    assert normalize_repr(repr(set([3,2,1]))) == \\\n            \"{1, 2, 3}\"\ntest_34()\n\ndef test_35():\n    assert normalize_repr('<_pytest.runner.CallInfo object at 0x106587788>') \\\n            == '<_pytest.runner.CallInfo object>'\ntest_35()\n\ndef test_36():\n    assert normalize_repr(\"a.b.c\") == \"a.b.c\"\ntest_36()\n\ndef test_37():\n    assert normalize_repr(repr(b'Hello')) == repr(b'Hello')\ntest_37()\n\ndef test_39():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == \"<module_name.MyObj object>\"\ntest_39()\n\ndef test_40():\n    assert normalize_repr(repr({1, 2, 3})) == repr(set([1, 2, 3]))\ntest_40()\n\ndef test_41():\n    assert normalize_repr(repr(123))      == repr(123)\ntest_41()\n\ndef test_42():\n    assert normalize_repr(repr(list(range(3)))) == \"[0, 1, 2]\"\ntest_42()\n\ndef test_43():\n    assert normalize_repr('<_pytest.config.Config object at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config object>'\ntest_43()\n\ndef test_44():\n    assert normalize_repr(repr({1: 1, 2: 2})) == repr({1: 1, 2: 2})\ntest_44()\n\ndef test_45():\n    assert normalize_repr(\"object at 0x1313131\") == \"object\"\ntest_45()\n\ndef test_46():\n    assert normalize_repr(repr(range(1000)))==\"range(0, 1000)\"\ntest_46()\n\ndef test_47():\n    assert normalize_repr(repr('foo')) == repr('foo')\ntest_47()\n\ndef test_48():\n    assert normalize_repr(repr(set([1,2,3])))=='{1, 2, 3}'\ntest_48()\n\ndef test_49():\n    assert normalize_repr(\n            '[<nose.case.Test object at 0x103a2a290>, <nose.case.Test object at 0x103a2a2d0>]') == '[<nose.case.Test object>, <nose.case.Test object>]'\ntest_49()\n\ndef test_50():\n    assert normalize_repr(repr(frozenset([1,2,3])))=='frozenset({1, 2, 3})'\ntest_50()\n\ndef test_51():\n    assert normalize_repr(repr(u'úniço∂e'))  == repr(u'úniço∂e')\ntest_51()\n\ndef test_53():\n    assert normalize_repr(repr(frozenset([1, 2, 3]))) == \"frozenset({1, 2, 3})\"\ntest_53()\n\ndef test_54():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  != normalize_repr(\"u'sdfgh' at 0x1234\")\ntest_54()\n\ndef test_55():\n    assert normalize_repr('''<__main__.A object at 0x7f681d36bd98>''') \\\n        == '''<__main__.A object>'''\ntest_55()\n\ndef test_56():\n    assert normalize_repr(repr((1, 2, 3))) == normalize_repr(repr((1, 2, 3)))\ntest_56()\n\ndef test_57():\n    assert normalize_repr(\"(NoneType at 0x7f23b4004060)\") == \"(NoneType)\"\ntest_57()\n\ndef test_58():\n    assert normalize_repr(repr(list(range(5)))) == '[0, 1, 2, 3, 4]'\ntest_58()\n\ndef test_59():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}') == '<__main__.A object>: {\"0x7f5dbe7bce10\": 0x7f5dbe7bce10}'\ntest_59()\n\ndef test_60():\n    assert normalize_repr(repr(frozenset(['Hello']))) == repr(frozenset(['Hello']))\ntest_60()\n\ndef test_63():\n    assert normalize_repr(repr(None)) == repr(None)\ntest_63()\n\ndef test_64():\n    assert normalize_repr(repr({'a': 1, 'b': 2})) == \"{'a': 1, 'b': 2}\"\ntest_64()\n\ndef test_65():\n    assert normalize_repr(repr(None))=='None'\ntest_65()\n\ndef test_66():\n    assert normalize_repr(repr(dict(a=1, b=2))) == \"{'a': 1, 'b': 2}\"\ntest_66()\n\ndef test_67():\n    assert normalize_repr(repr(\"abc\")) == repr(\"abc\")\ntest_67()\n\ndef test_68():\n    assert normalize_repr(\" 123\") == \" 123\"\ntest_68()\n\ndef test_69():\n    assert normalize_repr(repr({})) == '{}'\ntest_69()\n\ndef test_71():\n    assert normalize_repr(repr({1,2,3})) == '{1, 2, 3}'\ntest_71()\n\ndef test_72():\n    assert normalize_repr(repr(u'a')) == repr(u'a')\ntest_72()\n\ndef test_74():\n    assert normalize_repr(repr({}))=='{}'\ntest_74()\n\ndef test_75():\n    assert normalize_repr(repr(set())) == repr(set())\ntest_75()\n\ndef test_76():\n    assert normalize_repr(repr([1,2,3,4,5])     ) == repr([1,2,3,4,5])\ntest_76()\n\ndef test_78():\n    assert normalize_repr(repr(u'Hello World!')  ) == repr(u'Hello World!')\ntest_78()\n\ndef test_79():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo at 0x1293939\")\ntest_79()\n\ndef test_80():\n    assert normalize_repr(repr({1: 2}))   == repr({1: 2})\ntest_80()\n\ndef test_81():\n    assert normalize_repr(repr(u'Hello \\U0001f47e')) == repr(u'Hello \\U0001f47e')\ntest_81()\n\ndef test_83():\n    assert normalize_repr(repr('unicode'))   == repr('unicode')\ntest_83()\n\ndef test_84():\n    assert normalize_repr(\"123\") == \"123\"\ntest_84()\n\ndef test_86():\n    assert normalize_repr('<function f1 at 0x10245a670>') == normalize_repr('<function f1 at 0x20245a670>')\ntest_86()\n\ndef test_87():\n    assert normalize_repr('0x12345678') == '0x12345678'\ntest_87()\n\ndef test_88():\n    assert normalize_repr(repr(slice(1,2,3))) == 'slice(1, 2, 3)'\ntest_88()\n\ndef test_89():\n    assert normalize_repr('abcd at 0x12345678') == 'abcd'\ntest_89()\n\ndef test_90():\n    assert normalize_repr(repr({1:2})) == '{1: 2}'\ntest_90()\n\ndef test_92():\n    assert normalize_repr(repr([\"Hello\", \"World\"]) ) == repr([\"Hello\", \"World\"])\ntest_92()\n\ndef test_93():\n    assert normalize_repr(repr(list(range(2)))) == \"[0, 1]\"\ntest_93()\n\ndef test_94():\n    assert normalize_repr(repr('test')) == \"'test'\"\ntest_94()\n\ndef test_95():\n    assert normalize_repr(repr(dict(a=1,b=2,c=3))) == \\\n            \"{'a': 1, 'b': 2, 'c': 3}\"\ntest_95()\n\ndef test_96():\n    assert normalize_repr(repr(1)) == repr(1)\ntest_96()\n\ndef test_98():\n    assert normalize_repr(\n        \"<module_name.MyObj object at 0x10658a5d0>\"\n    ) == normalize_repr(\n        \"<module_name.MyObj object at 0x107f9a6d0>\"\n    )\ntest_98()\n\ndef test_99():\n    assert normalize_repr(repr(42))      == repr(42)\ntest_99()\n\ndef test_100():\n    assert \"Hi, I'm foo\" == normalize_repr(\"Hi, I'm foo\")\ntest_100()\n\ndef test_101():\n    assert normalize_repr(repr(()))=='()'\ntest_101()\n\ndef test_103():\n    assert normalize_repr('<_pytest.config.Config at 0x7f8d90646a58>') \\\n            == '<_pytest.config.Config>'\ntest_103()\n\ndef test_105():\n    assert normalize_repr(repr([]))       == repr([])\ntest_105()\n\ndef test_107():\n    assert normalize_repr(repr([])) == '[]'\ntest_107()\n\ndef test_108():\n    assert normalize_repr(repr({1: 2, 3: 4}.keys()))=='dict_keys([1, 3])'\ntest_108()\n\ndef test_109():\n    assert normalize_repr(repr({1, 2}))   == repr({1, 2})\ntest_109()\n\ndef test_110():\n    assert normalize_repr(repr(u'a')) != repr(u'a'+u' ')\ntest_110()\n\ndef test_111():\n    assert normalize_repr(repr({1:2,3:4})) == repr({1:2,3:4})\ntest_111()\n\ndef test_112():\n    assert normalize_repr(\"a foo <foo.bar object at 0x7f87740f9e10>\") == \"a foo <foo.bar object>\"\ntest_112()\n\ndef test_113():\n    assert normalize_repr(repr(None)) == 'None'\ntest_113()\n\ndef test_114():\n    assert normalize_repr(\"u'sdf' at 0x1234\")  == normalize_repr(\"u'sdf' at 0xabcd\")\ntest_114()\n\ndef test_115():\n    assert normalize_repr(repr([1, 2, 3])) == '[1, 2, 3]'\ntest_115()\n\ndef test_116():\n    assert normalize_repr(\"test() at 0x12345\") == \"test()\"\ntest_116()\n\ndef test_118():\n    assert normalize_repr(repr(frozenset())) == repr(frozenset())\ntest_118()\n\ndef test_119():\n    assert normalize_repr(repr({0, 1})) == \"{0, 1}\"\ntest_119()\n\ndef test_120():\n    assert normalize_repr(repr([0, 1, 2]))   == repr([0, 1, 2])\ntest_120()\n\ndef test_121():\n    assert normalize_repr(\n        \"<pytest.fixtures.FixtureRequest object at 0x108283448>\"\n    ) == \"<pytest.fixtures.FixtureRequest object>\"\ntest_121()\n\ndef test_122():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>') == '<__main__.A object>'\ntest_122()\n\ndef test_123():\n    assert normalize_repr(repr(1.0)) == repr(1.0)\ntest_123()\n\ndef test_124():\n    assert normalize_repr(repr(\"abc\"))==\"'abc'\"\ntest_124()\n\ndef test_125():\n    assert normalize_repr(repr(set(['Hello', 'World']))) == repr(set(['Hello', 'World']))\ntest_125()\n\ndef test_126():\n    assert normalize_repr(repr('Hello World!')  ) == repr('Hello World!')\ntest_126()\n\ndef test_127():\n    assert normalize_repr(\"NoneType at 0x7f23b4004060\") == \"NoneType\"\ntest_127()\n\ndef test_128():\n    assert normalize_repr(repr({3:2})) == \\\n            \"{3: 2}\"\ntest_128()\n\ndef test_129():\n    assert normalize_repr(\"'foo'\") == \"'foo'\"\ntest_129()\n\ndef test_130():\n    assert normalize_repr(repr(set()))=='set()'\ntest_130()\n\ndef test_131():\n    assert normalize_repr(\"a.b.c at 0x123456789\") == \"a.b.c\"\ntest_131()\n\ndef test_132():\n    assert normalize_repr(repr({1: 2, 3: 4}.values()))=='dict_values([2, 4])'\ntest_132()\n\ndef test_133():\n    assert normalize_repr('abcd') == 'abcd'\ntest_133()\n\ndef test_134():\n    assert normalize_repr('<unittest.case._SubTestCase object at 0x106597788>') \\\n            == '<unittest.case._SubTestCase object>'\ntest_134()\n\ndef test_135():\n    assert normalize_repr('<__main__.A object at 0x7f5dbe7bce10>: 0x7f5dbe7bce10') == '<__main__.A object>: 0x7f5dbe7bce10'\ntest_135()\n\ndef test_136():\n    assert normalize_repr(repr('foobar')) == repr('foobar')\ntest_136()\n\ndef test_138():\n    assert normalize_repr(repr(None))     == repr(None)\ntest_138()\n\ndef test_139():\n    assert normalize_repr(repr((1,2,3)))=='(1, 2, 3)'\ntest_139()\n\ndef test_140():\n    assert normalize_repr(repr({1,2,3})) == repr({1,2,3})\ntest_140()\n\ndef test_142():\n    assert normalize_repr(repr(u'\\U0001f47e')) == repr(u'\\U0001f47e')\ntest_142()\n\ndef test_143():\n    assert normalize_repr(repr([]))=='[]'\ntest_143()\n\ndef test_144():\n    assert normalize_repr(repr(u'Hello')) == repr(u'Hello')\ntest_144()\n\ndef test_145():\n    assert normalize_repr(repr({1, 2, 3})) == \"{1, 2, 3}\"\ntest_145()\n\ndef test_146():\n    assert normalize_repr(repr((u\"hi\", 2))) == \"('hi', 2)\"\ntest_146()\n\ndef test_148():\n    assert normalize_repr(repr({1, 2, 3})) == repr({1, 2, 3})\ntest_148()\n\ndef test_149():\n    assert normalize_repr(repr({'Hello'})) == repr({'Hello'})\ntest_149()\n\ndef test_150():\n    assert normalize_repr('<function f1 at 0x10245a670>') != '<function f1 at 0x10245a670>'\ntest_150()\n\ndef test_151():\n    assert normalize_repr(\"'foo' at 0x7eeacd2b57d0\") == \"'foo'\"\ntest_151()\n\ndef test_152():\n    assert normalize_repr(repr('Hello'))  == repr('Hello')\ntest_152()\n\ndef test_153():\n    assert normalize_repr(repr(5)) == '5'\ntest_153()\n\ndef test_154():\n    assert normalize_repr(repr({'a', 'b', 'c'})) == \"{'a', 'b', 'c'}\"\ntest_154()\n\ndef test_155():\n    assert normalize_repr(repr({'foo': {'bar'}})) == \"{'foo': {'bar'}}\"\ntest_155()\n\ndef test_156():\n    assert normalize_repr(repr(range(3))) == 'range(0, 3)'\ntest_156()\n\ndef test_157():\n    assert normalize_repr('<pytest.config.Config object at 0x106587788>') \\\n            == '<pytest.config.Config object>'\ntest_157()\n\ndef test_158():\n    assert normalize_repr(repr('hello'))  == \"'hello'\"\ntest_158()\n\ndef test_159():\n    assert normalize_repr('<function f1 at 0x10245a670>') == '<function f1>'\ntest_159()\n\ndef test_160():\n    assert normalize_repr(repr([1,2,3]))=='[1, 2, 3]'\ntest_160()\n\ndef test_161():\n    assert normalize_repr(repr(7)) == '7'\ntest_161()\n\ndef test_162():\n    assert normalize_repr(repr({1, 2}))       == repr({1, 2})\ntest_162()\n\ndef test_163():\n    assert normalize_repr('abcd at 0x1234567890') == 'abcd'\ntest_163()\n\ndef test_164():\n    assert normalize_repr(repr({123: 456}))=='{123: 456}'\ntest_164()\n\ndef test_165():\n    assert normalize_repr(repr((1,2,3))) == '(1, 2, 3)'\ntest_165()\n\ndef test_2():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"u'sdf'\") == output\ntest_2()\n\ndef test_10():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 0x2222\") == output\ntest_10()\n\ndef test_16():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"'a' object at 0x122f810\") == output\ntest_16()\n\ndef test_18():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.values())) == output\ntest_18()\n\ndef test_21():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set([1,2,3]))) == output\ntest_21()\n\ndef test_38():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2, 3:4})) == output\ntest_38()\n\ndef test_52():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({1:2})) == output\ntest_52()\n\ndef test_61():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(set(['hi', 'hello', 'bye']))) == output\ntest_61()\n\ndef test_62():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=[], c=3))) == output\ntest_62()\n\ndef test_70():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.items())) == output\ntest_70()\n\ndef test_73():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"\"\"\n    <__main__.MyObj object at 0x10c707050>\"\"\" ) == output\ntest_73()\n\ndef test_77():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_77\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(frozenset([1,2,3]))) == output\ntest_77()\n\ndef test_82():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({'foo','bar'})) == output\ntest_82()\n\ndef test_85():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b={}, c=3))) == output\ntest_85()\n\ndef test_91():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr({}.keys())) == output\ntest_91()\n\ndef test_97():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(np.array(['hi']))) == output\ntest_97()\n\ndef test_102():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(\"abc\")) == output\ntest_102()\n\ndef test_104():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\n        \"set(['i', 's', 'm', 'h', 'u', 't', 'e', 'r'])\") == output\ntest_104()\n\ndef test_106():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(dict(a=1, b=2, c=3))) == output\ntest_106()\n\ndef test_137():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"object at 0x1313131 \\n at 0x2222\") == output\ntest_137()\n\ndef test_141():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_141\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(repr(object())) == output\ntest_141()\n\ndef test_147():\n    with open(\"/output/test-apps+PySnooper/test_output/pysnooper+utils/normalize_repr/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert normalize_repr(\"[1, 2, 3, 4, 5]\") == output\ntest_147()\n\n\n"]}
