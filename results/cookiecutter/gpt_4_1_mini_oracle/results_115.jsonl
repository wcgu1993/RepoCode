{"task_id": 115, "prediction_id": 0, "generation": "import os\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG, USER_CONFIG_PATH\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        return DEFAULT_CONFIG\n\n    # If a config file path was provided explicitly and is different from default,\n    # load config from that file.\n    if config_file and config_file != USER_CONFIG_PATH:\n        return get_config(config_file)\n\n    # Otherwise check environment variable\n    env_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_path is not None:\n        # Load config from the env variable path; raise if invalid\n        return get_config(env_path)\n\n    # Finally, try the default config path; if missing, fallback to default.\n    try:\n        return get_config(USER_CONFIG_PATH)\n    except ConfigDoesNotExistException:\n        return DEFAULT_CONFIG", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 1, "generation": "import os\n\nfrom cookiecutter.config import get_config\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        # Return the default config dict as is, no loading from any file\n        from cookiecutter.config import DEFAULT_CONFIG\n        # deepcopy not strictly needed here because caller should NOT mutate,\n        # but safer to provide a copy\n        import copy\n        return copy.deepcopy(DEFAULT_CONFIG)\n\n    # Default config file path (user config path)\n    default_path = os.path.expanduser('~/.cookiecutterrc')\n\n    # If a custom config_file is provided and is different from default, use it\n    if config_file and os.path.abspath(config_file) != os.path.abspath(default_path):\n        return get_config(config_file)\n\n    # If no config_file or config_file equals default_path, check COOKIECUTTER_CONFIG\n    env_path = os.getenv('COOKIECUTTER_CONFIG')\n    if env_path:\n        # Environment variable is set, must use this path (raise on invalid)\n        return get_config(env_path)\n\n    # If env var not set, try default config path if it exists\n    if os.path.exists(default_path):\n        return get_config(default_path)\n\n    # Fallback: return default config dict\n    from cookiecutter.config import DEFAULT_CONFIG\n    import copy\n    return copy.deepcopy(DEFAULT_CONFIG)", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 2, "generation": "import os\n\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG, USER_CONFIG_PATH\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n\n    if default_config:\n        # Return a copy of the default config so caller cannot mutate global DEFAULT_CONFIG\n        return DEFAULT_CONFIG.copy()\n\n    if config_file:\n        # If given config_file differs from the default, load from it\n        config_file_path = os.path.expanduser(os.path.expandvars(config_file))\n        return get_config(config_file_path)\n\n    # Check environment variable COOKIECUTTER_CONFIG\n    env_config_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_config_path:\n        env_config_path = os.path.expanduser(os.path.expandvars(env_config_path))\n        return get_config(env_config_path)\n\n    # Fall back to default config file path if exists\n    if os.path.exists(USER_CONFIG_PATH):\n        return get_config(USER_CONFIG_PATH)\n\n    # Finally return default config dict if no config file found\n    return DEFAULT_CONFIG.copy()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 241, in <module>\n  File \"<string>\", line 240, in test_45\n  File \"<string>\", line 134, in get_user_config\n  File \"/input/test-apps/cookiecutter/cookiecutter/config.py\", line 58, in get_config\n    raise ConfigDoesNotExistException(\ncookiecutter.exceptions.ConfigDoesNotExistException: Config file /root/.cookiecutterrc does not exist.\n", "passed": false}
{"task_id": 115, "prediction_id": 3, "generation": "import os\n\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG, USER_CONFIG_PATH\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        return DEFAULT_CONFIG\n\n    # If a config_file path is explicitly given (and is different from default),\n    # load from there.\n    if config_file is not None and config_file != USER_CONFIG_PATH:\n        return get_config(config_file)\n\n    # Check environment variable\n    env_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_path:\n        return get_config(env_path)\n\n    # If no env var, try default user config path, if it exists\n    if os.path.exists(USER_CONFIG_PATH):\n        return get_config(USER_CONFIG_PATH)\n\n    # Finally, fallback to default config dict\n    return DEFAULT_CONFIG", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 4, "generation": "import os\n\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG, USER_CONFIG_PATH\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        return DEFAULT_CONFIG\n\n    # If a specific config_file path is provided and different from default, use it\n    if config_file and config_file != USER_CONFIG_PATH:\n        return get_config(config_file)\n\n    # Otherwise, check the environment variable COOKIECUTTER_CONFIG\n    env_path = os.getenv('COOKIECUTTER_CONFIG')\n    if env_path:\n        return get_config(env_path)\n\n    # If env var not set, try the default config file path\n    try:\n        return get_config(USER_CONFIG_PATH)\n    except ConfigDoesNotExistException:\n        # Fall back to default config if default config file doesn't exist\n        return DEFAULT_CONFIG", "message": "passed", "passed": true}
