{"task_id": 115, "prediction_id": 0, "generation": "import os\n\nfrom cookiecutter.config import (\n    DEFAULT_CONFIG,\n    get_config,\n    _expand_path,\n)\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        # Return a copy of DEFAULT_CONFIG with expanded paths\n        config = DEFAULT_CONFIG.copy()\n        config['replay_dir'] = _expand_path(config['replay_dir'])\n        config['cookiecutters_dir'] = _expand_path(config['cookiecutters_dir'])\n        return config\n\n    # Determine the config file path to use\n    if config_file and config_file != USER_CONFIG_PATH:\n        # If config_file is provided and not the default, load it directly\n        config_path = config_file\n    else:\n        # Check environment variable\n        env_config_path = os.environ.get('COOKIECUTTER_CONFIG')\n        if env_config_path:\n            config_path = env_config_path\n        else:\n            # Use default USER_CONFIG_PATH if it exists\n            if os.path.exists(USER_CONFIG_PATH):\n                config_path = USER_CONFIG_PATH\n            else:\n                # Fall back to default config\n                config = DEFAULT_CONFIG.copy()\n                config['replay_dir'] = _expand_path(config['replay_dir'])\n                config['cookiecutters_dir'] = _expand_path(config['cookiecutters_dir'])\n                return config\n\n    # Load config from determined config_path\n    return get_config(config_path)", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 1, "generation": "import os\n\nfrom cookiecutter.config import DEFAULT_CONFIG, get_config\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        return DEFAULT_CONFIG.copy()\n\n    # Determine which config file to load\n    if config_file is not None and config_file != os.path.expanduser('~/.cookiecutterrc'):\n        # If a different config_file is given, load from it (error if invalid)\n        return get_config(config_file)\n\n    # Otherwise try environment variable\n    env_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_path:\n        return get_config(env_path)\n\n    # Try default config path (this can raise if it doesn't exist)\n    try:\n        return get_config(os.path.expanduser('~/.cookiecutterrc'))\n    except Exception:\n        # Fall back to defaults if default config file does not exist or invalid\n        return DEFAULT_CONFIG.copy()", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 2, "generation": "import os\n\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG, USER_CONFIG_PATH\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        # Return a copy of DEFAULT_CONFIG with expanded paths\n        config = DEFAULT_CONFIG.copy()\n        # Expand paths for keys that are paths\n        config['replay_dir'] = os.path.expandvars(os.path.expanduser(config['replay_dir']))\n        config['cookiecutters_dir'] = os.path.expandvars(os.path.expanduser(config['cookiecutters_dir']))\n        return config\n\n    if config_file and config_file != USER_CONFIG_PATH:\n        # Load the user config from the given file path (raises if invalid)\n        return get_config(config_file)\n\n    env_config_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_config_path:\n        # Load config from env var path (raises if invalid)\n        return get_config(env_config_path)\n\n    # Try the default user config path if exists\n    if os.path.exists(USER_CONFIG_PATH):\n        return get_config(USER_CONFIG_PATH)\n\n    # Fall back to default config\n    config = DEFAULT_CONFIG.copy()\n    config['replay_dir'] = os.path.expandvars(os.path.expanduser(config['replay_dir']))\n    config['cookiecutters_dir'] = os.path.expandvars(os.path.expanduser(config['cookiecutters_dir']))\n    return config", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 3, "generation": "import os\n\nfrom cookiecutter.config import get_config, DEFAULT_CONFIG\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        # Return the default config dict directly\n        # Expand paths as done in get_config to remain consistent\n        config_dict = DEFAULT_CONFIG.copy()\n        # Expand paths for 'replay_dir' and 'cookiecutters_dir'\n        config_dict['replay_dir'] = os.path.expandvars(os.path.expanduser(config_dict['replay_dir']))\n        config_dict['cookiecutters_dir'] = os.path.expandvars(os.path.expanduser(config_dict['cookiecutters_dir']))\n        return config_dict\n\n    # If a custom config_file path is given and is not the default user config path, load it\n    if config_file is not None and os.path.abspath(config_file) != os.path.abspath(os.path.expanduser('~/.cookiecutterrc')):\n        return get_config(config_file)\n\n    # Check environment variable COOKIECUTTER_CONFIG\n    env_config_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_config_path:\n        return get_config(env_config_path)\n\n    # Try default config file path\n    try:\n        return get_config(os.path.expanduser('~/.cookiecutterrc'))\n    except ConfigDoesNotExistException:\n        # If not found, return default config\n        config_dict = DEFAULT_CONFIG.copy()\n        config_dict['replay_dir'] = os.path.expandvars(os.path.expanduser(config_dict['replay_dir']))\n        config_dict['cookiecutters_dir'] = os.path.expandvars(os.path.expanduser(config_dict['cookiecutters_dir']))\n        return config_dict", "message": "passed", "passed": true}
{"task_id": 115, "prediction_id": 4, "generation": "import os\n\nfrom cookiecutter.config import (\n    DEFAULT_CONFIG,\n    USER_CONFIG_PATH,\n    get_config,\n)\nfrom cookiecutter.exceptions import ConfigDoesNotExistException\n\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n    if default_config:\n        return DEFAULT_CONFIG\n\n    # If a config file path is explicitly passed and it's different from default\n    if config_file and os.path.abspath(config_file) != os.path.abspath(USER_CONFIG_PATH):\n        return get_config(config_file)\n\n    # Look for environment variable COOKIECUTTER_CONFIG\n    env_config_path = os.environ.get('COOKIECUTTER_CONFIG')\n    if env_config_path:\n        env_config_path = os.path.expandvars(os.path.expanduser(env_config_path))\n        return get_config(env_config_path)\n\n    # Try default config file path if it exists\n    if os.path.exists(USER_CONFIG_PATH):\n        return get_config(USER_CONFIG_PATH)\n\n    # Fallback to returning default config\n    return DEFAULT_CONFIG", "message": "passed", "passed": true}
