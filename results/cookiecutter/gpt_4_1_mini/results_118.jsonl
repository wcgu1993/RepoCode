{"task_id": 118, "prediction_id": 0, "generation": "import os\nfrom zipfile import ZipFile, BadZipFile\n\ndef is_zip_file(value):\n    \"\"\"Return True if value is a zip file.\"\"\"\n    if not os.path.isfile(value):\n        return False\n\n    try:\n        with ZipFile(value, 'r') as zip_file:\n            # Try to read the namelist to verify it's a valid zip archive\n            zip_file.namelist()\n        return True\n    except (BadZipFile, OSError):\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 178, in <module>\n  File \"<string>\", line 177, in test_2\nAssertionError\n", "passed": false}
{"task_id": 118, "prediction_id": 1, "generation": "import os\nimport zipfile\n\n\ndef is_zip_file(value):\n    \"\"\"Return True if value is a zip file.\"\"\"\n    if not os.path.isfile(value):\n        return False\n    try:\n        with zipfile.ZipFile(value, 'r') as zip_file:\n            # If we can list the contents, it's a valid zip file\n            zip_file.namelist()\n        return True\n    except (zipfile.BadZipFile, zipfile.LargeZipFile):\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 178, in <module>\n  File \"<string>\", line 177, in test_2\nAssertionError\n", "passed": false}
{"task_id": 118, "prediction_id": 2, "generation": "import os\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef is_zip_file(value):\n    \"\"\"Return True if value is a zip file.\"\"\"\n    if not os.path.isfile(value):\n        return False\n    try:\n        with ZipFile(value, 'r') as zip_file:\n            # If namelist() returns a list without error, it's a zip file.\n            # Check that the zip file contains at least one file.\n            if len(zip_file.namelist()) == 0:\n                return False\n            return True\n    except BadZipFile:\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 180, in <module>\n  File \"<string>\", line 179, in test_2\nAssertionError\n", "passed": false}
{"task_id": 118, "prediction_id": 3, "generation": "import os\nimport zipfile\n\ndef is_zip_file(value):\n    \"\"\"Return True if value is a zip file.\"\"\"\n    if not os.path.isfile(value):\n        return False\n    try:\n        with zipfile.ZipFile(value, 'r') as zip_file:\n            # If we can open it as a zip file, it is a zip file\n            return True\n    except (zipfile.BadZipFile, zipfile.LargeZipFile):\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 176, in <module>\n  File \"<string>\", line 175, in test_2\nAssertionError\n", "passed": false}
{"task_id": 118, "prediction_id": 4, "generation": "import os\n\ndef is_zip_file(value):\n    \"\"\"Return True if value is a zip file.\"\"\"\n    if not isinstance(value, str):\n        return False\n\n    # Expand user home and get absolute path\n    path = os.path.expanduser(value)\n    path = os.path.abspath(path)\n\n    # Check if it's a local file path and ends with .zip (case insensitive)\n    if os.path.isfile(path):\n        return path.lower().endswith('.zip')\n\n    # If not a local file, just check if string ends with .zip (common for URLs)\n    return value.lower().endswith('.zip')", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 172, in <module>\n  File \"<string>\", line 171, in test_0\n  File \"<string>\", line 57, in is_zip_file\n  File \"/usr/local/lib/python3.10/posixpath.py\", line 383, in abspath\n    cwd = os.getcwd()\nTypeError: 'NoneType' object is not callable\n", "passed": false}
