{"task_id": 259, "prediction_id": 0, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\")\n    # Using _XHTML_ESCAPE_RE and _XHTML_ESCAPE_DICT from the file context\n    # to replace special characters with their escaped equivalents.\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 1, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if not isinstance(value, str):\n        # Assume bytes; decode as utf-8\n        value = value.decode(\"utf-8\")\n\n    # Use the compiled regex and dict to replace special characters\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 2, "generation": "from typing import Union\n\ndef xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode('utf-8')\n    # Use _XHTML_ESCAPE_RE and _XHTML_ESCAPE_DICT from file content to replace characters\n    def replace(match):\n        return _XHTML_ESCAPE_DICT[match.group(0)]\n\n    return _XHTML_ESCAPE_RE.sub(replace, value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 3, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\")\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 4, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\")\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
