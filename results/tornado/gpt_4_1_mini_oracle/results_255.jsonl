{"task_id": 255, "prediction_id": 0, "generation": "import socket\nfrom typing import Callable, Any\nfrom tornado.ioloop import IOLoop\n\ndef add_accept_handler(\n    sock: socket.socket, callback: Callable[[socket.socket, Any], None]\n) -> Callable[[], None]:\n    \"\"\"Adds an `.IOLoop` event handler to accept new connections on ``sock``.\n\n    When a connection is accepted, ``callback(connection, address)`` will\n    be run (``connection`` is a socket object, and ``address`` is the\n    address of the other end of the connection).  Note that this signature\n    is different from the ``callback(fd, events)`` signature used for\n    `.IOLoop` handlers.\n\n    A callable is returned which, when called, will remove the `.IOLoop`\n    event handler and stop processing further incoming connections.\n\n    .. versionchanged:: 5.0\n    The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n\n    .. versionchanged:: 5.0\n    A callable is returned (``None`` was returned before).\n    \"\"\"\n    io_loop = IOLoop.current()\n\n    def accept_handler(fd, events):\n        try:\n            # Accept the connection\n            connection, address = sock.accept()\n            # Set the new socket to non-blocking\n            connection.setblocking(False)\n        except (BlockingIOError, InterruptedError):\n            # No connections are ready to be accepted\n            return\n        except Exception:\n            # Other exceptions should not disrupt the event loop\n            return\n        # Invoke the user callback with the connection socket and address\n        callback(connection, address)\n\n    io_loop.add_handler(sock.fileno(), accept_handler, io_loop.READ)\n\n    def remove_handler():\n        io_loop.remove_handler(sock.fileno())\n\n    return remove_handler", "message": "passed", "passed": true}
{"task_id": 255, "prediction_id": 1, "generation": "import socket\nfrom typing import Callable, Any\nfrom tornado.ioloop import IOLoop\n\n\ndef add_accept_handler(\n    sock: socket.socket, callback: Callable[[socket.socket, Any], None]\n) -> Callable[[], None]:\n    \"\"\"Adds an `.IOLoop` event handler to accept new connections on ``sock``.\n\n    When a connection is accepted, ``callback(connection, address)`` will\n    be run (``connection`` is a socket object, and ``address`` is the\n    address of the other end of the connection).  Note that this signature\n    is different from the ``callback(fd, events)`` signature used for\n    `.IOLoop` handlers.\n\n    A callable is returned which, when called, will remove the `.IOLoop`\n    event handler and stop processing further incoming connections.\n\n    .. versionchanged:: 5.0\n    The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n\n    .. versionchanged:: 5.0\n    A callable is returned (``None`` was returned before).\n    \"\"\"\n    # Get the current IOLoop for the thread, or create one if missing\n    io_loop = IOLoop.current()\n\n    def accept_handler(fd: int, events: int) -> None:\n        # Try to accept new connections until none are left (non-blocking)\n        while True:\n            try:\n                connection, addr = sock.accept()\n                # Set the accepted socket to non-blocking as recommended by Tornado's design\n                connection.setblocking(False)\n            except BlockingIOError:\n                # No more connections to accept at this time\n                break\n            except OSError:\n                # Some other error accepting the socket, just break to avoid tight loop\n                break\n            else:\n                callback(connection, addr)\n\n    # Add the socket fd to the IOLoop, listening for read events (new connections)\n    io_loop.add_handler(sock.fileno(), accept_handler, io_loop.READ)\n\n    def remove_handler() -> None:\n        io_loop.remove_handler(sock.fileno())\n\n    return remove_handler", "message": "passed", "passed": true}
{"task_id": 255, "prediction_id": 2, "generation": "import socket\nfrom typing import Callable, Any\nfrom tornado.ioloop import IOLoop\n\ndef add_accept_handler(\n    sock: socket.socket, callback: Callable[[socket.socket, Any], None]\n) -> Callable[[], None]:\n    \"\"\"Adds an `.IOLoop` event handler to accept new connections on ``sock``.\n\n    When a connection is accepted, ``callback(connection, address)`` will\n    be run (``connection`` is a socket object, and ``address`` is the\n    address of the other end of the connection).  Note that this signature\n    is different from the ``callback(fd, events)`` signature used for\n    `.IOLoop` handlers.\n\n    A callable is returned which, when called, will remove the `.IOLoop`\n    event handler and stop processing further incoming connections.\n\n    .. versionchanged:: 5.0\n    The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n\n    .. versionchanged:: 5.0\n    A callable is returned (``None`` was returned before).\n    \"\"\"\n    io_loop = IOLoop.current()\n\n    def accept_handler(fd: int, events: int) -> None:\n        while True:\n            try:\n                connection, address = sock.accept()\n            except (BlockingIOError, InterruptedError):\n                # No more connections to accept at the moment\n                return\n            except Exception:\n                # Other exceptions are unexpected and can be raised\n                raise\n            callback(connection, address)\n\n    io_loop.add_handler(sock.fileno(), accept_handler, IOLoop.READ)\n\n    def remove_handler() -> None:\n        io_loop.remove_handler(sock.fileno())\n\n    return remove_handler", "message": "passed", "passed": true}
{"task_id": 255, "prediction_id": 3, "generation": "import socket\nfrom typing import Callable, Any\nfrom tornado.ioloop import IOLoop\n\n\ndef add_accept_handler(\n    sock: socket.socket, callback: Callable[[socket.socket, Any], None]\n) -> Callable[[], None]:\n    \"\"\"Adds an `.IOLoop` event handler to accept new connections on ``sock``.\n\n    When a connection is accepted, ``callback(connection, address)`` will\n    be run (``connection`` is a socket object, and ``address`` is the\n    address of the other end of the connection).  Note that this signature\n    is different from the ``callback(fd, events)`` signature used for\n    `.IOLoop` handlers.\n\n    A callable is returned which, when called, will remove the `.IOLoop`\n    event handler and stop processing further incoming connections.\n\n    .. versionchanged:: 5.0\n    The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n\n    .. versionchanged:: 5.0\n    A callable is returned (``None`` was returned before).\n    \"\"\"\n\n    io_loop = IOLoop.current()\n\n    def accept_handler(fd, events):\n        try:\n            connection, address = sock.accept()\n        except (BlockingIOError, InterruptedError):\n            # No connections are ready or interrupted system call, ignore.\n            return\n        except Exception:\n            # Other exceptions are unexpected and should be raised.\n            raise\n        callback(connection, address)\n\n    io_loop.add_handler(sock.fileno(), accept_handler, io_loop.READ)\n\n    def remove_handler():\n        io_loop.remove_handler(sock.fileno())\n\n    return remove_handler", "message": "passed", "passed": true}
{"task_id": 255, "prediction_id": 4, "generation": "import socket\nfrom typing import Callable, Any\nfrom tornado.ioloop import IOLoop\n\n\ndef add_accept_handler(\n    sock: socket.socket, callback: Callable[[socket.socket, Any], None]\n) -> Callable[[], None]:\n    \"\"\"Adds an `.IOLoop` event handler to accept new connections on ``sock``.\n\n    When a connection is accepted, ``callback(connection, address)`` will\n    be run (``connection`` is a socket object, and ``address`` is the\n    address of the other end of the connection).  Note that this signature\n    is different from the ``callback(fd, events)`` signature used for\n    `.IOLoop` handlers.\n\n    A callable is returned which, when called, will remove the `.IOLoop`\n    event handler and stop processing further incoming connections.\n\n    .. versionchanged:: 5.0\n    The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n\n    .. versionchanged:: 5.0\n    A callable is returned (``None`` was returned before).\n    \"\"\"\n    io_loop = IOLoop.current()\n\n    def accept_handler(fd, events):\n        try:\n            connection, address = sock.accept()\n        except (BlockingIOError, InterruptedError):\n            # no connection ready\n            return\n        except socket.error as e:\n            # EWOULDBLOCK / EAGAIN means no connection ready\n            # The errno_from_exception function is in tornado.util,\n            # but since no import from code context allowed, use errno directly here\n            if e.errno in (socket.errno.EWOULDBLOCK, socket.errno.EAGAIN):\n                return\n            raise\n        callback(connection, address)\n\n    io_loop.add_handler(sock.fileno(), accept_handler, io_loop.READ)\n\n    def remove_handler():\n        try:\n            io_loop.remove_handler(sock.fileno())\n        except Exception:\n            # Defensive: ignore if handler was already removed or fd closed\n            pass\n\n    return remove_handler", "message": "passed", "passed": true}
