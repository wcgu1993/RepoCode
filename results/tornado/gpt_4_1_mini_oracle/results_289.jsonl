{"task_id": 289, "prediction_id": 0, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        # Return text unmodified\n        return text\n    elif mode == \"single\":\n        # Collapse runs of spaces/tabs/etc except newlines, preserving newlines.\n        # We replace runs of whitespace that do not include \\n with a single space.\n        def repl(match):\n            s = match.group(0)\n            if '\\n' in s:\n                return s\n            else:\n                return ' '\n        # Using regex to replace runs of spaces/tabs (not including newlines) with a space\n        # We do this by matching runs of whitespace that don't include \\n.\n        # So we match runs of whitespace excluding \\n: [^\\S\\n]+ means whitespace except \\n.\n        return re.sub(r'[ \\t\\r\\f\\v]+', ' ', text)\n    elif mode == \"oneline\":\n        # Collapse all runs of whitespace including newlines into single space\n        return re.sub(r'\\s+', ' ', text)\n    else:\n        # Unrecognized mode, fallback to returning text unmodified\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 904, in <module>\n  File \"<string>\", line 903, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 1, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        # Return the text unmodified\n        return text\n    elif mode == \"single\":\n        # Collapse consecutive whitespace (except newline) to a single space\n        # But preserve newlines as is.\n        # Approach:\n        # - Replace runs of spaces/tabs (but not newlines) with a single space\n        # - Leave newlines alone\n        # We can use a regex to do this:\n        # Match any run of whitespace characters that is not newline (e.g. spaces, tabs)\n        # i.e. use a pattern to match runs of spaces/tabs.\n        \n        # Use a function to preserve newlines while collapsing other whitespace runs\n        # For safety, split by newlines, collapse spaces in each line, then join back with newlines\n        \n        lines = text.split('\\n')\n        collapsed_lines = [re.sub(r'[ \\t]+', ' ', line) for line in lines]\n        return '\\n'.join(collapsed_lines)\n    \n    elif mode == \"oneline\":\n        # Collapse all runs of whitespace (including newlines) into a single space\n        # So replace any run of whitespace chars (\\s+) with a single space\n        return re.sub(r'\\s+', ' ', text)\n    \n    else:\n        # Unknown mode; for safety, return text unmodified (or raise error?)\n        # The docstring does not specify error behavior, so let's return text unmodified\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 911, in <module>\n  File \"<string>\", line 910, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 2, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n      character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n      character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        return text\n    elif mode == \"single\":\n        # Replace runs of spaces and tabs (\\t, \\r) with a single space, but preserve newlines.\n        # Idea: collapse runs of spaces and tabs into a single space, but keep \\n alone.\n        # So, replace runs of [ \\t\\r\\f\\v]+ with a single space, leave newlines untouched.\n        # \\s includes \\n, so cannot use \\s directly.\n        # We'll use a pattern that matches runs of whitespace except newlines.\n        return re.sub(r\"[ \\t\\r\\f\\v]+\", \" \", text)\n    elif mode == \"oneline\":\n        # Remove newlines and collapse all whitespace runs into a single space.\n        # \\s includes newlines, so replace runs of \\s+ with a single space.\n        return re.sub(r\"\\s+\", \" \", text)\n    else:\n        # If unknown mode, raise error or return text as is.\n        # The docstring does not say anything about invalid modes,\n        # so best to raise a ValueError.\n        raise ValueError(f\"Unknown whitespace mode: {mode}\")", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 900, in <module>\n  File \"<string>\", line 899, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 3, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        return text\n    elif mode == \"single\":\n        # Replace runs of space and tab but not newline with a single space\n        # Preserve newlines by splitting on newlines and collapsing spaces in each line\n        lines = text.split('\\n')\n        collapsed_lines = [re.sub(r'[ \\t]+', ' ', line) for line in lines]\n        return '\\n'.join(collapsed_lines)\n    elif mode == \"oneline\":\n        # Replace all whitespace (spaces, tabs, newlines, etc.) with single space\n        return re.sub(r'\\s+', ' ', text)\n    else:\n        # If an unknown mode, just return text unmodified for safety\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 896, in <module>\n  File \"<string>\", line 895, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 4, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n      character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n      character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        # Return text unchanged\n        return text\n    elif mode == \"single\":\n        # Replace runs of spaces/tabs with a single space, but preserve newlines.\n        # That means: for each line separately, replace runs of whitespace \n        # excluding newlines by a single space.\n        # Newlines remain untouched.\n        def collapse_line(line):\n            # Replace runs of whitespace (spaces, tabs, etc.) with single space\n            return re.sub(r\"[ \\t\\r\\f\\v]+\", \" \", line)\n        # Process line by line, preserving newlines\n        lines = text.split(\"\\n\")\n        lines = [collapse_line(line) for line in lines]\n        return \"\\n\".join(lines)\n    elif mode == \"oneline\":\n        # Collapse all runs of any whitespace (including newlines) into a single space\n        return re.sub(r\"\\s+\", \" \", text).strip()\n    else:\n        # Unrecognized mode: fallback to all or raise?\n        # The docstring does not specify error behavior, so we assume return unmodified.\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 904, in <module>\n  File \"<string>\", line 903, in test_3\nAssertionError\n", "passed": false}
