{"task_id": 248, "prediction_id": 0, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Set SO_REUSEPORT if requested and available\n    if reuse_port:\n        # Not all platforms support SO_REUSEPORT\n        if hasattr(socket, \"SO_REUSEPORT\"):\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((\"127.0.0.1\", 0))\n    port = sock.getsockname()[1]\n    return sock, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 1, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    if reuse_port:\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    sock.bind((\"127.0.0.1\", 0))\n    port = sock.getsockname()[1]\n    return sock, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 2, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    if reuse_port:\n        # SO_REUSEPORT may not be available on all systems\n        try:\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        except AttributeError:\n            pass  # option not available, ignore\n        except OSError:\n            pass  # option not supported, ignore\n\n    sock.bind((\"127.0.0.1\", 0))\n    port = sock.getsockname()[1]\n    return sock, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 3, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Set SO_REUSEPORT if requested and available\n    if reuse_port and hasattr(socket, \"SO_REUSEPORT\"):\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    s.bind((\"127.0.0.1\", 0))\n    port = s.getsockname()[1]\n    return s, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 4, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Set SO_REUSEPORT if requested and available on the platform\n    if reuse_port and hasattr(socket, \"SO_REUSEPORT\"):\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    sock.bind((\"127.0.0.1\", 0))\n    port = sock.getsockname()[1]\n    return sock, port", "message": "passed", "passed": true}
