{"task_id": 260, "prediction_id": 0, "generation": "import re\nfrom typing import Union\nfrom tornado.escape import _convert_entity\n\n# Pattern to find HTML/numeric character references for unescaping\n_UNESCAPE_RE = re.compile(r\"&(#?)(\\w+?);\")\n\ndef xhtml_unescape(value: Union[str, bytes]) -> str:\n    \"\"\"Un-escapes an XML-escaped string.\"\"\"\n\n    # Convert bytes to string if needed\n    if isinstance(value, bytes):\n        value = value.decode('utf-8', errors='replace')\n\n    # Use the regex and the provided _convert_entity to replace entities\n    return _UNESCAPE_RE.sub(_convert_entity, value)", "message": "passed", "passed": true}
{"task_id": 260, "prediction_id": 1, "generation": "import re\nimport typing\nfrom typing import Union\n\n_HTML_UNICODE_MAP = {name: chr(codepoint) for name, codepoint in html.entities.name2codepoint.items()}\n\ndef _convert_entity(m: typing.Match) -> str:\n    if m.group(1) == \"#\":\n        try:\n            if m.group(2)[:1].lower() == \"x\":\n                return chr(int(m.group(2)[1:], 16))\n            else:\n                return chr(int(m.group(2)))\n        except ValueError:\n            return \"&#%s;\" % m.group(2)\n    try:\n        return _HTML_UNICODE_MAP[m.group(2)]\n    except KeyError:\n        return \"&%s;\" % m.group(2)\n\ndef to_basestring(value: Union[str, bytes]) -> str:\n    if isinstance(value, bytes):\n        return value.decode(\"utf-8\")\n    return value  # assuming str\n\ndef xhtml_unescape(value: Union[str, bytes]) -> str:\n    \"\"\"Un-escapes an XML-escaped string.\"\"\"\n    # Convert to string if bytes\n    value_str = to_basestring(value)\n\n    # Replaces HTML or numeric character references with their unicode equivalent\n    # Matches entities like &name; or &#number; or &#xhex;\n    entity_re = re.compile(r\"&(#?)([^;]+);\")\n    return entity_re.sub(_convert_entity, value_str)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1159, in <module>\n  File \"<string>\", line 1158, in test_112\nAssertionError\n", "passed": false}
{"task_id": 260, "prediction_id": 2, "generation": "import re\nfrom typing import Union\n\n# Precompiled regex to find HTML entities (named and numeric)\n_HTML_ENTITY_RE = re.compile(r\"&(#?)(x?)(\\w+);\")\n\n# A minimal map of some common HTML entities to Unicode characters (used by _convert_entity)\n_HTML_UNICODE_MAP = {\n    \"lt\": \"<\",\n    \"gt\": \">\",\n    \"quot\": '\"',\n    \"amp\": \"&\",\n    \"apos\": \"'\",\n    # Additional entities can be added if needed\n}\n\ndef _convert_entity(m: re.Match) -> str:\n    if m.group(1) == \"#\":\n        try:\n            if m.group(2).lower() == \"x\":\n                return chr(int(m.group(3), 16))\n            else:\n                return chr(int(m.group(3)))\n        except ValueError:\n            return m.group(0)\n    return _HTML_UNICODE_MAP.get(m.group(3), m.group(0))\n\n\ndef to_basestring(value: Union[str, bytes]) -> str:\n    \"\"\"Helper function to convert bytes to string using utf-8 or pass through strings.\"\"\"\n    if isinstance(value, bytes):\n        return value.decode(\"utf-8\")\n    return value\n\n\ndef xhtml_unescape(value: Union[str, bytes]) -> str:\n    \"\"\"Un-escapes an XML-escaped string.\"\"\"\n    # Convert bytes to str if needed\n    value_str = to_basestring(value)\n    # Use regex to find all entities and convert them with _convert_entity\n    return _HTML_ENTITY_RE.sub(_convert_entity, value_str)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 437, in <module>\n  File \"<string>\", line 436, in test_0\nAssertionError\n", "passed": false}
{"task_id": 260, "prediction_id": 3, "generation": "import re\nfrom typing import Union\n\n# Regex to match HTML or numeric character references\n_UNESCAPE_RE = re.compile(r\"&(#?)(\\w+?);\")\n\n# Partial map used by _convert_entity for named entity conversion (subset for example)\n# This map should exist in the module for _convert_entity to work (from the context).\n_HTML_UNICODE_MAP = {\n    \"amp\": \"&\",\n    \"lt\": \"<\",\n    \"gt\": \">\",\n    \"quot\": \"\\\"\",\n    \"apos\": \"'\",\n    # You can add more named entities if the context module has them.\n}\n\ndef _convert_entity(m: re.Match) -> str:\n    if m.group(1) == \"#\":\n        try:\n            if m.group(2)[:1].lower() == \"x\":\n                return chr(int(m.group(2)[1:], 16))\n            else:\n                return chr(int(m.group(2)))\n        except ValueError:\n            return \"&#%s;\" % m.group(2)\n    try:\n        return _HTML_UNICODE_MAP[m.group(2)]\n    except KeyError:\n        return \"&%s;\" % m.group(2)\n\n\ndef xhtml_unescape(value: Union[str, bytes]) -> str:\n    \"\"\"Un-escapes an XML-escaped string.\"\"\"\n    # Convert bytes to str if necessary\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\")\n\n    # Use _UNESCAPE_RE to find entities and _convert_entity to convert them\n    return _UNESCAPE_RE.sub(_convert_entity, value)", "message": "passed", "passed": true}
{"task_id": 260, "prediction_id": 4, "generation": "import re\nfrom typing import Union\n\n# We replicate the regex and the _convert_entity function based on context hints\n# The _convert_entity is provided in the context, we will include it here.\n\n_HTML_UNICODE_MAP = {\n    \"lt\": \"<\",\n    \"gt\": \">\",\n    \"amp\": \"&\",\n    \"quot\": '\"',\n    \"apos\": \"'\",\n    # Common HTML entities, can be extended if needed\n}\n\ndef _convert_entity(m: re.Match) -> str:\n    if m.group(1) == \"#\":\n        try:\n            if m.group(2)[:1].lower() == \"x\":\n                return chr(int(m.group(2)[1:], 16))\n            else:\n                return chr(int(m.group(2)))\n        except ValueError:\n            return \"&#%s;\" % m.group(2)\n    try:\n        return _HTML_UNICODE_MAP[m.group(2)]\n    except KeyError:\n        return \"&%s;\" % m.group(2)\n\n_entity_re = re.compile(r\"&(#?)(\\w+?);\")\n\ndef xhtml_unescape(value: Union[str, bytes]) -> str:\n    \"\"\"Un-escapes an XML-escaped string.\"\"\"\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\", \"replace\")\n    return _entity_re.sub(_convert_entity, value)", "message": "passed", "passed": true}
