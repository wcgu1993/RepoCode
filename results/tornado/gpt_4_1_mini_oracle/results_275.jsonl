{"task_id": 275, "prediction_id": 0, "generation": "import datetime\nimport time\nfrom typing import Union\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    # Convert input to time.struct_time in UTC\n    if isinstance(ts, datetime.datetime):\n        # Ensure datetime is in UTC\n        if ts.tzinfo is not None:\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        return ts.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n    elif isinstance(ts, (int, float)):\n        return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", time.gmtime(ts))\n    elif isinstance(ts, tuple):\n        # Assume it's a time tuple (e.g. time.gmtime())\n        return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", ts)\n    elif isinstance(ts, time.struct_time):\n        return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", ts)\n    else:\n        raise TypeError(\n            f\"Unsupported type {type(ts)} for timestamp formatting\"\n        )", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1152, in <module>\n  File \"<string>\", line 1148, in test_0\n  File \"<string>\", line 880, in format_timestamp\nTypeError: strftime(): illegal time tuple argument\n", "passed": false}
{"task_id": 275, "prediction_id": 1, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, datetime.datetime):\n        # Convert datetime to timestamp (seconds since epoch)\n        # Use timestamp() if tzinfo is None (naive), treat as UTC\n        if ts.tzinfo is not None:\n            timestamp = ts.timestamp()\n        else:\n            # treat naive datetime as UTC (so timestamps match)\n            timestamp = calendar.timegm(ts.utctimetuple())\n    elif isinstance(ts, (int, float)):\n        timestamp = ts\n    elif isinstance(ts, tuple) or isinstance(ts, time.struct_time):\n        # ts is a time tuple in UTC\n        timestamp = calendar.timegm(ts)\n    else:\n        raise TypeError(\"Unsupported timestamp type: {}\".format(type(ts)))\n\n    # Format as RFC 1123 date, e.g. 'Sun, 27 Jan 2013 18:43:20 GMT'\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", time.gmtime(timestamp))", "message": "passed", "passed": true}
{"task_id": 275, "prediction_id": 2, "generation": "import datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, (int, float)):\n        # Numeric timestamp, convert to time.struct_time in UTC\n        ts = time.gmtime(ts)\n    elif isinstance(ts, datetime.datetime):\n        # Convert datetime to UTC time tuple\n        if ts.tzinfo is not None:\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        ts = ts.timetuple()\n    elif isinstance(ts, tuple) and len(ts) == 9:\n        # time tuple as is\n        pass\n    elif isinstance(ts, time.struct_time):\n        # time.struct_time as is\n        pass\n    else:\n        raise TypeError(\"Unsupported timestamp type: %r\" % type(ts))\n\n    # Format using email.utils.formatdate with usegmt=True to get HTTP date format.\n    # time.mktime(ts) treats input as localtime, so use calendar.timegm for UTC\n    import calendar\n    timestamp = calendar.timegm(ts)  # Convert to seconds since epoch UTC\n\n    from email.utils import formatdate\n    return formatdate(timestamp, usegmt=True)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1160, in <module>\n  File \"<string>\", line 1156, in test_0\n  File \"<string>\", line 886, in format_timestamp\nTypeError: Unsupported timestamp type: <class 'tuple'>\n", "passed": false}
{"task_id": 275, "prediction_id": 3, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, (int, float)):\n        # numeric timestamp: convert to time.struct_time in UTC\n        tt = time.gmtime(ts)\n    elif isinstance(ts, tuple):\n        # time tuple (assumed to be UTC)\n        tt = ts  # type: ignore\n    elif isinstance(ts, time.struct_time):\n        # already a struct_time\n        tt = ts\n    elif isinstance(ts, datetime.datetime):\n        # convert datetime to timestamp and then struct_time\n        if ts.tzinfo is not None:\n            # Convert any timezone-aware datetime to UTC\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        timestamp = calendar.timegm(ts.utctimetuple())\n        tt = time.gmtime(timestamp)\n    else:\n        raise TypeError(\"Unsupported type for format_timestamp\")\n    # Format according to HTTP-date: RFC 1123 format\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", tt)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1156, in <module>\n  File \"<string>\", line 1152, in test_0\n  File \"<string>\", line 890, in format_timestamp\nTypeError: strftime(): illegal time tuple argument\n", "passed": false}
{"task_id": 275, "prediction_id": 4, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    # Convert input to a time tuple in UTC for formatting\n    if isinstance(ts, datetime.datetime):\n        # Convert datetime to UTC time tuple\n        if ts.tzinfo is not None:\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        tt = ts.timetuple()\n    elif isinstance(ts, (int, float)):\n        # Numeric timestamp, convert to UTC time tuple\n        tt = time.gmtime(ts)\n    elif isinstance(ts, tuple) or isinstance(ts, time.struct_time):\n        # Assume time tuple in UTC already\n        # If tuple, convert to struct_time\n        if isinstance(ts, tuple):\n            tt = time.struct_time(ts)\n        else:\n            tt = ts\n    else:\n        raise TypeError(\"Unsupported timestamp type: {}\".format(type(ts)))\n\n    # Format time tuple to HTTP-date string\n    # Format: 'Sun, 27 Jan 2013 18:43:20 GMT'\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", tt)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1159, in <module>\n  File \"<string>\", line 1155, in test_0\n  File \"<string>\", line 885, in format_timestamp\nTypeError: time.struct_time() takes an at least 9-sequence (6-sequence given)\n", "passed": false}
