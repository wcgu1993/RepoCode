{"task_id": 276, "prediction_id": 0, "generation": "import re\nfrom typing import Optional\nfrom collections import namedtuple\n\nRequestStartLine = namedtuple(\"RequestStartLine\", [\"method\", \"path\", \"version\"])\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(f\"Malformed HTTP request line: {line!r}\")\n\n    method, path, version = parts\n\n    # Validate HTTP version is of form HTTP/1.x\n    if not _http_version_re.match(version):\n        raise ValueError(f\"Unsupported HTTP version: {version!r}\")\n\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1348, in <module>\n  File \"<string>\", line 1347, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 1, "generation": "import re\nfrom typing import Optional\nfrom collections import namedtuple\n\nRequestStartLine = namedtuple(\"RequestStartLine\", [\"method\", \"path\", \"version\"])\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(f\"Invalid HTTP request start line: {line!r}\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise ValueError(f\"Invalid HTTP version in start line: {version!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1343, in <module>\n  File \"<string>\", line 1342, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 2, "generation": "import re\nimport collections\n\nRequestStartLine = collections.namedtuple(\n    \"RequestStartLine\", [\"method\", \"path\", \"version\"]\n)\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(\"Malformed HTTP request start line\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise ValueError(\"Invalid HTTP version: %r\" % version)\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1344, in <module>\n  File \"<string>\", line 1343, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 3, "generation": "import re\nimport collections\n\nRequestStartLine = collections.namedtuple(\n    \"RequestStartLine\", [\"method\", \"path\", \"version\"]\n)\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    # Strip end of line spaces and split by spaces\n    parts = line.strip().split(\" \")\n    if len(parts) != 3:\n        raise ValueError(f\"Invalid request start line: {line!r}\")\n\n    method, path, version = parts\n\n    # Validate HTTP version format: must be HTTP/1.x\n    if not _http_version_re.match(version):\n        raise ValueError(f\"Invalid HTTP version in request start line: {version!r}\")\n\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1349, in <module>\n  File \"<string>\", line 1348, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 4, "generation": "import re\nfrom collections import namedtuple\n\nRequestStartLine = namedtuple(\"RequestStartLine\", [\"method\", \"path\", \"version\"])\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    # The start line should have exactly 3 parts separated by spaces:\n    # method, request-target (path), and HTTP-version.\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(\"Malformed HTTP request start line\")\n\n    method, path, version = parts\n\n    # Validate HTTP version, must be HTTP/1.x (x is a digit)\n    # According to the file content, the pattern for HTTP version is:\n    # _http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n    if not re.match(r\"^HTTP/1\\.[0-9]$\", version):\n        raise ValueError(\"Invalid HTTP version in start line\")\n\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1348, in <module>\n  File \"<string>\", line 1347, in test_extra_8\nAssertionError\n", "passed": false}
