{"task_id": 269, "prediction_id": 0, "generation": "from typing import Any\nfrom tornado.escape import to_unicode\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return to_unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 1, "generation": "from typing import Any\nfrom tornado.escape import to_unicode\n\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return to_unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 2, "generation": "from typing import Any\nfrom tornado.escape import to_unicode\n\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return to_unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        # keys are usually str, but just in case convert keys recursively too\n        return {recursive_unicode(k): recursive_unicode(v) for k, v in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 3, "generation": "from typing import Any, Union\nfrom tornado.escape import to_unicode\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return to_unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        # keys are usually str/bytes, convert keys and values recursively\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 4, "generation": "from typing import Any\nfrom tornado.escape import to_unicode\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return to_unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
