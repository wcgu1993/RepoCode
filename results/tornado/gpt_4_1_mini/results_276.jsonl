{"task_id": 276, "prediction_id": 0, "generation": "import re\nfrom typing import Optional\nimport collections\n\nRequestStartLine = collections.namedtuple(\n    \"RequestStartLine\", [\"method\", \"path\", \"version\"]\n)\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(f\"Malformed HTTP request line (wrong number of parts): {line!r}\")\n    method, path, version = parts\n    # Validate HTTP version\n    if not _http_version_re.match(version):\n        raise ValueError(f\"Invalid HTTP version in request line: {version!r}\")\n    # Method and path are less strictly checked here; just ensure they are non-empty strings\n    if not method or not path:\n        raise ValueError(f\"Invalid method or path in request line: {line!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1349, in <module>\n  File \"<string>\", line 1348, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 1, "generation": "def parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    line = line.strip()\n    parts = line.split()\n    if len(parts) != 3:\n        raise HTTPInputError(f\"Malformed HTTP request start line: {line!r}\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise HTTPInputError(f\"Invalid HTTP version in start line: {version!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1336, in <module>\n  File \"<string>\", line 1335, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 2, "generation": "def parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise HTTPInputError(f\"Malformed HTTP request start line: {line!r}\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise HTTPInputError(f\"Invalid HTTP version in request start line: {version!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1335, in <module>\n  File \"<string>\", line 1334, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 3, "generation": "import re\nfrom collections import namedtuple\n\nRequestStartLine = namedtuple(\"RequestStartLine\", [\"method\", \"path\", \"version\"])\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise ValueError(f\"Malformed HTTP request start line: {line!r}\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise ValueError(f\"Invalid HTTP version in request start line: {version!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1341, in <module>\n  File \"<string>\", line 1340, in test_extra_8\nAssertionError\n", "passed": false}
{"task_id": 276, "prediction_id": 4, "generation": "import collections\nimport re\n\n# Recreate these to be self-contained\nRequestStartLine = collections.namedtuple(\n    \"RequestStartLine\", [\"method\", \"path\", \"version\"]\n)\n\n_http_version_re = re.compile(r\"^HTTP/1\\.[0-9]$\")\n\nclass HTTPInputError(Exception):\n    \"\"\"Exception class for malformed HTTP requests or responses.\"\"\"\n\n    pass\n\n\ndef parse_request_start_line(line: str) -> RequestStartLine:\n    \"\"\"Returns a (method, path, version) tuple for an HTTP 1.x request line.\n\n    The response is a `collections.namedtuple`.\n\n    >>> parse_request_start_line(\"GET /foo HTTP/1.1\")\n    RequestStartLine(method='GET', path='/foo', version='HTTP/1.1')\n    \"\"\"\n    parts = line.split()\n    if len(parts) != 3:\n        raise HTTPInputError(f\"Malformed HTTP request line: {line!r}\")\n    method, path, version = parts\n    if not _http_version_re.match(version):\n        raise HTTPInputError(f\"Invalid HTTP version in request line: {version!r}\")\n    return RequestStartLine(method, path, version)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1351, in <module>\n  File \"<string>\", line 1350, in test_extra_8\nAssertionError\n", "passed": false}
