{"task_id": 248, "prediction_id": 0, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        # Set SO_REUSEPORT if requested and supported\n        if reuse_port:\n            # SO_REUSEPORT might not be available or allowed; ignore errors\n            try:\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n            except (AttributeError, OSError):\n                pass\n        sock.bind((\"127.0.0.1\", 0))\n        port = sock.getsockname()[1]\n        return sock, port\n    except Exception:\n        sock.close()\n        raise", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 1, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    if reuse_port:\n        # SO_REUSEPORT might not be available on all platforms, so set it only if possible\n        try:\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        except AttributeError:\n            # Option not available, ignore\n            pass\n        except OSError:\n            # SO_REUSEPORT might not be supported, ignore\n            pass\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((\"127.0.0.1\", 0))\n    port = sock.getsockname()[1]\n    sock.listen(socket.SOMAXCONN)\n    return sock, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 2, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        if reuse_port:\n            # SO_REUSEPORT might not be defined on all platforms\n            if hasattr(socket, \"SO_REUSEPORT\"):\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        sock.bind((\"127.0.0.1\", 0))\n        port = sock.getsockname()[1]\n        return sock, port\n    except Exception:\n        sock.close()\n        raise", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 3, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        if reuse_port:\n            # Set SO_REUSEPORT if requested and available\n            if hasattr(socket, \"SO_REUSEPORT\"):\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        sock.bind((\"127.0.0.1\", 0))\n        port = sock.getsockname()[1]\n    except Exception:\n        sock.close()\n        raise\n    return sock, port", "message": "passed", "passed": true}
{"task_id": 248, "prediction_id": 4, "generation": "import socket\nfrom typing import Tuple\n\ndef bind_unused_port(reuse_port: bool = False) -> Tuple[socket.socket, int]:\n    \"\"\"Binds a server socket to an available port on localhost.\n\n    Returns a tuple (socket, port).\n\n    .. versionchanged:: 4.4\n    Always binds to ``127.0.0.1`` without resolving the name\n    ``localhost``.\n    \"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        if reuse_port:\n            # SO_REUSEPORT allows multiple sockets to bind to the same port\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    except AttributeError:\n        # SO_REUSEPORT might not be available on all platforms\n        pass\n\n    sock.bind(('127.0.0.1', 0))  # port 0 to get an ephemeral port\n    port = sock.getsockname()[1]\n    sock.listen(128)\n    return sock, port", "message": "passed", "passed": true}
