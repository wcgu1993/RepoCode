{"task_id": 269, "prediction_id": 0, "generation": "from typing import Any\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return _unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 1, "generation": "from typing import Any\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        # Convert byte strings to unicode using the provided _unicode function (alias for to_unicode)\n        return _unicode(obj)\n    elif isinstance(obj, dict):\n        # Recursively process dictionary keys and values\n        return {recursive_unicode(k): recursive_unicode(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        # Recursively process list elements\n        return [recursive_unicode(i) for i in obj]\n    elif isinstance(obj, tuple):\n        # Recursively process tuple elements and return as a tuple\n        return tuple(recursive_unicode(i) for i in obj)\n    else:\n        # For all other types, return as is\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 2, "generation": "from typing import Any\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 3, "generation": "from typing import Any\n\n\ndef recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return _unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
{"task_id": 269, "prediction_id": 4, "generation": "def recursive_unicode(obj: Any) -> Any:\n    \"\"\"Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    \"\"\"\n    if isinstance(obj, bytes):\n        return _unicode(obj)\n    elif isinstance(obj, list):\n        return [recursive_unicode(item) for item in obj]\n    elif isinstance(obj, tuple):\n        return tuple(recursive_unicode(item) for item in obj)\n    elif isinstance(obj, dict):\n        return {recursive_unicode(key): recursive_unicode(value) for key, value in obj.items()}\n    else:\n        return obj", "message": "passed", "passed": true}
