{"task_id": 271, "prediction_id": 0, "generation": "def _normalize_header(name: str) -> str:\n    \"\"\"Map a header name to Http-Header-Case.\n\n    >>> _normalize_header(\"coNtent-TYPE\")\n    'Content-Type'\n    \"\"\"\n    # Split the header name by hyphens to handle multi-part header names\n    parts = name.split(\"-\")\n    # Capitalize each part's first letter, and lowercase the rest\n    normalized_parts = [part[:1].upper() + part[1:].lower() if part else \"\" for part in parts]\n    # Join the normalized parts with hyphens again\n    return \"-\".join(normalized_parts)", "message": "passed", "passed": true}
{"task_id": 271, "prediction_id": 1, "generation": "def _normalize_header(name: str) -> str:\n    \"\"\"Map a header name to Http-Header-Case.\n\n    >>> _normalize_header(\"coNtent-TYPE\")\n    'Content-Type'\n    \"\"\"\n    # Split the header by hyphens, capitalize each part in HTTP header style,\n    # then join them back.\n    parts = name.split(\"-\")\n    normalized_parts = []\n    for part in parts:\n        if part:\n            # Capitalize first letter, lowercase the rest\n            normalized_parts.append(part[0].upper() + part[1:].lower())\n        else:\n            # Preserve empty parts (in case of double hyphen)\n            normalized_parts.append(part)\n    return \"-\".join(normalized_parts)", "message": "passed", "passed": true}
{"task_id": 271, "prediction_id": 2, "generation": "def _normalize_header(name: str) -> str:\n    \"\"\"Map a header name to Http-Header-Case.\n\n    >>> _normalize_header(\"coNtent-TYPE\")\n    'Content-Type'\n    \"\"\"\n    parts = name.split('-')\n    # Capitalize first letter and lower-case the rest in each part\n    return '-'.join(part[:1].upper() + part[1:].lower() if part else '' for part in parts)", "message": "passed", "passed": true}
{"task_id": 271, "prediction_id": 3, "generation": "def _normalize_header(name: str) -> str:\n    \"\"\"Map a header name to Http-Header-Case.\n\n    >>> _normalize_header(\"coNtent-TYPE\")\n    'Content-Type'\n    \"\"\"\n    parts = name.split('-')\n    normalized_parts = [p[:1].upper() + p[1:].lower() if p else '' for p in parts]\n    return '-'.join(normalized_parts)", "message": "passed", "passed": true}
{"task_id": 271, "prediction_id": 4, "generation": "def _normalize_header(name: str) -> str:\n    \"\"\"Map a header name to Http-Header-Case.\n\n    >>> _normalize_header(\"coNtent-TYPE\")\n    'Content-Type'\n    \"\"\"\n    # Split the header name by hyphens and capitalize each part\n    parts = name.split('-')\n    normalized_parts = [part[:1].upper() + part[1:].lower() if part else '' for part in parts]\n    return '-'.join(normalized_parts)", "message": "passed", "passed": true}
