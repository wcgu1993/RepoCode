{"task_id": 256, "prediction_id": 0, "generation": "import ipaddress\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\"Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    \"\"\"\n    try:\n        ipaddress.ip_address(ip)\n        return True\n    except ValueError:\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 2187, in <module>\n  File \"<string>\", line 2186, in test_23\nAssertionError\n", "passed": false}
{"task_id": 256, "prediction_id": 1, "generation": "import ipaddress\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\"Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    \"\"\"\n    try:\n        ipaddress.ip_address(ip)\n        return True\n    except ValueError:\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 2187, in <module>\n  File \"<string>\", line 2186, in test_23\nAssertionError\n", "passed": false}
{"task_id": 256, "prediction_id": 2, "generation": "import socket\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\"Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    \"\"\"\n    try:\n        # This will check both IPv4 and IPv6 addresses\n        socket.inet_pton(socket.AF_INET, ip)\n        return True\n    except OSError:\n        try:\n            socket.inet_pton(socket.AF_INET6, ip)\n            return True\n        except OSError:\n            return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 798, in <module>\n  File \"<string>\", line 797, in test_60\n  File \"<string>\", line 295, in is_valid_ip\nValueError: embedded null character\n", "passed": false}
{"task_id": 256, "prediction_id": 3, "generation": "import socket\n\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\"Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    \"\"\"\n    try:\n        # Try IPv4\n        socket.inet_pton(socket.AF_INET, ip)\n        return True\n    except (OSError, AttributeError):\n        pass\n\n    try:\n        # Try IPv6\n        socket.inet_pton(socket.AF_INET6, ip)\n        return True\n    except (OSError, AttributeError):\n        pass\n\n    # Fallback if inet_pton is not available (some Windows Python versions)\n    try:\n        socket.inet_aton(ip)\n        # inet_aton accepts some invalid IPv4 addresses like '1'\n        # So we check if the IP contains exactly 3 dots for IPv4\n        if ip.count('.') == 3:\n            return True\n    except (OSError, socket.error):\n        pass\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 814, in <module>\n  File \"<string>\", line 813, in test_60\n  File \"<string>\", line 296, in is_valid_ip\nValueError: embedded null character\n", "passed": false}
{"task_id": 256, "prediction_id": 4, "generation": "import ipaddress\n\ndef is_valid_ip(ip: str) -> bool:\n    \"\"\"Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6.\n    \"\"\"\n    try:\n        ipaddress.ip_address(ip)\n        return True\n    except ValueError:\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 2187, in <module>\n  File \"<string>\", line 2186, in test_23\nAssertionError\n", "passed": false}
