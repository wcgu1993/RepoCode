{"task_id": 289, "prediction_id": 0, "generation": "import re\nfrom tornado.escape import squeeze\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        return text\n    elif mode == \"single\":\n        # Replace runs of spaces or tabs with a single space, but keep newlines as is.\n        # To do this without touching newlines, we replace runs of spaces and tabs only.\n        # \\x20 is space, \\t is tab. We'll replace [ \\t]+ with a single space.\n        # Newlines remain untouched.\n        return re.sub(r\"[ \\t]+\", \" \", text)\n    elif mode == \"oneline\":\n        # Remove all newlines and replace all whitespace runs with a single space\n        # Use the provided squeeze function that replaces any whitespace sequence with single space.\n        return squeeze(text)\n    else:\n        # If an unknown mode is provided, return the text as is (or optionally raise)\n        # Since no guidance given, returning text as is.\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 899, in <module>\n  File \"<string>\", line 898, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 1, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        # Return text unchanged\n        return text\n\n    elif mode == \"single\":\n        # Collapse consecutive whitespace, preserving newlines\n        # Approach: For each line, collapse runs of whitespace within that line to a single space.\n        # preserve line breaks, but inside each line, collapse whitespace runs.\n        lines = text.splitlines(keepends=True)\n        collapsed_lines = []\n        for line in lines:\n            # We want to collapse runs of spaces/tabs inside the line but preserve newlines at the end.\n            # So first strip the trailing newline(s)\n            # Actually, keepends=True means line ends with \\n or \\r\\n (or empty at last line)\n            # Let's separate line content and newline\n            m = re.match(r\"(.*?)(\\r?\\n)?$\", line)\n            content = m.group(1)\n            newline = m.group(2) or \"\"\n            # Replace runs of whitespace chars (space, tab, etc.) with single space inside content\n            # But preserve the newline at the end\n            # We treat any whitespace character except \\n as whitespace, but since we separated, \\n not inside content\n            content = re.sub(r\"[ \\t\\r\\f\\v]+\", \" \", content)\n            collapsed_lines.append(content + newline)\n        return \"\".join(collapsed_lines)\n\n    elif mode == \"oneline\":\n        # Collapse all whitespace (including newlines) to a single space\n        # Replace any sequence of whitespace chars with a single space, then strip edges\n        return re.sub(r\"\\s+\", \" \", text).strip()\n\n    else:\n        raise ValueError(f\"Unknown mode for filter_whitespace: {mode}\")", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 914, in <module>\n  File \"<string>\", line 913, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 2, "generation": "import re\n\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        # Return text as is, no modifications.\n        return text\n\n    elif mode == \"single\":\n        # Collapse consecutive whitespace except newlines,\n        # preserving newlines.\n        # Approach:\n        # 1. Temporarily replace newlines with a token.\n        # 2. Collapse other whitespace (\\s except \\n) into a single space.\n        # 3. Restore newlines.\n        newline_token = \"__NEWLINE_TOKEN__\"\n        # Replace newlines with token\n        temp = text.replace(\"\\n\", newline_token)\n        # Collapse any whitespace sequence except newline token to single space.\n        # Use regex: whitespace sequences except newline token.\n        # Since newline is replaced, can now collapse all whitespace sequences to single space.\n        temp = re.sub(r\"[\\t\\r\\f\\v ]+\", \" \", temp)\n        # Replace token back to newlines\n        result = temp.replace(newline_token, \"\\n\")\n        return result\n\n    elif mode == \"oneline\":\n        # Collapse ALL whitespace including newlines to a single space.\n        # Use the squeeze logic from context function:\n        # re.sub(r\"[\\x00-\\x20]+\", \" \", value).strip()\n        # \\x00-\\x20 includes all ASCII control chars and whitespace up to space.\n        # So just collapse all whitespace sequences including newlines.\n        return re.sub(r\"[\\x00-\\x20]+\", \" \", text).strip()\n\n    else:\n        # Invalid mode: return text unmodified (or raise ValueError)\n        # The docstring does not specify behavior, so return text.\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 917, in <module>\n  File \"<string>\", line 916, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 3, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        return text\n\n    elif mode == \"single\":\n        # Collapse consecutive whitespace except for newlines.\n        # We want to preserve newlines, but reduce any other whitespace runs to one space.\n        # Replace runs of spaces and tabs (excluding newlines) with a single space.\n        # We do not touch newlines.\n        # Implementation plan:\n        # 1. Replace sequences of spaces/tabs with a single space.\n        # 2. Preserve newlines as is.\n        # Use a regex that matches runs of spaces/tabs excluding newlines.\n        # For that, use: [ \\t\\r\\f\\v]+ (all whitespace except \\n)\n        # Note: \\s includes '\\n', so we don't use \\s directly.\n        return re.sub(r\"[ \\t\\r\\f\\v]+\", \" \", text)\n\n    elif mode == \"oneline\":\n        # Collapse all whitespace (including newlines) to a single space\n        # We can reuse the pattern from squeeze() in the context function,\n        # but since we can't import it, replicate it here:\n        return re.sub(r\"[\\x00-\\x20]+\", \" \", text).strip()\n\n    else:\n        # If mode is unknown, fallback to returning text unchanged\n        return text", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 907, in <module>\n  File \"<string>\", line 906, in test_3\nAssertionError\n", "passed": false}
{"task_id": 289, "prediction_id": 4, "generation": "import re\n\ndef filter_whitespace(mode: str, text: str) -> str:\n    \"\"\"Transform whitespace in ``text`` according to ``mode``.\n\n    Available modes are:\n\n    * ``all``: Return all whitespace unmodified.\n    * ``single``: Collapse consecutive whitespace with a single whitespace\n    character, preserving newlines.\n    * ``oneline``: Collapse all runs of whitespace into a single space\n    character, removing all newlines in the process.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    if mode == \"all\":\n        return text\n    elif mode == \"single\":\n        # Collapse runs of spaces and tabs but preserve newlines\n        # Pattern to match runs of spaces or tabs (not newlines)\n        # Replace these with a single space.\n        # We consider whitespace excluding newlines: [ \\t\\x0b\\x0c\\r]+\n        # But \\r typically appears as part of newline; to be safe, handle spaces and tabs explicitly.\n        # Using [ \\t\\v\\f]+ (space, tab, vertical tab, form feed)\n        return re.sub(r\"[ \\t\\v\\f]+\", \" \", text)\n    elif mode == \"oneline\":\n        # Remove all newlines and collapse all whitespace runs to a single space.\n        # Use the squeeze logic: replace runs of any whitespace char (\\s+) with a single space\n        # and strip leading/trailing spaces.\n        return re.sub(r\"\\s+\", \" \", text).strip()\n    else:\n        # If mode unknown, raise error or fallback? The docstring doesn't specify.\n        # To be safe, return text unmodified or raise ValueError.\n        raise ValueError(f\"Unknown mode for filter_whitespace: {mode}\")", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 901, in <module>\n  File \"<string>\", line 900, in test_3\nAssertionError\n", "passed": false}
