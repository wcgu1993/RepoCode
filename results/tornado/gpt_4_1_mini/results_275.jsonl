{"task_id": 275, "prediction_id": 0, "generation": "import datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    # Determine the type and convert to a time tuple in UTC\n    if isinstance(ts, (int, float)):\n        time_tuple = time.gmtime(ts)\n    elif isinstance(ts, tuple):\n        # Assume it is a time tuple in UTC\n        time_tuple = ts\n    elif isinstance(ts, time.struct_time):\n        time_tuple = ts\n    elif isinstance(ts, datetime.datetime):\n        # If it's naive, assume UTC. If aware, convert to UTC\n        if ts.tzinfo is not None:\n            dt = ts.astimezone(datetime.timezone.utc)\n        else:\n            dt = ts\n        time_tuple = dt.timetuple()\n    else:\n        raise TypeError(\"Unsupported timestamp type: {}\".format(type(ts)))\n\n    # Format time tuple to HTTP date string format\n    # Format: 'Sun, 27 Jan 2013 18:43:20 GMT'\n    # Use time.strftime with \"%a, %d %b %Y %H:%M:%S GMT\"\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", time_tuple)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1158, in <module>\n  File \"<string>\", line 1154, in test_0\n  File \"<string>\", line 892, in format_timestamp\nTypeError: strftime(): illegal time tuple argument\n", "passed": false}
{"task_id": 275, "prediction_id": 1, "generation": "import datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, datetime.datetime):\n        # If datetime object is naive, treat as UTC per HTTP standard\n        if ts.tzinfo is not None:\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        # Format with strftime to HTTP-date format\n        return ts.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n    elif isinstance(ts, (int, float)):\n        # Numeric timestamp - convert to time.gmtime\n        tm = time.gmtime(ts)\n    elif isinstance(ts, (tuple, time.struct_time)):\n        # Assume time tuple - must be in UTC already\n        tm = ts\n    else:\n        raise TypeError(\n            \"Unsupported timestamp type: {}\".format(type(ts))\n        )\n    # Format using time.strftime with GMT suffix\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", tm)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1154, in <module>\n  File \"<string>\", line 1150, in test_0\n  File \"<string>\", line 888, in format_timestamp\nTypeError: strftime(): illegal time tuple argument\n", "passed": false}
{"task_id": 275, "prediction_id": 2, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, datetime.datetime):\n        # Convert datetime object to timestamp (seconds since epoch)\n        # Use calendar.timegm to get timestamp in UTC regardless of tzinfo\n        if ts.tzinfo is not None:\n            # Convert to UTC before timestamp conversion\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        timestamp = calendar.timegm(ts.timetuple())\n    elif isinstance(ts, (int, float)):\n        timestamp = int(ts)\n    elif isinstance(ts, tuple) or isinstance(ts, time.struct_time):\n        # Assume it's a time.struct_time or tuple representing gmtime\n        # Convert to timestamp using calendar.timegm\n        try:\n            # If tuple, ensure length at least 9 for struct_time compatibility\n            if isinstance(ts, tuple) and len(ts) < 9:\n                # Pad time tuple with zeros to length 9\n                ts = ts + (0,) * (9 - len(ts))\n            timestamp = calendar.timegm(ts)  # type: ignore\n        except Exception:\n            raise TypeError(\"Invalid time tuple/struct_time argument\")\n    else:\n        raise TypeError(\n            \"ts argument must be int, float, tuple, time.struct_time, or datetime.datetime\"\n        )\n\n    # Format timestamp as 'Sun, 27 Jan 2013 18:43:20 GMT'\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", time.gmtime(timestamp))", "message": "passed", "passed": true}
{"task_id": 275, "prediction_id": 3, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, (int, float)):\n        # Numeric timestamp\n        t = time.gmtime(ts)\n    elif isinstance(ts, datetime.datetime):\n        # Convert a datetime to UTC time tuple\n        if ts.tzinfo is not None:\n            # Convert to UTC first\n            ts = ts.astimezone(datetime.timezone.utc).replace(tzinfo=None)\n        t = ts.timetuple()\n    elif isinstance(ts, tuple) and len(ts) >= 9:\n        # Assume time tuple (struct_time compatible)\n        t = ts\n    elif isinstance(ts, time.struct_time):\n        t = ts\n    else:\n        raise TypeError(\"Unsupported timestamp type: %r\" % type(ts))\n\n    # Format as HTTP-date: 'Sun, 27 Jan 2013 18:43:20 GMT'\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", t)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1156, in <module>\n  File \"<string>\", line 1152, in test_0\n  File \"<string>\", line 887, in format_timestamp\nTypeError: Unsupported timestamp type: <class 'tuple'>\n", "passed": false}
{"task_id": 275, "prediction_id": 4, "generation": "import calendar\nimport datetime\nimport time\nfrom typing import Union\n\n\ndef format_timestamp(\n    ts: Union[int, float, tuple, time.struct_time, datetime.datetime]\n) -> str:\n    \"\"\"Formats a timestamp in the format used by HTTP.\n\n    The argument may be a numeric timestamp as returned by `time.time`,\n    a time tuple as returned by `time.gmtime`, or a `datetime.datetime`\n    object.\n\n    >>> format_timestamp(1359312200)\n    'Sun, 27 Jan 2013 18:43:20 GMT'\n    \"\"\"\n    if isinstance(ts, datetime.datetime):\n        # Convert datetime to POSIX timestamp (seconds since epoch)\n        # If it's timezone-aware, convert to UTC first; otherwise assume it's UTC\n        if ts.tzinfo is not None:\n            ts = ts.astimezone(datetime.timezone.utc)\n        timestamp = calendar.timegm(ts.utctimetuple())\n    elif isinstance(ts, (int, float)):\n        timestamp = int(ts)\n    elif isinstance(ts, tuple):\n        # Assume time tuple like returned by time.gmtime\n        timestamp = calendar.timegm(ts)\n    elif isinstance(ts, time.struct_time):\n        # Convert struct_time to timestamp\n        timestamp = calendar.timegm(ts)\n    else:\n        raise TypeError(\n            \"Unsupported type for timestamp: {}. Supported types are int, float, tuple, struct_time, datetime.\".format(type(ts))\n        )\n    # Format the timestamp as IMF-fixdate (RFC 7231) http-date format\n    # Format: Sun, 27 Jan 2013 18:43:20 GMT\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", time.gmtime(timestamp))", "message": "passed", "passed": true}
