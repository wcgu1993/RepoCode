{"task_id": 259, "prediction_id": 0, "generation": "import typing\nfrom typing import Union\n\ndef xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode('utf-8')\n    # Use the compiled regex and dict from the file context to replace\n    # each special char by its escaped equivalent.\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 1, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    if isinstance(value, bytes):\n        value = value.decode('utf-8')\n\n    def replace(match: re.Match) -> str:\n        return _XHTML_ESCAPE_DICT[match.group(0)]\n\n    return _XHTML_ESCAPE_RE.sub(replace, value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 2, "generation": "import typing\n\ndef xhtml_escape(value: typing.Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    # If the input is bytes, decode it as utf-8\n    if isinstance(value, bytes):\n        value = value.decode('utf-8')\n\n    # Use _XHTML_ESCAPE_RE and _XHTML_ESCAPE_DICT from file context for escaping\n    def replace(match):\n        return _XHTML_ESCAPE_DICT[match.group(0)]\n\n    return _XHTML_ESCAPE_RE.sub(replace, value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 3, "generation": "import typing\n\ndef xhtml_escape(value: typing.Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    # If value is bytes, decode it to str using utf-8 with replacement for errors\n    if isinstance(value, bytes):\n        value = value.decode('utf-8', 'replace')\n\n    # Use the _XHTML_ESCAPE_RE regex to find all characters to be escaped\n    # and replace them using _XHTML_ESCAPE_DICT\n    # The regex matches &, <, >, \", and '\n    return _XHTML_ESCAPE_RE.sub(lambda match: _XHTML_ESCAPE_DICT[match.group(0)], value)", "message": "passed", "passed": true}
{"task_id": 259, "prediction_id": 4, "generation": "def xhtml_escape(value: Union[str, bytes]) -> str:\n    \"\"\"Escapes a string so it is valid within HTML or XML.\n\n    Escapes the characters ``<``, ``>``, ``\"``, ``'``, and ``&``.\n    When used in attribute values the escaped strings must be enclosed\n    in quotes.\n\n    .. versionchanged:: 3.2\n\n    Added the single quote to the list of escaped characters.\n    \"\"\"\n    # Convert bytes to str if needed\n    if isinstance(value, bytes):\n        value = value.decode(\"utf-8\")\n\n    # Replace characters with their XHTML escape sequences\n    def replace_func(match: re.Match) -> str:\n        return _XHTML_ESCAPE_DICT[match.group(0)]\n\n    return _XHTML_ESCAPE_RE.sub(replace_func, value)", "message": "passed", "passed": true}
