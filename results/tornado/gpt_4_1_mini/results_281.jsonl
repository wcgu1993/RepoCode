{"task_id": 281, "prediction_id": 0, "generation": "import typing\nfrom typing import Tuple, Optional\nimport re\n\n_netloc_re = re.compile(r\"^\\[(.*)\\]:(\\d+)$\")  # For IPv6 addresses with port like [::1]:80\n_simple_netloc_re = re.compile(r\"^(.+):(\\d+)$\")  # For normal host:port pattern\n\n\ndef split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    if not netloc:\n        return netloc, None\n\n    # Check for IPv6 + port format: [ipv6]:port\n    m = _netloc_re.match(netloc)\n    if m:\n        host = m.group(1)\n        port_str = m.group(2)\n        try:\n            port = int(port_str)\n        except ValueError:\n            port = None\n        return host, port\n\n    # Check for normal host:port format\n    m = _simple_netloc_re.match(netloc)\n    if m:\n        host = m.group(1)\n        port_str = m.group(2)\n        try:\n            port = int(port_str)\n        except ValueError:\n            port = None\n        return host, port\n\n    # No port found, entire netloc is host\n    return netloc, None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1326, in <module>\n  File \"<string>\", line 1325, in test_53\nAssertionError\n", "passed": false}
{"task_id": 281, "prediction_id": 1, "generation": "import typing\nimport re\nfrom typing import Tuple, Optional\n\n_netloc_re = re.compile(r\"^(.+):(\\d+)$\")\n\ndef split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    # First, try to match the netloc against the regex: any characters, colon, digits at end\n    match = _netloc_re.match(netloc)\n    if match:\n        host = match.group(1)\n        port_str = match.group(2)\n        try:\n            port = int(port_str)\n        except ValueError:\n            port = None\n        return host, port\n    else:\n        # No match means no port specified\n        return netloc, None", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 2, "generation": "from typing import Tuple, Optional\nimport re\n\n_netloc_re = re.compile(r\"^(.+):(\\d+)$\")\n\ndef split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    if netloc.startswith('['):\n        # IPv6 address with optional port, e.g. \"[::1]:80\"\n        end_idx = netloc.find(']')\n        if end_idx == -1:\n            # No closing bracket, treat whole as host and no port\n            return netloc, None\n        host = netloc[: end_idx + 1]\n        rest = netloc[end_idx + 1:]\n        if rest.startswith(':'):\n            port_part = rest[1:]\n            try:\n                port = int(port_part)\n                return host, port\n            except ValueError:\n                return host, None\n        else:\n            return host, None\n    else:\n        # No brackets, split on last colon\n        m = _netloc_re.match(netloc)\n        if m:\n            host = m.group(1)\n            try:\n                port = int(m.group(2))\n            except ValueError:\n                port = None\n            return host, port\n        else:\n            return netloc, None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1519, in <module>\n  File \"<string>\", line 1518, in test_11\nAssertionError\n", "passed": false}
{"task_id": 281, "prediction_id": 3, "generation": "from typing import Tuple, Optional\nimport re\n\n_netloc_re = re.compile(r\"^\\[(.+)\\](?::(\\d+))?$\")  # IPv6 with brackets\n\n\ndef split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    # Handle IPv6 addresses enclosed in brackets, e.g. [::1]:80\n    m = _netloc_re.match(netloc)\n    if m:\n        host = m.group(1)\n        port_str = m.group(2)\n        port = int(port_str) if port_str is not None else None\n        return host, port\n\n    # Otherwise, split by the last colon if it is followed only by digits (port)\n    # There may be multiple colons in IPv6 addresses without brackets, but these are disallowed by RFC 2732,\n    # so treat the last colon as port separator if valid.\n\n    # Find last colon\n    if \":\" in netloc:\n        parts = netloc.rsplit(\":\", 1)\n        host = parts[0]\n        port_str = parts[1]\n        if port_str.isdigit():\n            return host, int(port_str)\n        else:\n            # No valid port found, return entire netloc as host\n            return netloc, None\n    else:\n        return netloc, None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1258, in <module>\n  File \"<string>\", line 1257, in test_33\nAssertionError\n", "passed": false}
{"task_id": 281, "prediction_id": 4, "generation": "from typing import Tuple, Optional\nimport re\n\n_netloc_re = re.compile(r\"^(.+):(\\d+)$\")\n\ndef split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    # IPv6 addresses are enclosed in square brackets, e.g. [::1]:8000\n    if netloc.startswith(\"[\"):\n        # Try to find the closing bracket\n        close_idx = netloc.find(\"]\")\n        if close_idx == -1:\n            # Malformed IPv6, treat whole as host, no port\n            return netloc, None\n        host = netloc[0:close_idx + 1]\n        # If there's more after the closing bracket, it could be a port\n        remainder = netloc[close_idx + 1:]\n        if remainder.startswith(\":\"):\n            port_str = remainder[1:]\n            if port_str.isdigit():\n                return host, int(port_str)\n            else:\n                return host, None\n        else:\n            return host, None\n    else:\n        # Not IPv6 bracketed\n        match = _netloc_re.match(netloc)\n        if match:\n            host, port_str = match.group(1), match.group(2)\n            return host, int(port_str)\n        else:\n            return netloc, None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1516, in <module>\n  File \"<string>\", line 1515, in test_11\nAssertionError\n", "passed": false}
