{"task_id": 288, "prediction_id": 0, "generation": "def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.\n    Returns a `bytes` object of the same length as `data` with the mask applied\n    as specified in section 5.3 of RFC 6455.\n\n    This pure-python implementation may be replaced by an optimized version when available.\n    \"\"\"\n    # Apply the mask cyclically to each byte of data using XOR.\n    masked = bytearray(len(data))\n    mask_len = 4\n    for i in range(len(data)):\n        masked[i] = data[i] ^ mask[i % mask_len]\n    return bytes(masked)", "message": "passed", "passed": true}
{"task_id": 288, "prediction_id": 1, "generation": "def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.\n    Returns a `bytes` object of the same length as `data` with the mask applied\n    as specified in section 5.3 of RFC 6455.\n\n    This pure-python implementation may be replaced by an optimized version when available.\n    \"\"\"\n    # The masking key is 4 bytes; the mask is applied cyclically over the data.\n    masked = bytearray(len(data))\n    for i in range(len(data)):\n        masked[i] = data[i] ^ mask[i % 4]\n    return bytes(masked)", "message": "passed", "passed": true}
{"task_id": 288, "prediction_id": 2, "generation": "def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.\n    Returns a `bytes` object of the same length as `data` with the mask applied\n    as specified in section 5.3 of RFC 6455.\n\n    This pure-python implementation may be replaced by an optimized version when available.\n    \"\"\"\n    length = len(data)\n    if length == 0:\n        return b\"\"\n    masked = bytearray(length)\n    for i in range(length):\n        masked[i] = data[i] ^ mask[i % 4]\n    return bytes(masked)", "message": "passed", "passed": true}
{"task_id": 288, "prediction_id": 3, "generation": "def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.\n    Returns a `bytes` object of the same length as `data` with the mask applied\n    as specified in section 5.3 of RFC 6455.\n\n    This pure-python implementation may be replaced by an optimized version when available.\n    \"\"\"\n    # The mask is applied by XORing each byte of data with a byte from the mask,\n    # cycling through the mask bytes repeatedly.\n\n    masked = bytearray(len(data))\n    for i in range(len(data)):\n        masked[i] = data[i] ^ mask[i % 4]\n    return bytes(masked)", "message": "passed", "passed": true}
{"task_id": 288, "prediction_id": 4, "generation": "def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.\n    Returns a `bytes` object of the same length as `data` with the mask applied\n    as specified in section 5.3 of RFC 6455.\n\n    This pure-python implementation may be replaced by an optimized version when available.\n    \"\"\"\n    if len(mask) != 4:\n        raise ValueError(\"mask must be 4 bytes long\")\n\n    mask0, mask1, mask2, mask3 = mask\n\n    # RFC 6455 section 5.3:\n    # Octet i of the transformed data is the XOR of octet i of the original data with\n    # mask octet at index i modulo 4.\n    masked = bytearray(len(data))\n    for i in range(len(data)):\n        masked[i] = data[i] ^ mask[i % 4]\n\n    return bytes(masked)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 511, in <module>\n  File \"<string>\", line 510, in test_18\n  File \"<string>\", line 461, in _websocket_mask_python\nValueError: mask must be 4 bytes long\n", "passed": false}
