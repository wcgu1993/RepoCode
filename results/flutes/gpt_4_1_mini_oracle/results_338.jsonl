{"task_id": 338, "prediction_id": 0, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 1, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    # For positive and negative values, this formula works:\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 2, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    # Division by zero check is not explicitly required but will naturally raise\n    # ZeroDivisionError if b == 0, which is expected behavior.\n    # The formula for ceiling division is:\n    # (a + b - 1) // b if b > 0\n    # For negative divisors or negative dividends we need a more general formula.\n    # A general formula that works for all integer signs is:\n    # -(-(a) // b)\n    # But to keep it simple and correct for both positive and negative b:\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 3, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 4, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
