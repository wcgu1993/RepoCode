{"task_id": 338, "prediction_id": 0, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 1, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    # Normal integer division truncates towards zero; to ceil the division,\n    # we can use the formula (a + b - 1) // b if b > 0,\n    # but to handle negative divisors properly, generalize as below.\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 2, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 3, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return -(-a // b)", "message": "passed", "passed": true}
{"task_id": 338, "prediction_id": 4, "generation": "def ceil_div(a: int, b: int) -> int:\n    r\"\"\"Integer division that rounds up.\"\"\"\n    # If b is zero, division is undefined\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    # Use integer division and adjust for remainder to round up\n    return (a + b - 1) // b if b > 0 else (a + b + 1) // b", "message": "passed", "passed": true}
