{"task_id": 328, "prediction_id": 0, "generation": "import os\nfrom pathlib import Path\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # Environment variables\n    xdg_config_home = os.environ.get('XDG_CONFIG_HOME')\n    httpie_config_dir = os.environ.get('HTTPIE_CONFIG_DIR')\n\n    # Default config directory name under config home\n    config_dirname = 'httpie'\n\n    if httpie_config_dir:\n        # Use HTTPIE_CONFIG_DIR if set (highest priority)\n        return Path(httpie_config_dir).expanduser()\n    elif xdg_config_home:\n        # Use $XDG_CONFIG_HOME/httpie if set\n        return Path(xdg_config_home).expanduser() / config_dirname\n    else:\n        if is_windows:\n            # For Windows: %APPDATA%/httpie (already defined as DEFAULT_WINDOWS_CONFIG_DIR)\n            return DEFAULT_WINDOWS_CONFIG_DIR\n        else:\n            home = Path.home()\n            # Check legacy config dir (should exist)\n            legacy_dir = home / '.httpie'\n            if legacy_dir.exists():\n                return legacy_dir\n            else:\n                # Fallback to ~/.config/httpie\n                return home / '.config' / config_dirname", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 369, in <module>\n  File \"<string>\", line 367, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
{"task_id": 328, "prediction_id": 1, "generation": "from pathlib import Path\nimport os\nimport errno\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # Check HTTPIE_CONFIG_DIR environment variable first (highest priority)\n    env_httpie_config_dir = os.getenv('HTTPIE_CONFIG_DIR')\n    if env_httpie_config_dir:\n        return Path(env_httpie_config_dir)\n\n    # Then check XDG_CONFIG_HOME environment variable (if set)\n    xdg_config_home = os.getenv('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        return Path(xdg_config_home) / 'httpie'\n\n    # On Windows, return %APPDATA%/httpie\n    if os.name == 'nt':\n        appdata = os.getenv('APPDATA')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        # Fallback to default Windows path if APPDATA is not set\n        # (To mimic DEFAULT_WINDOWS_CONFIG_DIR from file content)\n        return Path(os.path.expandvars('%APPDATA%')) / 'httpie'\n\n    # On Unix-like systems, fall back to legacy ~/.httpie directory (guaranteed existence)\n    home = Path.home()\n\n    # According to the file content, the legacy config dir is ~/.httpie\n    legacy_config_dir = home / '.httpie'\n\n    # This legacy ~/.httpie is guaranteed to exist (per docstring)\n    return legacy_config_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 181, in test_2\nAssertionError\n", "passed": false}
{"task_id": 328, "prediction_id": 2, "generation": "from pathlib import Path\nimport os\n\nENV_XDG_CONFIG_HOME = 'XDG_CONFIG_HOME'\nENV_HTTPIE_CONFIG_DIR = 'HTTPIE_CONFIG_DIR'\nDEFAULT_CONFIG_DIRNAME = 'httpie'\nDEFAULT_RELATIVE_XDG_CONFIG_HOME = Path('.config')\nDEFAULT_RELATIVE_LEGACY_CONFIG_DIR = Path('.httpie')\nDEFAULT_WINDOWS_CONFIG_DIR = Path(os.path.expandvars('%APPDATA%')) / DEFAULT_CONFIG_DIRNAME\n\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # First, check if HTTPIE_CONFIG_DIR environment variable is set\n    env_config_dir = os.getenv(ENV_HTTPIE_CONFIG_DIR)\n    if env_config_dir:\n        return Path(env_config_dir)\n\n    # On Windows, use %APPDATA%\\httpie\n    if os.name == 'nt':\n        return DEFAULT_WINDOWS_CONFIG_DIR\n\n    # On Unix-like systems:\n    # Check XDG_CONFIG_HOME environment variable\n    xdg_config_home = os.getenv(ENV_XDG_CONFIG_HOME)\n    if xdg_config_home:\n        return Path(xdg_config_home) / DEFAULT_CONFIG_DIRNAME\n\n    # Legacy fallback to ~/.httpie (guaranteed to exist)\n    legacy_dir = Path.home() / DEFAULT_RELATIVE_LEGACY_CONFIG_DIR\n    return legacy_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 180, in <module>\n  File \"<string>\", line 179, in test_2\nAssertionError\n", "passed": false}
{"task_id": 328, "prediction_id": 3, "generation": "import os\nfrom pathlib import Path\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # 1) If HTTPIE_CONFIG_DIR environment variable is set, use it\n    env_config_dir = os.getenv('HTTPIE_CONFIG_DIR')\n    if env_config_dir:\n        return Path(env_config_dir).expanduser()\n\n    # 2) If XDG_CONFIG_HOME environment variable is set, use it with DEFAULT_CONFIG_DIRNAME appended\n    xdg_config_home = os.getenv('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        return Path(xdg_config_home).expanduser() / 'httpie'\n\n    # 3) On Windows, use the default Windows config directory %APPDATA%/httpie\n    if os.name == 'nt':\n        # This uses DEFAULT_WINDOWS_CONFIG_DIR from the file context, but we cannot import it,\n        # So re-implement its logic here:\n        appdata = os.getenv('APPDATA') or os.path.expandvars('%APPDATA%')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        else:\n            # fallback to home directory in case APPDATA is unset (unlikely)\n            return Path.home() / 'AppData' / 'Roaming' / 'httpie'\n\n    # 4) For Unix-like systems, use XDG_CONFIG_HOME if not set, fallback to ~/.config/httpie\n    # As per file content DEFAULT_RELATIVE_XDG_CONFIG_HOME = Path('.config')\n    # So default XDG_CONFIG_HOME = ~/.config\n    xdg_config_home_default = Path.home() / '.config'\n    config_dir = xdg_config_home_default / 'httpie'\n\n    # 5) Legacy fallback is ~/.httpie (legacy HTTPie config directory)\n    # From the docstring: legacy ~/.httpie is guaranteed to exist if returned,\n    # so if config_dir does not exist we return ~/.httpie\n    # But the docstring also states the directory *isn't guaranteed to exist,* meaning this function\n    # just returns paths and does not ensure directory existence.\n\n    # The legacy directory is guaranteed to exist if returned,\n    # so we check if ~/.httpie exists and use it if config_dir directory does not exist\n    legacy_dir = Path.home() / '.httpie'\n    if config_dir.exists():\n        return config_dir\n    elif legacy_dir.exists():\n        return legacy_dir\n    else:\n        # Default to config_dir anyway, as per XDG spec\n        return config_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 386, in <module>\n  File \"<string>\", line 384, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
{"task_id": 328, "prediction_id": 4, "generation": "import os\nfrom pathlib import Path\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # 1. If HTTPIE_CONFIG_DIR environment variable is set, use it\n    httpie_config_dir = os.environ.get('HTTPIE_CONFIG_DIR')\n    if httpie_config_dir:\n        return Path(httpie_config_dir)\n\n    # 2. If running on Windows, return the Windows config dir (%APPDATA%/httpie)\n    if os.name == 'nt' or os.name == 'dos' or os.name == 'ce':\n        # fallback if os.name is one of the windows variants\n        appdata = os.environ.get('APPDATA')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        else:\n            # fallback to default windows config dir path from file content\n            return Path(os.path.expandvars('%APPDATA%')) / 'httpie'\n\n    # 3. Otherwise, follow XDG_CONFIG_HOME or fallback to legacy location\n    xdg_config_home = os.environ.get('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        return Path(xdg_config_home) / 'httpie'\n\n    # 4. Legacy location ~/.httpie (guaranteed to exist)\n    home = Path.home()\n    legacy_config_dir = home / '.httpie'\n\n    # The doc states only legacy dir (if returned) is guaranteed to exist,\n    # so we can return legacy dir here directly if no other options found.\n    return legacy_config_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 181, in <module>\n  File \"<string>\", line 180, in test_2\nAssertionError\n", "passed": false}
