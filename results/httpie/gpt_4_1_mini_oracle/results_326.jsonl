{"task_id": 326, "prediction_id": 0, "generation": "def humanize_bytes(n, precision=2):\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    size = float(n)\n    for unit in units:\n        if size < 1024:\n            # Format with the given precision, strip trailing zeros intelligently\n            fmt = \"{:.\" + str(precision) + \"f} {}\"\n            s = fmt.format(size, unit)\n            # If unit is 'B', always show as integer without decimal part\n            if unit == 'B':\n                s = \"{} B\".format(int(size))\n            return s\n        size /= 1024\n\n    # If number is huge beyond YB, just return the last unit with the scaled value\n    fmt = \"{:.\" + str(precision) + \"f} {}\"\n    return fmt.format(size * 1024, units[-1])", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 543, in <module>\n  File \"<string>\", line 542, in test_27\nAssertionError\n", "passed": false}
{"task_id": 326, "prediction_id": 1, "generation": "def humanize_bytes(n, precision=2):\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    \n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n < 1024:\n        return f\"{n} B\"\n\n    index = 0\n    num = float(n)\n    while num >= 1024 and index < len(units) - 1:\n        num /= 1024\n        index += 1\n\n    formatted_num = f\"{num:.{precision}f}\"\n\n    return f\"{formatted_num} {units[index]}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 541, in <module>\n  File \"<string>\", line 540, in test_27\nAssertionError\n", "passed": false}
{"task_id": 326, "prediction_id": 2, "generation": "def humanize_bytes(n, precision=2):\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return f'0 B'\n    i = 0\n    value = float(n)\n    while value >= 1024 and i < len(units) - 1:\n        value /= 1024\n        i += 1\n    if units[i] == 'B':\n        # For bytes, show as integer without decimals\n        return f'{int(value)} {units[i]}'\n    else:\n        fmt = f'{{:.{precision}f}} {{}}'\n        return fmt.format(value, units[i])", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 540, in <module>\n  File \"<string>\", line 539, in test_27\nAssertionError\n", "passed": false}
{"task_id": 326, "prediction_id": 3, "generation": "def humanize_bytes(n, precision=2):\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    idx = 0\n    number = float(n)\n\n    while number >= 1024 and idx < len(units) - 1:\n        number /= 1024\n        idx += 1\n\n    if idx == 0:  # Bytes, show as integer without decimal point\n        return f\"{int(number)} {units[idx]}\"\n    else:\n        format_str = f\"{{:.{precision}f}} {{}}\"\n        return format_str.format(number, units[idx])", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 537, in <module>\n  File \"<string>\", line 536, in test_27\nAssertionError\n", "passed": false}
{"task_id": 326, "prediction_id": 4, "generation": "def humanize_bytes(n, precision=2):\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    size = float(n)\n    unit_index = 0\n    while size >= 1024 and unit_index < len(units) - 1:\n        size /= 1024\n        unit_index += 1\n\n    # Format the number with the given precision, strip trailing zeros if integer\n    formatted_size = f\"{size:.{precision}f}\"\n    # If precision > 0, keep trailing zeros according to the examples,\n    # so no stripping of trailing zeros is done.\n\n    return f\"{formatted_size} {units[unit_index]}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 253, in <module>\n  File \"<string>\", line 252, in test_24\nAssertionError\n", "passed": false}
