{"task_id": 328, "prediction_id": 0, "generation": "import os\nfrom pathlib import Path\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # Check if HTTPIE_CONFIG_DIR env var is set\n    httpie_config_dir = os.getenv('HTTPIE_CONFIG_DIR')\n    if httpie_config_dir:\n        return Path(httpie_config_dir)\n\n    # Use XDG_CONFIG_HOME if set, otherwise default to ~/.config\n    xdg_config_home = os.getenv('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        config_dir = Path(xdg_config_home) / 'httpie'\n    else:\n        # Default relative XDG config home is ~/.config\n        config_dir = Path.home() / '.config' / 'httpie'\n\n    # On Windows, override with %APPDATA%/httpie if applicable\n    if os.name == 'nt' or (os.name == 'posix' and hasattr(os, 'name') and os.name == 'nt'):\n        # Using the same default as in file content: APPDATA/httpie\n        appdata = os.getenv('APPDATA')\n        if appdata:\n            config_dir = Path(appdata) / 'httpie'\n\n    # Check if config_dir exists, otherwise fallback to legacy ~/.httpie if config_dir doesn't exist\n    if not config_dir.exists():\n        legacy_config_dir = Path.home() / '.httpie'\n        if legacy_config_dir.exists():\n            return legacy_config_dir\n\n    return config_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 370, in <module>\n  File \"<string>\", line 368, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
{"task_id": 328, "prediction_id": 1, "generation": "from pathlib import Path\nimport os\nimport sys\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n    \"\"\"\n    ENV_XDG_CONFIG_HOME = 'XDG_CONFIG_HOME'\n    ENV_HTTPIE_CONFIG_DIR = 'HTTPIE_CONFIG_DIR'\n    DEFAULT_CONFIG_DIRNAME = 'httpie'\n    DEFAULT_RELATIVE_XDG_CONFIG_HOME = Path('.config')\n    DEFAULT_RELATIVE_LEGACY_CONFIG_DIR = Path('.httpie')\n    DEFAULT_WINDOWS_CONFIG_DIR = Path(os.path.expandvars('%APPDATA%')) / DEFAULT_CONFIG_DIRNAME\n\n    # 1. Check for HTTPIE_CONFIG_DIR environment variable (highest priority).\n    env_httpie_config_dir = os.environ.get(ENV_HTTPIE_CONFIG_DIR)\n    if env_httpie_config_dir:\n        return Path(env_httpie_config_dir).expanduser()\n\n    # 2. On Windows, config dir is %APPDATA%\\httpie\n    if sys.platform == 'win32' or os.name == 'nt':\n        return DEFAULT_WINDOWS_CONFIG_DIR.expanduser()\n\n    # 3. On Unix-like systems:\n    #   - check XDG_CONFIG_HOME environment variable, falling back to ~/.config if unset\n    #   - config dir is $XDG_CONFIG_HOME/httpie or ~/.config/httpie\n    xdg_config_home = os.environ.get(ENV_XDG_CONFIG_HOME)\n    if xdg_config_home:\n        base_config_path = Path(xdg_config_home)\n    else:\n        base_config_path = Path.home() / DEFAULT_RELATIVE_XDG_CONFIG_HOME\n\n    candidate = base_config_path / DEFAULT_CONFIG_DIRNAME\n\n    # 4. Legacy config dir (~/.httpie), guaranteed to exist if returned\n    #    But this is only returned if the candidate above does not exist yet\n    #    or if the legacy folder exists (to keep legacy compatibility).\n    # Because the doc states legacy folder guaranteed to exist if returned,\n    # we only return it if candidate doesn't exist and legacy does.\n    legacy_config_dir = Path.home() / DEFAULT_RELATIVE_LEGACY_CONFIG_DIR\n\n    if candidate.exists():\n        return candidate\n    if legacy_config_dir.exists():\n        return legacy_config_dir\n\n    # If none exist, return candidate (XDG path) even if it doesn't exist yet.\n    return candidate", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 384, in <module>\n  File \"<string>\", line 382, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
{"task_id": 328, "prediction_id": 2, "generation": "import os\nfrom pathlib import Path\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # 1. Check if environment variable HTTPIE_CONFIG_DIR is set\n    httpie_config_dir = os.environ.get('HTTPIE_CONFIG_DIR')\n    if httpie_config_dir:\n        return Path(httpie_config_dir).expanduser()\n\n    # 2. Check XDG_CONFIG_HOME environment variable\n    xdg_config_home = os.environ.get('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        # XDG_CONFIG_HOME must be a directory, join with httpie config dirname\n        return Path(xdg_config_home).expanduser() / 'httpie'\n\n    # 3. If on Windows, use %APPDATA%/httpie\n    if os.name == 'nt' or (os.name == 'posix' and os.environ.get('OS', '').startswith('Windows')):\n        # Use APPDATA environment variable or fallback to default Windows config dir\n        appdata = os.environ.get('APPDATA')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        # fallback to default Windows config dir from file content DEFAULT_WINDOWS_CONFIG_DIR\n        # But since we can't import from file content, replicate the logic\n        default_win_config_dir = Path(os.path.expandvars('%APPDATA%')) / 'httpie'\n        return default_win_config_dir\n\n    # 4. Legacy fallback: ~/.httpie directory (guaranteed to exist)\n    legacy_config_dir = Path.home() / '.httpie'\n    return legacy_config_dir", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 179, in <module>\n  File \"<string>\", line 178, in test_2\nAssertionError\n", "passed": false}
{"task_id": 328, "prediction_id": 3, "generation": "import os\nfrom pathlib import Path\nfrom httpie.compat import is_windows\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n\n    # On Windows, use %APPDATA%\\httpie\n    if is_windows:\n        # This is already defined in the file context as DEFAULT_WINDOWS_CONFIG_DIR\n        # But since we are not to import anything from file context, we re-create it\n        appdata = os.getenv('APPDATA')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        else:\n            # Fallback if APPDATA is not set (unlikely on Windows), use home dir\n            return Path.home() / '.httpie'\n\n    # On non-Windows platforms:\n    # 1. Check $XDG_CONFIG_HOME, if set use $XDG_CONFIG_HOME/httpie\n    xdg_config_home = os.getenv('XDG_CONFIG_HOME')\n    if xdg_config_home:\n        return Path(xdg_config_home) / 'httpie'\n\n    # 2. Check legacy $HTTPIE_CONFIG_DIR (used previously as custom directory)\n    httpie_config_dir = os.getenv('HTTPIE_CONFIG_DIR')\n    if httpie_config_dir:\n        return Path(httpie_config_dir)\n\n    # 3. Fallback to default: ~/.config/httpie or legacy ~/.httpie\n    # According to the file content:\n    # DEFAULT_RELATIVE_XDG_CONFIG_HOME = Path('.config')\n    # DEFAULT_RELATIVE_LEGACY_CONFIG_DIR = Path('.httpie')\n    # We replicate the same logic here:\n\n    home = Path.home()\n\n    # Prefer ~/.config/httpie if ~/.config exists\n    xdg_config = home / '.config'\n    if xdg_config.is_dir():\n        return xdg_config / 'httpie'\n\n    # Otherwise fallback to legacy ~/.httpie\n    return home / '.httpie'", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 382, in <module>\n  File \"<string>\", line 380, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
{"task_id": 328, "prediction_id": 4, "generation": "from pathlib import Path\nimport os\nimport sys\n\ndef get_default_config_dir() -> Path:\n    \"\"\"\n    Return the path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only the legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n    <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n    $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    \"\"\"\n    # On Windows, use %APPDATA%\\<DEFAULT_CONFIG_DIRNAME>\n    if sys.platform.startswith('win'):\n        appdata = os.environ.get('APPDATA')\n        if appdata:\n            return Path(appdata) / 'httpie'\n        # If APPDATA not set, fallback to home dir\n        return Path.home() / 'AppData' / 'Roaming' / 'httpie'\n\n    # On non-Windows systems:\n\n    # Check HTTPIE_CONFIG_DIR environment variable\n    env_httpie_config_dir = os.environ.get('HTTPIE_CONFIG_DIR')\n    if env_httpie_config_dir:\n        return Path(env_httpie_config_dir).expanduser()\n\n    # Check XDG_CONFIG_HOME environment variable\n    env_xdg_config_home = os.environ.get('XDG_CONFIG_HOME')\n    if env_xdg_config_home:\n        return Path(env_xdg_config_home).expanduser() / 'httpie'\n\n    # Legacy default: ~/.httpie (guaranteed to exist)\n    legacy_dir = Path.home() / '.httpie'\n    if legacy_dir.exists():\n        return legacy_dir\n\n    # Default XDG config dir ~/.config/httpie\n    return Path.home() / '.config' / 'httpie'", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 371, in <module>\n  File \"<string>\", line 369, in test_extra_0\n  File \"/usr/local/lib/python3.10/os.py\", line 685, in __setitem__\n    putenv(key, value)\nTypeError: 'NoneType' object is not callable\n", "passed": false}
