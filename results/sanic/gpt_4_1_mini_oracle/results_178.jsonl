{"task_id": 178, "prediction_id": 0, "generation": "def add_status_code(code, quiet=None):\n    \"\"\"\n    Decorator used for adding exceptions to :class:`SanicException`.\n    \"\"\"\n    def decorator(cls):\n        # Attach the status code attribute to the exception class\n        cls.status_code = code\n        # Attach the quiet attribute if provided (used to suppress logging maybe)\n        if quiet is not None:\n            cls.quiet = quiet\n\n        # Register the class in the internal exception dictionary keyed by code\n        _sanic_exceptions[code] = cls\n\n        return cls\n\n    return decorator", "message": "passed", "passed": true}
{"task_id": 178, "prediction_id": 1, "generation": "def add_status_code(code, quiet=None):\n    \"\"\"\n    Decorator used for adding exceptions to :class:`SanicException`.\n    \"\"\"\n    def decorator(cls):\n        # Attach the status code to the class\n        cls.status_code = code\n\n        # Attach the status message, if exists in STATUS_CODES\n        cls.status_message = STATUS_CODES.get(code, \"\")\n\n        # Attach the quiet attribute if specified (else None)\n        cls.quiet = quiet\n\n        # Register the exception class by its code in the _sanic_exceptions dict\n        _sanic_exceptions[code] = cls\n\n        return cls\n\n    return decorator", "message": "passed", "passed": true}
{"task_id": 178, "prediction_id": 2, "generation": "def add_status_code(code, quiet=None):\n    \"\"\"\n    Decorator used for adding exceptions to :class:`SanicException`.\n    \"\"\"\n    def decorator(cls):\n        # Assign status_code attribute to the decorated exception class\n        cls.status_code = code\n        # Assign quiet attribute to the decorated exception class\n        cls.quiet = quiet\n\n        # Add the exception class to the _sanic_exceptions dict with status code as key\n        _sanic_exceptions[code] = cls\n\n        return cls\n\n    return decorator", "message": "passed", "passed": true}
{"task_id": 178, "prediction_id": 3, "generation": "def add_status_code(code, quiet=None):\n    \"\"\"\n    Decorator used for adding exceptions to :class:`SanicException`.\n    \"\"\"\n    def decorator(cls):\n        cls.status_code = code\n        cls.status_text = STATUS_CODES.get(code, \"\")\n        if quiet is not None:\n            cls.quiet = quiet\n        _sanic_exceptions[code] = cls\n        return cls\n    return decorator", "message": "passed", "passed": true}
{"task_id": 178, "prediction_id": 4, "generation": "def add_status_code(code, quiet=None):\n    \"\"\"\n    Decorator used for adding exceptions to :class:`SanicException`.\n    \"\"\"\n    def decorator(cls):\n        cls.status_code = code\n        cls.status_message = STATUS_CODES.get(code, \"\")\n        cls.quiet = quiet\n        _sanic_exceptions[code] = cls\n        return cls\n    return decorator", "message": "passed", "passed": true}
