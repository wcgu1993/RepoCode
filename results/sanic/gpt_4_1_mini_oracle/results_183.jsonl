{"task_id": 183, "prediction_id": 0, "generation": "from typing import Union, Optional, Dict\n\ndef html(\n    body: Union[str, bytes, HTMLProtocol],\n    status: int = 200,\n    headers: Optional[Dict[str, str]] = None,\n) -> HTTPResponse:\n    \"\"\"\n    Returns response object with body in html format.\n\n    :param body: str or bytes-ish, or an object with __html__ or _repr_html_.\n    :param status: Response code.\n    :param headers: Custom Headers.\n    \"\"\"\n    # Determine the actual html content if the body is an object with __html__ or _repr_html_\n    if not isinstance(body, (str, bytes)):\n        if hasattr(body, \"__html__\"):\n            body = body.__html__()\n        elif hasattr(body, \"_repr_html_\"):\n            body = body._repr_html_()\n        else:\n            # Fallback: convert to str if no html-specific methods\n            body = str(body)\n\n    # Set content type header for html\n    content_type = \"text/html; charset=utf-8\"\n\n    return HTTPResponse(\n        body=body,\n        status=status,\n        headers=headers,\n        content_type=content_type,\n    )", "message": "passed", "passed": true}
{"task_id": 183, "prediction_id": 1, "generation": "from typing import Union, Optional, Dict\nfrom sanic.http import HTTPResponse, HTMLProtocol\n\n\ndef html(\n    body: Union[str, bytes, HTMLProtocol],\n    status: int = 200,\n    headers: Optional[Dict[str, str]] = None,\n) -> HTTPResponse:\n    \"\"\"\n    Returns response object with body in html format.\n\n    :param body: str or bytes-ish, or an object with __html__ or _repr_html_.\n    :param status: Response code.\n    :param headers: Custom Headers.\n    \"\"\"\n    # If body is bytes, use it directly\n    if isinstance(body, bytes):\n        response_body = body\n    # If body is str, use as is\n    elif isinstance(body, str):\n        response_body = body\n    # Otherwise, try to convert by calling __html__ or _repr_html_\n    else:\n        # Try __html__ method\n        if hasattr(body, \"__html__\") and callable(body.__html__):\n            html_str = body.__html__()\n            if not isinstance(html_str, (str, bytes)):\n                raise TypeError(\n                    f\"__html__ method should return str or bytes, got {type(html_str).__name__}\"\n                )\n            response_body = html_str\n        # Try _repr_html_ method\n        elif hasattr(body, \"_repr_html_\") and callable(body._repr_html_):\n            html_str = body._repr_html_()\n            if not isinstance(html_str, (str, bytes)):\n                raise TypeError(\n                    f\"_repr_html_ method should return str or bytes, got {type(html_str).__name__}\"\n                )\n            response_body = html_str\n        else:\n            raise TypeError(\n                \"body must be str, bytes, or an object implementing __html__ or _repr_html_\"\n            )\n\n    # If response_body is bytes, decode to str for HTTPResponse constructor (which will encode it)\n    if isinstance(response_body, bytes):\n        # decode with utf-8, replace errors to avoid exceptions\n        response_body = response_body.decode(\"utf-8\", errors=\"replace\")\n\n    return HTTPResponse(\n        body=response_body,\n        status=status,\n        headers=headers,\n        content_type=\"text/html; charset=utf-8\",\n    )", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 347, in <module>\nImportError: cannot import name 'HTTPResponse' from 'sanic.http' (/input/test-apps/sanic/sanic/http.py)\n", "passed": false}
{"task_id": 183, "prediction_id": 2, "generation": "from typing import Union, Optional, Dict\n\ndef html(\n    body: Union[str, bytes, HTMLProtocol],\n    status: int = 200,\n    headers: Optional[Dict[str, str]] = None,\n) -> HTTPResponse:\n    \"\"\"\n    Returns response object with body in html format.\n\n    :param body: str or bytes-ish, or an object with __html__ or _repr_html_.\n    :param status: Response code.\n    :param headers: Custom Headers.\n    \"\"\"\n    content_type = \"text/html; charset=utf-8\"\n\n    if hasattr(body, \"__html__\"):\n        rendered = body.__html__()\n        if not isinstance(rendered, (str, bytes)):\n            raise TypeError(f\"__html__() should return str or bytes, not {type(rendered).__name__}\")\n        body = rendered\n    elif hasattr(body, \"_repr_html_\"):\n        rendered = body._repr_html_()\n        if not isinstance(rendered, (str, bytes)):\n            raise TypeError(f\"_repr_html_() should return str or bytes, not {type(rendered).__name__}\")\n        body = rendered\n\n    # If body is bytes, do not encode, else use text() to encode with utf-8\n    if isinstance(body, bytes):\n        return HTTPResponse(\n            body=body,\n            status=status,\n            headers=headers,\n            content_type=content_type,\n        )\n\n    # At this point body should be str (or something convertible to str)\n    if not isinstance(body, str):\n        raise TypeError(f\"Expected str, bytes, or HTMLProtocol, got {type(body).__name__}\")\n\n    return HTTPResponse(\n        body=body,\n        status=status,\n        headers=headers,\n        content_type=content_type,\n    )", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 688, in <module>\n  File \"<string>\", line 687, in test_extra_0\n  File \"<string>\", line 384, in html\nTypeError: Expected str, bytes, or HTMLProtocol, got NoneType\n", "passed": false}
{"task_id": 183, "prediction_id": 3, "generation": "from typing import Dict, Optional, Union\n\nfrom sanic.http import HTTPResponse\nfrom sanic.models.protocol_types import HTMLProtocol\n\n\ndef html(\n    body: Union[str, bytes, HTMLProtocol],\n    status: int = 200,\n    headers: Optional[Dict[str, str]] = None,\n) -> HTTPResponse:\n    \"\"\"\n    Returns response object with body in html format.\n\n    :param body: str or bytes-ish, or an object with __html__ or _repr_html_.\n    :param status: Response code.\n    :param headers: Custom Headers.\n    \"\"\"\n    # If body is bytes, treat it directly as response body\n    if isinstance(body, bytes):\n        return HTTPResponse(\n            body=body,\n            status=status,\n            headers=headers,\n            content_type=\"text/html; charset=utf-8\",\n        )\n\n    # If body is str, return response with text/html content type\n    if isinstance(body, str):\n        return HTTPResponse(\n            body=body,\n            status=status,\n            headers=headers,\n            content_type=\"text/html; charset=utf-8\",\n        )\n\n    # If body is an object with __html__ or _repr_html_ method, call it to get HTML string\n    html_str = None\n    if hasattr(body, \"__html__\"):\n        html_str = body.__html__()\n    elif hasattr(body, \"_repr_html_\"):\n        html_str = body._repr_html_()\n\n    if html_str is None:\n        raise TypeError(\n            \"Body must be str, bytes or have __html__ or _repr_html_ method returning HTML string\"\n        )\n\n    # Return the HTML string as response\n    return HTTPResponse(\n        body=html_str,\n        status=status,\n        headers=headers,\n        content_type=\"text/html; charset=utf-8\",\n    )", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 348, in <module>\nImportError: cannot import name 'HTTPResponse' from 'sanic.http' (/input/test-apps/sanic/sanic/http.py)\n", "passed": false}
{"task_id": 183, "prediction_id": 4, "generation": "from typing import Union, Optional, Dict\nfrom sanic.http import HTTPResponse\nfrom sanic.models.protocol_types import HTMLProtocol\n\n\ndef html(\n    body: Union[str, bytes, HTMLProtocol],\n    status: int = 200,\n    headers: Optional[Dict[str, str]] = None,\n) -> HTTPResponse:\n    \"\"\"\n    Returns response object with body in html format.\n\n    :param body: str or bytes-ish, or an object with __html__ or _repr_html_.\n    :param status: Response code.\n    :param headers: Custom Headers.\n    \"\"\"\n    # Determine if body is bytes, str, or has __html__ / _repr_html_ method\n    if isinstance(body, bytes):\n        # If bytes, return raw response with content-type text/html\n        return HTTPResponse(\n            body=body, status=status, headers=headers, content_type=\"text/html\"\n        )\n    elif isinstance(body, str):\n        # If string, return text response with content-type text/html\n        return HTTPResponse(\n            body, status=status, headers=headers, content_type=\"text/html\"\n        )\n    else:\n        # If body has __html__ or _repr_html_ method, get the HTML content\n        html_content = None\n        if hasattr(body, \"__html__\"):\n            html_content = body.__html__()\n        elif hasattr(body, \"_repr_html_\"):\n            html_content = body._repr_html_()\n        else:\n            # If none of the above, fallback to str()\n            html_content = str(body)\n\n        # Return text response with the obtained HTML content and content-type text/html\n        return HTTPResponse(\n            html_content, status=status, headers=headers, content_type=\"text/html\"\n        )", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 347, in <module>\nImportError: cannot import name 'HTTPResponse' from 'sanic.http' (/input/test-apps/sanic/sanic/http.py)\n", "passed": false}
