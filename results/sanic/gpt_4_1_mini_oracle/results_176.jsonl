{"task_id": 176, "prediction_id": 0, "generation": "def str_to_bool(val: str) -> bool:\n    \"\"\"Takes string and tries to turn it into bool as human would do.\n\n    If val is in case insensitive (\n    \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n    \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    ) returns True.\n    If val is in case insensitive (\n    \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    ) returns False.\n    Else Raise ValueError.\"\"\"\n    true_set = {\n        \"y\", \"yes\", \"yep\", \"yup\", \"t\", \"true\",\n        \"on\", \"enable\", \"enabled\", \"1\"\n    }\n    false_set = {\n        \"n\", \"no\", \"f\", \"false\", \"off\",\n        \"disable\", \"disabled\", \"0\"\n    }\n\n    val_lower = val.strip().lower()\n    if val_lower in true_set:\n        return True\n    elif val_lower in false_set:\n        return False\n    else:\n        raise ValueError(f\"Invalid boolean string: {val!r}\")", "message": "passed", "passed": true}
{"task_id": 176, "prediction_id": 1, "generation": "def str_to_bool(val: str) -> bool:\n    \"\"\"Takes string and tries to turn it into bool as human would do.\n\n    If val is in case insensitive (\n    \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n    \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    ) returns True.\n    If val is in case insensitive (\n    \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    ) returns False.\n    Else Raise ValueError.\"\"\"\n    true_values = {\n        \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n        \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    }\n    false_values = {\n        \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    }\n\n    val_lower = val.strip().lower()\n    if val_lower in true_values:\n        return True\n    if val_lower in false_values:\n        return False\n    raise ValueError(f\"Cannot convert string to bool: '{val}'\")", "message": "passed", "passed": true}
{"task_id": 176, "prediction_id": 2, "generation": "def str_to_bool(val: str) -> bool:\n    \"\"\"Takes string and tries to turn it into bool as human would do.\n\n    If val is in case insensitive (\n    \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n    \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    ) returns True.\n    If val is in case insensitive (\n    \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    ) returns False.\n    Else Raise ValueError.\"\"\"\n    true_set = {\"y\", \"yes\", \"yep\", \"yup\", \"t\", \"true\", \"on\", \"enable\", \"enabled\", \"1\"}\n    false_set = {\"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"}\n\n    val_lower = val.strip().lower()\n    if val_lower in true_set:\n        return True\n    elif val_lower in false_set:\n        return False\n    else:\n        raise ValueError(f\"Cannot interpret '{val}' as boolean.\")", "message": "passed", "passed": true}
{"task_id": 176, "prediction_id": 3, "generation": "def str_to_bool(val: str) -> bool:\n    \"\"\"Takes string and tries to turn it into bool as human would do.\n\n    If val is in case insensitive (\n    \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n    \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    ) returns True.\n    If val is in case insensitive (\n    \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    ) returns False.\n    Else Raise ValueError.\"\"\"\n    true_set = {\"y\", \"yes\", \"yep\", \"yup\", \"t\",\n                \"true\", \"on\", \"enable\", \"enabled\", \"1\"}\n    false_set = {\"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"}\n\n    val_lower = val.strip().lower()\n    if val_lower in true_set:\n        return True\n    elif val_lower in false_set:\n        return False\n    else:\n        raise ValueError(f\"Cannot convert string to bool: {val}\")", "message": "passed", "passed": true}
{"task_id": 176, "prediction_id": 4, "generation": "def str_to_bool(val: str) -> bool:\n    \"\"\"Takes string and tries to turn it into bool as human would do.\n\n    If val is in case insensitive (\n    \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n    \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    ) returns True.\n    If val is in case insensitive (\n    \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    ) returns False.\n    Else Raise ValueError.\"\"\"\n    true_set = {\n        \"y\", \"yes\", \"yep\", \"yup\", \"t\",\n        \"true\", \"on\", \"enable\", \"enabled\", \"1\"\n    }\n    false_set = {\n        \"n\", \"no\", \"f\", \"false\", \"off\", \"disable\", \"disabled\", \"0\"\n    }\n    val_lower = val.strip().lower()\n    if val_lower in true_set:\n        return True\n    if val_lower in false_set:\n        return False\n    raise ValueError(f\"Cannot convert string to bool: {val!r}\")", "message": "passed", "passed": true}
