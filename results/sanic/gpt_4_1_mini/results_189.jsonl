{"task_id": 189, "prediction_id": 0, "generation": "import re\n\ndef fwd_normalize_address(addr: str) -> str:\n    \"\"\"Normalize address fields of proxy headers.\"\"\"\n    # Strip optional surrounding quotes and whitespace\n    addr = addr.strip(\" \\\"'\")\n\n    # Check for IPv6 literal with optional port: \"[IPv6](:port)?\"\n    if addr.startswith(\"[\"):\n        # Extract the IPv6 address inside brackets\n        m = re.match(r\"^\\[(.*?)](?::(\\d{1,5}))?$\", addr)\n        if m:\n            ip = m.group(1).lower()\n            port = m.group(2)\n            # Normalize IPv6 address as lowercase inside brackets\n            if port:\n                return f\"[{ip}]:{port}\"\n            else:\n                return f\"[{ip}]\"\n        # If pattern doesn't match, just lowercase and return as is\n        return addr.lower()\n\n    # For IPv4 or hostname with optional port \"host(:port)?\"\n    m = re.match(r\"^([^:]+)(?::(\\d{1,5}))?$\", addr)\n    if m:\n        host = m.group(1).lower()\n        port = m.group(2)\n        if port:\n            return f\"{host}:{int(port)}\"\n        else:\n            return host\n\n    # If none of the above, just lowercase and return\n    return addr.lower()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 274, in <module>\n  File \"<string>\", line 273, in test_14\nAssertionError\n", "passed": false}
{"task_id": 189, "prediction_id": 1, "generation": "def fwd_normalize_address(addr: str) -> str:\n    \"\"\"Normalize address fields of proxy headers.\"\"\"\n    # Strip whitespace\n    addr = addr.strip()\n\n    # If it is an IPv6 address with brackets, keep it as is\n    if addr.startswith(\"[\") and addr.endswith(\"]\"):\n        return addr.lower()\n\n    # Try to parse host and optional port from the address\n    m = _host_re.fullmatch(addr)\n    if not m:\n        # If no match, return the addr as is (lowercased)\n        return addr.lower()\n\n    host, port = m.groups()\n\n    # Normalize host to lowercase\n    host = host.lower()\n\n    # If host is an IPv6 without brackets, add brackets\n    # Check if host matches IPv6 pattern but does not have brackets\n    if _ipv6_re.fullmatch(host) and not (host.startswith(\"[\") and host.endswith(\"]\")):\n        host = f\"[{host}]\"\n\n    if port:\n        return f\"{host}:{int(port)}\"\n    else:\n        return host", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 269, in <module>\n  File \"<string>\", line 268, in test_14\nAssertionError\n", "passed": false}
{"task_id": 189, "prediction_id": 2, "generation": "import re\n\ndef fwd_normalize_address(addr: str) -> str:\n    \"\"\"Normalize address fields of proxy headers.\"\"\"\n    # Remove surrounding quotes if any\n    if addr.startswith('\"') and addr.endswith('\"'):\n        addr = addr[1:-1]\n\n    addr = addr.strip()\n\n    # If there's a port specified (e.g. \"host:port\"), separate it\n    # But be careful with IPv6 addresses which are wrapped in []\n    # Examples:\n    # 1. 192.168.1.1:8080\n    # 2. [2001:db8::1]:8080\n    # 3. 192.168.1.1\n    # 4. [2001:db8::1]\n\n    # If addr starts with '[' then it might be an IPv6 address\n    if addr.startswith('['):\n        # IPv6 address with optional port, match using regex\n        # pattern: \\[ipv6\\](?::port)?\n        m = re.match(r'^\\[([0-9A-Fa-f:]+)\\](?::(\\d{1,5}))?$', addr)\n        if m:\n            ip = m.group(1).lower() # lowercase hex digits in IPv6\n            port = m.group(2)\n            # Return normalized address as \"[ip]:port\" or just \"[ip]\"\n            if port:\n                return f'[{ip}]:{int(port)}'\n            else:\n                return f'[{ip}]'\n        else:\n            # Invalid format, return as is\n            return addr.lower()\n    else:\n        # No brackets, could be IPv4 or hostname with optional port\n        # Split by last colon if any (for port)\n        parts = addr.rsplit(':', 1)\n        if len(parts) == 2:\n            host, port_str = parts\n            # If port_str is numeric, treat as port, else entire addr is host\n            if port_str.isdigit():\n                host = host.lower()\n                try:\n                    port = int(port_str)\n                except ValueError:\n                    # Invalid port number, ignore port\n                    return host\n                # Return normalized as \"host:port\"\n                return f\"{host}:{port}\"\n            else:\n                # No valid port, treat whole addr as host\n                return addr.lower()\n        else:\n            # Only host part\n            return addr.lower()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 296, in <module>\n  File \"<string>\", line 295, in test_14\nAssertionError\n", "passed": false}
{"task_id": 189, "prediction_id": 3, "generation": "import re\n\ndef fwd_normalize_address(addr: str) -> str:\n    \"\"\"Normalize address fields of proxy headers.\"\"\"\n    # This regex parses an IP with optional port, IPv4 or IPv6.\n    # Matches:\n    #   - IPv6 in brackets: \"[::1]:8080\"\n    #   - IPv4 with optional port: \"192.168.0.1:80\"\n    #   - hostname with optional port\n    # Groups:\n    #   host: IP or hostname (including IPv6 in brackets)\n    #   port: optional port number string\n    m = re.match(r\"^\\[([0-9a-fA-F:.]+)\\](?::(\\d{1,5}))?$|^([^:]+)(?::(\\d{1,5}))?$\", addr)\n    if not m:\n        # If it doesn't match, return as is, trimmed and lowered\n        return addr.strip().lower()\n\n    if m.group(1):  # IPv6 in brackets\n        host = m.group(1).lower()\n        port = m.group(2)\n        normalized = f\"[{host}]\"\n        if port:\n            normalized += f\":{int(port)}\"\n        return normalized\n\n    # IPv4 or hostname\n    host = m.group(3).lower()\n    port = m.group(4)\n    normalized = host\n    # For hostnames, allow internationalized domain names as is.\n    if port:\n        normalized += f\":{int(port)}\"\n    return normalized", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 273, in <module>\n  File \"<string>\", line 272, in test_14\nAssertionError\n", "passed": false}
{"task_id": 189, "prediction_id": 4, "generation": "import re\n\ndef fwd_normalize_address(addr: str) -> str:\n    \"\"\"Normalize address fields of proxy headers.\"\"\"\n    # Strip surrounding whitespace\n    addr = addr.strip()\n    # If the address is enclosed in quotes, remove them\n    if addr.startswith('\"') and addr.endswith('\"') and len(addr) > 1:\n        addr = addr[1:-1]\n\n    # Check if address contains port, e.g. [IPv6]:port or IPv4:port\n    # Handle IPv6 addresses enclosed in []\n    # Separate host/ip and port if present\n    host = addr\n    port = None\n\n    # If it's IPv6 in [], extract address and optional port\n    if host.startswith('['):\n        m = re.match(r\"^\\[(.+)\\](?::(\\d{1,5}))?$\", host)\n        if m:\n            host = m.group(1)\n            port = m.group(2)\n    else:\n        # For IPv4 or hostname with optional port\n        # Make sure we handle only last colon for port separator\n        if ':' in host:\n            # Could be IPv6 without [], unlikely but per RFC should be in []\n            # So treat last colon as port separator for IPv4 or hostname\n            parts = host.rsplit(':', 1)\n            if len(parts) == 2 and parts[1].isdigit():\n                host, port = parts\n\n    # Normalize host to lowercase if it's hostname; keep IP as is\n    # A simplistic check: if host contains only digits and dots or colons (IP), keep as is\n    # else lowercase hostname\n    # Also strip possible surrounding quotes from host\n    host = host.strip()\n    if not (host.replace('.', '').isdigit() or ':' in host):\n        host = host.lower()\n\n    # Validate port number range if exists\n    if port is not None:\n        try:\n            port_int = int(port)\n            if not (0 <= port_int <= 65535):\n                port = None\n            else:\n                port = str(port_int)\n        except (ValueError, TypeError):\n            port = None\n\n    # Rebuild normalized address\n    if ':' in host and not host.startswith('['):\n        # IPv6 without brackets (should be rare) - add brackets\n        host = f\"[{host}]\"\n    if port is not None:\n        return f\"{host}:{port}\"\n    else:\n        return host", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 299, in <module>\n  File \"<string>\", line 298, in test_14\nAssertionError\n", "passed": false}
