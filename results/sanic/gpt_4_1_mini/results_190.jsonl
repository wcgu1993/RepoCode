{"task_id": 190, "prediction_id": 0, "generation": "from typing import Optional, Tuple\nimport re\n\n_ipv6 = \"(?:[0-9A-Fa-f]{0,4}:){2,7}[0-9A-Fa-f]{0,4}\"\n_ipv6_re = re.compile(_ipv6)\n\n\ndef parse_host(host: str) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Split host:port into hostname and port.\n    :return: None in place of missing elements\n    \"\"\"\n    if not host:\n        return None, None\n\n    # Attempt to extract host and port using regex, considering IPv6 brackets\n    # Example matches:\n    # host\n    # host:port\n    # [ipv6]\n    # [ipv6]:port\n    m = re.fullmatch(\n        r\"\\[(?P<host_ipv6>\" + _ipv6 + r\")\\](?::(?P<port>\\d{1,5}))?|(?P<host>[^\\[\\]:]+)(?::(?P<port2>\\d{1,5}))?\",\n        host,\n    )\n    if not m:\n        # Not matching expected patterns, try more naive approach\n        if host.startswith(\"[\") and host.endswith(\"]\"):\n            # Possible IPv6 without port\n            return host[1:-1], None\n        # No port found, return host as lowercase\n        return host.lower(), None\n\n    # Extract host and port\n    if m.group(\"host_ipv6\") is not None:\n        hostname = f\"[{m.group('host_ipv6')}]\"\n        port_str = m.group(\"port\")\n    else:\n        hostname = m.group(\"host\")\n        port_str = m.group(\"port2\")\n\n    if hostname is None:\n        return None, None\n\n    hostname = hostname.lower()\n\n    port: Optional[int] = None\n    if port_str is not None:\n        try:\n            port = int(port_str)\n            if not (0 <= port <= 65535):\n                port = None\n        except ValueError:\n            port = None\n\n    return hostname, port", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 275, in <module>\n  File \"<string>\", line 274, in test_4\nAssertionError\n", "passed": false}
{"task_id": 190, "prediction_id": 1, "generation": "from typing import Optional, Tuple\nimport re\n\n_ipv6 = \"(?:[0-9A-Fa-f]{0,4}:){2,7}[0-9A-Fa-f]{0,4}\"\n_ipv6_re = re.compile(_ipv6)\n\ndef parse_host(host: str) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Split host:port into hostname and port.\n    :return: None in place of missing elements\n    \"\"\"\n    if not host:\n        return None, None\n\n    host = host.strip()\n\n    # If host is enclosed in brackets, e.g. [::1]:8080\n    if host.startswith(\"[\"):\n        # Find the closing bracket for IPv6 host\n        pos = host.find(\"]\")\n        if pos == -1:\n            # Malformed IPv6 literal with no closing bracket, treat entire as hostname\n            return host.lower(), None\n        hostname = host[1:pos]\n        port = None\n        rest = host[pos + 1 :]\n        if rest.startswith(\":\"):\n            port_str = rest[1:]\n            if port_str.isdigit():\n                port = int(port_str)\n            else:\n                port = None\n        # Normalize hostname lower-case safe for IPv6 literal inside brackets\n        # But keep as brackets for IPv6 notation as per fwd_normalize_address\n        # So rebuild to keep brackets.\n        return f\"[{hostname.lower()}]\", port\n\n    # For non-bracketed hosts:\n    # Split on last colon to separate port if any\n    # But be careful with IPv6 without brackets (not recommended but could exist)\n    # Check if host matches pure IPv6 without port:\n    if _ipv6_re.fullmatch(host):\n        # Pure IPv6 without port, return lower-cased with brackets\n        return f\"[{host.lower()}]\", None\n\n    # Otherwise, split rightmost colon\n    if \":\" in host:\n        # Split once on last colon\n        hostname, sep, port_str = host.rpartition(\":\")\n        if port_str.isdigit():\n            # Valid port number\n            return hostname.lower(), int(port_str)\n        else:\n            # Colon but no valid port -> treat whole as hostname\n            return host.lower(), None\n    else:\n        # No colon means no port\n        return host.lower(), None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 277, in <module>\n  File \"<string>\", line 276, in test_4\nAssertionError\n", "passed": false}
{"task_id": 190, "prediction_id": 2, "generation": "import re\nfrom typing import Optional, Tuple\n\n_ipv6 = \"(?:[0-9A-Fa-f]{0,4}:){2,7}[0-9A-Fa-f]{0,4}\"\n_ipv6_re = re.compile(_ipv6)\n_host_re = re.compile(\n    r\"((?:\\[\" + _ipv6 + r\"\\])|[a-zA-Z0-9.\\-]{1,253})(?::(\\d{1,5}))?\"\n)\n\n\ndef parse_host(host: str) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Split host:port into hostname and port.\n    :return: None in place of missing elements\n    \"\"\"\n    if not host:\n        return None, None\n\n    match = _host_re.fullmatch(host.strip())\n    if not match:\n        return None, None\n\n    hostname, port_str = match.groups()\n\n    if hostname is None:\n        return None, None\n\n    # Normalize hostname: strip brackets if IPv6 and lower-case it\n    if hostname.startswith(\"[\") and hostname.endswith(\"]\"):\n        # Remove brackets for IPv6 internal representation (optional)\n        hostname = hostname.lower()\n    else:\n        hostname = hostname.lower()\n\n    if port_str is None:\n        port = None\n    else:\n        try:\n            port = int(port_str)\n            if port < 0 or port > 65535:\n                port = None\n        except ValueError:\n            port = None\n\n    return hostname, port", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 912, in <module>\n  File \"<string>\", line 911, in test_24\nAssertionError\n", "passed": false}
{"task_id": 190, "prediction_id": 3, "generation": "from typing import Optional, Tuple\nimport re\n\n_ipv6 = \"(?:[0-9A-Fa-f]{0,4}:){2,7}[0-9A-Fa-f]{0,4}\"\n_ipv6_re = re.compile(_ipv6)\n\ndef parse_host(host: str) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Split host:port into hostname and port.\n    :return: None in place of missing elements\n    \"\"\"\n    if not host:\n        return None, None\n\n    host = host.strip()\n    # Check if IPv6 with brackets\n    if host.startswith(\"[\"):\n        # IPv6 address should be [addr]:port or just [addr]\n        closing = host.find(\"]\")\n        if closing == -1:\n            # No closing bracket - invalid format, treat whole as hostname\n            return host, None\n        hostname = host[1:closing]\n        port_str = host[closing + 1:]\n        port: Optional[int] = None\n        if port_str.startswith(\":\"):\n            port_part = port_str[1:]\n            if port_part.isdigit():\n                port = int(port_part)\n            else:\n                try:\n                    port = int(port_part)\n                except ValueError:\n                    port = None\n        return hostname, port\n\n    # For non-IPv6 bracketed, split on last colon\n    parts = host.rsplit(\":\", 1)\n    if len(parts) == 2:\n        hostname, port_str = parts\n        if port_str.isdigit():\n            return hostname, int(port_str)\n        else:\n            return host, None  # colon but not a valid port, return entire as hostname\n    else:\n        return host, None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 265, in <module>\n  File \"<string>\", line 264, in test_4\nAssertionError\n", "passed": false}
{"task_id": 190, "prediction_id": 4, "generation": "from typing import Optional, Tuple\nimport re\n\n_ipv6 = \"(?:[0-9A-Fa-f]{0,4}:){2,7}[0-9A-Fa-f]{0,4}\"\n_ipv6_re = re.compile(_ipv6)\n\ndef parse_host(host: str) -> Tuple[Optional[str], Optional[int]]:\n    \"\"\"Split host:port into hostname and port.\n    :return: None in place of missing elements\n    \"\"\"\n    if not host:\n        return None, None\n\n    # Match an IPv6 address in brackets optionally followed by :port\n    m = re.match(r\"^\\[(%s)\\](?::(\\d{1,5}))?$\" % _ipv6, host)\n    if m:\n        hostname = m.group(1)\n        port_str = m.group(2)\n        try:\n            port = int(port_str) if port_str else None\n        except ValueError:\n            port = None\n        return hostname.lower(), port\n\n    # Otherwise, split by the last colon for host:port,\n    # but only if the part after colon is digits (port)\n    parts = host.rsplit(\":\", 1)\n    if len(parts) == 2:\n        hostname, port_str = parts\n        if port_str.isdigit():\n            try:\n                port = int(port_str)\n            except ValueError:\n                port = None\n            return hostname.lower(), port\n\n    # No port found\n    return host.lower(), None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 258, in <module>\n  File \"<string>\", line 257, in test_4\nAssertionError\n", "passed": false}
