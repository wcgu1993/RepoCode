{"task_id": 175, "prediction_id": 0, "generation": "from typing import Dict, Tuple\n\n\ndef remove_entity_headers(headers: Dict[str, str], allowed: Tuple[str, ...] = (\"content-location\", \"expires\")) -> Dict[str, str]:\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n    allowed_lower = {h.lower() for h in allowed}\n    new_headers = {}\n\n    for header, value in headers.items():\n        header_lower = header.lower()\n        if is_entity_header(header_lower):\n            if header_lower in allowed_lower:\n                new_headers[header] = value\n        else:\n            new_headers[header] = value\n\n    return new_headers\n\n\n# Helper function from context functions\n_ENTITY_HEADERS = frozenset(\n    [\n        \"allow\",\n        \"content-encoding\",\n        \"content-language\",\n        \"content-length\",\n        \"content-location\",\n        \"content-md5\",\n        \"content-range\",\n        \"content-type\",\n        \"expires\",\n        \"last-modified\",\n        \"extension-header\",\n    ]\n)\n\n\ndef is_entity_header(header):\n    \"\"\"Checks if the given header is an Entity Header\"\"\"\n    return header.lower() in _ENTITY_HEADERS", "message": "passed", "passed": true}
{"task_id": 175, "prediction_id": 1, "generation": "from typing import Dict, Tuple\n\n\ndef remove_entity_headers(headers: Dict[str, str], allowed: Tuple[str, ...] = (\"content-location\", \"expires\")) -> Dict[str, str]:\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n    # Convert allowed headers to lowercase for case-insensitive comparison\n    allowed_lower = {header.lower() for header in allowed}\n\n    # Create a new dictionary excluding entity headers except those in allowed\n    return {\n        key: value\n        for key, value in headers.items()\n        if not (key.lower() not in allowed_lower and key.lower() in _ENTITY_HEADERS)\n    }", "message": "passed", "passed": true}
{"task_id": 175, "prediction_id": 2, "generation": "from typing import MutableMapping, Tuple\n\n\ndef remove_entity_headers(headers: MutableMapping[str, str], allowed: Tuple[str, ...] = (\"content-location\", \"expires\")) -> MutableMapping[str, str]:\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n    allowed_lower = {h.lower() for h in allowed}\n\n    # Create a new headers dict, excluding entity headers except allowed ones\n    new_headers = {}\n    for key, value in headers.items():\n        key_lower = key.lower()\n        if not is_entity_header(key_lower) or key_lower in allowed_lower:\n            new_headers[key] = value\n    return new_headers\n\n\ndef is_entity_header(header: str) -> bool:\n    \"\"\"Checks if the given header is an Entity Header\"\"\"\n    _ENTITY_HEADERS = frozenset(\n        [\n            \"allow\",\n            \"content-encoding\",\n            \"content-language\",\n            \"content-length\",\n            \"content-location\",\n            \"content-md5\",\n            \"content-range\",\n            \"content-type\",\n            \"expires\",\n            \"last-modified\",\n            \"extension-header\",\n        ]\n    )\n    return header.lower() in _ENTITY_HEADERS", "message": "passed", "passed": true}
{"task_id": 175, "prediction_id": 3, "generation": "from typing import Dict, Tuple\n\n\ndef remove_entity_headers(headers: Dict[str, str], allowed: Tuple[str, ...] = (\"content-location\", \"expires\")) -> Dict[str, str]:\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n    allowed_lower = {key.lower() for key in allowed}\n    # Build a new dict excluding entity headers except the allowed ones\n    return {\n        k: v for k, v in headers.items()\n        if not (k.lower() in _ENTITY_HEADERS and k.lower() not in allowed_lower)\n    }", "message": "passed", "passed": true}
{"task_id": 175, "prediction_id": 4, "generation": "from typing import Dict, Tuple\n\ndef remove_entity_headers(headers: Dict[str, str], allowed: Tuple[str, ...] = (\"content-location\", \"expires\")) -> Dict[str, str]:\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n    allowed_lower = set(h.lower() for h in allowed)\n    filtered_headers = {}\n    for header, value in headers.items():\n        header_lower = header.lower()\n        if is_entity_header(header_lower):\n            if header_lower in allowed_lower:\n                filtered_headers[header] = value\n        else:\n            filtered_headers[header] = value\n    return filtered_headers\n\n\ndef is_entity_header(header: str) -> bool:\n    \"\"\"Checks if the given header is an Entity Header\"\"\"\n    # Reimplementing as given in file content context\n    _ENTITY_HEADERS = frozenset(\n        [\n            \"allow\",\n            \"content-encoding\",\n            \"content-language\",\n            \"content-length\",\n            \"content-location\",\n            \"content-md5\",\n            \"content-range\",\n            \"content-type\",\n            \"expires\",\n            \"last-modified\",\n            \"extension-header\",\n        ]\n    )\n    return header.lower() in _ENTITY_HEADERS", "message": "passed", "passed": true}
