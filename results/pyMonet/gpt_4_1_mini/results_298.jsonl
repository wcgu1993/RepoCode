{"task_id": 298, "prediction_id": 0, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def conditional_function(*args, **kwargs):\n        for condition_function, execute_function in condition_list:\n            if condition_function(*args, **kwargs):\n                return execute_function(*args, **kwargs)\n    return conditional_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 1, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def conditional_function(*args, **kwargs):\n        for condition_function, execute_function in condition_list:\n            if condition_function(*args, **kwargs):\n                return execute_function(*args, **kwargs)\n\n    return conditional_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 2, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function which first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function which first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def conditional_function(*args, **kwargs):\n        for condition_function, execute_function in condition_list:\n            if condition_function(*args, **kwargs):\n                return execute_function(*args, **kwargs)\n        # If no condition matched, do nothing or raise error.\n        # Here we choose to return None.\n        return None\n\n    return conditional_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 3, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n\n    def conditional_function(*args, **kwargs):\n        for condition_function, execute_function in condition_list:\n            if condition_function(*args, **kwargs):\n                return execute_function(*args, **kwargs)\n        # If no condition matched, raise an error or return None\n        # Here we choose to raise an error to avoid silent failures.\n        raise ValueError(\"No condition matched the given arguments.\")\n\n    return conditional_function", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 281, in <module>\n  File \"<string>\", line 276, in test_24\n  File \"<string>\", line 166, in conditional_function\nValueError: No condition matched the given arguments.\n", "passed": false}
{"task_id": 298, "prediction_id": 4, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def inner(*args, **kwargs):\n        for condition_function, execute_function in condition_list:\n            if condition_function(*args, **kwargs):\n                return execute_function(*args, **kwargs)\n    return inner", "message": "passed", "passed": true}
