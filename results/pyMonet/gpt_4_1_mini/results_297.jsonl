{"task_id": 297, "prediction_id": 0, "generation": "from functools import reduce\nfrom typing import Any, Callable\n\ndef pipe(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda current_value, function: function(current_value), functions, value)", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 1, "generation": "from functools import reduce\nfrom typing import Any, Callable, List\n\n\ndef pipe(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda current_value, function: function(current_value), functions, value)", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 2, "generation": "from functools import reduce\nfrom typing import Any, List, Callable\n\ndef pipe(value: Any, *functions: List[Callable]) -> Any:\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda current_value, function: function(current_value), functions, value)", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 3, "generation": "from functools import reduce\nfrom typing import Any, Callable\n\n\ndef pipe(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda current_value, function: function(current_value), functions, value)", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 4, "generation": "from functools import reduce\nfrom typing import Any, Callable\n\ndef pipe(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda current_value, function: function(current_value), functions, value)", "message": "passed", "passed": true}
