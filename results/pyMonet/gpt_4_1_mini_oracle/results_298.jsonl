{"task_id": 298, "prediction_id": 0, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def returned_function(*args, **kwargs):\n        for condition_fn, execute_fn in condition_list:\n            if condition_fn(*args, **kwargs):\n                return execute_fn(*args, **kwargs)\n    return returned_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 1, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def result_function(*args, **kwargs):\n        for condition_func, exec_func in condition_list:\n            if condition_func(*args, **kwargs):\n                return exec_func(*args, **kwargs)\n        # If no condition matched, return None\n        return None\n\n    return result_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 2, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def result_func(*args, **kwargs):\n        for condition_func, execute_func in condition_list:\n            if condition_func(*args, **kwargs):\n                return execute_func(*args, **kwargs)\n        # If no condition matches, return None\n        return None\n\n    return result_func", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 3, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def result_function(*args, **kwargs):\n        for condition_fn, exec_fn in condition_list:\n            if condition_fn(*args, **kwargs):\n                return exec_fn(*args, **kwargs)\n        # If no condition matches, behavior is not defined in doc.\n        # Return None explicitly.\n        return None\n    return result_function", "message": "passed", "passed": true}
{"task_id": 298, "prediction_id": 4, "generation": "from typing import TypeVar, Callable, List, Tuple\n\nT = TypeVar('T')\n\ndef cond(condition_list: List[Tuple[\n    Callable[[T], bool],\n    Callable,\n]]):\n    \"\"\"\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    \"\"\"\n    def result_function(arg):\n        for condition_function, execute_function in condition_list:\n            if condition_function(arg):\n                return execute_function(arg)\n        # If no condition matched, return None\n        return None\n    return result_function", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 219, in <module>\n  File \"<string>\", line 214, in test_5\nTypeError: cond.<locals>.result_function() takes 1 positional argument but 2 were given\n", "passed": false}
