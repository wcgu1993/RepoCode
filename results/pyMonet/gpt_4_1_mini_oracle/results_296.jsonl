{"task_id": 296, "prediction_id": 0, "generation": "from typing import Any, Callable\n\n\ndef compose(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    result = value\n    # Apply each function from right to left on the result\n    for fn in reversed(functions):\n        result = fn(result)\n    return result", "message": "passed", "passed": true}
{"task_id": 296, "prediction_id": 1, "generation": "from typing import Any, Callable\n\ndef compose(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    result = value\n    for func in reversed(functions):\n        result = func(result)\n    return result", "message": "passed", "passed": true}
{"task_id": 296, "prediction_id": 2, "generation": "def compose(value, *functions):\n    \"\"\"\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    # Apply functions from right to left: the last function is applied first on the value,\n    # then the second last on the result, and so on.\n    # If no functions given, return value as is.\n    result = value\n    for fn in reversed(functions):\n        result = fn(result)\n    return result", "message": "passed", "passed": true}
{"task_id": 296, "prediction_id": 3, "generation": "from functools import reduce\nfrom typing import Any, Callable\n\n\ndef compose(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    # Compose functions right to left: apply last function first, then second last, and so on.\n    # Use reduce starting from the rightmost function.\n    return reduce(lambda acc, func: func(acc), reversed(functions), value)", "message": "passed", "passed": true}
{"task_id": 296, "prediction_id": 4, "generation": "from typing import Any, Callable\n\n\ndef compose(value: Any, *functions: Callable) -> Any:\n    \"\"\"\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    # Apply each function from right to left:\n    # That means rightmost function is applied first to the value,\n    # then the next to the left is applied to that result, etc.\n    result = value\n    for fn in reversed(functions):\n        result = fn(result)\n    return result", "message": "passed", "passed": true}
