{"task_id": 157, "prediction_id": 0, "generation": "from six.moves.queue import Queue\nfrom threading import Thread\n\ndef multiplex(q, count=2, queue_factory=lambda: Queue()):\n    \"\"\" Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    \"\"\"\n    # Create 'count' new queues using the factory\n    out_queues = [queue_factory() for _ in range(count)]\n\n    def fanout():\n        while True:\n            item = q.get()\n            # Propagate the item to all output queues\n            for oq in out_queues:\n                oq.put(item)\n            q.task_done()\n\n    # Run the fanout loop in a background thread to forward items as they arrive\n    t = Thread(target=fanout, daemon=True)\n    t.start()\n\n    return tuple(out_queues)", "message": "passed", "passed": true}
{"task_id": 157, "prediction_id": 1, "generation": "from six.moves.queue import Queue\nfrom threading import Thread\n\n\ndef multiplex(q, count=2, queue_factory=lambda: Queue()):\n    \"\"\" Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    \"\"\"\n    # Create a list of output queues using the factory function\n    out_queues = [queue_factory() for _ in range(count)]\n\n    def worker():\n        while True:\n            item = q.get()\n            if item is None:\n                # Propagate the sentinel to all output queues and stop\n                for out_q in out_queues:\n                    out_q.put(None)\n                break\n            for out_q in out_queues:\n                out_q.put(item)\n            q.task_done()\n\n    # Start the worker thread that distributes items\n    thread = Thread(target=worker, daemon=True)\n    thread.start()\n\n    return out_queues", "message": "passed", "passed": true}
{"task_id": 157, "prediction_id": 2, "generation": "from six.moves.queue import Queue\nfrom threading import Thread\n\ndef multiplex(q, count=2, queue_factory=lambda: Queue()):\n    \"\"\" Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    \"\"\"\n    output_queues = [queue_factory() for _ in range(count)]\n\n    def worker():\n        while True:\n            item = q.get()\n            for out_q in output_queues:\n                out_q.put(item)\n            q.task_done()\n\n    t = Thread(target=worker)\n    t.daemon = True\n    t.start()\n\n    return output_queues", "message": "passed", "passed": true}
{"task_id": 157, "prediction_id": 3, "generation": "from six.moves.queue import Queue\nfrom threading import Thread\n\ndef multiplex(q, count=2, queue_factory=lambda: Queue()):\n    \"\"\" Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    \"\"\"\n    # Create output queues using the queue_factory\n    output_queues = [queue_factory() for _ in range(count)]\n\n    def worker():\n        while True:\n            item = q.get()\n            # Put the item into all output queues\n            for out_q in output_queues:\n                out_q.put(item)\n            q.task_done()\n\n    # Start a single daemon thread that reads from q and distributes items\n    t = Thread(target=worker, daemon=True)\n    t.start()\n\n    return output_queues", "message": "passed", "passed": true}
{"task_id": 157, "prediction_id": 4, "generation": "from six.moves.queue import Queue\nfrom threading import Thread\n\n\ndef multiplex(q, count=2, queue_factory=lambda: Queue()):\n    \"\"\" Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    \"\"\"\n    # Create output queues\n    out_queues = [queue_factory() for _ in range(count)]\n\n    def distributor():\n        while True:\n            item = q.get()\n            for oq in out_queues:\n                oq.put(item)\n            q.task_done()\n\n    # Start distributor thread as a daemon so it exits with the main program\n    t = Thread(target=distributor, daemon=True)\n    t.start()\n\n    return out_queues", "message": "passed", "passed": true}
