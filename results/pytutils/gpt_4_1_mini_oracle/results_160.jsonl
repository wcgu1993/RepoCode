{"task_id": 160, "prediction_id": 0, "generation": "import six\nimport warnings\nimport pygments\nimport pygments.styles\nimport pygments.formatters\nimport pygments.lexers\n\ntry:\n    __PP_STYLE = pygments.styles.get_style_by_name('monokai')\n    __PP_FORMATTER = pygments.formatters.get_formatter_by_name('console16m', style=__PP_STYLE)\n    __PP_LEXER_PYTHON = pygments.lexers.get_lexer_by_name('python{}'.format(six.PY3 and '3' or ''))\nexcept Exception:\n    __PP_STYLE = None\n    __PP_FORMATTER = None\n    __PP_LEXER_PYTHON = None\n    warnings.warn('Could not import `pygments`. Disabling syntax highlighting I guess.')\n    pygments = False\n\ndef pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    if not pygments:\n        # If pygments is not available, fall back to simple repr\n        return repr(arg)\n\n    try:\n        # Use pprint.pformat to get a nicely formatted string representation\n        import pprint\n        formatted = pprint.pformat(arg)\n        # Highlight the formatted string using pygments lexer and formatter\n        return pygments.highlight(formatted, lexer, formatter)\n    except Exception:\n        # In case of any error (e.g. lexer or formatter issues), fall back to repr\n        return repr(arg)", "message": "passed", "passed": true}
{"task_id": 160, "prediction_id": 1, "generation": "def pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    import pygments\n    import pygments.formatters\n    import pygments.lexers\n\n    # Use pprint.pformat to get a pretty-printed string from the argument\n    formatted_str = _pprint.pformat(arg)\n\n    # If pygments is not available, just return the plain formatted string\n    if not pygments:\n        return formatted_str\n\n    # Use pygments to highlight the string with given lexer and formatter\n    return pygments.highlight(formatted_str, lexer, formatter)", "message": "passed", "passed": true}
{"task_id": 160, "prediction_id": 2, "generation": "import six\nimport warnings\n\ndef pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    # First, get the pretty-printed string of the argument using pprint\n    pretty_str = _pprint.pformat(arg)\n\n    # If pygments is available, try to highlight the pretty-printed string\n    if pygments:\n        try:\n            # Highlight the string with the given lexer and formatter, result is bytes in Python 3\n            colored_bytes = pygments.highlight(pretty_str, lexer, formatter)\n            # In Python 3, decode bytes to str; in Python 2, highlight returns str already\n            if six.PY3:\n                return colored_bytes.decode('utf-8')\n            else:\n                return colored_bytes\n        except Exception:  # broad exception to fallback gracefully if something goes wrong\n            warnings.warn('Pygments highlight failed, falling back to plain pretty format.')\n            return pretty_str\n    else:\n        # If pygments is not imported/available, just return the pretty string\n        return pretty_str", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 114, in <module>\n  File \"<string>\", line 113, in test_0\nAssertionError\n", "passed": false}
{"task_id": 160, "prediction_id": 3, "generation": "def pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    import pprint\n\n    # Use pprint.pformat to get the pretty-formatted string of the argument\n    formatted_str = pprint.pformat(arg)\n\n    # If pygments is available, use it to highlight the formatted string\n    if pygments:\n        # Highlight using the given lexer and formatter\n        colored_str = pygments.highlight(formatted_str, lexer, formatter)\n        return colored_str\n    else:\n        # If pygments is not available, just return the plain pretty-formatted string\n        return formatted_str", "message": "passed", "passed": true}
{"task_id": 160, "prediction_id": 4, "generation": "def pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n    if pygments:\n        try:\n            return pygments.highlight(formatted, lexer, formatter)\n        except Exception:\n            # In case of any failure in pygments highlighting, fallback gracefully.\n            return formatted\n    else:\n        return formatted", "message": "passed", "passed": true}
