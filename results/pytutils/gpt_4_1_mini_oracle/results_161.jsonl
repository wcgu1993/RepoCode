{"task_id": 161, "prediction_id": 0, "generation": "import sys\nimport pprint as _pprint\n\ntry:\n    import pygments\n    import pygments.styles\n    import pygments.formatters\n    import pygments.lexers\n\n    __PP_STYLE = pygments.styles.get_style_by_name('monokai')\n    __PP_FORMATTER = pygments.formatters.get_formatter_by_name('console16m', style=__PP_STYLE)\n    __PP_LEXER_PYTHON = pygments.lexers.get_lexer_by_name('python3' if sys.version_info[0] >= 3 else 'python')\n\nexcept ImportError:\n    pygments = False\n    __PP_STYLE = None\n    __PP_FORMATTER = None\n    __PP_LEXER_PYTHON = None\n\n\ndef pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    arg = _pprint.pformat(arg)\n\n    if not pygments:\n        return arg\n    return pygments.highlight(arg, lexer, formatter)\n\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    s = pf(arg, lexer=lexer, formatter=formatter)\n    outfile.write(s)", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 1, "generation": "import sys\nimport pprint as _pprint\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if pygments:\n        colored = pygments.highlight(formatted, lexer, formatter)\n        # pygments.highlight returns a str (unicode) that can be directly written to outfile\n        outfile.write(colored)\n    else:\n        outfile.write(formatted)\n    outfile.flush()", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 2, "generation": "def pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if not pygments:\n        print(formatted, file=outfile)\n        return\n\n    colored = pygments.highlight(formatted, lexer, formatter)\n    # pygments.highlight returns a str, which we can write to the output stream directly\n    outfile.write(colored)", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 3, "generation": "import sys\nimport pprint as _pprint\n\ntry:\n    import pygments\nexcept ImportError:\n    pygments = False\n\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if not pygments:\n        print(formatted, file=outfile)\n        return\n\n    colored = pygments.highlight(formatted, lexer, formatter)\n    # colored is a str when pygments is available\n    try:\n        outfile.write(colored)\n    except TypeError:\n        # In some environments outfile may expect bytes\n        outfile.buffer.write(colored.encode('utf-8'))", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 4, "generation": "import sys\nimport pprint as _pprint\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if not pygments:\n        # If pygments is not available, simply print the formatted string\n        print(formatted, file=outfile)\n        return\n\n    colored = pygments.highlight(formatted, lexer, formatter)\n    # Write the colored output directly to the outfile\n    outfile.write(colored)", "message": "passed", "passed": true}
