{"task_id": 154, "prediction_id": 0, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n    # Parse the existing query parameters into a dict of key -> list of values\n    existing_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n\n    # Update the existing query parameters with the new ones\n    for key, value in params.items():\n        if doseq and isinstance(value, (list, tuple)):\n            # If doseq is True and value is a list/tuple, replace with that sequence\n            existing_params[key] = list(value)\n        else:\n            # Otherwise, replace with a single-element list\n            existing_params[key] = [value]\n\n    # Build the new query string\n    new_query = urlencode(existing_params, doseq=True)\n\n    # Construct a new URL with the updated query string\n    new_url = urlparse.urlunparse(parsed_url._replace(query=new_query))\n\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 145, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 1, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n\n    # Parse the existing query parameters into a dict of lists\n    query_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n\n    # Update the query parameters with the new ones\n    for key, value in params.items():\n        if doseq and isinstance(value, (list, tuple)):\n            query_params[key] = list(value)\n        else:\n            query_params[key] = [value]\n\n    # Encode the query parameters back to a query string\n    new_query = urlencode(query_params, doseq=True)\n\n    # Reconstruct the URL with the updated query\n    new_url = urlparse.urlunparse(parsed_url._replace(query=new_query))\n\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 144, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 2, "generation": "try:\n    import urlparse\n    from urllib import urlencode\nexcept ImportError:  # py3k\n    import urllib.parse as urlparse\n    urlencode = urlparse.urlencode\n\n\ndef update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n\n    # Parse the existing query parameters into a list of key-value pairs\n    query_params = urlparse.parse_qsl(parsed_url.query, keep_blank_values=True)\n\n    # Convert the list of pairs into a dictionary that supports multiple values per key\n    # We'll create a dict of key -> list of values\n    query_dict = {}\n    for key, value in query_params:\n        query_dict.setdefault(key, []).append(value)\n\n    # Update or insert the new params, replacing existing keys entirely\n    for key, value in params.items():\n        # If doseq is True and value is iterable (but not a string), store all individual items\n        if doseq and isinstance(value, (list, tuple)):\n            query_dict[key] = list(value)\n        else:\n            # Otherwise, store as a single string value in a list\n            query_dict[key] = [value]\n\n    # Flatten the dict back into a list of key-value pairs for urlencode\n    updated_query_params = []\n    for key, values in query_dict.items():\n        for v in values:\n            updated_query_params.append( (key, v) )\n\n    # Encode the updated query parameters back to a query string\n    updated_query = urlencode(updated_query_params, doseq=True)\n\n    # Rebuild the URL with the updated query string\n    new_url = urlparse.urlunparse(\n        (\n            parsed_url.scheme,\n            parsed_url.netloc,\n            parsed_url.path,\n            parsed_url.params,\n            updated_query,\n            parsed_url.fragment,\n        )\n    )\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 175, in <module>\n  File \"<string>\", line 174, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 3, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n    # Parse the existing query parameters into a dict (values as lists)\n    query_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n    # Update with the given params: for each key, set the value as list (if doseq) or single element list\n    for key, value in params.items():\n        if doseq and isinstance(value, (list, tuple)):\n            query_params[key] = list(value)\n        else:\n            query_params[key] = [value]\n    # Encode the updated query parameters back to a query string\n    new_query = urlencode(query_params, doseq=True)\n    # Rebuild the URL with the new query string\n    new_url = urlparse.urlunparse(parsed_url._replace(query=new_query))\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 139, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 4, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?foo=stuff&biz=baz'\n\n    :param url: URL\n    :type url: str\n    :param params: Query parameters\n    :type params: dict\n    :param doseq: If True, individual key elements in sequence values are encoded separately.\n    :type doseq: bool\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed = urlparse.urlparse(url)\n    # Parse existing query parameters into a dict of lists\n    query_params = urlparse.parse_qs(parsed.query, keep_blank_values=True)\n    # Update query params with new params\n    for key, value in params.items():\n        query_params[key] = value if (not doseq or not isinstance(value, (list, tuple))) else list(value)\n    # Encode query params back to query string\n    new_query = urlencode(query_params, doseq=doseq)\n    # Rebuild URL with the updated query string\n    updated = parsed._replace(query=new_query)\n    return urlparse.urlunparse(updated)", "message": "passed", "passed": true}
