{"task_id": 161, "prediction_id": 0, "generation": "import sys\nimport pprint as _pprint\n\ntry:\n    import pygments\n    import pygments.styles\n    import pygments.formatters\n    import pygments.lexers\n\n    __PP_STYLE = pygments.styles.get_style_by_name('monokai')\n    __PP_FORMATTER = pygments.formatters.get_formatter_by_name('console16m', style=__PP_STYLE)\n    __PP_LEXER_PYTHON = pygments.lexers.get_lexer_by_name('python3' if sys.version_info[0] >= 3 else 'python')\n\nexcept ImportError:\n    pygments = False\n\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if not pygments:\n        print(formatted, file=outfile)\n        return\n\n    colored = pygments.highlight(formatted, lexer, formatter)\n    try:\n        outfile.write(colored)\n    except Exception:\n        # In case writing bytes vs string issues occur, fallback to printing plain formatted\n        print(formatted, file=outfile)", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 1, "generation": "import sys\nimport pprint as _pprint\nimport warnings\n\ntry:\n    import pygments\n    import pygments.styles\n    import pygments.formatters\n    import pygments.lexers\n\n    __PP_STYLE = pygments.styles.get_style_by_name('monokai')\n    __PP_FORMATTER = pygments.formatters.get_formatter_by_name('console16m', style=__PP_STYLE)\n    __PP_LEXER_PYTHON = pygments.lexers.get_lexer_by_name('python3' if sys.version_info[0] >= 3 else 'python')\n\nexcept ImportError:\n    warnings.warn('Could not import `pygments`. Disabling syntax highlighting I guess.')\n    pygments = False\n\n\ndef pf(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER):\n    \"\"\"\n    Pretty formats with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    arg = _pprint.pformat(arg)\n\n    if not pygments:\n        return arg\n    return pygments.highlight(arg, lexer, formatter)\n\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    # Pretty format with color highlighting\n    formatted = pf(arg, lexer, formatter)\n\n    try:\n        # Write to the provided outfile\n        outfile.write(formatted)\n        # Make sure output is flushed immediately\n        outfile.flush()\n    except Exception:\n        # In case outfile doesn't have write or flush,\n        # fallback to printing normally without color\n        print(_pprint.pformat(arg))", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 2, "generation": "import sys\nimport pprint as _pprint\n\ntry:\n    import pygments\n    import pygments.styles\n    import pygments.formatters\n    import pygments.lexers\n\n    __PP_STYLE = pygments.styles.get_style_by_name('monokai')\n    __PP_FORMATTER = pygments.formatters.get_formatter_by_name('console16m', style=__PP_STYLE)\n    __PP_LEXER_PYTHON = pygments.lexers.get_lexer_by_name('python3' if sys.version_info[0] >= 3 else 'python')\n\nexcept ImportError:\n    pygments = False\n\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    s = _pprint.pformat(arg)\n\n    if not pygments:\n        print(s, file=outfile)\n        return\n\n    colored_text = pygments.highlight(s, lexer, formatter)\n    outfile.write(colored_text)", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 3, "generation": "import sys\nimport pprint as _pprint\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    s = _pprint.pformat(arg)\n\n    if not pygments:\n        print(s, file=outfile)\n        return\n\n    colored = pygments.highlight(s, lexer, formatter)\n    outfile.write(colored)", "message": "passed", "passed": true}
{"task_id": 161, "prediction_id": 4, "generation": "import sys\nimport pprint as _pprint\n\ndef pp(arg, lexer=__PP_LEXER_PYTHON, formatter=__PP_FORMATTER, outfile=sys.stdout):\n    \"\"\"\n    Pretty prints with coloring.\n\n    Works in iPython, but not bpython as it does not write directly to term\n    and decodes it instead.\n    \"\"\"\n    formatted = _pprint.pformat(arg)\n\n    if not pygments:\n        print(formatted, file=outfile)\n    else:\n        colored = pygments.highlight(formatted, lexer, formatter)\n        # pygments.highlight returns a str that may contain terminal escape sequences\n        # just write it directly to outfile\n        outfile.write(colored)", "message": "passed", "passed": true}
