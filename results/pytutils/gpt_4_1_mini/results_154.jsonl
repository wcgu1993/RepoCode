{"task_id": 154, "prediction_id": 0, "generation": "from urllib.parse import urlparse, parse_qs, urlencode, urlunparse\n\ndef update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?foo=stuff&biz=baz'\n\n    :param url: URL\n    :type url: str\n    :param params: Query parameters\n    :type params: dict\n    :param doseq: Whether to encode sequences as separate parameters\n    :type doseq: bool\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the input URL into components\n    parsed_url = urlparse(url)\n    # Parse existing query parameters into a dict with list values\n    query_params = parse_qs(parsed_url.query, keep_blank_values=True)\n\n    # Update the query parameters with new params\n    for key, value in params.items():\n        query_params[key] = value if (doseq or not isinstance(value, (list, tuple))) else [value]\n\n    # Encode the updated query parameters\n    new_query = urlencode(query_params, doseq=doseq)\n\n    # Rebuild the URL with the updated query string\n    updated_url = urlunparse(parsed_url._replace(query=new_query))\n\n    return updated_url", "message": "passed", "passed": true}
{"task_id": 154, "prediction_id": 1, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parts = urlparse.urlparse(url)\n\n    # Parse existing query parameters into a dict\n    query_dict = dict(urlparse.parse_qsl(parts.query, keep_blank_values=True))\n\n    # Update the query dict with new params\n    for key, value in params.items():\n        query_dict[key] = value\n\n    # Encode the updated query parameters\n    new_query = urlencode(query_dict, doseq=doseq)\n\n    # Reconstruct the URL with the updated query string\n    new_parts = parts._replace(query=new_query)\n    return urlparse.urlunparse(new_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 140, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 2, "generation": "try:\n    import urlparse\n    from urllib import urlencode\nexcept ImportError:  # py3k\n    import urllib.parse as urlparse\n    urlencode = urlparse.urlencode\n\n\ndef update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n    # Parse the existing query parameters into a dict (list values)\n    query_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n\n    # Update query parameters with the given params\n    for key, value in params.items():\n        # If doseq is True, value can be a sequence, otherwise treat as str\n        if doseq and isinstance(value, (list, tuple)):\n            query_params[key] = [str(v) for v in value]\n        else:\n            query_params[key] = [str(value)]\n\n    # Encode the updated query parameters back to a query string\n    new_query = urlencode(query_params, doseq=True)\n\n    # Reconstruct the full URL with updated query string\n    new_url = urlparse.urlunparse(parsed_url._replace(query=new_query))\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 151, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 3, "generation": "def update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?foo=stuff&biz=baz'\n\n    :param url: URL\n    :type url: str\n    :param params: Query parameters to update or add\n    :type params: dict\n    :param doseq: Whether to treat values in params as sequences\n    :type doseq: bool\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the original URL into components\n    parsed_url = urlparse.urlparse(url)\n    # Parse existing query parameters into a dict of lists\n    query_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n    # Update query parameters with the provided params\n    for key, value in params.items():\n        # If doseq is True and value is a list/tuple, replace with all values\n        if doseq and isinstance(value, (list, tuple)):\n            query_params[key] = list(map(str, value))\n        else:\n            # Otherwise, replace with single value as list\n            query_params[key] = [str(value)]\n    # Encode the updated query parameters into a query string\n    new_query = urlencode(query_params, doseq=True)\n    # Rebuild the URL with the new query string\n    new_url = urlparse.urlunparse(parsed_url._replace(query=new_query))\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 143, in test_3\nAssertionError\n", "passed": false}
{"task_id": 154, "prediction_id": 4, "generation": "try:\n    import urlparse\n    from urllib import urlencode\nexcept ImportError:  # py3k\n    import urllib.parse as urlparse\n    urlencode = urlparse.urlencode\n\ndef update_query_params(url, params, doseq=True):\n    \"\"\"\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    \"\"\"\n    # Parse the URL into components\n    parsed_url = urlparse.urlparse(url)\n    # Parse the existing query parameters into a dict preserving duplicates if any\n    query_params = urlparse.parse_qs(parsed_url.query, keep_blank_values=True)\n\n    # Update with new params (overwrite existing keys)\n    for k, v in params.items():\n        query_params[k] = [v] if not (doseq and isinstance(v, (list, tuple))) else v\n\n    # Encode the new query string\n    new_query = urlencode(query_params, doseq=doseq)\n\n    # Reconstruct the URL with the updated query string\n    new_url = urlparse.urlunparse(\n        (parsed_url.scheme, parsed_url.netloc, parsed_url.path,\n         parsed_url.params, new_query, parsed_url.fragment)\n    )\n\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 150, in test_3\nAssertionError\n", "passed": false}
