{"task_id": 124, "prediction_id": 0, "generation": "from typing import Iterable, Type, TypeVar\nfrom typed_ast import ast3 as ast\n\nT = TypeVar('T', bound=ast.AST)\n\ndef find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    # Iterate over all nodes in the AST tree using ast.walk,\n    # yield those that are instances of the specified type.\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 1, "generation": "from typing import Iterable, Type, TypeVar\nfrom typed_ast import ast3 as ast\n\nT = TypeVar('T', bound=ast.AST)\n\ndef find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    return (node for node in ast.walk(tree) if isinstance(node, type_))", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 2, "generation": "from typing import Iterable, Type, TypeVar\nfrom typed_ast import ast3 as ast\n\nT = TypeVar('T', bound=ast.AST)\n\ndef find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    return (node for node in ast.walk(tree) if isinstance(node, type_))", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 3, "generation": "from typing import Iterable, Type, TypeVar\nfrom typed_ast import ast3 as ast\n\nT = TypeVar('T', bound=ast.AST)\n\ndef find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 4, "generation": "from typing import Iterable, Type, TypeVar\nfrom typed_ast import ast3 as ast\n\nT = TypeVar('T', bound=ast.AST)\n\ndef find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    # Using ast.walk to iterate over all nodes in the tree\n    # Yield nodes that are instances of the given type_\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node", "message": "passed", "passed": true}
