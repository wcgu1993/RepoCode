{"task_id": 148, "prediction_id": 0, "generation": "from youtube_dl.aes import key_schedule_core\n\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    expanded_key = list(data)\n    key_size = len(data)  # 16, 24, or 32 bytes\n    if key_size not in {16, 24, 32}:\n        raise ValueError(\"Invalid key size: must be 16, 24, or 32 bytes\")\n\n    # Number of 4-byte words in the key\n    Nk = key_size // 4\n    # Number of 4-byte words in the expanded key\n    # AES standard rounds + 1 * 4 words, so:\n    # 16 bytes -> 44 words (176 bytes)\n    # 24 bytes -> 52 words (208 bytes)\n    # 32 bytes -> 60 words (240 bytes)\n    Nb = 4\n    Nr = {16: 10, 24: 12, 32: 14}[key_size]\n    expanded_key_words = Nk * [0]  # Will grow dynamically, this is only initial length\n\n    # Convert expanded_key list to words (4 bytes each) for processing\n    # We'll store expanded keys as words (lists of 4 ints)\n    key_words = [expanded_key[i * 4:(i + 1) * 4] for i in range(Nk)]\n    expanded_words = key_words.copy()\n\n    i = Nk\n    while len(expanded_words) < Nb * (Nr + 1):\n        temp = expanded_words[-1].copy()\n\n        if i % Nk == 0:\n            temp = key_schedule_core(temp, i // Nk - 1)\n        elif Nk > 6 and i % Nk == 4:\n            # For 256-bit key, extra sub_bytes step at i mod Nk == 4\n            from youtube_dl.aes import sub_bytes\n            temp = sub_bytes(temp)\n\n        # XOR with word Nk positions before\n        prev_word = expanded_words[i - Nk]\n        new_word = [x ^ y for x, y in zip(prev_word, temp)]\n\n        expanded_words.append(new_word)\n        i += 1\n\n    # Flatten expanded_words back to a list of ints\n    expanded_key = []\n    for word in expanded_words:\n        expanded_key.extend(word)\n\n    return expanded_key", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 448, in <module>\n  File \"<string>\", line 447, in test_36\n  File \"<string>\", line 151, in key_expansion\nValueError: Invalid key size: must be 16, 24, or 32 bytes\n", "passed": false}
{"task_id": 148, "prediction_id": 1, "generation": "from youtube_dl.aes import key_schedule_core\n\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    key_size = len(data)\n    if key_size not in (16, 24, 32):\n        raise ValueError(\"Key length must be 16, 24 or 32 bytes\")\n\n    # Number of 32-bit words in the original key\n    Nk = key_size // 4\n    # Number of rounds depending on key size\n    Nr = {4: 10, 6: 12, 8: 14}[Nk]\n    # Total number of 32-bit words in expanded key\n    total_words = 4 * (Nr + 1)\n\n    # The expanded key will be a list of bytes\n    expanded_key = list(data)\n\n    rcon_iteration = 1\n\n    while len(expanded_key) < total_words * 4:\n        # Get the last 4 bytes (a word) from the current expanded key\n        temp = expanded_key[-4:]\n\n        # Every Nk words, apply the core key schedule function\n        if len(expanded_key) // 4 % Nk == 0:\n            temp = key_schedule_core(temp, rcon_iteration)\n            rcon_iteration += 1\n        # For 256-bit keys, also apply sub_bytes to the word every 4th word (except words multiple of Nk)\n        elif Nk == 8 and len(expanded_key) // 4 % Nk == 4:\n            # sub_bytes is applied on temp here\n            # Since key_schedule_core imports sub_bytes internally, we need to replicate sub_bytes usage\n            # But sub_bytes is not provided in context functions or file content.\n            # To avoid that, we trust the instructions only to use key_schedule_core and xor given.\n            # Here, code usually would call sub_bytes on temp, but since unavailable, leave as is.\n            # But from AES spec, for Nk=8 keys: every 4th word applies sub_bytes without rotation or RCON xor.\n            # We will implement sub_bytes here inline:\n            # Since sub_bytes is not provided, and neither S-box, we cannot perform it.\n            # Hence this part cannot be implemented exactly as in AES spec.\n            # The safest way is to skip this step or raise NotImplementedError.\n            # However, according to instructions, we only have key_schedule_core from context functions.\n            # So we will implement a local sub_bytes here using standard AES S-box from pycryptodome.\n\n            # Import here\n            from Cryptodome.Cipher import AES\n            # Unfortunately AES.sbox is not exposed in pycryptodome. We must define S_box manually.\n\n            S_BOX = (\n                0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,\n                0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n                0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,\n                0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n                0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,\n                0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n                0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,\n                0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n                0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,\n                0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n                0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,\n                0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n                0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,\n                0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n                0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,\n                0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n                0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,\n                0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n                0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,\n                0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n                0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,\n                0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n                0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,\n                0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n                0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,\n                0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n                0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,\n                0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n                0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,\n                0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n                0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,\n                0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\n            )\n            temp = [S_BOX[b] for b in temp]\n\n        # XOR temp with the word Nk positions before and append to the expanded key\n        prev_word = expanded_key[-4 * Nk: -4 * Nk + 4]\n        expanded_word = [a ^ b for a, b in zip(temp, prev_word)]\n        expanded_key.extend(expanded_word)\n\n    return expanded_key", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 488, in <module>\n  File \"<string>\", line 487, in test_36\n  File \"<string>\", line 150, in key_expansion\nValueError: Key length must be 16, 24 or 32 bytes\n", "passed": false}
{"task_id": 148, "prediction_id": 2, "generation": "from youtube_dl.aes import key_schedule_core\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    # Determine key length and expanded key length\n    key_length = len(data)  # 16, 24 or 32\n    if key_length == 16:\n        expanded_key_length = 176\n        nk = 4  # number of 32-bit words in the key\n        nr = 10 # number of rounds\n    elif key_length == 24:\n        expanded_key_length = 208\n        nk = 6\n        nr = 12\n    elif key_length == 32:\n        expanded_key_length = 240\n        nk = 8\n        nr = 14\n    else:\n        raise ValueError(\"Invalid key size: must be 16, 24 or 32 bytes\")\n\n    # Initialize expanded key with original key data\n    expanded_key = list(data)\n\n    rcon_iteration = 1\n    i = nk\n    # Expand until we fill the expanded key to desired length\n    while len(expanded_key) < expanded_key_length:\n        # Get previous 4 bytes (one word)\n        temp = expanded_key[-4:]\n\n        if i % nk == 0:\n            # Apply core schedule function (rotate, sub, RCON XOR)\n            temp = key_schedule_core(temp, rcon_iteration)\n            rcon_iteration += 1\n        elif nk > 6 and i % nk == 4:\n            # For 256-bit keys, apply sub_bytes to temp when i mod nk == 4\n            temp = sub_bytes(temp)\n\n        # XOR temp with the word nk positions before\n        word_start = (i - nk) * 4\n        word = expanded_key[word_start: word_start + 4]\n        xored = [a ^ b for a, b in zip(word, temp)]\n        expanded_key += xored\n\n        i += 1\n\n    return expanded_key\n\n\n# sub_bytes function is needed for key_expansion in the nk>6 case\n# Since it is used in key_schedule_core and known in the codebase,\n# we define it here according to AES spec (using AES S-box):\n\nS_BOX = [\n    # 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  #0\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  #1\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  #2\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  #3\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  #4\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  #5\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  #6\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  #7\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  #8\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  #9\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  #A\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  #B\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  #C\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  #D\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  #E\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16   #F\n]\n\n\ndef sub_bytes(data):\n    \"\"\"\n    Substitute bytes using AES S-box\n\n    @param {int[]} data 4-byte list\n    @returns {int[]} substituted bytes list\n    \"\"\"\n    return [S_BOX[b] for b in data]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 481, in <module>\n  File \"<string>\", line 480, in test_36\n  File \"<string>\", line 162, in key_expansion\nValueError: Invalid key size: must be 16, 24 or 32 bytes\n", "passed": false}
{"task_id": 148, "prediction_id": 3, "generation": "from youtube_dl.aes import key_schedule_core\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    # Determine key length and number of rounds based on AES specs\n    key_len = len(data)\n    if key_len == 16:\n        # AES-128: 10 rounds + initial key => 11 * 16 = 176 bytes expanded key\n        expanded_key_size = 176\n        rounds = 10\n    elif key_len == 24:\n        # AES-192: 12 rounds + initial key => 13 * 16 = 208 bytes\n        expanded_key_size = 208\n        rounds = 12\n    elif key_len == 32:\n        # AES-256: 14 rounds + initial key => 15 * 16 = 240 bytes\n        expanded_key_size = 240\n        rounds = 14\n    else:\n        raise ValueError(\"Key length must be 16, 24, or 32 bytes\")\n\n    expanded_key = data[:]\n    rcon_iteration = 1\n    bytes_generated = key_len\n\n    # The expanded key is generated 4 bytes at a time\n    # The iteration step in key_schedule_core operates on 4-byte words\n    # Each round adds 16 bytes (4 words)\n    while bytes_generated < expanded_key_size:\n        # Last 4 bytes of the current expanded key\n        temp = expanded_key[-4:]\n\n        # Every key_len bytes, apply core transformation\n        if bytes_generated % key_len == 0:\n            temp = key_schedule_core(temp, rcon_iteration)\n            rcon_iteration += 1\n        # For AES-256, extra substitution every 32 bytes but not at key_len step\n        elif key_len == 32 and (bytes_generated % key_len) == 16:\n            # Apply sub_bytes only (no rotation or RCON)\n            from youtube_dl.aes import sub_bytes  # import here to avoid global import\n            temp = sub_bytes(temp)\n\n        # XOR with the 4 bytes key_len bytes before the current position\n        for i in range(4):\n            byte = expanded_key[bytes_generated - key_len + i] ^ temp[i]\n            expanded_key.append(byte)\n\n        bytes_generated += 4\n\n    return expanded_key", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 448, in <module>\n  File \"<string>\", line 447, in test_36\n  File \"<string>\", line 162, in key_expansion\nValueError: Key length must be 16, 24, or 32 bytes\n", "passed": false}
{"task_id": 148, "prediction_id": 4, "generation": "from youtube_dl.aes import key_schedule_core\n\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    key_len = len(data)\n    if key_len not in (16, 24, 32):\n        raise ValueError(\"Key length must be 16, 24, or 32 bytes\")\n\n    # Number of 4-byte words comprising the key\n    Nk = key_len // 4\n    # Number of rounds + 1 (depending on key length)\n    Nr = {4: 10, 6: 12, 8: 14}[Nk]\n    # Number of words in the expanded key\n    Nb = 4\n    expanded_key_words = Nb * (Nr + 1)  # total 4-byte words in expanded key\n\n    # Expanded key as list of ints (bytes)\n    expanded_key = list(data)\n\n    rcon_iteration = 1  # Rcon round iteration index\n\n    while len(expanded_key) < expanded_key_words * 4:\n        # Last 4 bytes of currently expanded key\n        temp = expanded_key[-4:]\n\n        if (len(expanded_key) // 4) % Nk == 0:\n            temp = key_schedule_core(temp, rcon_iteration)\n            rcon_iteration += 1\n        elif Nk > 6 and (len(expanded_key) // 4) % Nk == 4:\n            # For 256-bit key, apply sub_bytes to temp\n            from youtube_dl.aes import sub_bytes\n            temp = sub_bytes(temp)\n\n        # XOR temp with word Nk positions before\n        word_before = expanded_key[-Nk * 4 : -Nk * 4 + 4]\n        temp = [x ^ y for x, y in zip(temp, word_before)]\n\n        expanded_key.extend(temp)\n\n    return expanded_key", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 439, in <module>\n  File \"<string>\", line 438, in test_36\n  File \"<string>\", line 150, in key_expansion\nValueError: Key length must be 16, 24, or 32 bytes\n", "passed": false}
