{"task_id": 150, "prediction_id": 0, "generation": "from math import ceil\nfrom youtube_dl.aes import shift_rows_inv, mix_columns_inv\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    # Initial AddRoundKey (last round key)\n    data = xor(data, expanded_key[rounds * 16: (rounds + 1) * 16])\n\n    # Perform rounds in reverse order\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)  # We need the inverse of sub_bytes (not given in context but must exist)\n        data = xor(data, expanded_key[i * 16: (i + 1) * 16])\n        data = mix_columns_inv(data)\n\n    # Final round (no mix_columns_inv)\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data\n\n# Helper functions xor and sub_bytes_inv must be defined for correctness.\n# From file content, xor presumably is defined somewhere else, so we define it here:\ndef xor(a, b):\n    return [x ^ y for x, y in zip(a, b)]\n\n# The inverse S-box substitution (sub_bytes_inv) is not provided in the context.\n# We must implement or import it. Since not provided, we provide a placeholder.\n\n# Placeholder for inverse substitution bytes function\n# In the original codebase this should be implemented similar to sub_bytes but inverse.\ndef sub_bytes_inv(data):\n    # This is a stub implementation; in the actual codebase, it should perform the inverse S-box substitution.\n    # Since `sub_bytes` is used in encryption, decryption requires inverse table.\n    # Without the actual S-box inverse table this cannot be implemented correctly here.\n    raise NotImplementedError(\"Inverse substitute bytes function (sub_bytes_inv) is not implemented.\")", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 442, in <module>\n  File \"<string>\", line 439, in test_2\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 1, "generation": "from youtube_dl.aes import shift_rows_inv, mix_columns_inv\n\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16: (i + 1) * 16])\n        data = mix_columns_inv(data)\n\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data\n\n\n# Helper functions required but not provided in context (must be implemented here)\n\n# AES Inverse S-box for sub_bytes_inv\nINVERSE_SBOX = [\n    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,\n    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\n    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,\n    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\n    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,\n    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,\n    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\n    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,\n    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\n    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,\n    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,\n    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\n    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,\n    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\n    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,\n    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,\n    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\n    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,\n    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\n    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,\n    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,\n    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\n    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,\n    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\n    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,\n    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,\n    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,\n]\n\ndef sub_bytes_inv(state):\n    \"\"\"Apply inverse S-box substitution to each byte in the state.\"\"\"\n    return [INVERSE_SBOX[b] for b in state]\n\n\ndef xor(a, b):\n    \"\"\"XOR two lists of integers bytewise.\"\"\"\n    return [x ^ y for x, y in zip(a, b)]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 470, in <module>\n  File \"<string>\", line 467, in test_2\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 2, "generation": "from youtube_dl.aes import shift_rows_inv, mix_columns_inv\n\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16:(i + 1) * 16])\n        data = mix_columns_inv(data)\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data\n\n\ndef xor(a, b):\n    return [x ^ y for x, y in zip(a, b)]\n\n\ndef sub_bytes_inv(state):\n    \"\"\"\n    Apply the inverse S-box (substitution box) transformation to the given state.\n    This is required for AES decryption.\n\n    :param state: list of 16 ints (bytes)\n    :return: list of 16 ints after inverse substitution\n    \"\"\"\n    INV_SBOX = [\n        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,\n        0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\n        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,\n        0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\n        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,\n        0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\n        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,\n        0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\n        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,\n        0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\n        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,\n        0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\n        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,\n        0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\n        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,\n        0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\n        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,\n        0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\n        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,\n        0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\n        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,\n        0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\n        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,\n        0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\n        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,\n        0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\n        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,\n        0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\n        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,\n        0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\n        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,\n        0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,\n    ]\n    return [INV_SBOX[b] for b in state]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 470, in <module>\n  File \"<string>\", line 467, in test_2\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 3, "generation": "from youtube_dl.aes import shift_rows_inv, mix_columns_inv\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])\n    for i in range(rounds - 1, -1, -1):\n        data = shift_rows_inv(data)\n        data = xor(data, expanded_key[i * 16:(i + 1) * 16])\n        if i != 0:\n            data = mix_columns_inv(data)\n\n    return data\n\n\ndef xor(a, b):\n    return [x ^ y for x, y in zip(a, b)]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 437, in <module>\n  File \"<string>\", line 432, in test_3\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 4, "generation": "from youtube_dl.aes import shift_rows_inv, mix_columns_inv\n\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])  # last round key addition\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16:(i + 1) * 16])\n        data = mix_columns_inv(data)\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 421, in <module>\n  File \"<string>\", line 418, in test_2\nAssertionError\n", "passed": false}
