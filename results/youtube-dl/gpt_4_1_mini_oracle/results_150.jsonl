{"task_id": 150, "prediction_id": 0, "generation": "from youtube_dl.aes import xor, shift_rows_inv, sub_bytes_inv, mix_columns_inv\nfrom math import ceil\n\nBLOCK_SIZE_BYTES = 16\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    data = xor(data, expanded_key[rounds * BLOCK_SIZE_BYTES:(rounds + 1) * BLOCK_SIZE_BYTES])\n    for i in range(rounds - 1, -1, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES:(i + 1) * BLOCK_SIZE_BYTES])\n        if i != 0:\n            data = mix_columns_inv(data)\n\n    return data", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 449, in <module>\n  File \"<string>\", line 448, in test_5\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 1, "generation": "from youtube_dl.aes import xor, sub_bytes_inv, shift_rows_inv, mix_columns_inv\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16:(i + 1) * 16])\n        data = mix_columns_inv(data)\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 420, in <module>\n  File \"<string>\", line 417, in test_2\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 2, "generation": "from youtube_dl.aes import xor, sub_bytes_inv, shift_rows_inv, mix_columns_inv\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16: (rounds + 1) * 16])\n    for i in range(rounds - 1, 0, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16: (i + 1) * 16])\n        data = mix_columns_inv(data)\n    data = shift_rows_inv(data)\n    data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:16])\n\n    return data", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 420, in <module>\n  File \"<string>\", line 417, in test_2\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 3, "generation": "from youtube_dl.aes import xor, shift_rows_inv, sub_bytes_inv, mix_columns_inv\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // 16 - 1\n\n    data = xor(data, expanded_key[rounds * 16:(rounds + 1) * 16])\n    for i in range(rounds - 1, -1, -1):\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n        data = xor(data, expanded_key[i * 16:(i + 1) * 16])\n        if i != 0:\n            data = mix_columns_inv(data)\n\n    return data", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 446, in <module>\n  File \"<string>\", line 445, in test_5\nAssertionError\n", "passed": false}
{"task_id": 150, "prediction_id": 4, "generation": "from youtube_dl.aes import xor, shift_rows_inv, sub_bytes_inv, mix_columns_inv\nfrom math import ceil\n\nBLOCK_SIZE_BYTES = 16\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    # Initial AddRoundKey step\n    state = xor(data, expanded_key[rounds * BLOCK_SIZE_BYTES:(rounds + 1) * BLOCK_SIZE_BYTES])\n\n    # Perform rounds in reverse order from rounds-1 down to 1\n    for round_index in range(rounds - 1, 0, -1):\n        state = shift_rows_inv(state)\n        state = sub_bytes_inv(state)\n        state = xor(state, expanded_key[round_index * BLOCK_SIZE_BYTES:(round_index + 1) * BLOCK_SIZE_BYTES])\n        state = mix_columns_inv(state)\n\n    # Final round (round 0)\n    state = shift_rows_inv(state)\n    state = sub_bytes_inv(state)\n    state = xor(state, expanded_key[0:BLOCK_SIZE_BYTES])\n\n    return state", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 428, in <module>\n  File \"<string>\", line 425, in test_2\nAssertionError\n", "passed": false}
