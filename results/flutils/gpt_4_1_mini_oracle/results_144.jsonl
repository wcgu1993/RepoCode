{"task_id": 144, "prediction_id": 0, "generation": "from collections.abc import Iterator, KeysView, ValuesView\nfrom collections import UserList, deque, frozenset, list, set, tuple\n\ndef is_list_like(\n        obj: object\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like;\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    \n    # Using the predefined tuple of acceptable list-like types\n    # The _LIST_LIKE tuple is available in file content but we are not to import it from there\n    # So we redefine a similar tuple here for usage\n    \n    # Import is_subclass_of_any helper from context\n    from flutils.objutils import is_subclass_of_any\n    \n    _LIST_LIKE = (\n        list,\n        set,\n        frozenset,\n        tuple,\n        deque,\n        Iterator,\n        ValuesView,\n        KeysView,\n        UserList\n    )\n    \n    # Explicitly exclude types that are not list-like\n    # Checking common non list-like types here as per docstring\n    _not_list_like_types = (\n        type(None),\n        bool,\n        bytes,\n        # collections types that are not list-like\n        # these are imports like ChainMap, Counter, OrderedDict, UserDict, UserString, defaultdict\n        # Decimal from decimal module,\n        # dict, float, int, str\n    )\n    \n    # For the non-list-like collections, import them precisely\n    from collections import ChainMap, Counter, OrderedDict, UserDict, UserString, defaultdict\n    from decimal import Decimal\n    \n    _not_list_like_types += (\n        ChainMap,\n        Counter,\n        OrderedDict,\n        UserDict,\n        UserString,\n        defaultdict,\n        Decimal,\n        dict,\n        float,\n        int,\n        str,\n    )\n    \n    # If the obj is instance of any of _not_list_like_types, return False immediately\n    if isinstance(obj, _not_list_like_types):\n        return False\n    \n    # Otherwise check if obj's class is subclass of any of the list-like classes\n    return is_subclass_of_any(obj, *_LIST_LIKE)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 169, in <module>\nImportError: cannot import name 'frozenset' from 'collections' (/usr/local/lib/python3.10/collections/__init__.py)\n", "passed": false}
{"task_id": 144, "prediction_id": 1, "generation": "from typing import Any as _Any\nfrom collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom flutils.objutils import is_subclass_of_any\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # Exclude None explicitly\n    if obj is None:\n        return False\n\n    # Exclude explicitly these non-list-like types:\n    # bool, bytes, str, dict, float, int\n    # (Their checking by type avoids issues in isinstance that can be subclasses)\n    if isinstance(obj, (bool, bytes, str, dict, float, int)):\n        return False\n\n    return is_subclass_of_any(\n        obj,\n        UserList,\n        Iterator,\n        KeysView,\n        ValuesView,\n        deque,\n        frozenset,\n        list,\n        set,\n        tuple,\n    )", "message": "passed", "passed": true}
{"task_id": 144, "prediction_id": 2, "generation": "from typing import Any as _Any\nfrom collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom flutils.objutils import is_subclass_of_any\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # Immediate exclusion of explicit non-list-like types:\n    # None, bool, bytes, str, float, int and dict-like types should return False.\n    if obj is None:\n        return False\n\n    # Exclude explicit types known not to be list-like\n    if isinstance(obj, (bool, bytes, str, float, int, dict)):\n        return False\n\n    # Use is_subclass_of_any to check inclusion in list-like classes\n    list_like_classes = (\n        UserList,\n        Iterator,\n        KeysView,\n        ValuesView,\n        deque,\n        frozenset,\n        list,\n        set,\n        tuple,\n    )\n\n    if is_subclass_of_any(obj, *list_like_classes):\n        return True\n\n    # Additionally, check if iterable (excluding strings and bytes handled above)\n    try:\n        iter(obj)\n    except TypeError:\n        return False\n\n    # If it passed iteration, but isn't known list_like class, could disallow some types:\n    # To respect docstring exclusions, double check it's not dict-like or other excluded types\n    # Already excluded dict and known types above, so safe to accept iterable now\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 304, in <module>\n  File \"<string>\", line 303, in test_0\nAssertionError\n", "passed": false}
{"task_id": 144, "prediction_id": 3, "generation": "from typing import Any as _Any\nfrom collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom flutils.objutils import is_subclass_of_any\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # Reject None explicitly\n    if obj is None:\n        return False\n\n    # Reject explicit non-list-like types\n    if isinstance(obj, (bool, bytes, str, dict, float, int)):\n        return False\n\n    # Check if obj is instance of any list-like classes\n    if is_subclass_of_any(\n            obj,\n            UserList,\n            Iterator,\n            KeysView,\n            ValuesView,\n            deque,\n            frozenset,\n            list,\n            set,\n            tuple,\n    ):\n        return True\n\n    # Additionally, check if obj is iterable and not one of the rejected types above.\n    # But since the docstring examples show that sorted('hello') (which returns a list)\n    # returns True, and 'hello' (str) returns False,\n    # Any object that behaves like a list-like instance should be one of the above\n    # or at least iterable but not a str/bytes/bool etc.\n\n    # Check for iterable protocol to catch some edge cases:\n    try:\n        iter(obj)\n    except TypeError:\n        return False\n\n    # Reject strings, bytes, bool again just in case (to cover subclasses too)\n    if isinstance(obj, (str, bytes, bool)):\n        return False\n\n    # Since obj is iterable and passed above checks, treat it as list-like\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 310, in <module>\n  File \"<string>\", line 309, in test_0\nAssertionError\n", "passed": false}
{"task_id": 144, "prediction_id": 4, "generation": "from typing import Any as _Any\nfrom collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom flutils.objutils import is_subclass_of_any\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # First rule out None explicitly\n    if obj is None:\n        return False\n\n    # Exclude bool explicitly (since bool is subclass of int)\n    if isinstance(obj, bool):\n        return False\n\n    # The accepted list-like classes\n    accepted_classes = (\n        list,\n        set,\n        frozenset,\n        tuple,\n        deque,\n        Iterator,\n        ValuesView,\n        KeysView,\n        UserList,\n    )\n\n    return is_subclass_of_any(obj, *accepted_classes)", "message": "passed", "passed": true}
