{"task_id": 131, "prediction_id": 0, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove all ANSI sequences and return length of remaining string\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    else:\n        # Assume iterable of strings; sum length of each with ANSI removed\n        total = 0\n        for s in seq:\n            if not isinstance(s, str):\n                raise TypeError(f\"Expected str items in sequence, got {type(s)}\")\n            cleaned = _ANSI_RE.sub('', s)\n            total += len(cleaned)\n        return total", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 1, "generation": "import re\nfrom typing import Sequence, Union\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove ansi sequences and return length of the clean string\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    else:\n        # Assume seq is a list/tuple of strings\n        # Sum lengths of each string after removing ansi sequences\n        total_length = 0\n        for s in seq:\n            if not isinstance(s, str):\n                raise TypeError(f\"Expected string element, got {type(s)}\")\n            total_length += len(_ANSI_RE.sub('', s))\n        return total_length", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 2, "generation": "from typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n\n    if isinstance(seq, str):\n        # Remove ANSI sequences from the string and return length of the rest.\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    else:\n        # Assume seq is sequence of strings, sum their cleaned lengths.\n        total_length = 0\n        for part in seq:\n            if isinstance(part, str):\n                cleaned = _ANSI_RE.sub('', part)\n                total_length += len(cleaned)\n            else:\n                # Defensive: if any element is not string, convert to string first.\n                cleaned = _ANSI_RE.sub('', str(part))\n                total_length += len(cleaned)\n        return total_length", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 3, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove all ANSI sequences, then return length\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    else:\n        # Assume seq is iterable of strings\n        total_length = 0\n        for part in seq:\n            # Defensive: convert to string just in case\n            part_str = str(part)\n            cleaned = _ANSI_RE.sub('', part_str)\n            total_length += len(cleaned)\n        return total_length", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 4, "generation": "import re\nfrom typing import Sequence, cast\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    # Convert to a single concatenated string if seq is a list or tuple of strings\n    if isinstance(seq, (list, tuple)):\n        combined = ''.join(cast(Sequence[str], seq))\n    else:\n        combined = cast(str, seq)\n\n    # Remove all ANSI escape sequences\n    cleaned = _ANSI_RE.sub('', combined)\n    # Return the length of the cleaned string\n    return len(cleaned)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1254, in <module>\n  File \"<string>\", line 1253, in test_105\n  File \"<string>\", line 78, in len_without_ansi\nTypeError: expected string or bytes-like object\n", "passed": false}
