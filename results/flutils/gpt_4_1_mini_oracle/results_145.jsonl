{"task_id": 145, "prediction_id": 0, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(), ValuesView, KeysView, UserList)\n        True\n    \"\"\"\n    cls = obj if isinstance(obj, type) else getattr(obj, '__class__', None)\n    if cls is None:\n        return False\n    for class_ in classes:\n        # Catch TypeError if class_ is not a class type\n        try:\n            if issubclass(cls, class_):\n                return True\n        except TypeError:\n            continue\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 942, in <module>\n  File \"<string>\", line 936, in test_82\nAssertionError\n", "passed": false}
{"task_id": 145, "prediction_id": 1, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n    *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is an instance of ANY given\n    ``*classes``;\n    * :obj:`False` otherwise.\n\n    Example:\n    >>> from flutils.objutils import is_subclass_of_any\n    >>> from collections import ValuesView, KeysView, UserList\n    >>> obj = dict(a=1, b=2)\n    >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n    True\n    \"\"\"\n    try:\n        return isinstance(obj, classes)\n    except TypeError:\n        # If classes argument(s) contain non-class items, or obj is a class\n        # we try issubclass if obj is a class\n        if isinstance(obj, type):\n            for cls in classes:\n                try:\n                    if issubclass(obj, cls):\n                        return True\n                except TypeError:\n                    # cls is not a class\n                    continue\n        return False", "message": "passed", "passed": true}
{"task_id": 145, "prediction_id": 2, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n        True\n    \"\"\"\n    try:\n        # If obj is a class itself\n        if isinstance(obj, type):\n            for cls in classes:\n                if isinstance(cls, type) and issubclass(obj, cls):\n                    return True\n            return False\n        else:\n            # obj is an instance, check if its class is subclass of any provided classes\n            obj_cls = obj.__class__\n            for cls in classes:\n                if isinstance(cls, type) and issubclass(obj_cls, cls):\n                    return True\n            return False\n    except TypeError:\n        # In case issubclass or isinstance is called with non-class arguments\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 948, in <module>\n  File \"<string>\", line 942, in test_82\nAssertionError\n", "passed": false}
{"task_id": 145, "prediction_id": 3, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n    *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is an instance of ANY given\n    ``*classes``;\n    * :obj:`False` otherwise.\n\n    Example:\n    >>> from flutils.objutils import is_subclass_of_any\n    >>> from collections import ValuesView, KeysView, UserList\n    >>> obj = dict(a=1, b=2)\n    >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n    True\n    \"\"\"\n    # We check if obj is an instance of ANY of the provided classes.\n    for cls in classes:\n        try:\n            if isinstance(obj, cls):\n                return True\n        except TypeError:\n            # In case cls is not a valid type for isinstance (unlikely, but safe)\n            continue\n    return False", "message": "passed", "passed": true}
{"task_id": 145, "prediction_id": 4, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n    *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is an instance of ANY given\n    ``*classes``;\n    * :obj:`False` otherwise.\n\n    Example:\n    >>> from flutils.objutils import is_subclass_of_any\n    >>> from collections import ValuesView, KeysView, UserList\n    >>> obj = dict(a=1, b=2)\n    >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n    True\n    \"\"\"\n    # Defensive check: If no classes are provided, return False immediately\n    if not classes:\n        return False\n\n    # Try to get the type (class) of the object\n    obj_type = type(obj)\n\n    # Check if obj (which may itself be a class) is subclass of any class in classes\n    # If obj is a class, we can use issubclass directly\n    try:\n        if isinstance(obj, type):\n            for cls in classes:\n                # Defensive: cls must be a class type for issubclass to work\n                if isinstance(cls, type) and issubclass(obj, cls):\n                    return True\n            return False\n    except TypeError:\n        # obj is not a class, fallback to instance check below\n        pass\n\n    # Otherwise, check if obj is instance of any of the given classes\n    for cls in classes:\n        try:\n            if isinstance(obj, cls):\n                return True\n        except TypeError:\n            # If cls is not a valid class/type, skip it\n            continue\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 961, in <module>\n  File \"<string>\", line 955, in test_82\nAssertionError\n", "passed": false}
