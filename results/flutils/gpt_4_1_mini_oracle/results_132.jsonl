{"task_id": 132, "prediction_id": 0, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        cp = ord(ch)\n        if cp <= 0xFF:\n            # Use \\xHH for characters in range 0-255\n            result.append(f\"\\\\x{cp:02x}\")\n        elif cp <= 0xFFFF:\n            # Use \\uHHHH for BMP characters (up to 0xFFFF)\n            result.append(f\"\\\\u{cp:04x}\")\n        else:\n            # Use \\UHHHHHHHH for characters beyond BMP (up to 0x10FFFF)\n            result.append(f\"\\\\U{cp:08x}\")\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 1, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for char in text:\n        codepoint = ord(char)\n        if codepoint <= 0xFF:\n            # \\xhh notation, two hex digits\n            result.append(f\"\\\\x{codepoint:02x}\")\n        elif codepoint <= 0xFFFF:\n            # \\uhhhh notation, four hex digits\n            result.append(f\"\\\\u{codepoint:04x}\")\n        else:\n            # \\Uhhhhhhhh notation, eight hex digits\n            result.append(f\"\\\\U{codepoint:08x}\")\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 2, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        codepoint = ord(ch)\n        if codepoint <= 0xFF:\n            # Use \\xhh format for BMP characters <= 0xFF\n            result.append(f\"\\\\x{codepoint:02x}\")\n        elif codepoint <= 0xFFFF:\n            # Use \\uhhhh format for BMP characters > 0xFF\n            result.append(f\"\\\\u{codepoint:04x}\")\n        else:\n            # Use \\Uhhhhhhhh format for codepoints > 0xFFFF (supplementary planes)\n            result.append(f\"\\\\U{codepoint:08x}\")\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 3, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        ord_ch = ord(ch)\n        if ord_ch <= 0xFF:\n            # Use \\xHH format for BMP characters <= 0xFF\n            result.append(f'\\\\x{ord_ch:02x}')\n        elif ord_ch <= 0xFFFF:\n            # Use \\uHHHH format for BMP characters > 0xFF\n            result.append(f'\\\\u{ord_ch:04x}')\n        else:\n            # Use \\U00HHHHHH format for characters above BMP\n            result.append(f'\\\\U{ord_ch:08x}')\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 4, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        codepoint = ord(ch)\n        if codepoint <= 0x7F:\n            # ASCII range => \\xHH\n            result.append(\"\\\\\\\\x{:02x}\".format(codepoint))\n        elif codepoint <= 0xFFFF:\n            # BMP => \\uHHHH\n            result.append(\"\\\\\\\\u{:04x}\".format(codepoint))\n        else:\n            # Above BMP => \\U00HHHHHH (8 digits)\n            result.append(\"\\\\\\\\U{:08x}\".format(codepoint))\n    return \"\".join(result)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 266, in <module>\n  File \"<string>\", line 265, in test_0\nAssertionError\n", "passed": false}
