{"task_id": 137, "prediction_id": 0, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores, ignore empty parts (which represent extra underscores)\n    parts = [p for p in text.split('_') if p]\n\n    if not parts:\n        # If no parts found (e.g. empty or only underscores), return empty string\n        return ''\n\n    # Capitalize the first letter of each part\n    capitalized_parts = [p.capitalize() for p in parts]\n\n    if lower_first:\n        # Lowercase the first character of the first part\n        capitalized_parts[0] = capitalized_parts[0][0].lower() + capitalized_parts[0][1:] if capitalized_parts[0] else ''\n\n    # Join all parts without any separator to form camelCase or PascalCase\n    return ''.join(capitalized_parts)", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 1, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores and filter out empty strings\n    parts = [p for p in text.split('_') if p]\n    if not parts:\n        return ''  # Return empty string if no valid parts\n\n    # Capitalize each part except possibly the first\n    camel_parts = [part.capitalize() for part in parts]\n\n    if lower_first:\n        # Make the first part lowercase (first character)\n        camel_parts[0] = camel_parts[0][0].lower() + camel_parts[0][1:] if camel_parts[0] else ''\n    # Join all parts\n    return ''.join(camel_parts)", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 2, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores, filtering out empty strings (from multiple underscores)\n    parts = [part for part in text.split('_') if part]\n\n    if not parts:\n        # If there are no parts, return an empty string\n        return ''\n\n    # Capitalize the first character of each word except possibly the first one\n    camel_parts = [parts[0].capitalize() if not lower_first else parts[0].lower()]\n    camel_parts.extend(part.capitalize() for part in parts[1:])\n\n    # Join and return the camel-cased string\n    return ''.join(camel_parts)", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 3, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split by underscore and filter out empty parts\n    parts = [p for p in text.split('_') if p]\n\n    if not parts:\n        return ''\n\n    # Capitalize all parts\n    parts = [p.capitalize() for p in parts]\n\n    # Lowercase the first character of the first part if required\n    if lower_first:\n        first_part = parts[0]\n        parts[0] = first_part[0].lower() + first_part[1:] if first_part else ''\n\n    return ''.join(parts)", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 4, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the input on underscores and filter out empty strings\n    parts = [p for p in text.split('_') if p]\n\n    if not parts:\n        return ''\n\n    # Capitalize all parts\n    parts = [p.capitalize() for p in parts]\n\n    if lower_first:\n        # Lowercase first character of the first part\n        first_part = parts[0]\n        parts[0] = first_part[0].lower() + first_part[1:] if first_part else ''\n\n    return ''.join(parts)", "message": "passed", "passed": true}
