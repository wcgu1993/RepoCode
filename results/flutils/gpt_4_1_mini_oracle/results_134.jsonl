{"task_id": 134, "prediction_id": 0, "generation": "def camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the pre-compiled regex _CAMEL_TO_UNDERSCORE_RE to find camel case boundaries,\n    # and insert underscore before uppercase letters where needed.\n    # Then lower-case the entire string.\n    return _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text).lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 1, "generation": "def camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the precompiled regex _CAMEL_TO_UNDERSCORE_RE to find boundaries between lowercase/number and uppercase letters\n    # or uppercase letters followed by lowercase letters not at string start,\n    # then replace them with underscores preceding the matched upper case character.\n    underscored = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    # Return the lowercase version of the modified string.\n    return underscored.lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 2, "generation": "def camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the precompiled regex to find positions where an uppercase letter\n    # should be preceded by an underscore (except at the start)\n    underscored = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    # Return the string lowercased\n    return underscored.lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 3, "generation": "def camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the pre-compiled regex _CAMEL_TO_UNDERSCORE_RE to find the positions\n    # where uppercase letters that separate words appear, and insert underscores.\n    result = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    # Convert whole resulting string to lowercase.\n    return result.lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 4, "generation": "def camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the precompiled regular expression to find boundaries in camel-cased words\n    # Insert underscores before uppercase letters that follow lowercase letters or digits,\n    # or uppercase letters followed by lowercase letters (to split acronyms and words)\n    out = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    return out.lower()", "message": "passed", "passed": true}
