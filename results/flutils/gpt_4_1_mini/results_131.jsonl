{"task_id": 131, "prediction_id": 0, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove all ANSI sequences and return length of the remaining string\n        return len(_ANSI_RE.sub('', seq))\n    else:\n        # Assume sequence of strings: sum the len_without_ansi of each element\n        return sum(len_without_ansi(s) for s in seq)", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 1, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile(r'(\\x1b\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove ANSI sequences from the string and return its length\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    else:\n        # seq is a sequence of strings (list or tuple)\n        length = 0\n        for item in seq:\n            if not isinstance(item, str):\n                raise TypeError(\"All elements of the sequence must be strings\")\n            cleaned = _ANSI_RE.sub('', item)\n            length += len(cleaned)\n        return length", "message": "passed", "passed": true}
{"task_id": 131, "prediction_id": 2, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, str):\n        # Remove ANSI escape sequences and return the length of the visible characters.\n        clean_str = _ANSI_RE.sub('', seq)\n        return len(clean_str)\n    elif isinstance(seq, (list, tuple)):\n        # If it's a list/tuple of strings, sum the lengths after removing ANSI escape sequences from each element.\n        total_length = 0\n        for item in seq:\n            if not isinstance(item, str):\n                # Defensive: ignoring or raising could be considered, but here we skip if not string.\n                continue\n            clean_str = _ANSI_RE.sub('', item)\n            total_length += len(clean_str)\n        return total_length\n    else:\n        # Defensive fallback: try to convert to string and measure.\n        clean_str = _ANSI_RE.sub('', str(seq))\n        return len(clean_str)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1261, in <module>\n  File \"<string>\", line 1260, in test_105\nAssertionError\n", "passed": false}
{"task_id": 131, "prediction_id": 3, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    if isinstance(seq, (list, tuple)):\n        # Join elements if sequence of strings\n        joined = ''.join(seq)\n    else:\n        # Assume it's a string-like\n        joined = seq\n\n    # Remove all ANSI escape sequences\n    cleaned = _ANSI_RE.sub('', joined)\n\n    # Return length of visible characters\n    return len(cleaned)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1255, in <module>\n  File \"<string>\", line 1254, in test_105\n  File \"<string>\", line 78, in len_without_ansi\nTypeError: expected string or bytes-like object\n", "passed": false}
{"task_id": 131, "prediction_id": 4, "generation": "import re\nfrom typing import Sequence\n\n_ANSI_RE = re.compile('(\\x1b\\\\[[0-9;:]+[ABCDEFGHJKSTfhilmns])')\n\ndef len_without_ansi(seq: Sequence) -> int:\n    \"\"\"Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n    seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n    of strings.\n\n    :rtype:\n    :obj:`int`\n\n    Example:\n    >>> from flutils.txtutils import len_without_ansi\n    >>> text = '\\\\x1b[38;5;209mfoobar\\\\x1b[0m'\n    >>> len_without_ansi(text)\n    6\n    \"\"\"\n    # If the input is a string, remove ANSI sequences and return length\n    if isinstance(seq, str):\n        # Remove all ANSI escape sequences\n        cleaned = _ANSI_RE.sub('', seq)\n        return len(cleaned)\n    # If the input is a sequence of strings, sum lengths of each element without ANSI\n    try:\n        # Ensure each item in the sequence is str\n        return sum(len_without_ansi(item) for item in seq)\n    except TypeError:\n        # If seq is not iterable or contains non-str elements, fallback\n        # Treat everything as string representation\n        cleaned = _ANSI_RE.sub('', str(seq))\n        return len(cleaned)", "message": "passed", "passed": true}
