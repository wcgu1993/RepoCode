{"task_id": 144, "prediction_id": 0, "generation": "from collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom typing import Any as _Any\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    if obj is None:\n        return False\n    if isinstance(obj, (bool, bytes, str)):\n        return False\n\n    # Check if obj is instance of accepted list-like types\n    if isinstance(obj, (\n        list,\n        set,\n        frozenset,\n        tuple,\n        deque,\n        Iterator,\n        KeysView,\n        ValuesView,\n        UserList,\n    )):\n        return True\n\n    # For any other type, return True if it is iterable but NOT a dict subclass\n    # We exclude dict and other mapping types dynamically to cover stated exclusions.\n    try:\n        # Check if object is iterable\n        iter(obj)\n    except TypeError:\n        return False\n\n    # Exclude dictionary-like types explicitly by checking against collections.abc.Mapping\n    from collections.abc import Mapping\n\n    if isinstance(obj, Mapping):\n        return False\n\n    # Exclude all other explicitly mentioned non-list-like types by checking their classes\n    # We cover types like ChainMap, Counter, OrderedDict, UserDict, UserString, defaultdict, Decimal, float, int.\n\n    # We import these here to avoid import overhead if not needed.\n    import collections\n    import decimal\n\n    if isinstance(obj, (\n        collections.ChainMap,\n        collections.Counter,\n        collections.OrderedDict,\n        collections.UserDict,\n        collections.UserString,\n        collections.defaultdict,\n        decimal.Decimal,\n        float,\n        int,\n    )):\n        return False\n\n    # If it passed all these exclusion cases and is iterable, consider list-like\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 323, in <module>\n  File \"<string>\", line 322, in test_0\nAssertionError\n", "passed": false}
{"task_id": 144, "prediction_id": 1, "generation": "from collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom typing import Any as _Any\n\n\n_LIST_LIKE = (\n    list,\n    set,\n    frozenset,\n    tuple,\n    deque,\n    Iterator,\n    ValuesView,\n    KeysView,\n    UserList\n)\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    if obj is None:\n        return False\n\n    # Exclude explicit non-list-like types\n    if isinstance(obj, (bool, bytes, bytearray, memoryview, str, dict, float, int)):\n        return False\n\n    # Check if instance of any of the recognized list-like classes\n    if isinstance(obj, _LIST_LIKE):\n        return True\n\n    # Some objects may behave like lists (iterable + __getitem__) but not in _LIST_LIKE\n    # We can try to check for __iter__ and __getitem__ attributes as heuristic\n\n    # But to keep implementation consistent with docstring and avoid false positives,\n    # only types in _LIST_LIKE are considered list-like.\n\n    return False", "message": "passed", "passed": true}
{"task_id": 144, "prediction_id": 2, "generation": "from collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom typing import Any as _Any\n\n\n_LIST_LIKE = (\n    list,\n    set,\n    frozenset,\n    tuple,\n    deque,\n    Iterator,\n    ValuesView,\n    KeysView,\n    UserList\n)\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # Explicitly exclude types that look iterable but are not list-like\n    exclude_types = (\n        type(None),\n        bool,\n        bytes,\n        dict,\n        float,\n        int,\n        str,\n    )\n\n    # Also exclude collections types that are not considered list-like here\n    # but are not imported in this file: ChainMap, Counter, OrderedDict,\n    # UserDict, UserString, defaultdict, Decimal\n    # We exclude them by type name and module to avoid imports.\n\n    # To cover those, exclude by type name and module:\n    exclude_type_names_and_modules = {\n        ('ChainMap', 'collections'),\n        ('Counter', 'collections'),\n        ('OrderedDict', 'collections'),\n        ('UserDict', 'collections'),\n        ('UserString', 'collections'),\n        ('defaultdict', 'collections'),\n        ('Decimal', 'decimal'),\n    }\n\n    obj_type = type(obj)\n\n    # Exclude built-in types as above\n    if obj_type in exclude_types:\n        return False\n\n    # Exclude by name and module\n    if (obj_type.__name__, obj_type.__module__) in exclude_type_names_and_modules:\n        return False\n\n    # Check if obj is instance of any _LIST_LIKE classes\n    if isinstance(obj, _LIST_LIKE):\n        return True\n\n    # Additional check: some iterable that is not instance of above,\n    # but behaves like a list, e.g. other iterable types.\n    # According to docstring example, sorted('hello') returns list (True).\n    # So we should only accept those that are iterable and not excluded types.\n\n    # Check if object is iterable and not a string/bytes/etc.\n    # But strings and bytes excluded above.\n\n    # Check for __iter__ attribute presence and callable\n    if hasattr(obj, '__iter__') and callable(getattr(obj, '__iter__')):\n        # Further exclude mapping types (dict-like)\n        # Check if obj has 'keys' attribute (only mappings have keys)\n        if hasattr(obj, 'keys'):\n            # Most mapping types have keys() callable\n            return False\n        return True\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 340, in <module>\n  File \"<string>\", line 339, in test_0\nAssertionError\n", "passed": false}
{"task_id": 144, "prediction_id": 3, "generation": "from collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\nfrom typing import Any as _Any\n\n\n_LIST_LIKE = (\n    list,\n    set,\n    frozenset,\n    tuple,\n    deque,\n    Iterator,\n    ValuesView,\n    KeysView,\n    UserList\n)\n\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    # Reject None, bool, bytes, str explicitly (common but not list-like)\n    if obj is None:\n        return False\n    if isinstance(obj, (bool, bytes, str)):\n        return False\n\n    # Check if instance of any listed list-like types\n    if isinstance(obj, _LIST_LIKE):\n        return True\n\n    # Some built-in collections types are explicitly not list-like\n    # We avoid importing those types as per instruction, so we do\n    # an approximate check for dict-like types:\n    # If it is dict or dict subclass -> not list-like\n    # Also exclude other common mapping types by checking for typical mapping attributes.\n\n    # Quick check for dict and dict-like (has 'keys' and 'items' callable)\n    # but we want to exclude dict derived, so if it has all these attributes and is subclass of dict, exclude\n    try:\n        if isinstance(obj, dict):\n            return False\n    except Exception:\n        # Defensive catch if isinstance fails for some reason (unlikely)\n        pass\n\n    # Finally, as a fallback, check if object is iterable (has __iter__ method) but is not a string or bytes (already checked above)\n    # This covers some custom iterable types which may not be instances of _LIST_LIKE but behave list-like.\n    if hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes)):\n        return True\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 312, in <module>\n  File \"<string>\", line 311, in test_0\nAssertionError\n", "passed": false}
{"task_id": 144, "prediction_id": 4, "generation": "from typing import Any as _Any\nfrom collections import (\n    UserList,\n    deque,\n)\nfrom collections.abc import (\n    Iterator,\n    KeysView,\n    ValuesView,\n)\n\ndef is_list_like(\n        obj: _Any\n) -> bool:\n    \"\"\"Check that given ``obj`` acts like a list and is iterable.\n\n    List-like objects are instances of:\n\n    - :obj:`UserList <collections.UserList>`\n    - :obj:`Iterator <collections.abc.Iterator>`\n    - :obj:`KeysView <collections.abc.KeysView>`\n    - :obj:`ValuesView <collections.abc.ValuesView>`\n    - :obj:`deque <collections.deque>`\n    - :obj:`frozenset`\n    - :obj:`list`\n    - :obj:`set`\n    - :obj:`tuple`\n\n    List-like objects are **NOT** instances of:\n\n    - :obj:`None`\n    - :obj:`bool`\n    - :obj:`bytes`\n    - :obj:`ChainMap <collections.ChainMap>`\n    - :obj:`Counter <collections.Counter>`\n    - :obj:`OrderedDict <collections.OrderedDict>`\n    - :obj:`UserDict <collections.UserDict>`\n    - :obj:`UserString <collections.UserString>`\n    - :obj:`defaultdict <collections.defaultdict>`\n    - :obj:`Decimal <decimal.Decimal>`\n    - :obj:`dict`\n    - :obj:`float`\n    - :obj:`int`\n    - :obj:`str`\n    - etc...\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is list-like; :\n    * :obj:`False` otherwise.\n\n    Examples:\n    >>> from flutils.objutils import is_list_like\n    >>> is_list_like([1, 2, 3])\n    True\n    >>> is_list_like(reversed([1, 2, 4]))\n    True\n    >>> is_list_like('hello')\n    False\n    >>> is_list_like(sorted('hello'))\n    True\n    \"\"\"\n    _list_like = (\n        list,\n        set,\n        frozenset,\n        tuple,\n        deque,\n        Iterator,\n        ValuesView,\n        KeysView,\n        UserList,\n    )\n\n    # Explicitly reject types that are considered NOT list-like\n    # None, bool, bytes, dict, float, int, str, and some known collections\n    # Because importing those classes would violate the instruction, \n    # testing by type directly on known types/custom types is enough.\n\n    # Reject None\n    if obj is None:\n        return False\n\n    # Reject bool and bytes explicitly\n    if isinstance(obj, (bool, bytes)):\n        return False\n\n    # Reject str explicitly\n    if isinstance(obj, str):\n        return False\n\n    # Reject float and int explicitly\n    if isinstance(obj, (int, float)):\n        return False\n\n    # Reject dict explicitly\n    if isinstance(obj, dict):\n        return False\n\n    # Check if obj is instance of any of the list-like classes\n    if isinstance(obj, _list_like):\n        return True\n\n    # As a fallback: check if it's iterable with __iter__ method and not excluded types\n    # The docstring shows sorted('hello') -> True, so also list-likes like returned from sorted()\n    # are instances of list so they pass first check.\n\n    # If it has __iter__ but excluded types filtered above, then True\n\n    if hasattr(obj, '__iter__'):\n        return True\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 318, in <module>\n  File \"<string>\", line 317, in test_0\nAssertionError\n", "passed": false}
