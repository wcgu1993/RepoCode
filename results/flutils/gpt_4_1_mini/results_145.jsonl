{"task_id": 145, "prediction_id": 0, "generation": "from typing import Any\n\n\ndef is_subclass_of_any(obj: Any, *classes: Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(), ValuesView, KeysView, UserList)\n        True\n    \"\"\"\n    try:\n        obj_cls = obj if isinstance(obj, type) else type(obj)\n        for cls in classes:\n            # Only consider valid classes/types\n            if isinstance(cls, type) and issubclass(obj_cls, cls):\n                return True\n    except TypeError:\n        # If obj_cls or cls is not a class/type, or issubclass fails, return False\n        return False\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 942, in <module>\n  File \"<string>\", line 936, in test_82\nAssertionError\n", "passed": false}
{"task_id": 145, "prediction_id": 1, "generation": "from typing import Any as _Any\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n    obj (:obj:`Any <typing.Any>`): The object to check.\n    *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n    :obj:`bool`\n\n    * :obj:`True` if the given ``obj`` is an instance of ANY given\n    ``*classes``;\n    * :obj:`False` otherwise.\n\n    Example:\n    >>> from flutils.objutils import is_subclass_of_any\n    >>> from collections import ValuesView, KeysView, UserList\n    >>> obj = dict(a=1, b=2)\n    >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n    True\n    \"\"\"\n    try:\n        obj_type = obj if isinstance(obj, type) else type(obj)\n        for cls in classes:\n            if isinstance(cls, type) and issubclass(obj_type, cls):\n                return True\n        return False\n    except TypeError:\n        # Some inputs to issubclass may not be class types, just return False in that case\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 940, in <module>\n  File \"<string>\", line 934, in test_82\nAssertionError\n", "passed": false}
{"task_id": 145, "prediction_id": 2, "generation": "def is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n        True\n    \"\"\"\n    if not classes:\n        return False\n\n    # Use isinstance to check if obj is instance of any provided class.\n    return any(isinstance(obj, cls) for cls in classes)", "message": "passed", "passed": true}
{"task_id": 145, "prediction_id": 3, "generation": "from typing import Any as _Any\n\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n        True\n    \"\"\"\n    try:\n        return any(isinstance(obj, cls) for cls in classes)\n    except TypeError:\n        # If any of the elements in classes is not a class/type, isinstance will raise TypeError\n        return False", "message": "passed", "passed": true}
{"task_id": 145, "prediction_id": 4, "generation": "from typing import Any as _Any\n\n\ndef is_subclass_of_any(obj: _Any, *classes: _Any) -> bool:\n    \"\"\"Check if the given ``obj`` is a subclass of any of the given\n    ``*classes``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *classes (:obj:`Any <typing.Any>`): The classes to check against.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if the given ``obj`` is an instance of ANY given\n          ``*classes``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import is_subclass_of_any\n        >>> from collections import ValuesView, KeysView, UserList\n        >>> obj = dict(a=1, b=2)\n        >>> is_subclass_of_any(obj.keys(),ValuesView,KeysView,UserList)\n        True\n    \"\"\"\n    # Defensive: if no classes given, return False immediately\n    if not classes:\n        return False\n\n    try:\n        obj_type = obj if isinstance(obj, type) else type(obj)\n    except Exception:\n        # If type() fails for any reason, return False\n        return False\n\n    for cls in classes:\n        # Defensive: skip if cls is not a class/type\n        # Using isinstance(cls, type) ensures cls is a class/type\n        if not isinstance(cls, type):\n            continue\n        try:\n            if issubclass(obj_type, cls):\n                return True\n        except TypeError:\n            # If obj_type or cls is not a class, issubclass raises TypeError\n            # We'll ignore and continue\n            continue\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 955, in <module>\n  File \"<string>\", line 949, in test_82\nAssertionError\n", "passed": false}
