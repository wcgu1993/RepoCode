{"task_id": 132, "prediction_id": 0, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_escaped_unicode_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        code = ord(ch)\n        if code <= 0xFF:\n            # Use \\xHH\n            escaped = f'\\\\x{code:02x}'\n        elif code <= 0xFFFF:\n            # Use \\uHHHH\n            escaped = f'\\\\u{code:04x}'\n        else:\n            # Use \\UHHHHHHHH\n            escaped = f'\\\\U{code:08x}'\n        # Escape the backslash to output literal backslashes\n        result.append(escaped.replace('\\\\', '\\\\\\\\'))\n    return ''.join(result)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 268, in <module>\n  File \"<string>\", line 267, in test_0\nAssertionError\n", "passed": false}
{"task_id": 132, "prediction_id": 1, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    def escape_char(c):\n        code = ord(c)\n        if code <= 0xFF:\n            # Use \\xHH\n            return f'\\\\x{code:02x}'\n        elif code <= 0xFFFF:\n            # Use \\uHHHH\n            return f'\\\\u{code:04x}'\n        else:\n            # Use \\UHHHHHHHH\n            return f'\\\\U{code:08x}'\n\n    return ''.join(escape_char(c) for c in text)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 2, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        codepoint = ord(ch)\n        if codepoint <= 0xFF:\n            # \\xHH (2 hex digits)\n            result.append(f'\\\\x{codepoint:02x}')\n        elif codepoint <= 0xFFFF:\n            # \\uHHHH (4 hex digits)\n            result.append(f'\\\\u{codepoint:04x}')\n        else:\n            # \\U00HHHHHH (8 hex digits)\n            result.append(f'\\\\U{codepoint:08x}')\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 3, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        code_point = ord(ch)\n        if code_point <= 0xFF:\n            # Use \\xHH escape for code points <= 255\n            result.append('\\\\x{:02x}'.format(code_point))\n        elif code_point <= 0xFFFF:\n            # Use \\uHHHH escape for BMP code points > 255\n            result.append('\\\\u{:04x}'.format(code_point))\n        else:\n            # Use \\UHHHHHHHH escape for code points > 0xFFFF\n            result.append('\\\\U{:08x}'.format(code_point))\n    return ''.join(result)", "message": "passed", "passed": true}
{"task_id": 132, "prediction_id": 4, "generation": "def as_escaped_unicode_literal(\n        text: str\n) -> str:\n    \"\"\"Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n    text (:obj:`str`): The string to convert.\n\n    :rtype:\n    :obj:`str`\n\n    A string with each character of the given ``text`` converted\n    into an escaped Python literal.\n\n    Example:\n    >>> from flutils.strutils import as_escaped_unicode_literal\n    >>> t = '1.\u2605 \ud83d\uded1'\n    >>> as_literal(t)\n    '\\\\\\\\x31\\\\\\\\x2e\\\\\\\\u2605\\\\\\\\x20\\\\\\\\U0001f6d1'\n    \"\"\"\n    result = []\n    for ch in text:\n        code = ord(ch)\n        if code <= 0xFF:\n            # Use \\xHH format for code points <= 0xFF\n            result.append(f\"\\\\x{code:02x}\")\n        elif code <= 0xFFFF:\n            # Use \\uHHHH format for 0x100 - 0xFFFF\n            result.append(f\"\\\\u{code:04x}\")\n        else:\n            # Use \\UHHHHHHHH format for greater code points\n            result.append(f\"\\\\U{code:08x}\")\n    return ''.join(result)", "message": "passed", "passed": true}
