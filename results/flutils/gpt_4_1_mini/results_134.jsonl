{"task_id": 134, "prediction_id": 0, "generation": "import re\n\ndef camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the compiled regex _CAMEL_TO_UNDERSCORE_RE from file context to find\n    # positions where uppercase letters are after lowercase or digits\n    # or where uppercase letters followed by lowercase letters (boundary)\n    s1 = re.sub('((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))', r'_\\1', text)\n    return s1.lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 1, "generation": "import re\n\ndef camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # This regex matches places where a lowercase letter or digit is followed by an uppercase letter,\n    # or when uppercase letters are followed by lowercase letters (not at start).\n    pattern = re.compile(r'((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))')\n    # Replace matched uppercase letters with '_' + lowercase letter\n    underscored = pattern.sub(r'_\\1', text).lower()\n    return underscored", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 2, "generation": "import re\n\ndef camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the compiled regex pattern to find the positions to insert underscores\n    # The regex matches capital letters that are either:\n    # - preceded by a lowercase letter or a number, OR\n    # - an uppercase letter followed by a lowercase letter (not at start)\n    splitted = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    return splitted.lower()", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 3, "generation": "import re\n\ndef camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the compiled regex in _CAMEL_TO_UNDERSCORE_RE to insert underscores\n    # before uppercase letters that follow lowercase letters or digits,\n    # or uppercase letters that precede lowercase letters (but not at start).\n    # Then lowercase the entire string.\n\n    # The pattern matches places to split camelcase words\n    pattern = re.compile('((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))')\n    # Insert underscore between the matched boundaries and lower the entire result\n    underscored = pattern.sub(r'_\\1', text).lower()\n    return underscored", "message": "passed", "passed": true}
{"task_id": 134, "prediction_id": 4, "generation": "import re\n\ndef camel_to_underscore(\n        text: str\n) -> str:\n    \"\"\"Convert a camel-cased string to a string containing words separated\n    with underscores.\n\n    Args:\n    text (str): The camel-cased string to convert.\n\n    :rtype: :obj:`str`\n\n    Example:\n    >>> from flutils.strutils import camel_to_underscore\n    >>> camel_to_underscore('FooBar')\n    'foo_bar'\n    \"\"\"\n    # Use the precompiled regex to find camelCase boundaries and insert underscore\n    s1 = _CAMEL_TO_UNDERSCORE_RE.sub(r'_\\1', text)\n    return s1.lower()", "message": "passed", "passed": true}
