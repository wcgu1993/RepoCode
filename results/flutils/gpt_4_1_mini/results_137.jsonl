{"task_id": 137, "prediction_id": 0, "generation": "import re\n\n\ndef underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores and filter out empty parts (handles multiple, leading, trailing underscores)\n    parts = [p for p in text.split('_') if p]\n\n    if not parts:\n        return ''\n\n    # Capitalize the first letter of each part\n    parts = [p.capitalize() for p in parts]\n\n    # Join all parts\n    camel = ''.join(parts)\n\n    # If lower_first is True, lowercase the first char\n    if lower_first and camel:\n        camel = camel[0].lower() + camel[1:]\n\n    return camel", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 1, "generation": "import re\n\ndef underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores, filtering out empty parts\n    parts = [p for p in text.split('_') if p]\n\n    # Capitalize each part\n    capitalized_parts = [p.capitalize() for p in parts]\n\n    if not capitalized_parts:\n        return ''  # If no parts remain, return empty string\n\n    if lower_first:\n        # Lowercase first character of the first part, keep the rest as is\n        first = capitalized_parts[0]\n        first = first[0].lower() + first[1:] if first else ''\n        camel = first + ''.join(capitalized_parts[1:])\n    else:\n        camel = ''.join(capitalized_parts)\n\n    return camel", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 2, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split on underscore and filter out empty strings caused by consecutive underscores\n    parts = [part for part in text.split('_') if part]\n\n    if not parts:\n        return ''\n\n    # Capitalize first letter of each part\n    camel = ''.join(word.capitalize() for word in parts)\n\n    # If lower_first is True, lowercase the first character of the resulting string\n    if lower_first and camel:\n        camel = camel[0].lower() + camel[1:]\n\n    return camel", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 3, "generation": "def underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text by underscores, filtering out empty parts caused by\n    # leading, trailing or multiple underscores.\n    parts = [p for p in text.split('_') if p]\n\n    if not parts:\n        return ''\n\n    # Capitalize all parts except possibly the first one\n    parts = [parts[0].lower() if lower_first else parts[0].capitalize()] + [\n        p.capitalize() for p in parts[1:]\n    ]\n\n    return ''.join(parts)", "message": "passed", "passed": true}
{"task_id": 137, "prediction_id": 4, "generation": "import re\n\ndef underscore_to_camel(\n        text: str,\n        lower_first: bool = True\n) -> str:\n    \"\"\"Convert a string with words separated by underscores to a camel-cased\n    string.\n\n    Args:\n    text (:obj:`str`): The camel-cased string to convert.\n    lower_first (:obj:`bool`, optional): Lowercase the first character.\n    Defaults to :obj:`True`.\n\n    :rtype: :obj:`str`\n\n    Examples:\n    >>> from flutils.strutils import underscore_to_camel\n    >>> underscore_to_camel('foo_bar')\n    'fooBar'\n    >>> underscore_to_camel('_one__two___',lower_first=False)\n    'OneTwo'\n    \"\"\"\n    # Split the text on underscores and filter out empty strings\n    words = [w for w in text.split('_') if w]\n\n    if not words:\n        return ''\n\n    # Capitalize first letter of each word except optionally the first word\n    if lower_first:\n        first_word = words[0].lower()\n    else:\n        first_word = words[0].capitalize()\n\n    camel_parts = [first_word]\n    for w in words[1:]:\n        camel_parts.append(w.capitalize())\n\n    return ''.join(camel_parts)", "message": "passed", "passed": true}
