{"task_id": 332, "prediction_id": 0, "generation": "import typing\n\ndef get_valid_types(data: dict) -> typing.Tuple[typing.Set[str], bool]:\n    \"\"\"\n    Returns a two-tuple of `(type_strings, allow_null)`.\n\n    This function examines the \"type\" property of a JSON Schema dict and determines\n    which types are allowed and whether null is allowed (via explicit \"null\" type or absent).\n    \n    Returns:\n        - type_strings: A set of type strings excluding \"null\"\n        - allow_null: A boolean indicating if null is allowed\n    \"\"\"\n    type_field = data.get(\"type\")\n\n    # If no type is specified, JSON Schema allows anything - treat as empty set and allow null True\n    if type_field is None:\n        return set(), True\n\n    # Normalize input: type may be a string or a list of strings\n    if isinstance(type_field, str):\n        types = {type_field}\n    elif isinstance(type_field, list):\n        types = set(type_field)\n    else:\n        # Unexpected type, assume no types allowed, null allowed False (safe fallback)\n        return set(), False\n\n    allow_null = \"null\" in types\n    type_strings = types - {\"null\"}\n\n    return type_strings, allow_null", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 636, in <module>\n  File \"<string>\", line 635, in test_15\nAssertionError\n", "passed": false}
{"task_id": 332, "prediction_id": 1, "generation": "from typing import Set, Tuple\n\ndef get_valid_types(data: dict) -> Tuple[Set[str], bool]:\n    \"\"\"\n    Returns a two-tuple of `(type_strings, allow_null)`.\n\n    This function interprets the \"type\" keyword in a JSON Schema data dictionary.\n    The \"type\" can be a string or an array of strings indicating allowed types.\n    If \"null\" is included in the types, then allow_null is True and \"null\" is removed\n    from the returned type_strings set.\n\n    If \"type\" is not present, the function returns an empty set and allow_null=False.\n\n    Examples:\n      - {\"type\": \"string\"} => ({\"string\"}, False)\n      - {\"type\": [\"string\", \"null\"]} => ({\"string\"}, True)\n      - {\"type\": [\"null\"]} => (set(), True)\n      - {} => (set(), False)\n    \"\"\"\n    type_value = data.get(\"type\")\n\n    if type_value is None:\n        return set(), False\n\n    if isinstance(type_value, str):\n        if type_value == \"null\":\n            return set(), True\n        else:\n            return {type_value}, False\n\n    # type_value is expected to be a list of strings\n    if isinstance(type_value, list):\n        type_strings = set(t for t in type_value if t != \"null\")\n        allow_null = \"null\" in type_value\n        return type_strings, allow_null\n\n    # If type_value is neither str nor list, fallback safe\n    # (though JSON Schema doesn't define that case)\n    return set(), False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 643, in <module>\n  File \"<string>\", line 642, in test_15\nAssertionError\n", "passed": false}
{"task_id": 332, "prediction_id": 2, "generation": "import typing\n\ndef get_valid_types(data: dict) -> typing.Tuple[typing.Set[str], bool]:\n    \"\"\"\n    Returns a two-tuple of `(type_strings, allow_null)`.\n    \"\"\"\n    type_value = data.get(\"type\")\n    allow_null = False\n    type_strings: typing.Set[str] = set()\n\n    if isinstance(type_value, str):\n        # Single type string\n        if type_value == \"null\":\n            allow_null = True\n        else:\n            type_strings.add(type_value)\n    elif isinstance(type_value, list):\n        # List of types, could include \"null\"\n        for t in type_value:\n            if t == \"null\":\n                allow_null = True\n            else:\n                # Only add if string type (defensive)\n                if isinstance(t, str):\n                    type_strings.add(t)\n    # If no \"type\" key or it's neither str nor list, type_strings is empty and allow_null is False\n\n    return type_strings, allow_null", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 632, in <module>\n  File \"<string>\", line 631, in test_15\nAssertionError\n", "passed": false}
{"task_id": 332, "prediction_id": 3, "generation": "import typing\n\ndef get_valid_types(data: dict) -> typing.Tuple[typing.Set[str], bool]:\n    \"\"\"\n    Returns a two-tuple of `(type_strings, allow_null)`.\n\n    The first element is a set of valid JSON Schema type strings extracted from the\n    \"type\" property of the data. The \"type\" value may be a string or a list of strings.\n\n    The second element is a boolean `allow_null` which is True if \"null\" is included\n    in the type(s), False otherwise.\n    \"\"\"\n    type_value = data.get(\"type\")\n    if type_value is None:\n        # No \"type\" means all types allowed, so no explicit types and no null restriction.\n        return set(), False\n\n    if isinstance(type_value, str):\n        # Single type string\n        if type_value == \"null\":\n            return set(), True\n        else:\n            return {type_value}, False\n\n    if isinstance(type_value, list):\n        # Multiple types\n        types_set = set()\n        allow_null = False\n        for t in type_value:\n            if t == \"null\":\n                allow_null = True\n            else:\n                types_set.add(t)\n        return types_set, allow_null\n\n    # If \"type\" is not str or list (invalid), treat as no types allowed.\n    return set(), False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 641, in <module>\n  File \"<string>\", line 640, in test_15\nAssertionError\n", "passed": false}
{"task_id": 332, "prediction_id": 4, "generation": "import typing\n\n\ndef get_valid_types(data: dict) -> typing.Tuple[typing.Set[str], bool]:\n    \"\"\"\n    Returns a two-tuple of `(type_strings, allow_null)`.\n\n    - `type_strings`: a set of type strings derived from the \"type\" property in the JSON Schema data.\n      For example, if `data[\"type\"]` is \"string\", it returns {\"string\"}.\n      If `data[\"type\"]` is [\"string\", \"null\"], it returns {\"string\", \"null\"}.\n      If no \"type\" key present, returns empty set.\n    - `allow_null`: a boolean set to True if \"null\" is included in the type(s), False otherwise.\n    \"\"\"\n    type_value = data.get(\"type\")\n\n    # No \"type\" field means no type constraints, so return empty set and False\n    if type_value is None:\n        return set(), False\n\n    if isinstance(type_value, str):\n        types = {type_value}\n    elif isinstance(type_value, list):\n        types = set(type_value)\n    else:\n        # Unexpected type of \"type\" property, return empty set\n        return set(), False\n\n    allow_null = \"null\" in types\n    # Exclude 'null' from the returned set since allow_null is returned separately\n    types.discard(\"null\")\n\n    return types, allow_null", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 636, in <module>\n  File \"<string>\", line 635, in test_15\nAssertionError\n", "passed": false}
