{"task_id": 331, "prediction_id": 0, "generation": "from typing import Set\nfrom typesystem.fields import Field, Union\nfrom typesystem.schemas import SchemaDefinitions\nfrom typesystem.json_schema import get_valid_types, from_json_schema_type\n\n\ndef type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n    type_strings, allow_null = get_valid_types(data)\n\n    if not type_strings:\n        # No explicit types other than maybe null, return Any or a nullable Any equivalent\n        return from_json_schema_type(data, \"string\", allow_null, definitions)\n\n    fields = [from_json_schema_type(data, type_string, allow_null, definitions) for type_string in sorted(type_strings)]\n\n    if len(fields) == 1:\n        return fields[0]\n\n    return Union(fields, allow_null=allow_null)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 876, in <module>\n  File \"<string>\", line 875, in test_120\nAssertionError\n", "passed": false}
{"task_id": 331, "prediction_id": 1, "generation": "from typing import Set\nfrom typesystem.fields import Field, Union\nfrom typesystem.json_schema import get_valid_types, from_json_schema_type\nfrom typesystem.schemas import SchemaDefinitions\n\ndef type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n    type_strings, allow_null = get_valid_types(data)\n\n    if not type_strings:\n        # If no types, allow any type including possibly null.\n        return from_json_schema_type(data, \"string\", allow_null=True, definitions=definitions)\n\n    fields = []\n    for type_str in sorted(type_strings):\n        field = from_json_schema_type(data, type_str, allow_null=False, definitions=definitions)\n        fields.append(field)\n\n    if allow_null:\n        # Wrap in Union with None (null) allowed.\n        fields.append(from_json_schema_type({}, \"null\", allow_null=False, definitions=definitions))\n\n    if len(fields) == 1:\n        return fields[0]\n\n    return Union(fields)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 741, in <module>\n  File \"<string>\", line 740, in test_63\n  File \"<string>\", line 193, in type_from_json_schema\n  File \"<string>\", line 358, in from_json_schema_type\nAssertionError: Invalid argument type_string='null'\n", "passed": false}
{"task_id": 331, "prediction_id": 2, "generation": "from typing import Set\nfrom typesystem.fields import Field, Union\nfrom typesystem.json_schema import get_valid_types, from_json_schema_type\nfrom typesystem.schemas import SchemaDefinitions\n\n\ndef type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n    type_strings, allow_null = get_valid_types(data)\n\n    if not type_strings:\n        # No types specified (other than maybe null),\n        # treat as Any with allow_null as indicated\n        from typesystem.fields import Any\n        return Any(allow_null=allow_null)\n\n    fields = [\n        from_json_schema_type(data, type_string, allow_null=False, definitions=definitions)\n        for type_string in sorted(type_strings)\n    ]\n\n    if len(fields) == 1:\n        field = fields[0]\n        if allow_null:\n            # Wrap field to allow null if not already allowed\n            return Union([field, fields[0].__class__(allow_null=True)])\n        else:\n            return field\n\n    # Multiple types: build a Union field\n    if allow_null:\n        # Add a NoneType-compatible field to represent null allowance\n        from typesystem.fields import Const\n        fields.append(Const(None))\n\n    return Union(fields)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 892, in <module>\n  File \"<string>\", line 891, in test_120\nAssertionError\n", "passed": false}
{"task_id": 331, "prediction_id": 3, "generation": "from typing import Set\nfrom typesystem.fields import Field, Union\nfrom typesystem.schemas import SchemaDefinitions\nfrom typesystem.json_schema import get_valid_types, from_json_schema_type\n\n\ndef type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n    type_strings, allow_null = get_valid_types(data)\n\n    # If no type_strings, treat as Any\n    if not type_strings:\n        # No specific type; the JSON Schema type could be anything\n        # (this shouldn't normally happen as get_valid_types sets a default set)\n        return Field()\n\n    # Build a list of Field instances for each type string.\n    fields = [from_json_schema_type(data, type_string, allow_null=False, definitions=definitions)\n              for type_string in type_strings]\n\n    # If we allow null as well, add a Const(None) field OR handle allow_null param per type.\n    # The from_json_schema_type already takes allow_null param, and we've passed allow_null=False,\n    # so we need to handle nullability in the union.\n\n    if allow_null:\n        # Add None type to the union\n        from typesystem.fields import Const\n        fields.append(Const(None))\n\n    if len(fields) == 1:\n        return fields[0]\n    else:\n        return Union(fields, allow_null=False)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 889, in <module>\n  File \"<string>\", line 888, in test_120\nAssertionError\n", "passed": false}
{"task_id": 331, "prediction_id": 4, "generation": "from typing import Set\nfrom typesystem.fields import Field\nfrom typesystem.schemas import SchemaDefinitions\nfrom typesystem.json_schema import get_valid_types, from_json_schema_type\n\n\ndef type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n    type_strings, allow_null = get_valid_types(data)\n\n    fields = []\n    for type_string in sorted(type_strings):\n        field = from_json_schema_type(data, type_string, allow_null, definitions)\n        fields.append(field)\n\n    if not fields:\n        # No explicit types, fallback to Any (like in from_json_schema)\n        from typesystem.fields import Any\n        return Any()\n\n    if len(fields) == 1:\n        return fields[0]\n\n    from typesystem.fields import Union\n    return Union(fields, allow_null=allow_null)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 881, in <module>\n  File \"<string>\", line 880, in test_120\nAssertionError\n", "passed": false}
