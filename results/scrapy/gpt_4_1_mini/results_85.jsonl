{"task_id": 85, "prediction_id": 0, "generation": "import asyncio\nfrom twisted.internet import defer\n\ndef deferred_from_coro(o):\n    \"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"\n    if asyncio.iscoroutine(o) or asyncio.isfuture(o):\n        # Wrap the coroutine/future with ensure_future to get a Future, then create a Deferred from it\n        future = asyncio.ensure_future(o)\n\n        d = defer.Deferred()\n\n        def on_success(result):\n            d.callback(result)\n\n        def on_failure(failure_exc):\n            d.errback(failure_exc)\n\n        # Attach callbacks converting asyncio.Future completion to Deferred callbacks\n        future.add_done_callback(\n            lambda f: on_success(f.result()) if not f.exception()\n            else on_failure(failure.Failure(f.exception()))\n        )\n\n        return d\n    return o", "message": "passed", "passed": true}
{"task_id": 85, "prediction_id": 1, "generation": "import asyncio\nfrom twisted.internet import defer\n\ndef deferred_from_coro(o):\n    \"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"\n    if asyncio.iscoroutine(o) or asyncio.isfuture(o) or hasattr(o, \"__await__\"):\n        # Wrap the asyncio coroutine/future into a Twisted Deferred\n        return defer.ensureDeferred(o)\n    else:\n        return o", "message": "passed", "passed": true}
{"task_id": 85, "prediction_id": 2, "generation": "import asyncio\nfrom twisted.internet import defer\n\n\ndef deferred_from_coro(o):\n    \"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"\n    if asyncio.iscoroutine(o) or asyncio.isfuture(o) or hasattr(o, \"__await__\"):\n        return defer.ensureDeferred(o)\n    return o", "message": "passed", "passed": true}
{"task_id": 85, "prediction_id": 3, "generation": "import asyncio\nfrom twisted.internet import defer\n\n\ndef deferred_from_coro(o):\n    \"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"\n    if asyncio.isfuture(o) or asyncio.iscoroutine(o):\n        return defer.Deferred.fromFuture(asyncio.ensure_future(o))\n    return o", "message": "passed", "passed": true}
{"task_id": 85, "prediction_id": 4, "generation": "import asyncio\nfrom twisted.internet import defer\n\n\ndef deferred_from_coro(o):\n    \"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"\n    if asyncio.iscoroutine(o) or asyncio.isfuture(o) or hasattr(o, \"__await__\"):\n        # wrap asyncio coroutine or Future in a Twisted Deferred using ensure_future\n        # and attaching callbacks to propagate result/errors to Deferred\n        future = asyncio.ensure_future(o)\n\n        d = defer.Deferred()\n\n        def on_done(fut):\n            try:\n                result = fut.result()\n            except Exception as e:\n                d.errback(failure.Failure(e))\n            else:\n                d.callback(result)\n\n        future.add_done_callback(on_done)\n        return d\n    else:\n        return o", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 207, in <module>\n  File \"<string>\", line 206, in test_3\nAttributeError: 'Deferred' object has no attribute 'result'\n", "passed": false}
