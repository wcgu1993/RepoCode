{"task_id": 92, "prediction_id": 0, "generation": "from operator import itemgetter\nfrom collections import defaultdict\nfrom typing import DefaultDict\nfrom weakref import WeakKeyDictionary\nfrom time import time\n\n# Re-declare live_refs and NoneType here to avoid relying on file context imports\nNoneType = type(None)\nlive_refs: DefaultDict[type, WeakKeyDictionary] = defaultdict(WeakKeyDictionary)\n\ndef format_live_refs(ignore=NoneType):\n    \"\"\"Return a tabular representation of tracked objects\"\"\"\n    # Prepare a list to gather all entries: (class_name, count, youngest_age)\n    entries = []\n\n    current_time = time()\n    for cls, refs in live_refs.items():\n        if cls is ignore:\n            continue\n        count = len(refs)\n        if count == 0:\n            continue\n\n        # refs is a WeakKeyDictionary mapping obj -> creation_time (float)\n        # Calculate youngest age = current_time - max(creation_time)\n        max_creation_time = max(refs.values())\n        youngest_age = current_time - max_creation_time\n\n        entries.append((cls.__name__, count, youngest_age))\n\n    if not entries:\n        return \"No tracked live objects found.\"\n\n    # Sort entries by descending count, then ascending youngest_age\n    entries.sort(key=lambda e: (-e[1], e[2]))\n\n    # Format output table\n    header = f\"{'CLASS NAME':<30} {'COUNT':>10} {'YOUNGEST AGE (s)':>18}\"\n    lines = [header, \"-\" * len(header)]\n    for class_name, count, youngest_age in entries:\n        lines.append(f\"{class_name:<30} {count:>10} {youngest_age:>18.3f}\")\n\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 124, in test_8\nAssertionError\n", "passed": false}
{"task_id": 92, "prediction_id": 1, "generation": "from operator import itemgetter\nfrom typing import Optional\n\ndef format_live_refs(ignore: Optional[type] = NoneType) -> str:\n    \"\"\"Return a tabular representation of tracked objects\"\"\"\n    # Prepare a list to hold (class_name, number_of_live_objects) excluding ignored classes\n    stats = []\n    for cls, refs in live_refs.items():\n        if cls is ignore:\n            continue\n        count = len(refs)\n        if count > 0:\n            stats.append((cls.__name__, count))\n    # Sort by count descending, then by class name ascending\n    stats.sort(key=lambda x: (-x[1], x[0]))\n    # Compute the width needed for class names and counts for pretty printing\n    if not stats:\n        return \"No live objects tracked.\"\n    max_cls_len = max(len(name) for name, _ in stats)\n    max_count_len = max(len(str(count)) for _, count in stats)\n    # Build lines with header and separator\n    header = f\"{'Class':<{max_cls_len}} | {'Count':>{max_count_len}}\"\n    separator = f\"{'-' * max_cls_len}-+-{'-' * max_count_len}\"\n    lines = [header, separator]\n    for name, count in stats:\n        lines.append(f\"{name:<{max_cls_len}} | {count:>{max_count_len}}\")\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 109, in <module>\n  File \"<string>\", line 108, in test_8\nAssertionError\n", "passed": false}
{"task_id": 92, "prediction_id": 2, "generation": "from operator import itemgetter\nfrom time import time\n\ndef format_live_refs(ignore=NoneType):\n    \"\"\"Return a tabular representation of tracked objects\"\"\"\n    # Prepare a list to collect class name and count tuples\n    results = []\n\n    # Ignore the ignored type if it is present\n    for cls, refs in live_refs.items():\n        if cls is ignore:\n            continue\n        count = len(refs)\n        if count > 0:\n            results.append((cls.__name__, count))\n\n    # Sort results by class name alphabetically\n    results.sort(key=itemgetter(0))\n\n    # Format as a table string: \"ClassName    Count\\n\"\n    # Decide a fixed width or dynamically calculate width for alignment\n    if not results:\n        return \"\"\n\n    # Calculate max length of class names for alignment\n    max_cls_len = max(len(name) for name, _ in results)\n    header_cls = \"Class\"\n    header_count = \"Count\"\n    max_cls_len = max(max_cls_len, len(header_cls))\n    \n    # Compose lines \n    lines = [f\"{header_cls:<{max_cls_len}}  {header_count}\"]\n    lines.append(f\"{'-'*max_cls_len}  {'-'*len(header_count)}\")\n    for name, count in results:\n        lines.append(f\"{name:<{max_cls_len}}  {count}\")\n\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 119, in <module>\n  File \"<string>\", line 118, in test_8\nAssertionError\n", "passed": false}
{"task_id": 92, "prediction_id": 3, "generation": "from operator import itemgetter\nfrom collections import defaultdict\nfrom weakref import WeakKeyDictionary\nfrom time import time\n\ndef format_live_refs(ignore=NoneType):\n    \"\"\"Return a tabular representation of tracked objects\"\"\"\n\n    # live_refs is a defaultdict(type -> WeakKeyDictionary: obj -> creation_time)\n    # The function returns a tabular string summarizing the currently live tracked objects.\n    # We want to list class names, number of instances, and possibly oldest/newest instance age\n    # or the creation timestamp in some readable form.\n\n    # Defensive: if ignore is NoneType, treat that as a signal to ignore objects of NoneType.\n    # We exclude that class from the report.\n\n    lines = []\n    header = [\"Class Name\", \"Instances\", \"Oldest Age (s)\", \"Newest Age (s)\"]\n    lines.append(\"{:<30} {:>10} {:>15} {:>15}\".format(*header))\n\n    now = time()\n\n    # live_refs dict: type -> WeakKeyDictionary[obj -> creation_time]\n    # For each class, count alive objects and compute age ranges.\n\n    # Sort by class name for consistency\n    for cls in sorted(live_refs.keys(), key=lambda c: c.__name__):\n        if cls is ignore:\n            continue\n\n        refs = live_refs[cls]\n        if not refs:\n            continue\n\n        times = list(refs.values())\n        count = len(times)\n\n        # Compute age(s): current time - creation time\n        ages = [now - t for t in times]\n\n        oldest = max(ages) if ages else 0\n        newest = min(ages) if ages else 0\n\n        lines.append(\"{:<30} {:>10} {:>15.2f} {:>15.2f}\".format(cls.__name__, count, oldest, newest))\n\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 127, in test_8\nAssertionError\n", "passed": false}
{"task_id": 92, "prediction_id": 4, "generation": "from operator import itemgetter\nfrom time import time\n\ndef format_live_refs(ignore=NoneType):\n    \"\"\"Return a tabular representation of tracked objects\"\"\"\n    # Prepare a list to hold (class_name, instance_count, oldest_age) tuples\n    results = []\n\n    current_time = time()\n\n    for cls, instances in live_refs.items():\n        # Skip the class if it is the ignored type\n        if cls is ignore:\n            continue\n        count = len(instances)\n        if count == 0:\n            continue\n        # Find the oldest instance creation time\n        oldest_creation = min(instances.values())\n        age = current_time - oldest_creation\n        results.append((cls.__name__, count, age))\n\n    # Sort results by class name\n    results.sort(key=itemgetter(0))\n\n    # Format into a table-like string\n    if not results:\n        return \"No live references tracked.\"\n\n    lines = []\n    header = f\"{'ClassName':<30} {'Count':>10} {'OldestAge(sec)':>15}\"\n    lines.append(header)\n    lines.append(\"-\" * len(header))\n    for name, count, age in results:\n        lines.append(f\"{name:<30} {count:>10} {age:>15.2f}\")\n\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 119, in <module>\n  File \"<string>\", line 118, in test_8\nAssertionError\n", "passed": false}
