{"task_id": 49, "prediction_id": 0, "generation": "def binary_is_text(data):\n    \"\"\" Returns ``True`` if the given ``data`` argument (a ``bytes`` object)\n    does not contain unprintable control characters.\n    \"\"\"\n    # Set of control characters that are considered binary/unprintable\n    # Allow: tab (9), newline (10), carriage return(13)\n    # Disallow: other control chars in range 0-31 and 127 (DEL)\n    # This corresponds to the _BINARYCHARS defined in file content, but we redefine here for independence.\n    # We can use a set comprehension similar to _BINARYCHARS.\n\n    if not isinstance(data, bytes):\n        raise TypeError(f\"binary_is_text() argument must be bytes, got {type(data).__name__}\")\n\n    # Define forbidden control chars\n    forbidden = set(range(0, 32)) - {9, 10, 13}\n    forbidden.add(127)  # DEL char is considered non-printable\n\n    for b in data:\n        if b in forbidden:\n            return False\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 426, in <module>\n  File \"<string>\", line 425, in test_11\nAssertionError\n", "passed": false}
{"task_id": 49, "prediction_id": 1, "generation": "def binary_is_text(data):\n    \"\"\" Returns ``True`` if the given ``data`` argument (a ``bytes`` object)\n    does not contain unprintable control characters.\n    \"\"\"\n    if not isinstance(data, bytes):\n        raise TypeError(f\"binary_is_text() expects bytes, got {type(data).__name__}\")\n    # _BINARYCHARS (from file content) is a set of control characters considered binary/unprintable\n    # If any byte in data matches these bad characters, return False\n    # Otherwise return True\n\n    # _BINARYCHARS contains integers representing control chars that are \"bad\"\n    # Check if any byte in data is in _BINARYCHARS\n    return not any(byte in _BINARYCHARS for byte in data)", "message": "failed: Traceback (most recent call last):\n  File \"<string>\", line 1408, in test_extra_0\n  File \"<string>\", line 198, in binary_is_text\nTypeError: binary_is_text() expects bytes, got str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1413, in <module>\n  File \"<string>\", line 1410, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 49, "prediction_id": 2, "generation": "def binary_is_text(data):\n    \"\"\" Returns ``True`` if the given ``data`` argument (a ``bytes`` object)\n    does not contain unprintable control characters.\n    \"\"\"\n    if not isinstance(data, bytes):\n        raise TypeError(f\"Expected bytes, got {type(data).__name__}\")\n\n    # According to the original file content _BINARYCHARS is a set of bytes\n    # representing unprintable control characters except \\0, \\t, \\n, \\r\n    # We can check if any byte in data is in _BINARYCHARS.\n\n    # Since _BINARYCHARS set is defined in the file content, we need to re-define it here:\n\n    def to_bytes(text, encoding=None, errors='strict'):\n        if isinstance(text, bytes):\n            return text\n        if not isinstance(text, str):\n            raise TypeError('to_bytes must receive a str or bytes '\n                            f'object, got {type(text).__name__}')\n        if encoding is None:\n            encoding = 'utf-8'\n        return text.encode(encoding, errors)\n\n    _BINARYCHARS = {to_bytes(chr(i)) for i in range(32)} - {b\"\\0\", b\"\\t\", b\"\\n\", b\"\\r\"}\n    _BINARYCHARS |= {ord(ch) for ch in _BINARYCHARS}\n\n    # The _BINARYCHARS contains bytes and ints mixed because of the last line,\n    # so to properly check the data bytes, we need to normalize the set to ints:\n    _BINARYCHARS_SET = set()\n    for c in _BINARYCHARS:\n        if isinstance(c, bytes):\n            _BINARYCHARS_SET.add(c[0])\n        else:\n            _BINARYCHARS_SET.add(c)\n\n    for b in data:\n        if b in _BINARYCHARS_SET:\n            return False\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"<string>\", line 1434, in test_extra_0\n  File \"<string>\", line 198, in binary_is_text\nTypeError: Expected bytes, got str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1439, in <module>\n  File \"<string>\", line 1436, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 49, "prediction_id": 3, "generation": "def binary_is_text(data):\n    \"\"\" Returns ``True`` if the given ``data`` argument (a ``bytes`` object)\n    does not contain unprintable control characters.\n    \"\"\"\n    if not isinstance(data, bytes):\n        raise TypeError(f\"Expected bytes, got {type(data).__name__}\")\n\n    # Control characters that are considered binary/unprintable, excluding whitespace (\\t,\\n,\\r)\n    unprintable = set(range(32)) - {0, 9, 10, 13}  # 0 is \\0, included in unprintable\n    for b in data:\n        if b in unprintable:\n            return False\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"<string>\", line 1408, in test_extra_0\n  File \"<string>\", line 198, in binary_is_text\nTypeError: Expected bytes, got str\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1413, in <module>\n  File \"<string>\", line 1410, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 49, "prediction_id": 4, "generation": "def binary_is_text(data):\n    \"\"\" Returns ``True`` if the given ``data`` argument (a ``bytes`` object)\n    does not contain unprintable control characters.\n    \"\"\"\n    # According to the file content, _BINARYCHARS contains the \"unprintable controls\"\n    # except common whitespace/control chars allowed in text (\\0 excluded).\n    # So if any byte in data is in _BINARYCHARS, then data is not text.\n    # Otherwise, data is text.\n\n    # Use _BINARYCHARS from the module scope:\n    for byte in data:\n        # byte can be int or bytes of length 1 depending on Python version,\n        # but since data is bytes, iteration yields ints.\n        if byte in _BINARYCHARS:\n            return False\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1416, in <module>\n  File \"<string>\", line 1415, in test_extra_0\nAssertionError: Expected TypeError to be raised\n", "passed": false}
