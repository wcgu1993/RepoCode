{"task_id": 102, "prediction_id": 0, "generation": "from urllib.parse import urlparse, urlunparse, ParseResult\n\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n      from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n      query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse the URL (if already parsed, parse_url will return the same)\n    parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Strip credentials (userinfo) if requested\n    if strip_credentials and '@' in netloc:\n        # Remove userinfo before the '@'\n        netloc = netloc.split('@', 1)[1]\n\n    # If origin_only is set, strip path/query/fragment and set path to '/'\n    if origin_only:\n        # strip credentials anyway per the docstring\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n        path = '/'\n        query = ''\n        fragment = ''\n\n    else:\n        # Strip fragment if requested and not origin_only\n        if strip_fragment:\n            fragment = ''\n\n    # Strip default port if requested\n    if strip_default_port and netloc:\n        # netsloc can be hostname or hostname:port (maybe userinfo@hostname:port, but credentials stripped above)\n        # split netloc into hostname and port parts safely\n        hostname = netloc\n        port = ''\n\n        if ':' in netloc:\n            # Attempt to split hostname and port; handle IPv6 addresses enclosed in []\n            if netloc.startswith('['):\n                # IPv6 literal with port: [::1]:80\n                closing_bracket = netloc.find(']')\n                if closing_bracket != -1:\n                    hostname = netloc[:closing_bracket+1]\n                    port = netloc[closing_bracket+1:]\n                else:\n                    # malformed? just leave as is\n                    hostname = netloc\n                    port = ''\n            else:\n                hostname, sep, port = netloc.partition(':')\n\n            port = port.lstrip(':')  # in case of extra colon accidentally present\n\n        # Determine default port by scheme\n        default_ports = {\n            'http': '80',\n            'https': '443',\n            'ftp': '21',\n        }\n\n        default_port = default_ports.get(scheme.lower())\n        if port and port == default_port:\n            # Remove port\n            netloc = hostname\n        elif port:\n            # keep port (including ':' prefix)\n            netloc = hostname + ':' + port\n\n    # Rebuild the URL stripping components as needed\n    stripped = urlunparse((scheme, netloc, path, params, query, fragment))\n    return stripped", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 351, in <module>\n  File \"<string>\", line 349, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 1, "generation": "from urllib.parse import urlparse, urlunparse, ParseResult\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n      from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n      query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    p = urlparse(url)\n\n    netloc = p.netloc\n    scheme = p.scheme\n    path = p.path\n    params = p.params\n    query = p.query\n    fragment = p.fragment\n\n    # Strip credentials if requested or if origin_only is True (must strip always)\n    if strip_credentials or origin_only:\n        # netloc can be: user:pass@host:port or host:port\n        # Find userinfo and host:port parts\n        if \"@\" in netloc:\n            _, netloc = netloc.rsplit(\"@\", 1)\n\n    # Strip default port if requested and if netloc contains port\n    if strip_default_port and netloc:\n        # Split host and port\n        if \":\" in netloc:\n            host, port = netloc.rsplit(\":\", 1)\n            if (scheme == \"http\" and port == \"80\") or \\\n               (scheme == \"https\" and port == \"443\") or \\\n               (scheme == \"ftp\" and port == \"21\"):\n                netloc = host\n\n    # If origin_only, override path, query, fragment as specified\n    if origin_only:\n        path = \"/\"\n        query = \"\"\n        fragment = \"\"\n\n    # Strip fragment if requested\n    if strip_fragment and not origin_only:\n        fragment = \"\"\n\n    new_p = ParseResult(scheme, netloc, path, params, query, fragment)\n    return urlunparse(new_p)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 316, in <module>\n  File \"<string>\", line 314, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 2, "generation": "from urllib.parse import urlparse, urlunparse, ParseResult\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse the URL (handle if it's already a ParseResult)\n    if isinstance(url, ParseResult):\n        parsed = url\n    else:\n        parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Handle strip_credentials: remove user:pass@ from netloc\n    if strip_credentials or origin_only:\n        # netloc format: [user[:password]@]host[:port]\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Handle strip_default_port: remove default port for known schemes\n    if strip_default_port and netloc:\n        # Check if port is default for scheme and remove it\n        # We do this by splitting hostname and port manually\n        hostname = netloc\n        port = None\n        if ':' in netloc:\n            # Split on last ':' in case IPv6 addresses are present like [::1]:80\n            if netloc.count(':') > 1 and netloc.startswith('['):\n                # IPv6 with brackets, format is [addr]:port\n                host_part_end = netloc.find(']')\n                if host_part_end != -1 and len(netloc) > host_part_end + 1 and netloc[host_part_end + 1] == ':':\n                    hostname = netloc[:host_part_end+1]\n                    port = netloc[host_part_end+2:]\n                else:\n                    hostname = netloc\n                    port = None\n            else:\n                # IPv4 or hostname with port\n                hostname, port = netloc.rsplit(':', 1)\n        else:\n            hostname = netloc\n            port = None\n\n        # Known default ports for schemes to strip\n        default_ports = {\n            'http': '80',\n            'https': '443',\n            'ftp': '21',\n        }\n        if port and scheme in default_ports and port == default_ports[scheme]:\n            netloc = hostname\n\n    # Handle origin_only: path = \"/\", query and fragment dropped\n    if origin_only:\n        path = '/'\n        query = ''\n        fragment = ''\n    else:\n        # Otherwise handle strip_fragment\n        if strip_fragment:\n            fragment = ''\n\n    # Rebuild the URL\n    new_parsed = ParseResult(scheme, netloc, path, params, query, fragment)\n    return urlunparse(new_parsed)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 343, in <module>\n  File \"<string>\", line 341, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 3, "generation": "import re\nfrom urllib.parse import urlparse, urlunparse\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n      from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n      query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    parsed = urlparse(url)\n\n    scheme, netloc, path, params, query, fragment = parsed\n\n    # Strip credentials (user:pass@) from netloc\n    if strip_credentials or origin_only:\n        # Credentials precede '@', so remove everything before '@' if present\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Strip default ports if requested\n    if strip_default_port:\n        # Only strip default port if netloc contains port (host:port)\n        # Determine default port by scheme\n        default_ports = {\n            'http': '80',\n            'https': '443',\n            'ftp': '21'\n        }\n        host_port = netloc.rsplit(':', 1)\n        if len(host_port) == 2:\n            host, port = host_port\n            port = port.lower()\n            if scheme in default_ports and port == default_ports[scheme]:\n                netloc = host\n\n    if origin_only:\n        # Replace path with \"/\"\n        path = '/'\n        # Drop query and fragment\n        query = ''\n        fragment = ''\n    else:\n        # Only strip fragment if requested\n        if strip_fragment:\n            fragment = ''\n\n    # Reconstruct URL without the params part (params are rarely used, keep as is)\n    stripped_url = urlunparse((scheme, netloc, path, params, query, fragment))\n    return stripped_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 319, in <module>\n  File \"<string>\", line 317, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 4, "generation": "from urllib.parse import urlparse, urlunparse, ParseResult\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n      from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n      query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse URL\n    parsed = urlparse(url)\n\n    # Prepare components for rebuild\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # If origin_only is True:\n    # - strip credentials (regardless of strip_credentials flag)\n    # - path = \"/\"\n    # - drop query and fragment\n    # else:\n    # - strip credentials only if strip_credentials is True\n    # - strip default port only if strip_default_port is True\n    # - strip fragment only if strip_fragment is True\n\n    # Strip credentials if needed (either origin_only or strip_credentials)\n    if origin_only or strip_credentials:\n        # Remove userinfo from netloc:user:pass@hostname[:port]\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Strip default port if needed and not origin_only\n    if strip_default_port and not origin_only:\n        # Default ports map\n        default_ports = {\n            'http': 80,\n            'https': 443,\n            'ftp': 21,\n        }\n        if ':' in netloc:\n            host_part, port_part = netloc.rsplit(':', 1)\n            try:\n                port_num = int(port_part)\n            except ValueError:\n                # Port is not a valid number, leave as is\n                port_num = None\n            if port_num is not None and scheme in default_ports and port_num == default_ports[scheme]:\n                netloc = host_part\n\n    # If origin_only: path=\"/\", drop query and fragment\n    if origin_only:\n        path = '/'\n        query = ''\n        fragment = ''\n    else:\n        if strip_fragment:\n            fragment = ''\n\n    # Rebuild URL\n    rebuilt = urlunparse(ParseResult(\n        scheme=scheme,\n        netloc=netloc,\n        path=path,\n        params=params,\n        query=query,\n        fragment=fragment\n    ))\n    return rebuilt", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 231, in <module>\n  File \"<string>\", line 230, in test_0\nAssertionError\n", "passed": false}
