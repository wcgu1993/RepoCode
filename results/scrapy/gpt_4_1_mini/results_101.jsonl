{"task_id": 101, "prediction_id": 0, "generation": "import re\nfrom urllib.parse import urlparse\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if url already has a scheme\n    if re.match(r'^\\w+://', url, flags=re.I):\n        return url\n\n    # Check if it looks like a filesystem path\n    # Posix path: starts with ./, ../, / or ~/\n    # Windows path: drive letter or UNC path\n    def _is_posix_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^                   # start with...\n                (\n                    \\.              # ...a single dot,\n                    (\n                        \\. | [^/\\.]+  # optionally followed by\n                    )?                # either a second dot or some characters\n                    |\n                    ~   # $HOME\n                )?      # optional match of \".\", \"..\" or \"~\"\n                /       # at least one \"/\" for a file path,\n                .       # and something after the \"/\"\n                ''',\n                string,\n                flags=re.VERBOSE,\n            )\n        )\n\n    def _is_windows_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^\n                (\n                    [a-z]:\\\\\n                    | \\\\\\\\\n                )\n                ''',\n                string,\n                flags=re.IGNORECASE | re.VERBOSE,\n            )\n        )\n\n    def _is_filesystem_path(string):\n        return _is_posix_path(string) or _is_windows_path(string)\n\n    if _is_filesystem_path(url):\n        # For filesystem paths, add file://\n        # For Windows, convert backslash to forward slash per URI standard\n        if _is_windows_path(url):\n            # Normalize backslashes to forward slashes\n            url_fixed = url.replace('\\\\', '/')\n            # If starts with drive letter without leading slash, add slash after file://\n            # e.g. C:/path/to/file\n            if re.match(r'^[a-zA-Z]:/', url_fixed):\n                return 'file:///' + url_fixed\n            else:\n                return 'file://' + url_fixed\n        else:\n            return 'file://' + url\n\n    # Otherwise add http://\n    return 'http://' + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 591, in <module>\n  File \"<string>\", line 590, in test_7\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 1, "generation": "import re\nfrom urllib.parse import urlparse\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # If URL already has a scheme, return as-is\n    if re.match(r\"^\\w+://\", url, flags=re.I):\n        return url\n\n    # Check if url looks like a filesystem path: posix or windows style\n    def is_posix_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^                   # start with...\n                (\n                    \\.              # ...a single dot,\n                    (\n                        \\. | [^/\\.]+  # optionally followed by\n                    )?                # either a second dot or some characters\n                    |\n                    ~   # $HOME\n                )?      # optional match of \".\", \"..\" or \".blabla\"\n                /       # at least one \"/\" for a file path,\n                .       # and something after the \"/\"\n                ''',\n                string,\n                flags=re.VERBOSE,\n            )\n        )\n\n    def is_windows_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^\n                (\n                    [a-z]:\\\\\n                    | \\\\\\\\\n                )\n                ''',\n                string,\n                flags=re.IGNORECASE | re.VERBOSE,\n            )\n        )\n    \n    def is_filesystem_path(string):\n        return is_posix_path(string) or is_windows_path(string)\n\n    if is_filesystem_path(url):\n        return \"file://\" + url\n\n    # Otherwise, add http:// as default scheme\n    return \"http://\" + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 577, in <module>\n  File \"<string>\", line 576, in test_7\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 2, "generation": "import re\nfrom urllib.parse import urlparse\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if URL already has a scheme (e.g. http://, https://, ftp://, file://)\n    if re.match(r'^\\w+://', url, flags=re.I):\n        return url\n\n    # Determine if url looks like a filesystem path\n    # POSIX path check\n    posix_path_pattern = re.compile(\n        r'''\n        ^\n        (\n            \\.\n            (\n                \\. | [^/\\.]+\n            )?\n            |\n            ~\n        )?\n        /\n        .\n        ''',\n        flags=re.VERBOSE,\n    )\n    # Windows path check\n    windows_path_pattern = re.compile(\n        r'''\n        ^\n        (\n            [a-z]:\\\\\n            | \\\\\\\\\n        )\n        ''',\n        flags=re.IGNORECASE | re.VERBOSE,\n    )\n\n    if posix_path_pattern.match(url) or windows_path_pattern.match(url):\n        # If it looks like a file system path, prepend file://\n        return 'file://' + url\n\n    # Otherwise, assume HTTP scheme\n    return 'http://' + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 568, in <module>\n  File \"<string>\", line 567, in test_7\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 3, "generation": "import re\nfrom urllib.parse import urlparse\nfrom scrapy.utils.url import _is_filesystem_path\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if URL already has a scheme\n    parsed = urlparse(url)\n    if parsed.scheme:\n        return url\n\n    # If the url looks like a filesystem path, add file://\n    if _is_filesystem_path(url):\n        # For Windows paths, ensure the slashes are normalized for URL\n        # urlparse and file URLs on Windows expect forward slashes.\n        # But we do not alter the input here as per given examples and context.\n        return 'file://' + url\n\n    # Otherwise add http://\n    return 'http://' + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 242, in <module>\n  File \"<string>\", line 241, in test_13\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 4, "generation": "import re\nfrom urllib.parse import urlparse\nfrom w3lib.url import url_is_from_any_domain  # just to keep import style consistent, no direct use needed\n\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if URL already has a scheme\n    parsed = urlparse(url)\n    if parsed.scheme:\n        return url\n\n    # Check if the url looks like a filesystem path (posix or windows)\n    def _is_posix_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^                   # start with...\n                (\n                    \\.              # ...a single dot,\n                    (\n                        \\. | [^/\\.]+  # optionally followed by\n                    )?                # either a second dot or some characters\n                    |\n                    ~   # $HOME\n                )?      # optional match of \".\", \"..\" or \".blabla\"\n                /       # at least one \"/\" for a file path,\n                .       # and something after the \"/\"\n                ''',\n                string,\n                flags=re.VERBOSE,\n            )\n        )\n\n    def _is_windows_path(string):\n        return bool(\n            re.match(\n                r'''\n                ^\n                (\n                    [a-z]:\\\\\n                    | \\\\\\\\\n                )\n                ''',\n                string,\n                flags=re.IGNORECASE | re.VERBOSE,\n            )\n        )\n\n    def _is_filesystem_path(string):\n        return _is_posix_path(string) or _is_windows_path(string)\n\n    if _is_filesystem_path(url):\n        return \"file://\" + url\n\n    # Otherwise add http:// as default scheme\n    return \"http://\" + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 145, in <module>\nImportError: cannot import name 'url_is_from_any_domain' from 'w3lib.url' (/usr/local/lib/python3.10/site-packages/w3lib/url.py)\n", "passed": false}
