{"task_id": 71, "prediction_id": 0, "generation": "import warnings\nfrom scrapy.spidermiddlewares.referer import _policy_classes\n\n\ndef _load_policy_class(policy, warning_only=False):\n    \"\"\"\n    Expect a string for the path to the policy class,\n    otherwise try to interpret the string as a standard value\n    from https://www.w3.org/TR/referrer-policy/#referrer-policies\n    \"\"\"\n    if not policy:\n        return None\n\n    # If policy is already a class, return it directly\n    if isinstance(policy, type):\n        return policy\n\n    # If policy is a string, try to find it in the standard policies\n    if isinstance(policy, str):\n        # Try to get from the built-in policy classes\n        cls = _policy_classes.get(policy.lower())\n        if cls is not None:\n            return cls\n\n        # Try to interpret the string as a full import path to a class\n        try:\n            from scrapy.utils.misc import load_object\n        except ImportError:\n            if not warning_only:\n                warnings.warn(\n                    f\"Referrer policy string '{policy}' is not valid and could not load as an import path.\"\n                )\n            return None\n\n        try:\n            cls = load_object(policy)\n            if not isinstance(cls, type):\n                if not warning_only:\n                    warnings.warn(\n                        f\"Referrer policy '{policy}' does not refer to a class.\"\n                    )\n                return None\n            return cls\n        except Exception as e:\n            if not warning_only:\n                warnings.warn(\n                    f\"Failed to load referrer policy '{policy}': {e}\"\n                )\n            return None\n\n    # If policy is neither a string nor a class, warn or return None\n    if not warning_only:\n        warnings.warn(\n            f\"Referrer policy '{policy}' is not a recognized string or class.\"\n        )\n    return None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 426, in <module>\n  File \"<string>\", line 425, in test_4\nAssertionError\n", "passed": false}
{"task_id": 71, "prediction_id": 1, "generation": "import warnings\nfrom typing import Optional, Type\n\nfrom scrapy.spidermiddlewares.referer import _policy_classes, ReferrerPolicy\n\n\ndef _load_policy_class(policy: str, warning_only: bool = False) -> Optional[Type[ReferrerPolicy]]:\n    \"\"\"\n    Expect a string for the path to the policy class,\n    otherwise try to interpret the string as a standard value\n    from https://www.w3.org/TR/referrer-policy/#referrer-policies\n    \"\"\"\n    # If policy is not a string, return None\n    if not isinstance(policy, str):\n        if not warning_only:\n            warnings.warn(f\"Referrer policy should be a string, got {type(policy)}\")\n        return None\n\n    # First, try to find the policy in the standard policies mapping\n    cls = _policy_classes.get(policy.lower())\n    if cls is not None:\n        return cls\n\n    # If not in standard, try to load it as a Python object import path\n    try:\n        from scrapy.utils.misc import load_object\n        cls = load_object(policy)\n    except Exception as exc:\n        if not warning_only:\n            warnings.warn(\n                f\"Cannot load referrer policy '{policy}': {exc}\",\n                category=RuntimeWarning,\n                stacklevel=2,\n            )\n        return None\n\n    # Validate that the loaded object is a subclass of ReferrerPolicy\n    if not isinstance(cls, type) or not issubclass(cls, ReferrerPolicy):\n        if not warning_only:\n            warnings.warn(\n                f\"Loaded referrer policy '{policy}' is not a subclass of ReferrerPolicy\",\n                category=RuntimeWarning,\n                stacklevel=2,\n            )\n        return None\n\n    return cls", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 417, in <module>\n  File \"<string>\", line 416, in test_4\nAssertionError\n", "passed": false}
{"task_id": 71, "prediction_id": 2, "generation": "import warnings\nfrom importlib import import_module\n\ndef _load_policy_class(policy, warning_only=False):\n    \"\"\"\n    Expect a string for the path to the policy class,\n    otherwise try to interpret the string as a standard value\n    from https://www.w3.org/TR/referrer-policy/#referrer-policies\n    \"\"\"\n    if not isinstance(policy, str):\n        if not warning_only:\n            warnings.warn(f\"Referrer policy should be a string, got {type(policy).__name__} instead\")\n        return None\n\n    if '.' in policy:\n        # Try to load path to a class (e.g. 'scrapy.spidermiddlewares.referer.NoReferrerPolicy')\n        try:\n            module_path, class_name = policy.rsplit('.', 1)\n            module = import_module(module_path)\n            klass = getattr(module, class_name)\n            return klass\n        except (ImportError, AttributeError) as e:\n            if not warning_only:\n                warnings.warn(f\"Cannot load referrer policy class '{policy}': {e}\")\n            return None\n\n    # Otherwise, interpret as standard policy name\n    from scrapy.spidermiddlewares.referer import _policy_classes\n\n    cls = _policy_classes.get(policy.lower())\n    if cls is None and not warning_only:\n        warnings.warn(\n            f\"Referrer policy '{policy}' not found, options are: \"\n            f\"{', '.join(sorted(_policy_classes.keys()))}\")\n    return cls", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 405, in <module>\n  File \"<string>\", line 404, in test_4\nAssertionError\n", "passed": false}
{"task_id": 71, "prediction_id": 3, "generation": "import warnings\nfrom scrapy.spidermiddlewares.referer import _policy_classes\n\n\ndef _load_policy_class(policy, warning_only=False):\n    \"\"\"\n    Expect a string for the path to the policy class,\n    otherwise try to interpret the string as a standard value\n    from https://www.w3.org/TR/referrer-policy/#referrer-policies\n    \"\"\"\n    if not policy:\n        # Empty string policy uses NoReferrerWhenDowngradePolicy as per spec\n        policy = \"\"\n\n    if isinstance(policy, str):\n        # Try direct lookup from known policy classes\n        cls = _policy_classes.get(policy)\n        if cls:\n            return cls\n\n        # Try to load a class from a fully qualified path\n        if \".\" in policy:\n            try:\n                from scrapy.utils.misc import load_object\n            except ImportError:\n                # fallback: no load_object available, return None\n                if not warning_only:\n                    warnings.warn(f\"Cannot load policy class {policy}: load_object unavailable\",\n                                  RuntimeWarning)\n                return None\n            try:\n                return load_object(policy)\n            except Exception as e:\n                if not warning_only:\n                    warnings.warn(f\"Failed to load policy class '{policy}': {e}\",\n                                  RuntimeWarning)\n                return None\n        else:\n            if not warning_only:\n                warnings.warn(f\"Unknown referrer policy: {policy}\", RuntimeWarning)\n            return None\n\n    # policy could be a class or callable already\n    # We accept if it is a subclass of ReferrerPolicy or callable (duck typing)\n    try:\n        from scrapy.spidermiddlewares.referer import ReferrerPolicy\n    except ImportError:\n        ReferrerPolicy = object  # fallback to object to avoid error\n\n    if isinstance(policy, type):\n        # Check if subclass of ReferrerPolicy for validation\n        if issubclass(policy, ReferrerPolicy):\n            return policy\n        else:\n            if not warning_only:\n                warnings.warn(f\"Provided policy class {policy} is not a ReferrerPolicy subclass\",\n                              RuntimeWarning)\n            return None\n    else:\n        # Possibly an instance\n        if isinstance(policy, ReferrerPolicy):\n            return policy.__class__\n        else:\n            if not warning_only:\n                warnings.warn(f\"Provided policy {policy} is not a valid referrer policy\",\n                              RuntimeWarning)\n            return None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 437, in <module>\n  File \"<string>\", line 436, in test_4\nAssertionError\n", "passed": false}
{"task_id": 71, "prediction_id": 4, "generation": "import warnings\nfrom typing import Optional, Type\n\nfrom scrapy.utils.python import to_unicode\n\nfrom scrapy.spidermiddlewares.referer import (\n    _policy_classes,\n    ReferrerPolicy,\n)\n\n\ndef _load_policy_class(policy, warning_only=False) -> Optional[Type[ReferrerPolicy]]:\n    \"\"\"\n    Expect a string for the path to the policy class,\n    otherwise try to interpret the string as a standard value\n    from https://www.w3.org/TR/referrer-policy/#referrer-policies\n    \"\"\"\n    if not policy:\n        return _policy_classes.get('', None)\n\n    if isinstance(policy, str):\n        # Try standard policy names first\n        cls = _policy_classes.get(policy.lower())\n        if cls:\n            return cls\n\n        # Try to load a class by its full path (e.g. 'module.ClassName')\n        # The string might be a Python path, so we try to import it.\n        try:\n            # Use load_object if available; otherwise replicate its logic here.\n            # We replicate it here since we should not import from file content.\n            module_path, _, class_name = policy.rpartition('.')\n            if not module_path or not class_name:\n                raise ImportError(f\"Bad object path: {policy}\")\n            module = __import__(module_path, fromlist=[class_name])\n            cls = getattr(module, class_name)\n            if not issubclass(cls, ReferrerPolicy):\n                raise TypeError(f\"Loaded class {cls} is not a subclass of ReferrerPolicy\")\n            return cls\n        except (ImportError, AttributeError, TypeError) as ex:\n            msg = (\n                f\"Referrer policy: cannot load policy class '{policy}': {ex}\"\n            )\n            if warning_only:\n                warnings.warn(msg, RuntimeWarning)\n            else:\n                raise RuntimeError(msg) from ex\n\n    else:\n        msg = f\"Referrer policy: invalid type {type(policy)}, expected str\"\n        if warning_only:\n            warnings.warn(msg, RuntimeWarning)\n        else:\n            raise TypeError(msg)\n    return None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 425, in <module>\n  File \"<string>\", line 424, in test_4\nAssertionError\n", "passed": false}
