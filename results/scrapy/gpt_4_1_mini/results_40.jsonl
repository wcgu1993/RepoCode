{"task_id": 40, "prediction_id": 0, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the input string into parts using any non-alphanumeric character as delimiter\n    parts = CAMELCASE_INVALID_CHARS.split(string)\n    # Filter out empty parts that may result from splitting\n    parts = [part for part in parts if part]\n\n    # Capitalize the first letter of each part and join them together\n    camelcase_string = ''.join(part.capitalize() for part in parts)\n\n    return camelcase_string", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 92, in <module>\n  File \"<string>\", line 91, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 1, "generation": "import re\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split input string by any non-alphanumeric character to get words\n    parts = re.split(r'[^a-zA-Z0-9]+', string)\n    # Capitalize each part and join together, ignoring empty parts\n    return ''.join(part.capitalize() for part in parts if part)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 85, in <module>\n  File \"<string>\", line 84, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 2, "generation": "import re\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Remove all characters except letters and digits, but we want to split by non-alphanumeric \n    # chars first to separate words, then capitalize, then join.\n    # Non-alphanumeric chars are used as word boundaries.\n    # We can split by any non-alphanumeric character.\n    parts = re.split(r'[^a-zA-Z0-9]+', string)\n    # Filter out empty strings from split\n    parts = [part for part in parts if part]\n    # Capitalize each part\n    camelcase = ''.join(part.capitalize() for part in parts)\n    return camelcase", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 91, in <module>\n  File \"<string>\", line 90, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 3, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the string by any non-alphanumeric characters\n    words = CAMELCASE_INVALID_CHARS.split(string)\n    # Filter out empty strings that can result from splitting\n    words = [w for w in words if w]\n\n    # Capitalize the first letter of each word, lower the rest\n    camelcase_words = [w[0].upper() + w[1:].lower() if w else '' for w in words]\n\n    # Join all the words to form the final CamelCase string\n    return ''.join(camelcase_words)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 93, in <module>\n  File \"<string>\", line 92, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 4, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the input string into parts by invalid characters\n    parts = CAMELCASE_INVALID_CHARS.split(string)\n    # Capitalize each part and join them together\n    camelcased = ''.join(part.capitalize() for part in parts if part)\n    return camelcased", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 88, in <module>\n  File \"<string>\", line 87, in test_4\nAssertionError\n", "passed": false}
