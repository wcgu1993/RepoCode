{"task_id": 74, "prediction_id": 0, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Mapping of common HTTP status codes to reason phrases\n    # Using standard HTTP statuses from twisted.web.http as a base\n    # If status is bytes, decode it first\n    if isinstance(status, bytes):\n        try:\n            status_str = status.decode('ascii')\n        except UnicodeDecodeError:\n            # fallback: treat as unknown status\n            return f\"{status!r} Unknown Status\"\n        status = status_str\n\n    # Normalize status to int if possible, else leave as str\n    try:\n        status_int = int(status)\n    except (ValueError, TypeError):\n        # status is not a number, treat as string status text without code\n        return str(status)\n\n    # twisted.web.http.RESPONSES is a dict mapping int status codes to reason phrases\n    # Import here as required\n    from twisted.web import http\n\n    reason = http.RESPONSES.get(status_int)\n    if reason:\n        return f\"{status_int} {reason}\"\n    else:\n        # Unknown status code, just return the code as string\n        return str(status_int)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 144, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 1, "generation": "from http.client import responses\nfrom typing import Union\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert status to int if possible:\n    # if input is bytes, decode to str first\n    if isinstance(status, bytes):\n        try:\n            status = status.decode('ascii')\n        except UnicodeDecodeError:\n            # fallback: cannot decode, return str(status)\n            return str(status)\n    # if still str, try converting to int\n    if isinstance(status, str):\n        try:\n            status_int = int(float(status))\n        except (ValueError, TypeError):\n            # cannot convert to int, return original string\n            return status\n    elif isinstance(status, (float, int)):\n        # convert float to int, int unchanged\n        status_int = int(status)\n    else:\n        # unknown type, convert to str and return\n        return str(status)\n\n    # get descriptive message from http.client.responses dict\n    reason = responses.get(status_int, '')\n\n    if reason:\n        return f\"{status_int} {reason}\"\n    else:\n        # no known reason phrase, return only code as str\n        return str(status_int)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 153, in test_4\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 2, "generation": "from typing import Union\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Mapping of HTTP status codes to standard messages (common codes)\n    _status_messages = {\n        # Informational.\n        100: \"Continue\",\n        101: \"Switching Protocols\",\n        102: \"Processing\",\n        103: \"Early Hints\",\n\n        # Successful.\n        200: \"OK\",\n        201: \"Created\",\n        202: \"Accepted\",\n        203: \"Non-Authoritative Information\",\n        204: \"No Content\",\n        205: \"Reset Content\",\n        206: \"Partial Content\",\n        207: \"Multi-Status\",\n        208: \"Already Reported\",\n        226: \"IM Used\",\n\n        # Redirection.\n        300: \"Multiple Choices\",\n        301: \"Moved Permanently\",\n        302: \"Found\",\n        303: \"See Other\",\n        304: \"Not Modified\",\n        305: \"Use Proxy\",\n        306: \"(Unused)\",\n        307: \"Temporary Redirect\",\n        308: \"Permanent Redirect\",\n\n        # Client errors.\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        402: \"Payment Required\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        405: \"Method Not Allowed\",\n        406: \"Not Acceptable\",\n        407: \"Proxy Authentication Required\",\n        408: \"Request Timeout\",\n        409: \"Conflict\",\n        410: \"Gone\",\n        411: \"Length Required\",\n        412: \"Precondition Failed\",\n        413: \"Payload Too Large\",\n        414: \"URI Too Long\",\n        415: \"Unsupported Media Type\",\n        416: \"Range Not Satisfiable\",\n        417: \"Expectation Failed\",\n        418: \"I'm a Teapot\",\n        421: \"Misdirected Request\",\n        422: \"Unprocessable Entity\",\n        423: \"Locked\",\n        424: \"Failed Dependency\",\n        425: \"Too Early\",\n        426: \"Upgrade Required\",\n        428: \"Precondition Required\",\n        429: \"Too Many Requests\",\n        431: \"Request Header Fields Too Large\",\n        451: \"Unavailable For Legal Reasons\",\n\n        # Server errors.\n        500: \"Internal Server Error\",\n        501: \"Not Implemented\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        504: \"Gateway Timeout\",\n        505: \"HTTP Version Not Supported\",\n        506: \"Variant Also Negotiates\",\n        507: \"Insufficient Storage\",\n        508: \"Loop Detected\",\n        510: \"Not Extended\",\n        511: \"Network Authentication Required\",\n    }\n\n    # Handle input types to safely extract integer status code\n    code = None\n    if isinstance(status, bytes):\n        try:\n            status_str = status.decode('ascii', errors='ignore').strip()\n            code = int(float(status_str))\n        except Exception:\n            pass\n    elif isinstance(status, (float, int)):\n        try:\n            code = int(status)\n        except Exception:\n            pass\n    elif isinstance(status, str):\n        try:\n            code = int(float(status.strip()))\n        except Exception:\n            pass\n\n    # If code is invalid or None, fallback to string representation\n    if code is None or code < 100 or code > 999:\n        # Unknown or invalid code: return str(status) unmodified\n        return str(status)\n\n    message = _status_messages.get(code)\n    if message:\n        return f\"{code} {message}\"\n    else:\n        # If no standard message, just return the code as string\n        return str(code)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 230, in <module>\n  File \"<string>\", line 229, in test_4\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 3, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Mapping of common HTTP status codes to standard messages\n    _status_messages = {\n        100: \"Continue\",\n        101: \"Switching Protocols\",\n        102: \"Processing\",\n        103: \"Early Hints\",\n        200: \"OK\",\n        201: \"Created\",\n        202: \"Accepted\",\n        203: \"Non-Authoritative Information\",\n        204: \"No Content\",\n        205: \"Reset Content\",\n        206: \"Partial Content\",\n        207: \"Multi-Status\",\n        208: \"Already Reported\",\n        226: \"IM Used\",\n        300: \"Multiple Choices\",\n        301: \"Moved Permanently\",\n        302: \"Found\",\n        303: \"See Other\",\n        304: \"Not Modified\",\n        305: \"Use Proxy\",\n        307: \"Temporary Redirect\",\n        308: \"Permanent Redirect\",\n        400: \"Bad Request\",\n        401: \"Unauthorized\",\n        402: \"Payment Required\",\n        403: \"Forbidden\",\n        404: \"Not Found\",\n        405: \"Method Not Allowed\",\n        406: \"Not Acceptable\",\n        407: \"Proxy Authentication Required\",\n        408: \"Request Timeout\",\n        409: \"Conflict\",\n        410: \"Gone\",\n        411: \"Length Required\",\n        412: \"Precondition Failed\",\n        413: \"Payload Too Large\",\n        414: \"URI Too Long\",\n        415: \"Unsupported Media Type\",\n        416: \"Range Not Satisfiable\",\n        417: \"Expectation Failed\",\n        418: \"I'm a Teapot\",\n        421: \"Misdirected Request\",\n        422: \"Unprocessable Entity\",\n        423: \"Locked\",\n        424: \"Failed Dependency\",\n        425: \"Too Early\",\n        426: \"Upgrade Required\",\n        428: \"Precondition Required\",\n        429: \"Too Many Requests\",\n        431: \"Request Header Fields Too Large\",\n        451: \"Unavailable For Legal Reasons\",\n        500: \"Internal Server Error\",\n        501: \"Not Implemented\",\n        502: \"Bad Gateway\",\n        503: \"Service Unavailable\",\n        504: \"Gateway Timeout\",\n        505: \"HTTP Version Not Supported\",\n        506: \"Variant Also Negotiates\",\n        507: \"Insufficient Storage\",\n        508: \"Loop Detected\",\n        510: \"Not Extended\",\n        511: \"Network Authentication Required\",\n    }\n\n    # Normalize status to int:\n    if isinstance(status, bytes):\n        try:\n            status_int = int(status.decode('utf-8'))\n        except (ValueError, UnicodeDecodeError):\n            return f\"{status} Unknown Status\"\n    elif isinstance(status, (float, int)):\n        status_int = int(status)\n    elif isinstance(status, str):\n        try:\n            status_int = int(status)\n        except ValueError:\n            return f\"{status} Unknown Status\"\n    else:\n        return f\"{status} Unknown Status\"\n\n    # Get status text from mapping, fallback to generic message\n    status_text = _status_messages.get(status_int, \"Unknown Status\")\n\n    return f\"{status_int} {status_text}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 395, in <module>\n  File \"<string>\", line 394, in test_2\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 4, "generation": "from http.client import responses\nfrom typing import Union\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert bytes input to str\n    if isinstance(status, bytes):\n        try:\n            status_str = status.decode('ascii')\n        except UnicodeDecodeError:\n            # Fallback: convert bytes to int if possible or leave empty string\n            try:\n                status_int = int(status)\n                status_str = str(status_int)\n            except Exception:\n                status_str = ''\n    else:\n        status_str = str(status)\n\n    # Attempt to convert to int status code\n    try:\n        # Also handle float by converting to int (e.g. 200.0 -> 200)\n        status_code = int(float(status_str))\n    except (ValueError, TypeError):\n        # If conversion fails, just return the provided input as string\n        return status_str\n\n    # Get the standard status message from http.client.responses dict\n    message = responses.get(status_code, '')\n\n    if message:\n        return f\"{status_code} {message}\"\n    else:\n        # If no known status message, just return the code as string\n        return str(status_code)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 153, in test_4\nAssertionError\n", "passed": false}
