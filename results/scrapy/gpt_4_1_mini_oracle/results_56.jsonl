{"task_id": 56, "prediction_id": 0, "generation": "import inspect\nimport sys\n\ndef global_object_name(obj):\n    \"\"\"\n    Return full name of a global object.\n\n    >>> from scrapy import Request\n    >>> global_object_name(Request)\n    'scrapy.http.request.Request'\n    \"\"\"\n    if not (inspect.isfunction(obj) or inspect.isclass(obj) or inspect.ismodule(obj)):\n        # for other types (e.g., builtin functions or objects), try to get the __module__ and __qualname__\n        mod = getattr(obj, '__module__', None)\n        qualname = getattr(obj, '__qualname__', None)\n        if mod and qualname:\n            return f\"{mod}.{qualname}\"\n        # fallback to repr\n        return repr(obj)\n\n    mod = getattr(obj, '__module__', None)\n    qualname = getattr(obj, '__qualname__', None) or getattr(obj, '__name__', None)\n    if mod is None or qualname is None:\n        # fallback: try name\n        return getattr(obj, '__name__', repr(obj))\n\n    # For standard library or builtins, the module might be 'builtins', we can still return full name\n    return f\"{mod}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 407, in <module>\n  File \"<string>\", line 406, in test_5\nAssertionError\n", "passed": false}
{"task_id": 56, "prediction_id": 1, "generation": "import inspect\nimport sys\n\ndef global_object_name(obj):\n    \"\"\"\n    Return full name of a global object.\n\n    >>> from scrapy import Request\n    >>> global_object_name(Request)\n    'scrapy.http.request.Request'\n    \"\"\"\n    # If the object has __module__ and __qualname__, we can use these to get full name\n    module = getattr(obj, '__module__', None)\n    qualname = getattr(obj, '__qualname__', None)\n\n    if module is None or qualname is None:\n        # fallback for objects that do not have these attributes\n        # try to use type(obj) if obj is instance, but we want the global object name so\n        # if obj is instance, get its class\n        cls = obj if inspect.isclass(obj) else type(obj)\n        module = getattr(cls, '__module__', None)\n        qualname = getattr(cls, '__qualname__', None)\n        if module is None or qualname is None:\n            raise ValueError(f\"Cannot find global name of object {obj}\")\n\n    # The module name can sometimes be \"__main__\" or other special module; \n    # but since we want global object full name, just return module + qualname.\n\n    return f\"{module}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 470, in <module>\n  File \"<string>\", line 469, in test_7\nAssertionError\n", "passed": false}
{"task_id": 56, "prediction_id": 2, "generation": "def global_object_name(obj):\n    \"\"\"\n    Return full name of a global object.\n\n    >>> from scrapy import Request\n    >>> global_object_name(Request)\n    'scrapy.http.request.Request'\n    \"\"\"\n    # The full name of an object typically consists of its module name and its qualname.\n    # We want the fully qualified name including module path, so:\n    # 1. Get obj.__module__\n    # 2. Get obj.__qualname__ (to handle nested classes/functions if any)\n    # 3. Join them with a dot\n\n    module = getattr(obj, '__module__', None)\n    qualname = getattr(obj, '__qualname__', None)\n\n    if module is None or qualname is None:\n        raise ValueError(f\"Object {obj} is not a global object with __module__ and __qualname__\")\n\n    return f\"{module}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 400, in <module>\n  File \"<string>\", line 399, in test_5\n  File \"<string>\", line 356, in global_object_name\nValueError: Object <function global_object_name at 0xffff8c5d8f70> is not a global object with __module__ and __qualname__\n", "passed": false}
{"task_id": 56, "prediction_id": 3, "generation": "import inspect\n\ndef global_object_name(obj):\n    \"\"\"\n    Return full name of a global object.\n\n    >>> from scrapy import Request\n    >>> global_object_name(Request)\n    'scrapy.http.request.Request'\n    \"\"\"\n    # Try to get the module name\n    module = getattr(obj, \"__module__\", None)\n    # Try to get the qualified name (works for classes, functions, methods)\n    qualname = getattr(obj, \"__qualname__\", None)\n\n    if module is None:\n        # Fallback: try to get from the object's __class__ if obj is instance\n        module = getattr(obj.__class__, \"__module__\", None)\n\n    if qualname is None:\n        # Fallback: use __name__ attribute if available\n        qualname = getattr(obj, \"__name__\", None)\n\n    if module is None or qualname is None:\n        # If all fail, fallback to str representation\n        return repr(obj)\n\n    # Return the full dotted path for the global object\n    return f\"{module}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 470, in <module>\n  File \"<string>\", line 469, in test_7\nAssertionError\n", "passed": false}
{"task_id": 56, "prediction_id": 4, "generation": "import inspect\n\ndef global_object_name(obj):\n    \"\"\"\n    Return full name of a global object.\n\n    >>> from scrapy import Request\n    >>> global_object_name(Request)\n    'scrapy.http.request.Request'\n    \"\"\"\n    # Get the module name\n    module = getattr(obj, '__module__', None)\n    if module is None:\n        return None\n    # Get the qualified name (e.g. including any nested class names)\n    qualname = getattr(obj, '__qualname__', None)\n    if qualname is None:\n        # fallback to type name or str\n        qualname = obj.__name__ if hasattr(obj, '__name__') else str(obj)\n    return f\"{module}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 399, in <module>\n  File \"<string>\", line 398, in test_5\nAttributeError: 'NoneType' object has no attribute 'split'\n", "passed": false}
