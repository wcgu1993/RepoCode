{"task_id": 42, "prediction_id": 0, "generation": "def is_listlike(x):\n    \"\"\"\n    >>> is_listlike(\"foo\")\n    False\n    >>> is_listlike(5)\n    False\n    >>> is_listlike(b\"foo\")\n    False\n    >>> is_listlike([b\"foo\"])\n    True\n    >>> is_listlike((b\"foo\",))\n    True\n    >>> is_listlike({})\n    True\n    >>> is_listlike(set())\n    True\n    >>> is_listlike((x for x in range(3)))\n    True\n    >>> is_listlike(range(5))\n    True\n    \"\"\"\n    # Strings and bytes are not considered list-like\n    if isinstance(x, (str, bytes)):\n        return False\n    try:\n        # Check if x is iterable by trying to get an iterator\n        iter(x)\n        return True\n    except TypeError:\n        return False", "message": "passed", "passed": true}
{"task_id": 42, "prediction_id": 1, "generation": "def is_listlike(x):\n    \"\"\"\n    >>> is_listlike(\"foo\")\n    False\n    >>> is_listlike(5)\n    False\n    >>> is_listlike(b\"foo\")\n    False\n    >>> is_listlike([b\"foo\"])\n    True\n    >>> is_listlike((b\"foo\",))\n    True\n    >>> is_listlike({})\n    True\n    >>> is_listlike(set())\n    True\n    >>> is_listlike((x for x in range(3)))\n    True\n    >>> is_listlike(range(5))\n    True\n    \"\"\"\n    # Strings and bytes are not considered list-like here\n    if isinstance(x, (str, bytes)):\n        return False\n    # Types that have __iter__ are list-like (including dicts, sets, tuples, lists, generators, ranges)\n    return hasattr(x, '__iter__')", "message": "passed", "passed": true}
{"task_id": 42, "prediction_id": 2, "generation": "def is_listlike(x):\n    \"\"\"\n    >>> is_listlike(\"foo\")\n    False\n    >>> is_listlike(5)\n    False\n    >>> is_listlike(b\"foo\")\n    False\n    >>> is_listlike([b\"foo\"])\n    True\n    >>> is_listlike((b\"foo\",))\n    True\n    >>> is_listlike({})\n    True\n    >>> is_listlike(set())\n    True\n    >>> is_listlike((x for x in range(3)))\n    True\n    >>> is_listlike(range(5))\n    True\n    \"\"\"\n    # We consider as \"listlike\" any iterable except str, bytes, and bytearray.\n    # So any object that supports the iterator protocol (has __iter__ or __getitem__)\n    # but is not a str, bytes, or bytearray will be considered listlike.\n    # This matches the examples:\n    # - \"foo\" (str) -> False\n    # - b\"foo\" (bytes) -> False\n    # - 5 (int) -> False\n    # - [b\"foo\"] (list) -> True\n    # - (b\"foo\",) (tuple) -> True\n    # - {} (dict) -> True\n    # - set() (set) -> True\n    # - generator -> True\n    # - range -> True\n\n    if isinstance(x, (str, bytes, bytearray)):\n        return False\n    try:\n        iter(x)\n        return True\n    except TypeError:\n        return False", "message": "passed", "passed": true}
{"task_id": 42, "prediction_id": 3, "generation": "def is_listlike(x):\n    \"\"\"\n    >>> is_listlike(\"foo\")\n    False\n    >>> is_listlike(5)\n    False\n    >>> is_listlike(b\"foo\")\n    False\n    >>> is_listlike([b\"foo\"])\n    True\n    >>> is_listlike((b\"foo\",))\n    True\n    >>> is_listlike({})\n    True\n    >>> is_listlike(set())\n    True\n    >>> is_listlike((x for x in range(3)))\n    True\n    >>> is_listlike(range(5))\n    True\n    \"\"\"\n    # We want to check if x is iterable (has __iter__ or __getitem__)\n    # but NOT str, bytes, or bytearray types, because those are considered atomic\n    # Also allow list, tuple, dict, set, generators, and anything iterable.\n\n    # Avoid treating strings and bytes-like objects as listlike containers\n    if isinstance(x, (str, bytes, bytearray)):\n        return False\n\n    # Check for iterability:\n    try:\n        iter(x)\n    except TypeError:\n        return False\n    else:\n        return True", "message": "passed", "passed": true}
{"task_id": 42, "prediction_id": 4, "generation": "def is_listlike(x):\n    \"\"\"\n    >>> is_listlike(\"foo\")\n    False\n    >>> is_listlike(5)\n    False\n    >>> is_listlike(b\"foo\")\n    False\n    >>> is_listlike([b\"foo\"])\n    True\n    >>> is_listlike((b\"foo\",))\n    True\n    >>> is_listlike({})\n    True\n    >>> is_listlike(set())\n    True\n    >>> is_listlike((x for x in range(3)))\n    True\n    >>> is_listlike(range(5))\n    True\n    \"\"\"\n    # We consider something list-like if it is iterable but not a string or bytes.\n    # We exclude string, bytes, and bytearray because they are iterable but typically not considered listlike here.\n    # We check for __iter__ or __getitem__ to recognize iterable objects.\n    if isinstance(x, (str, bytes, bytearray)):\n        return False\n    try:\n        iter(x)\n    except TypeError:\n        return False\n    return True", "message": "passed", "passed": true}
