{"task_id": 74, "prediction_id": 0, "generation": "from typing import Union\nfrom scrapy.utils.python import to_unicode\nfrom twisted.web import http\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert the status to int code if possible\n    # If status is bytes or str, decode and convert to int if numeric\n    if isinstance(status, bytes):\n        status_str = to_unicode(status)\n    elif isinstance(status, str):\n        status_str = status\n    else:\n        status_str = str(status)\n\n    # Attempt to parse an integer status code from status_str\n    try:\n        code = int(float(status_str))  # handle float input as well, e.g., \"200.0\"\n    except (ValueError, TypeError):\n        # If cannot convert to int, just return original string\n        return status_str\n\n    # Get the descriptive phrase for the status code, fallback to empty string if unknown\n    reason = http.RESPONSES.get(code, '')\n\n    # Return combined representation: \"<code> <reason>\"\n    if reason:\n        return f\"{code} {reason}\"\n    else:\n        return str(code)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 145, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 1, "generation": "from typing import Union\nfrom scrapy.utils.python import to_unicode\nfrom twisted.web import http\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert bytes input to str (unicode)\n    status_str = to_unicode(status, encoding='utf-8').strip()\n\n    # Try to parse status code to int\n    try:\n        # For float input as string, convert to float first then int\n        if '.' in status_str:\n            code_int = int(float(status_str))\n        else:\n            code_int = int(status_str)\n    except (ValueError, TypeError):\n        # If parsing fails, fallback to returning the status as is (string)\n        return status_str\n\n    # Get the status message from twisted.web.http.responses dictionary\n    message = http.responses.get(code_int)\n    if message is None:\n        # If unknown status code, just return code as string\n        return str(code_int)\n\n    # Return combined status code and message\n    return f\"{code_int} {message}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 143, in test_0\n  File \"<string>\", line 74, in response_status_message\n  File \"/input/test-apps/scrapy/scrapy/utils/python.py\", line 93, in to_unicode\n    raise TypeError('to_unicode must receive a bytes or str '\nTypeError: to_unicode must receive a bytes or str object, got int\n", "passed": false}
{"task_id": 74, "prediction_id": 2, "generation": "from typing import Union\nfrom scrapy.utils.python import to_unicode\nfrom twisted.web import http\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert status to a string first (decode if bytes)\n    status_str = to_unicode(status) if isinstance(status, bytes) else str(status)\n    # Strip whitespace and convert to int if possible\n    status_str = status_str.strip()\n\n    try:\n        status_code = int(float(status_str))\n    except (ValueError, TypeError):\n        # If conversion fails, just return the original status as string\n        return status_str\n\n    # Get the standard HTTP status message from twisted.web.http.responses\n    message = http.responses.get(status_code, '')\n\n    if message:\n        return f\"{status_code} {message}\"\n    else:\n        # If no message found, just return code as string\n        return str(status_code)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 140, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 3, "generation": "from typing import Union\nfrom scrapy.utils.python import to_unicode\nfrom twisted.web import http\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert status to int code\n    if isinstance(status, bytes):\n        status_str = to_unicode(status).strip()\n    else:\n        status_str = str(status).strip()\n\n    try:\n        code = int(float(status_str))\n    except (ValueError, TypeError):\n        # If conversion fails, return the original status as a string\n        return status_str\n\n    # Get message from http.RESPONSES or fallback \"Unknown Status\"\n    message = http.RESPONSES.get(code, \"Unknown Status\")\n\n    return f\"{code} {message}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 137, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 4, "generation": "from typing import Union\nfrom twisted.web import http\nfrom scrapy.utils.python import to_unicode\n\n\ndef response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    # Convert status to string (unicode) for consistent processing\n    status_str = to_unicode(status)\n\n    # Try to convert to int status code\n    try:\n        # Allow float status, convert to int\n        status_code = int(float(status_str))\n    except (ValueError, TypeError):\n        # If cannot convert, treat the whole status string as message only\n        # Return it as-is\n        return status_str\n\n    # Get standard HTTP reason phrase from twisted.web.http.responses\n    # responses is a dict: {int: str}\n    reason = http.responses.get(status_code)\n\n    if reason:\n        # Return status code plus reason\n        return f\"{status_code} {reason}\"\n    else:\n        # If no known reason phrase, return status code only as string\n        return str(status_code)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 143, in test_0\n  File \"<string>\", line 74, in response_status_message\n  File \"/input/test-apps/scrapy/scrapy/utils/python.py\", line 93, in to_unicode\n    raise TypeError('to_unicode must receive a bytes or str '\nTypeError: to_unicode must receive a bytes or str object, got int\n", "passed": false}
