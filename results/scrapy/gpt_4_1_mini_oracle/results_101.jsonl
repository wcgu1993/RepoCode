{"task_id": 101, "prediction_id": 0, "generation": "import re\nfrom urllib.parse import urlparse\nfrom scrapy.utils.url import _is_filesystem_path, add_http_if_no_scheme\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    if not url:\n        return url\n    if _is_filesystem_path(url):\n        # For filesystem paths, add file:// if missing\n        parsed = urlparse(url)\n        if not parsed.scheme:\n            # For Windows paths starting with drive letter, ensure triple slash after file:\n            # file:///C:/path or file:///path for posix\n            # But keep it compatible with URL form, so prepend file:// + absolute path\n            return \"file://\" + url\n        return url\n    else:\n        # For other URLs, use add_http_if_no_scheme to add http if missing\n        return add_http_if_no_scheme(url)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 471, in <module>\n  File \"<string>\", line 470, in test_100\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 1, "generation": "import re\nfrom urllib.parse import urlparse\nfrom scrapy.utils.url import _is_filesystem_path\n\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if URL already has a scheme\n    if re.match(r\"^\\w+://\", url, flags=re.I):\n        return url\n\n    # If it's a filesystem path, add file:// scheme\n    if _is_filesystem_path(url):\n        return \"file://\" + url\n\n    # Otherwise, assume http:// scheme\n    return \"http://\" + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 540, in <module>\n  File \"<string>\", line 539, in test_7\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 2, "generation": "import re\nfrom scrapy.utils.url import add_http_if_no_scheme, _is_filesystem_path\n\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    if re.match(r'^\\w+://', url, flags=re.I):\n        # URL already has a scheme, return as is\n        return url\n    if _is_filesystem_path(url):\n        return \"file://\" + url\n    return add_http_if_no_scheme(url)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 535, in <module>\n  File \"<string>\", line 534, in test_7\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 3, "generation": "import re\nfrom urllib.parse import urlparse\nfrom scrapy.utils.url import _is_filesystem_path, add_http_if_no_scheme\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # If the URL already has a scheme, return as is\n    parsed = urlparse(url)\n    if parsed.scheme:\n        return url\n    \n    # If it looks like a filesystem path, add file://\n    if _is_filesystem_path(url):\n        # For Windows paths, replace backslashes with forward slashes\n        if re.match(r'^[a-zA-Z]:\\\\', url) or url.startswith('\\\\\\\\'):\n            # normalize Windows path slashes for URL\n            path = url.replace('\\\\', '/')\n        else:\n            path = url\n        # file:// scheme requires absolute paths to start with a '/'\n        if not path.startswith('/'):\n            path = '/' + path\n        return f'file://{path}'\n    \n    # Otherwise, add http:// as default scheme\n    return add_http_if_no_scheme(url)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 248, in <module>\n  File \"<string>\", line 247, in test_13\nAssertionError\n", "passed": false}
{"task_id": 101, "prediction_id": 4, "generation": "import re\nfrom urllib.parse import urlparse\nfrom scrapy.utils.url import _is_filesystem_path\n\ndef guess_scheme(url):\n    \"\"\"Add an URL scheme if missing: file:// for filepath-like input or\n    http:// otherwise.\"\"\"\n    # Check if url already has a scheme\n    if re.match(r\"^\\w+://\", url, flags=re.I):\n        return url\n\n    # If it's a filesystem path, add file:// scheme\n    if _is_filesystem_path(url):\n        return \"file://\" + url\n\n    # Otherwise default to http://\n    parts = urlparse(url)\n    scheme = \"http:\" if parts.netloc else \"http://\"\n    return scheme + url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 541, in <module>\n  File \"<string>\", line 540, in test_7\nAssertionError\n", "passed": false}
