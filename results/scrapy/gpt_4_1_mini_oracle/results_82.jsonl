{"task_id": 82, "prediction_id": 0, "generation": "from twisted.internet import defer\n\ndef process_chain(callbacks, input, *a, **kw):\n    \"\"\"Return a Deferred built by chaining the given callbacks\"\"\"\n    d = defer.Deferred()\n    # Start the chain with a succeed Deferred with the initial input\n    result = defer.succeed(input)\n\n    for cb in callbacks:\n        # Each callback is expected to take the result from the previous Deferred\n        # Wrap the callback to include additional args and kwargs if provided\n        def _cb(res, cb=cb):\n            return cb(res, *a, **kw)\n        result = result.addCallback(_cb)\n    \n    # When the chain finishes, bridge result's callbacks to d\n    def on_result(res):\n        d.callback(res)\n    def on_failure(f):\n        d.errback(f)\n    \n    result.addCallbacks(on_result, on_failure)\n    \n    return d", "message": "passed", "passed": true}
{"task_id": 82, "prediction_id": 1, "generation": "from twisted.internet import defer\n\n\ndef process_chain(callbacks, input, *a, **kw):\n    \"\"\"Return a Deferred built by chaining the given callbacks\"\"\"\n    d = defer.succeed(input)\n    for func in callbacks:\n        d = d.addCallback(func, *a, **kw)\n    return d", "message": "passed", "passed": true}
{"task_id": 82, "prediction_id": 2, "generation": "from twisted.internet import defer\n\ndef process_chain(callbacks, input, *a, **kw):\n    \"\"\"Return a Deferred built by chaining the given callbacks\"\"\"\n    d = defer.Deferred()\n    d.callback(input)\n\n    for cb in callbacks:\n        d.addCallback(lambda result, cb=cb: cb(result, *a, **kw))\n\n    return d", "message": "passed", "passed": true}
{"task_id": 82, "prediction_id": 3, "generation": "from twisted.internet import defer\n\ndef process_chain(callbacks, input, *a, **kw):\n    \"\"\"Return a Deferred built by chaining the given callbacks\"\"\"\n    d = defer.Deferred()\n    def run_chain(index, result):\n        if index == len(callbacks):\n            d.callback(result)\n            return\n        try:\n            ret = callbacks[index](result, *a, **kw)\n        except Exception as e:\n            d.errback(failure.Failure(e))\n            return\n\n        if isinstance(ret, defer.Deferred):\n            ret.addCallbacks(\n                lambda v: run_chain(index + 1, v),\n                lambda f: d.errback(f)\n            )\n        else:\n            run_chain(index + 1, ret)\n\n    run_chain(0, input)\n    return d", "message": "passed", "passed": true}
{"task_id": 82, "prediction_id": 4, "generation": "from twisted.internet import defer\n\ndef process_chain(callbacks, input, *a, **kw):\n    \"\"\"Return a Deferred built by chaining the given callbacks\"\"\"\n    d = defer.succeed(input)\n    for cb in callbacks:\n        d.addCallback(lambda result, cb=cb: cb(result, *a, **kw))\n    return d", "message": "passed", "passed": true}
