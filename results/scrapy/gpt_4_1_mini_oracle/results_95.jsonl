{"task_id": 95, "prediction_id": 0, "generation": "import sys\nfrom twisted.python.failure import Failure\n\ndef failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n    if not isinstance(failure, Failure):\n        raise TypeError(\"Input must be a twisted.python.failure.Failure instance\")\n    # twisted Failure instances have a method 'exc_info' that returns (type, value, traceback)\n    return failure.exc_info()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 252, in <module>\n  File \"<string>\", line 251, in test_0\n  File \"<string>\", line 49, in failure_to_exc_info\nAttributeError: 'Failure' object has no attribute 'exc_info'\n", "passed": false}
{"task_id": 95, "prediction_id": 1, "generation": "def failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n    if failure is None:\n        return None\n    exc = failure.value\n    tb = failure.getTracebackObject()\n    return (type(exc), exc, tb)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 274, in <module>\n  File \"<string>\", line 273, in test_18\n  File \"<string>\", line 45, in failure_to_exc_info\nAttributeError: 'AssertionError' object has no attribute 'value'\n", "passed": false}
{"task_id": 95, "prediction_id": 2, "generation": "def failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n    if failure is None:\n        return None\n    # Failure.exc_info() returns exc_type, exc_value, exc_traceback tuple\n    try:\n        exc_info = failure.exc_info()\n    except Exception:\n        # fallback: build exc_info from failure.value and failure.tb if available\n        exc_type = type(failure.value) if failure and failure.value else None\n        exc_value = failure.value if failure else None\n        exc_traceback = failure.getTracebackObject() if failure else None\n        if exc_type is None or exc_value is None or exc_traceback is None:\n            return None\n        exc_info = (exc_type, exc_value, exc_traceback)\n    # exc_info must be a tuple of length 3 or None\n    if exc_info and len(exc_info) == 3:\n        return exc_info\n    return None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 262, in <module>\n  File \"<string>\", line 261, in test_0\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": 95, "prediction_id": 3, "generation": "import sys\nfrom twisted.python.failure import Failure\n\ndef failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n    if not isinstance(failure, Failure):\n        raise TypeError(f\"Expected a twisted.python.failure.Failure instance, got {type(failure)}\")\n    exc = failure.value\n    # Extract exc_info from failure if present\n    exc_info = getattr(failure, 'exc_info', None)\n    if exc_info:\n        return exc_info\n    # Otherwise, manually build exc_info tuple\n    return (type(exc), exc, exc.__traceback__)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 265, in <module>\n  File \"<string>\", line 264, in test_8\n  File \"<string>\", line 47, in failure_to_exc_info\nTypeError: Expected a twisted.python.failure.Failure instance, got <class 'NoneType'>\n", "passed": false}
{"task_id": 95, "prediction_id": 4, "generation": "def failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n    if failure is None:\n        return None\n    if hasattr(failure, \"exc_info\"):\n        # failure.exc_info() returns (type, value, traceback)\n        return failure.exc_info()\n    elif hasattr(failure, \"type\") and hasattr(failure, \"value\") and hasattr(failure, \"tb\"):\n        # Some Failure instances can have these attributes separately\n        return (failure.type, failure.value, failure.tb)\n    else:\n        # fallback: wrap Failure into a tuple: (exception type, value, traceback)\n        return (type(failure.value), failure.value, failure.getTracebackObject()) if hasattr(failure, \"getTracebackObject\") else None", "message": "passed", "passed": true}
