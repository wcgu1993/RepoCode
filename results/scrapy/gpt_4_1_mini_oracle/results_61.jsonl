{"task_id": 61, "prediction_id": 0, "generation": "def parse_cachecontrol(header):\n    \"\"\"Parse Cache-Control header\n\n    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\n    >>> parse_cachecontrol(b'public, max-age=3600') == {b'public': None,\n    ...                                                 b'max-age': b'3600'}\n    True\n    >>> parse_cachecontrol(b'') == {}\n    True\n\n    \"\"\"\n    directives = {}\n    if not header:\n        return directives\n    parts = header.split(b',')\n    for part in parts:\n        directive = part.strip()\n        if not directive:\n            continue\n        if b'=' in directive:\n            key, val = directive.split(b'=', 1)\n            directives[key.strip().lower()] = val.strip()\n        else:\n            directives[directive.lower()] = None\n    return directives", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 596, in <module>\n  File \"<string>\", line 595, in test_10\nAssertionError\n", "passed": false}
{"task_id": 61, "prediction_id": 1, "generation": "def parse_cachecontrol(header):\n    \"\"\"Parse Cache-Control header\n\n    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\n    >>> parse_cachecontrol(b'public, max-age=3600') == {b'public': None,\n    ...                                                 b'max-age': b'3600'}\n    True\n    >>> parse_cachecontrol(b'') == {}\n    True\n\n    \"\"\"\n    if not header:\n        return {}\n\n    directives = {}\n    # Decode header to string for easier processing, then work with bytes keys and values\n    # But since the example uses bytes, we'll parse directly as bytes without decoding.\n\n    # Split by commas\n    parts = header.split(b',')\n\n    for part in parts:\n        part = part.strip()\n        if not part:\n            continue\n        # Split by '=' only once\n        if b'=' in part:\n            key, value = part.split(b'=', 1)\n            key = key.strip().lower()\n            value = value.strip()\n            # Remove optional surrounding quotes from value (RFC says quoted-string allowed)\n            if (value.startswith(b'\"') and value.endswith(b'\"') and len(value) >= 2):\n                value = value[1:-1]\n            directives[key] = value\n        else:\n            # Directive without value\n            directives[part.lower()] = None\n\n    return directives", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 610, in <module>\n  File \"<string>\", line 609, in test_10\nAssertionError\n", "passed": false}
{"task_id": 61, "prediction_id": 2, "generation": "def parse_cachecontrol(header):\n    \"\"\"Parse Cache-Control header\n\n    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\n    >>> parse_cachecontrol(b'public, max-age=3600') == {b'public': None,\n    ...                                                 b'max-age': b'3600'}\n    True\n    >>> parse_cachecontrol(b'') == {}\n    True\n\n    \"\"\"\n    if not header:\n        return {}\n\n    cc = {}\n    # the header may have multiple directives separated by commas\n    # each directive may have optional =value part\n    # values and directives may be surrounded by optional spaces\n    # e.g. b\"public, max-age=3600, no-store, foo=\\\"bar baz\\\"\"\n    parts = [part.strip() for part in header.split(b',') if part.strip()]\n    for part in parts:\n        if b'=' in part:\n            key, val = part.split(b'=', 1)\n            cc[key.lower()] = val.strip(b'\"')\n        else:\n            cc[part.lower()] = None\n    return cc", "message": "passed", "passed": true}
{"task_id": 61, "prediction_id": 3, "generation": "def parse_cachecontrol(header):\n    \"\"\"Parse Cache-Control header\n\n    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\n    >>> parse_cachecontrol(b'public, max-age=3600') == {b'public': None,\n    ...                                                 b'max-age': b'3600'}\n    True\n    >>> parse_cachecontrol(b'') == {}\n    True\n\n    \"\"\"\n    directives = {}\n    if not header:\n        return directives\n\n    # Split by comma, strip whitespace around\n    parts = header.split(b',')\n    for part in parts:\n        part = part.strip()\n        if not part:\n            continue\n        if b'=' in part:\n            # Split only at the first '=' (e.g. max-age=3600)\n            key, val = part.split(b'=', 1)\n            directives[key.lower()] = val\n        else:\n            directives[part.lower()] = None\n\n    return directives", "message": "passed", "passed": true}
{"task_id": 61, "prediction_id": 4, "generation": "def parse_cachecontrol(header):\n    \"\"\"Parse Cache-Control header\n\n    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\n    >>> parse_cachecontrol(b'public, max-age=3600') == {b'public': None,\n    ...                                                 b'max-age': b'3600'}\n    True\n    >>> parse_cachecontrol(b'') == {}\n    True\n\n    \"\"\"\n    cache_directives = {}\n    if not header:\n        return cache_directives\n\n    # The header is bytes; split by commas\n    parts = header.split(b',')\n    for part in parts:\n        part = part.strip()\n        if not part:\n            continue\n        if b'=' in part:\n            key, value = part.split(b'=', 1)\n            key = key.strip().lower()\n            value = value.strip()\n            cache_directives[key] = value\n        else:\n            cache_directives[part.lower()] = None\n\n    return cache_directives", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 601, in <module>\n  File \"<string>\", line 600, in test_10\nAssertionError\n", "passed": false}
