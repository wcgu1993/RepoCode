{"task_id": 106, "prediction_id": 0, "generation": "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    if not rel:\n        return False\n    # 'rel' attribute can be a string with multiple space-separated values\n    rels = rel.lower().split()\n    return 'nofollow' in rels", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 300, in <module>\n  File \"<string>\", line 299, in test_3\nAssertionError\n", "passed": false}
{"task_id": 106, "prediction_id": 1, "generation": "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    if rel is None:\n        return False\n    # rel attribute can be a space-separated string of link types\n    # Normalize to lowercase and split by whitespace for matching\n    rel_values = rel.lower().split()\n    return \"nofollow\" in rel_values", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 301, in <module>\n  File \"<string>\", line 300, in test_3\nAssertionError\n", "passed": false}
{"task_id": 106, "prediction_id": 2, "generation": "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    if not rel:\n        return False\n    # rel attribute can contain multiple values separated by spaces.\n    # Check if any of these values equals 'nofollow' (case-insensitive).\n    values = rel.lower().split()\n    return 'nofollow' in values", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 301, in <module>\n  File \"<string>\", line 300, in test_3\nAssertionError\n", "passed": false}
{"task_id": 106, "prediction_id": 3, "generation": "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    if not rel:\n        return False\n    # Convert rel to iterable in case it is a single string or iterable of strings\n    from w3lib.html import replace_entities\n    \n    # According to HTML spec, rel attribute is a space-separated list of tokens\n    # We can lowercase and split the string on whitespace and check for 'nofollow'\n    if isinstance(rel, str):\n        tokens = rel.lower().split()\n    else:\n        # If rel is iterable (list, tuple), flatten to strings and check presence\n        tokens = []\n        for r in rel:\n            if r:\n                tokens.extend(str(r).lower().split())\n    return 'nofollow' in tokens", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 311, in <module>\n  File \"<string>\", line 310, in test_3\nAssertionError\n", "passed": false}
{"task_id": 106, "prediction_id": 4, "generation": "def rel_has_nofollow(rel):\n    \"\"\"Return True if link rel attribute has nofollow type\"\"\"\n    # rel can be None, string, or iterable of strings\n    if rel is None:\n        return False\n    if isinstance(rel, str):\n        rels = rel.lower().split()\n    else:\n        # treat as iterable of strings, convert each to lowercase\n        rels = []\n        for r in rel:\n            if not isinstance(r, str):\n                # if any item is not a string, skip or convert to string? safer to convert\n                r = str(r)\n            rels.extend(r.lower().split())\n    return 'nofollow' in rels", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 309, in <module>\n  File \"<string>\", line 308, in test_3\nAssertionError\n", "passed": false}
