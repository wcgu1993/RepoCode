{"task_id": 40, "prediction_id": 0, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Remove invalid chars by replacing them with spaces\n    cleaned = CAMELCASE_INVALID_CHARS.sub(' ', string)\n    # Split by spaces to get words\n    words = cleaned.split()\n    # Capitalize each word and join\n    return ''.join(word.capitalize() for word in words)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 89, in <module>\n  File \"<string>\", line 88, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 1, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the input string on invalid characters (non-alphanumeric)\n    parts = CAMELCASE_INVALID_CHARS.split(string)\n    # Capitalize each part and join them without separator\n    camelcased = ''.join(part.capitalize() for part in parts if part)\n    return camelcased", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 88, in <module>\n  File \"<string>\", line 87, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 2, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the string on any character that is not alphanumeric\n    parts = CAMELCASE_INVALID_CHARS.split(string)\n    # Capitalize each non-empty part and join them\n    return ''.join(part.capitalize() for part in parts if part)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 87, in <module>\n  File \"<string>\", line 86, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 3, "generation": "import re\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Remove invalid characters by splitting on them.\n    # CAMELCASE_INVALID_CHARS regex is r'[^a-zA-Z\\d]'\n    parts = re.split(r'[^a-zA-Z\\d]+', string)\n    # Capitalize each part and join\n    return ''.join(part.capitalize() for part in parts if part)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 86, in <module>\n  File \"<string>\", line 85, in test_4\nAssertionError\n", "passed": false}
{"task_id": 40, "prediction_id": 4, "generation": "import re\n\nCAMELCASE_INVALID_CHARS = re.compile(r'[^a-zA-Z\\d]')\n\ndef string_camelcase(string):\n    \"\"\" Convert a word  to its CamelCase version and remove invalid chars\n\n    >>> string_camelcase('lost-pound')\n    'LostPound'\n\n    >>> string_camelcase('missing_images')\n    'MissingImages'\n\n    \"\"\"\n    # Split the string into parts by invalid characters\n    parts = CAMELCASE_INVALID_CHARS.split(string)\n    # Filter out any empty parts caused by consecutive invalid chars\n    parts = [part for part in parts if part]\n\n    # Capitalize each part and join them together\n    return ''.join(part.capitalize() for part in parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 90, in <module>\n  File \"<string>\", line 89, in test_4\nAssertionError\n", "passed": false}
