{"task_id": 93, "prediction_id": 0, "generation": "from time import time\n\ndef get_oldest(class_name):\n    \"\"\"Get the oldest object for a specific class name\"\"\"\n    # Iterate over tracked classes to find the class with the given name\n    for cls, wdict in live_refs.items():\n        if cls.__name__ == class_name:\n            if not wdict:\n                return None\n            # Find the object with the earliest creation time (oldest)\n            oldest_obj, oldest_time = min(wdict.items(), key=lambda x: x[1])\n            age_seconds = int(time() - oldest_time)\n            return oldest_obj, age_seconds\n    # If class_name not found or no live objects, return None\n    return None", "message": "passed", "passed": true}
{"task_id": 93, "prediction_id": 1, "generation": "from time import time\n\ndef get_oldest(class_name):\n    \"\"\"Get the oldest object for a specific class name\"\"\"\n    # Search for the class in live_refs by matching class.__name__ == class_name\n    for cls, wdict in live_refs.items():\n        if cls.__name__ == class_name:\n            if not wdict:\n                return None\n            # Find the object with the oldest recorded time (smallest timestamp)\n            oldest_obj, oldest_time = min(wdict.items(), key=lambda item: item[1])\n            return oldest_obj\n    return None", "message": "passed", "passed": true}
{"task_id": 93, "prediction_id": 2, "generation": "from time import time\n\ndef get_oldest(class_name):\n    \"\"\"Get the oldest object for a specific class name\"\"\"\n    now = time()\n    # Search for the class in live_refs by matching class name\n    for cls, wdict in live_refs.items():\n        if cls.__name__ == class_name:\n            if not wdict:\n                return None\n            # Find object with the minimum recorded time (oldest)\n            oldest_obj, oldest_time = min(wdict.items(), key=lambda item: item[1])\n            return oldest_obj\n    # If no class matches class_name return None\n    return None", "message": "passed", "passed": true}
{"task_id": 93, "prediction_id": 3, "generation": "from time import time\n\ndef get_oldest(class_name):\n    \"\"\"Get the oldest object for a specific class name\"\"\"\n    now = time()\n    # Find the class matching the class_name in live_refs\n    for cls in live_refs:\n        if cls.__name__ == class_name:\n            wdict = live_refs[cls]\n            if not wdict:\n                return None  # No live instances\n            # Find the object with the smallest creation time (oldest)\n            oldest_obj, oldest_time = min(wdict.items(), key=lambda item: item[1])\n            # Return a tuple with the oldest object and how many seconds ago it was created\n            return oldest_obj, int(now - oldest_time)\n    return None  # Class name not found", "message": "passed", "passed": true}
{"task_id": 93, "prediction_id": 4, "generation": "from time import time\n\ndef get_oldest(class_name):\n    \"\"\"Get the oldest object for a specific class name\"\"\"\n    # Search for the class in live_refs by comparing class names\n    for cls in live_refs:\n        if cls.__name__ == class_name:\n            wdict = live_refs[cls]\n            if not wdict:\n                return None\n            # Find the object with the smallest (oldest) timestamp\n            oldest_obj = min(wdict.items(), key=lambda item: item[1])[0]\n            return oldest_obj\n    return None", "message": "passed", "passed": true}
