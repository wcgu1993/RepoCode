{"task_id": 102, "prediction_id": 0, "generation": "import re\nfrom urllib.parse import urlparse, urlunparse, ParseResult\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse the URL (already unicode safe in context functions)\n    parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Strip credentials from netloc if requested\n    if strip_credentials or origin_only:\n        # userinfo is portion before '@' in netloc\n        # Remove userinfo by splitting at '@'\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Strip default port if requested\n    if strip_default_port:\n        # Remove default ports based on scheme\n        # Extract hostname and port\n        host_port_re = re.compile(r'^(.*?)(:(\\d+))?$')\n        match = host_port_re.match(netloc)\n        if match:\n            hostname = match.group(1)\n            port = match.group(3)\n            default_ports = {\n                'http': '80',\n                'https': '443',\n                'ftp': '21',\n            }\n            if port and scheme.lower() in default_ports and port == default_ports[scheme.lower()]:\n                netloc = hostname  # remove port\n\n    # If origin_only, reset path to \"/\" and drop query and fragment\n    if origin_only:\n        path = '/'\n        query = ''\n        fragment = ''\n    else:\n        # Otherwise optionally strip fragment\n        if strip_fragment:\n            fragment = ''\n\n    # Rebuild URL with the updated components\n    rebuilt = urlunparse(ParseResult(\n        scheme=scheme,\n        netloc=netloc,\n        path=path,\n        params=params,\n        query=query,\n        fragment=fragment\n    ))\n    return rebuilt", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 333, in <module>\n  File \"<string>\", line 331, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 1, "generation": "import re\nfrom urllib.parse import urlparse, urlunparse\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse the URL\n    parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Strip credentials user:pass@ from netloc if requested\n    if strip_credentials or origin_only:\n        # netloc can be \"user:pass@host:port\"\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Strip default port if requested\n    if strip_default_port:\n        # We remove port if it matches default ports for the scheme\n        # Default ports: http -> 80, https -> 443, ftp -> 21\n        default_ports = {\n            'http': '80',\n            'https': '443',\n            'ftp': '21',\n        }\n        if ':' in netloc:\n            host_part, port_part = netloc.rsplit(':', 1)\n            if scheme in default_ports and port_part == default_ports[scheme]:\n                netloc = host_part\n\n    # If origin_only: path = \"/\", query = \"\", fragment = \"\"\n    if origin_only:\n        path = '/'\n        query = ''\n        fragment = ''\n\n    else:\n        # If strip_fragment requested, remove fragment\n        if strip_fragment:\n            fragment = ''\n\n    # Reassemble URL\n    new_url = urlunparse((scheme, netloc, path, params, query, fragment))\n    return new_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 323, in <module>\n  File \"<string>\", line 321, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 2, "generation": "import re\nfrom urllib.parse import urlparse, urlunparse\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    # Parse the URL\n    parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Strip credentials if requested\n    if strip_credentials and '@' in netloc:\n        # Remove userinfo from netloc: user:pass@host -> host\n        # netloc can be: [userinfo@]host[:port]\n        # So split by '@' and take last part\n        netloc = netloc.split('@', 1)[1]\n\n    # Strip default ports if requested\n    if strip_default_port and ':' in netloc:\n        # Extract host and port\n        host_port_match = re.match(r'^\\[(.*?)\\](?::(\\d+))?$', netloc)  # for IPv6 literal with port\n        if host_port_match:\n            # IPv6 literal with port: [address]:port\n            host = f\"[{host_port_match.group(1)}]\"\n            port = host_port_match.group(2)\n        else:\n            if netloc.startswith('['):\n                # Malformed IPv6 - fallback to splitting on last ':'\n                if netloc.count(':') > 1 and netloc.endswith(']'):\n                    host = netloc\n                    port = None\n                else:\n                    host, sep, port = netloc.rpartition(':')\n                    if sep == '':\n                        host = netloc\n                        port = None\n            else:\n                # Normal host:port\n                host, sep, port = netloc.rpartition(':')\n\n        default_ports = {'http': '80', 'https': '443', 'ftp': '21'}\n\n        if port is not None and scheme in default_ports and port == default_ports[scheme]:\n            netloc = host\n        else:\n            if port is not None:\n                if host.startswith('[') and host.endswith(']'):\n                    netloc = f\"{host}:{port}\"\n                elif ':' in host and not host.startswith('['):\n                    # unsure, possibly an IPv6 literal without brackets (invalid but be conservative)\n                    netloc = f\"{host}:{port}\"\n                else:\n                    netloc = f\"{host}:{port}\"\n            else:\n                netloc = host\n\n    # If origin_only is requested:\n    if origin_only:\n        # strip credentials anyway (already done if strip_credentials)\n        # path replaced with \"/\"\n        path = '/'\n        query = ''\n        fragment = ''\n    else:\n        # If only strip_fragment is requested:\n        if strip_fragment:\n            fragment = ''\n\n    # Rebuild URL\n    # urlunparse takes: (scheme, netloc, path, params, query, fragment)\n    return urlunparse((scheme, netloc, path, params, query, fragment))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 350, in <module>\n  File \"<string>\", line 348, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 3, "generation": "from urllib.parse import urlparse, urlunparse\n\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    parts = urlparse(url)\n\n    scheme = parts.scheme\n    netloc = parts.netloc\n    path = parts.path\n    params = parts.params\n    query = parts.query\n    fragment = parts.fragment\n\n    # Strip credentials (user:password@) if needed\n    if strip_credentials or origin_only:\n        # netloc format: [user[:password]@]host[:port]\n        if \"@\" in netloc:\n            netloc = netloc.split(\"@\", 1)[1]\n\n    # Strip default port if needed\n    if strip_default_port:\n        # Remove default ports for http, https, ftp\n        default_ports = {\n            \"http\": \"80\",\n            \"https\": \"443\",\n            \"ftp\": \"21\",\n        }\n        if \":\" in netloc:\n            host, port = netloc.rsplit(\":\", 1)\n            if scheme in default_ports and port == default_ports[scheme]:\n                netloc = host\n\n    # If origin_only is True, replace path with \"/\", drop query and fragment\n    if origin_only:\n        path = \"/\"\n        query = \"\"\n        fragment = \"\"\n\n    # Strip fragment if requested (and origin_only is not True, since then fragment is already dropped)\n    if strip_fragment and not origin_only:\n        fragment = \"\"\n\n    stripped_url = urlunparse((scheme, netloc, path, params, query, fragment))\n    return stripped_url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 319, in <module>\n  File \"<string>\", line 317, in test_47\nAssertionError\n", "passed": false}
{"task_id": 102, "prediction_id": 4, "generation": "import re\nfrom urllib.parse import urlparse, urlunparse\n\ndef strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=False, strip_fragment=True):\n    \"\"\"Strip URL string from some of its components:\n\n    - ``strip_credentials`` removes \"user:password@\"\n    - ``strip_default_port`` removes \":80\" (resp. \":443\", \":21\")\n    from http:// (resp. https://, ftp://) URLs\n    - ``origin_only`` replaces path component with \"/\", also dropping\n    query and fragment components ; it also strips credentials\n    - ``strip_fragment`` drops any #fragment component\n    \"\"\"\n    parsed = urlparse(url)\n\n    scheme = parsed.scheme\n    netloc = parsed.netloc\n    path = parsed.path\n    params = parsed.params\n    query = parsed.query\n    fragment = parsed.fragment\n\n    # Strip credentials\n    if strip_credentials:\n        # credentials are before '@' in netloc, e.g. user:pass@host\n        if '@' in netloc:\n            netloc = netloc.split('@', 1)[1]\n\n    # Strip default ports\n    if strip_default_port and netloc:\n        # Separate host and port\n        host_port = netloc.rsplit(':', 1)\n        host = host_port[0]\n        port = None\n        if len(host_port) == 2:\n            port = host_port[1]\n\n        default_ports = {'http': '80', 'https': '443', 'ftp': '21'}\n        if port and scheme in default_ports and port == default_ports[scheme]:\n            netloc = host\n\n    # origin_only: path = \"/\", drop query and fragment, and also strip credentials (already done if strip_credentials)\n    if origin_only:\n        path = '/'\n        query = ''\n        fragment = ''\n        # Since origin_only also strips credentials regardless, ensure netloc has no credentials\n        if not strip_credentials:\n            # strip credentials forcibly if origin_only requested even if strip_credentials=False\n            if '@' in netloc:\n                netloc = netloc.split('@', 1)[1]\n\n    # strip fragments if requested and origin_only not already handled it\n    elif strip_fragment:\n        fragment = ''\n\n    # Recompose URL\n    # urlunparse takes: scheme, netloc, path, params, query, fragment\n    # If path is empty and origin_only not set, keep it as is to preserve  \n    url = urlunparse((scheme, netloc, path, params, query, fragment))\n    return url", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 327, in <module>\n  File \"<string>\", line 325, in test_47\nAssertionError\n", "passed": false}
