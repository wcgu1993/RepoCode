{"task_id": 348, "prediction_id": 0, "generation": "from collections.abc import Mapping, Collection\nfrom dataclasses import fields, is_dataclass\nfrom dataclasses_json.core import (_encode_overrides, _user_overrides_or_exts)\n\ndef _asdict(obj, encode_json=False):\n    \"\"\"\n    A re-implementation of `asdict` (based on the original in the `dataclasses`\n    source) to support arbitrary Collection and Mapping types.\n    \"\"\"\n    if not is_dataclass(obj):\n        raise TypeError(f\"_asdict() should be called on dataclass instances, got {type(obj)}\")\n\n    def _convert(obj_inner):\n        if is_dataclass(obj_inner):\n            overrides = _user_overrides_or_exts(type(obj_inner))\n            result = {}\n            for f in fields(obj_inner):\n                value = getattr(obj_inner, f.name)\n                result[f.name] = _convert(value)\n            return _encode_overrides(result, overrides, encode_json=encode_json)\n        elif isinstance(obj_inner, Mapping):\n            # Convert mappings preserving keys and converting values recursively\n            return type(obj_inner)((_convert(k), _convert(v)) for k, v in obj_inner.items())\n        elif isinstance(obj_inner, Collection) and not isinstance(obj_inner, (str, bytes)):\n            # Convert collections recursively preserving type\n            return type(obj_inner)(_convert(v) for v in obj_inner)\n        else:\n            return obj_inner\n\n    return _convert(obj)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 372, in <module>\n  File \"<string>\", line 371, in test_2\n  File \"<string>\", line 347, in _asdict\nTypeError: _asdict() should be called on dataclass instances, got <class 'list'>\n", "passed": false}
{"task_id": 348, "prediction_id": 1, "generation": "from collections.abc import Collection, Mapping\nfrom dataclasses import fields, is_dataclass\n\nfrom dataclasses_json.core import _encode_overrides, _user_overrides_or_exts\n\n\ndef _asdict(obj, encode_json=False):\n    \"\"\"\n    A re-implementation of `asdict` (based on the original in the `dataclasses`\n    source) to support arbitrary Collection and Mapping types.\n    \"\"\"\n    if not is_dataclass(obj):\n        raise TypeError(f\"_asdict() should be called on dataclass instances, \"\n                        f\"got {type(obj)}\")\n\n    def _convert(obj_inner):\n        if is_dataclass(obj_inner):\n            cls = type(obj_inner)\n            overrides = _user_overrides_or_exts(cls)\n            result = {}\n            for f in fields(obj_inner):\n                if not f.init:\n                    continue\n\n                value = getattr(obj_inner, f.name)\n                # Recursively convert the field's value\n                value = _convert(value)\n                result[f.name] = value\n\n            # Apply overrides: encoding, exclusions, letter casing and optionally encode JSON\n            return _encode_overrides(result, overrides, encode_json=encode_json)\n\n        elif isinstance(obj_inner, Mapping):\n            # recursively convert keys and values of mapping types\n            # keys are assumed to be str or immutable so just keep keys as is\n            return obj_inner.__class__(\n                (k, _convert(v)) for k, v in obj_inner.items()\n            )\n        elif isinstance(obj_inner, Collection) and not isinstance(obj_inner, (str, bytes)):\n            # convert each element in the collection\n            return obj_inner.__class__(_convert(v) for v in obj_inner)\n        else:\n            return obj_inner\n\n    return _convert(obj)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 387, in <module>\n  File \"<string>\", line 386, in test_2\n  File \"<string>\", line 349, in _asdict\nTypeError: _asdict() should be called on dataclass instances, got <class 'list'>\n", "passed": false}
{"task_id": 348, "prediction_id": 2, "generation": "import copy\nfrom collections.abc import Collection, Mapping\nfrom dataclasses import fields, is_dataclass\n\nfrom dataclasses_json.core import (_encode_overrides,\n                                  _user_overrides_or_exts)\n\n\ndef _asdict(obj, encode_json=False):\n    \"\"\"\n    A re-implementation of `asdict` (based on the original in the `dataclasses`\n    source) to support arbitrary Collection and Mapping types.\n    \"\"\"\n    if not is_dataclass(obj):\n        raise TypeError(\"`_asdict` should be called with dataclass instances\")\n\n    def _iterate(obj):\n        if not is_dataclass(obj):\n            # If obj is a Collection or Mapping (but not string/bytes),\n            # recursively handle items; else return as is.\n            if isinstance(obj, Mapping):\n                return type(obj)((k, _iterate(v)) for k, v in obj.items())\n            elif isinstance(obj, Collection) and not isinstance(obj, (str, bytes)):\n                return type(obj)(_iterate(v) for v in obj)\n            else:\n                return obj\n\n        overrides = _user_overrides_or_exts(type(obj))\n        result = {}\n        for f in fields(obj):\n            if not f.init:\n                # Skip fields that are not included in __init__\n                continue\n            value = getattr(obj, f.name)\n            # Recursively convert value to dict\n            value = _iterate(value)\n            result[f.name] = value\n\n        # Apply field overrides (exclude, letter_case, encoder)\n        result = _encode_overrides(result, overrides, encode_json=encode_json)\n        return result\n\n    return _iterate(obj)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 385, in <module>\n  File \"<string>\", line 384, in test_2\n  File \"<string>\", line 351, in _asdict\nTypeError: `_asdict` should be called with dataclass instances\n", "passed": false}
{"task_id": 348, "prediction_id": 3, "generation": "from collections.abc import Collection, Mapping\nfrom dataclasses import is_dataclass, fields\n\nfrom dataclasses_json.core import _user_overrides_or_exts, _encode_overrides\n\n\ndef _asdict(obj, encode_json=False):\n    \"\"\"\n    A re-implementation of `asdict` (based on the original in the `dataclasses`\n    source) to support arbitrary Collection and Mapping types.\n    \"\"\"\n    if not is_dataclass(obj):\n        raise TypeError(f\"_asdict() should be called on dataclass instances, got {type(obj)}\")\n\n    # If the object is a dataclass instance\n    cls = type(obj)\n    overrides = _user_overrides_or_exts(cls)\n\n    result = {}\n    for field in fields(obj):\n        if not field.init:\n            # Skip fields that are not intended for init (and thus not serialized)\n            continue\n        value = getattr(obj, field.name)\n\n        # Recursively handle nested dataclasses and collections\n        if is_dataclass(value):\n            # Nested dataclass, recurse\n            value = _asdict(value, encode_json=encode_json)\n        elif isinstance(value, Mapping):\n            # Mapping: convert keys and values appropriately\n            value = type(value)(\n                (k, _asdict(v, encode_json=encode_json) if is_dataclass(v) else v)\n                for k, v in value.items()\n            )\n        elif isinstance(value, Collection) and not isinstance(value, (str, bytes, bytearray)):\n            # Collection (but not string/bytes), convert items recursively if dataclass\n            value = type(value)(\n                _asdict(v, encode_json=encode_json) if is_dataclass(v) else v\n                for v in value\n            )\n\n        result[field.name] = value\n\n    # Apply overrides: encode, exclude, letter case transformation, and encode_json if requested\n    return _encode_overrides(result, overrides, encode_json=encode_json)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 388, in <module>\n  File \"<string>\", line 387, in test_2\n  File \"<string>\", line 349, in _asdict\nTypeError: _asdict() should be called on dataclass instances, got <class 'list'>\n", "passed": false}
{"task_id": 348, "prediction_id": 4, "generation": "import copy\nfrom collections.abc import Collection, Mapping\nfrom dataclasses import is_dataclass, fields\n\nfrom dataclasses_json.core import _encode_overrides, _user_overrides_or_exts\n\n\ndef _asdict(obj, encode_json=False):\n    \"\"\"\n    A re-implementation of `asdict` (based on the original in the `dataclasses`\n    source) to support arbitrary Collection and Mapping types.\n    \"\"\"\n    if not is_dataclass(obj):\n        raise TypeError(f\"_asdict() should be called on dataclass instances, got: {type(obj)}\")\n\n    def _call(obj_inner):\n        if is_dataclass(obj_inner):\n            overrides = _user_overrides_or_exts(type(obj_inner))\n            result = {}\n            for f in fields(obj_inner):\n                if not f.init:\n                    # Skip fields that are not part of the constructor/init\n                    continue\n                value = getattr(obj_inner, f.name)\n                # Recursively convert dataclass fields\n                result[f.name] = _call(value)\n            # Apply encoding overrides (exclusion, letter_case, custom encoding)\n            return _encode_overrides(result, overrides, encode_json=encode_json)\n        elif isinstance(obj_inner, tuple) and hasattr(obj_inner, '_fields'):\n            # Namedtuple - convert each element recursively and rebuild\n            return type(obj_inner)(*[_call(v) for v in obj_inner])\n        elif isinstance(obj_inner, Mapping):\n            # For Mappings, recursively convert values\n            return type(obj_inner)((_call(k), _call(v)) for k, v in obj_inner.items())\n        elif isinstance(obj_inner, Collection) and not isinstance(obj_inner, (str, bytes)):\n            # For Collections (lists, sets, etc.) except str/bytes, recursively convert elements\n            return type(obj_inner)(_call(v) for v in obj_inner)\n        else:\n            return obj_inner\n\n    return _call(obj)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 383, in <module>\n  File \"<string>\", line 382, in test_2\n  File \"<string>\", line 350, in _asdict\nTypeError: _asdict() should be called on dataclass instances, got: <class 'list'>\n", "passed": false}
