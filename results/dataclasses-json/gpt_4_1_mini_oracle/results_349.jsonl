{"task_id": 349, "prediction_id": 0, "generation": "from typing import Optional, TypeVar, Union\n\nfrom dataclasses_json.api import _process_class\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json import LetterCase\n\nA = TypeVar('A')\n\n\ndef dataclass_json(_cls: Optional[A] = None,\n                   *,\n                   letter_case: Optional[Union[str, LetterCase]] = None,\n                   undefined: Optional[Union[str, Undefined]] = None):\n    \"\"\"\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n    ...\n    \"\"\"\n    def wrap(cls: A) -> A:\n        return _process_class(cls, letter_case=letter_case, undefined=undefined)\n\n    if _cls is None:\n        return wrap\n    else:\n        return wrap(_cls)", "message": "passed", "passed": true}
{"task_id": 349, "prediction_id": 1, "generation": "from typing import Optional, Union\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json import LetterCase\nfrom dataclasses_json.api import _process_class\n\n\ndef dataclass_json(_cls=None, *, letter_case: Optional[LetterCase] = None,\n                   undefined: Optional[Union[str, Undefined]] = None):\n    \"\"\"\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n    ...\n    \"\"\"\n    def wrap(cls):\n        return _process_class(cls, letter_case=letter_case, undefined=undefined)\n\n    if _cls is None:\n        # decorator called with parameters\n        return wrap\n    else:\n        # decorator called without parameters\n        return wrap(_cls)", "message": "passed", "passed": true}
{"task_id": 349, "prediction_id": 2, "generation": "from typing import Optional, Union\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json.api import _process_class\nfrom dataclasses_json import LetterCase\n\n\ndef dataclass_json(_cls=None, *, letter_case: Optional[LetterCase] = None,\n                   undefined: Optional[Union[str, Undefined]] = None):\n    \"\"\"\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n    ...\n    \"\"\"\n    def wrap(cls):\n        return _process_class(cls, letter_case=letter_case, undefined=undefined)\n\n    if _cls is None:\n        # Decorator called with arguments.\n        return wrap\n    # Decorator called without arguments.\n    return wrap(_cls)", "message": "passed", "passed": true}
{"task_id": 349, "prediction_id": 3, "generation": "from typing import Optional, Union\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json.api import _process_class\nfrom dataclasses_json import LetterCase\n\n\ndef dataclass_json(_cls=None, *, letter_case: Optional[LetterCase] = None,\n                   undefined: Optional[Union[str, Undefined]] = None):\n    \"\"\"\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n    ...\n    \"\"\"\n    def wrap(cls):\n        return _process_class(cls, letter_case=letter_case, undefined=undefined)\n\n    if _cls is None:\n        # Called as @dataclass_json(), with optional params\n        return wrap\n    else:\n        # Called as @dataclass_json without params\n        return wrap(_cls)", "message": "passed", "passed": true}
{"task_id": 349, "prediction_id": 4, "generation": "from typing import Optional, Union\n\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json.api import _process_class\nfrom dataclasses_json import LetterCase\n\n\ndef dataclass_json(_cls=None, *, letter_case: Optional[LetterCase] = None,\n                   undefined: Optional[Union[str, Undefined]] = None):\n    \"\"\"\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n    ...\n    \"\"\"\n    def wrap(cls):\n        return _process_class(cls, letter_case, undefined)\n\n    if _cls is None:\n        # decorator called with parentheses\n        return wrap\n    else:\n        # decorator called without parentheses\n        return wrap(_cls)", "message": "passed", "passed": true}
