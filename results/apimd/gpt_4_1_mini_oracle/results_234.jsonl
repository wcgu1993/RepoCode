{"task_id": 234, "prediction_id": 0, "generation": "def doctest(doc: str) -> str:\n    \"\"\"Wrap doctest as markdown Python code.\"\"\"\n    if not doc:\n        return \"\"\n    lines = doc.splitlines()\n    code_lines = []\n    inside_doctest = False\n    for line in lines:\n        if line.lstrip().startswith(\">>>\"):\n            if not inside_doctest:\n                inside_doctest = True\n            code_lines.append(line)\n        elif inside_doctest and line.startswith(\"...\"):\n            code_lines.append(line)\n        else:\n            if inside_doctest:\n                # End of doctest block\n                break\n    if not code_lines:\n        return \"\"\n    # Join code lines and wrap as markdown python code block\n    code_block = \"\\n\".join(code_lines)\n    return f\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 152\n    return f\"\n           ^\nSyntaxError: unterminated string literal (detected at line 152)\n", "passed": false}
{"task_id": 234, "prediction_id": 1, "generation": "def doctest(doc: str) -> str:\n    \"\"\"Wrap doctest as markdown Python code.\"\"\"\n    if not doc:\n        return \"\"\n    lines = doc.splitlines()\n    in_doctest = False\n    doctest_lines = []\n    for line in lines:\n        # Detect the start of a doctest line (starts with >>> or ...)\n        if line.lstrip().startswith(\">>>\") or line.lstrip().startswith(\"...\"):\n            in_doctest = True\n            doctest_lines.append(line)\n        else:\n            if in_doctest:\n                # End collecting when a non-doctest line appears after collecting started\n                # But allow blank lines within doctest\n                if line.strip() == \"\":\n                    doctest_lines.append(line)\n                else:\n                    break\n    if not doctest_lines:\n        return \"\"\n    # Wrap the collected doctest lines in markdown code block for python\n    return \"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 153\n    return \"\n           ^\nSyntaxError: unterminated string literal (detected at line 153)\n", "passed": false}
{"task_id": 234, "prediction_id": 2, "generation": "def doctest(doc: str) -> str:\n    \"\"\"Wrap doctest as markdown Python code.\"\"\"\n    if not doc:\n        return \"\"\n    lines = doc.splitlines()\n    code_lines = []\n    capture = False\n    for line in lines:\n        stripped = line.lstrip()\n        if stripped.startswith(\">>>\") or stripped.startswith(\"...\"):\n            code_lines.append(line)\n            capture = True\n        else:\n            # Stop capturing when non-doctest lines occur after doctests\n            if capture:\n                break\n    if not code_lines:\n        return \"\"\n    # Join captured lines, preserving indentation, as a markdown python code block\n    code_block = \"\\n\".join(code_lines)\n    return f\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 150\n    return f\"\n           ^\nSyntaxError: unterminated string literal (detected at line 150)\n", "passed": false}
{"task_id": 234, "prediction_id": 3, "generation": "def doctest(doc: str) -> str:\n    \"\"\"Wrap doctest as markdown Python code.\"\"\"\n    # Wrap the given docstring content inside markdown code block with 'python' specifier\n    return f\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 133\n    return f\"\n           ^\nSyntaxError: unterminated string literal (detected at line 133)\n", "passed": false}
{"task_id": 234, "prediction_id": 4, "generation": "def doctest(doc: str) -> str:\n    \"\"\"Wrap doctest as markdown Python code.\"\"\"\n    # Wrap the docstring as a markdown fenced code block for Python,\n    # suitable for rendering doctest sections.\n    return f\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 134\n    return f\"\n           ^\nSyntaxError: unterminated string literal (detected at line 134)\n", "passed": false}
