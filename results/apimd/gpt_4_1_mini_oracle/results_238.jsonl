{"task_id": 238, "prediction_id": 0, "generation": "def _type_name(obj: object) -> str:\n    \"\"\"Get type name.\"\"\"\n    t = type(obj)\n    module = getattr(t, '__module__', None)\n    qualname = getattr(t, '__qualname__', None)\n\n    # If it's a built-in type, omit the module name\n    if module == 'builtins' or module is None:\n        return qualname or t.__name__\n    else:\n        # For other types, return full module + qualified name\n        if qualname:\n            return f\"{module}.{qualname}\"\n        else:\n            return f\"{module}.{t.__name__}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 914, in <module>\n  File \"<string>\", line 913, in test_145\nAssertionError\n", "passed": false}
{"task_id": 238, "prediction_id": 1, "generation": "def _type_name(obj: object) -> str:\n    \"\"\"Get type name.\"\"\"\n    t = type(obj)\n    if hasattr(t, '__module__') and hasattr(t, '__qualname__'):\n        mod = t.__module__\n        qualname = t.__qualname__\n        if mod == 'builtins':\n            return qualname\n        else:\n            return f\"{mod}.{qualname}\"\n    else:\n        # fallback to just type name\n        return t.__name__", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 912, in <module>\n  File \"<string>\", line 911, in test_145\nAssertionError\n", "passed": false}
{"task_id": 238, "prediction_id": 2, "generation": "def _type_name(obj: object) -> str:\n    \"\"\"Get type name.\"\"\"\n    t = type(obj)\n    # Get __module__ and __qualname__ attributes if possible\n    module = getattr(t, \"__module__\", None)\n    qualname = getattr(t, \"__qualname__\", None)\n\n    # If type has no qualname (very rare), fallback to __name__\n    if qualname is None:\n        qualname = getattr(t, \"__name__\", repr(t))\n\n    # If module is None or \"builtins\", return just the qualname\n    if not module or module == \"builtins\":\n        return qualname\n\n    return f\"{module}.{qualname}\"", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 915, in <module>\n  File \"<string>\", line 914, in test_145\nAssertionError\n", "passed": false}
{"task_id": 238, "prediction_id": 3, "generation": "def _type_name(obj: object) -> str:\n    \"\"\"Get type name.\"\"\"\n    t = type(obj)\n    # Try to get qualified name if possible\n    qname = getattr(t, \"__qualname__\", None)\n    if qname is not None:\n        return qname\n    # Fallback to normal name\n    name = getattr(t, \"__name__\", None)\n    if name is not None:\n        return name\n    # Fallback to str of type object\n    return str(t)", "message": "passed", "passed": true}
{"task_id": 238, "prediction_id": 4, "generation": "def _type_name(obj: object) -> str:\n    \"\"\"Get type name.\"\"\"\n    # Return the qualified name of the type of obj if possible, else the type name\n    typ = type(obj)\n    # Try to get the qualified name (e.g., including module and class if nested)\n    qualname = getattr(typ, '__qualname__', None)\n    if qualname is None:\n        # Fallback to just type's __name__\n        return typ.__name__\n    # Try to get the module name to prepend if it is not builtins\n    mod = getattr(typ, '__module__', None)\n    if mod and mod != 'builtins':\n        return f\"{mod}.{qualname}\"\n    return qualname", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 913, in <module>\n  File \"<string>\", line 912, in test_145\nAssertionError\n", "passed": false}
