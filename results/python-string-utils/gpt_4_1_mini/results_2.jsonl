{"task_id": 2, "prediction_id": 0, "generation": "from string_utils.validation import is_snake_case\nfrom string_utils.validation import is_full_string\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    # Validate input is a non-empty string\n    if not is_full_string(input_string):\n        return input_string\n\n    # Validate that input_string confirms to snake_case with given separator\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    # Split the input string by the separator\n    parts = input_string.split(separator)\n\n    # Convert parts to camel case segments\n    if upper_case_first:\n        # First letter of the first part uppercase\n        camel_parts = [part.capitalize() if part else '' for part in parts]\n    else:\n        # First letter of first part lowercase, others capitalized\n        # handle possible empty parts gracefully\n        camel_parts = []\n        for i, part in enumerate(parts):\n            if not part:\n                camel_parts.append('')\n            elif i == 0:\n                camel_parts.append(part[0].lower() + part[1:])\n            else:\n                camel_parts.append(part.capitalize())\n\n    # Join all parts without separator to produce camel case string\n    return ''.join(camel_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 785, in <module>\n  File \"<string>\", line 784, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 1, "generation": "from string_utils.validation import is_snake_case\nfrom string_utils.validation import is_full_string\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_full_string(input_string):\n        # not a valid non-empty string; return as is\n        return input_string\n\n    if not is_snake_case(input_string, separator):\n        # input_string is not valid snake case with the given separator, return as is\n        return input_string\n\n    parts = input_string.split(separator)\n    if len(parts) == 0:\n        return input_string\n\n    # Capitalize first letter of each part by default\n    camel_parts = [p.capitalize() for p in parts]\n\n    if not upper_case_first and len(camel_parts) > 0:\n        # Lowercase first character of first part if upper_case_first is False\n        camel_parts[0] = camel_parts[0][:1].lower() + camel_parts[0][1:] if camel_parts[0] else ''\n\n    return ''.join(camel_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 776, in <module>\n  File \"<string>\", line 775, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 2, "generation": "from string_utils.validation import is_snake_case\nfrom string_utils.manipulation import booleanize\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    parts = input_string.split(separator)\n\n    if not parts:\n        return input_string\n\n    # Convert first part depending on upper_case_first flag\n    if booleanize(str(upper_case_first)):\n        # capitalize first part's first letter\n        parts[0] = parts[0][:1].upper() + parts[0][1:].lower()\n    else:\n        # keep first part lowercase fully\n        parts[0] = parts[0].lower()\n\n    # Capitalize first letter of the remaining parts; lowercase the rest\n    for i in range(1, len(parts)):\n        if parts[i]:\n            parts[i] = parts[i][0].upper() + parts[i][1:].lower()\n\n    return ''.join(parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 778, in <module>\n  File \"<string>\", line 777, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 3, "generation": "from string_utils.validation import is_snake_case\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    parts = input_string.split(separator)\n    if not parts:\n        return input_string\n\n    if upper_case_first:\n        # Capitalize first letter of each part\n        return ''.join(word.capitalize() for word in parts)\n    else:\n        # Lowercase first part, capitalize others\n        first = parts[0].lower()\n        others = ''.join(word.capitalize() for word in parts[1:])\n        return first + others", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 775, in <module>\n  File \"<string>\", line 774, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 4, "generation": "from string_utils.validation import is_snake_case\nfrom string_utils.validation import is_full_string\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_full_string(input_string):\n        return input_string\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    parts = input_string.split(separator)\n\n    if len(parts) == 0:\n        return input_string\n\n    # Capitalize each part: first letter uppercase, rest lowercase\n    parts = [p.lower() for p in parts]\n\n    if upper_case_first:\n        parts = [p.capitalize() for p in parts]\n    else:\n        # If not upper_case_first, leave first part as is (lowercase),\n        # capitalize the rest parts\n        parts = [parts[0]] + [p.capitalize() for p in parts[1:]]\n\n    return ''.join(parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 778, in <module>\n  File \"<string>\", line 777, in test_37\nAssertionError\n", "passed": false}
