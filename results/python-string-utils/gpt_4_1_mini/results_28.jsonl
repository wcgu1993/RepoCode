{"task_id": 28, "prediction_id": 0, "generation": "from string_utils.validation import is_full_string\n\ndef is_pangram(input_string: any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    # Set of English lowercase alphabet letters\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n\n    # Normalize input to lowercase\n    input_lower = input_string.lower()\n\n    # Extract letters present in the input\n    letters_in_input = set(ch for ch in input_lower if 'a' <= ch <= 'z')\n\n    # Check if all alphabet letters are in the input letters set\n    return alphabet <= letters_in_input", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 830, in <module>\n  File \"<string>\", line 829, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 1, "generation": "from string_utils.validation import is_full_string\n\ndef is_pangram(input_string: any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    # A pangram contains every letter from a-z at least once. We normalize case to lowercase.\n    input_lower = input_string.lower()\n\n    # Use a set to collect all unique alphabetic characters in the input\n    letters_found = set(ch for ch in input_lower if 'a' <= ch <= 'z')\n\n    # Check if all 26 letters are present\n    return len(letters_found) == 26", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 827, in <module>\n  File \"<string>\", line 826, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 2, "generation": "from typing import Any\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not isinstance(input_string, str) or not input_string.strip():\n        return False\n\n    # Normalize input to lowercase\n    input_string = input_string.lower()\n\n    # Define the English alphabet set\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n\n    # Collect characters in input string that are alphabets\n    chars_in_string = set(c for c in input_string if 'a' <= c <= 'z')\n\n    # Check if input contains all letters from the alphabet\n    return alphabet <= chars_in_string", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 830, in <module>\n  File \"<string>\", line 829, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 3, "generation": "from typing import Any\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Define the English alphabet set\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    # Normalize input to lowercase\n    input_set = set(input_string.lower())\n\n    # Check if all letters in alphabet are present in input_set\n    return alphabet.issubset(input_set)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 826, in <module>\n  File \"<string>\", line 825, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 4, "generation": "from typing import Any\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Consider only ASCII letters a-z\n    # Convert the input string to lowercase and use a set to track the letters found\n    found_letters = set(char for char in input_string.lower() if 'a' <= char <= 'z')\n\n    # Check if all 26 letters are present\n    return len(found_letters) == 26", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 825, in <module>\n  File \"<string>\", line 824, in test_12\nAssertionError\n", "passed": false}
