{"task_id": 14, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_string(obj: Any) -> bool:\n    \"\"\"\n    Checks if an object is a string.\n\n    *Example:*\n\n    >>> is_string('foo') # returns true\n    >>> is_string(b'foo') # returns false\n\n    :param obj: Object to test.\n    :return: True if string, false otherwise.\n    \"\"\"\n    return isinstance(obj, str)\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        return False\n    \n    input_string = input_string.strip()\n    if not input_string:\n        return False\n    \n    # Regular expression pattern to match numbers:\n    # Optional sign (+ or -)\n    # One or more digits possibly with decimal point\n    # Optional exponent 'e' or 'E' followed by optional sign and digits\n    pattern = re.compile(r'^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$')\n    \n    return bool(pattern.match(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 751, in <module>\n  File \"<string>\", line 750, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Strip whitespace from ends\n    input_string = input_string.strip()\n    if input_string == '':\n        return False\n\n    # Regular expression pattern to match valid numbers:\n    # optional leading +/-\n    # either:\n    #   - digits optionally followed by a dot and digits (to allow decimal numbers)\n    #   - OR a dot followed by digits (to allow numbers like .5)\n    # optional exponent part [eE][+-]?digits\n    number_pattern = re.compile(\n        r\"\"\"\n        ^                       # start of string\n        [+-]?                   # optional sign\n        (                       # start of main number group\n          (?:\\d+(\\.\\d*)?)       # digits, optional decimal point and digits\n          |                     # or\n          (?:\\.\\d+)             # decimal point followed by digits (like .5)\n        )\n        ([eE][+-]?\\d+)?         # optional exponent part\n        $                       # end of string\n        \"\"\", re.VERBOSE\n    )\n\n    return bool(number_pattern.match(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 752, in <module>\n  File \"<string>\", line 751, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove leading and trailing spaces\n    s = input_string.strip()\n    if not s:\n        return False\n\n    # Regex to match numbers including:\n    # optional sign (+/-)\n    # digits with optional decimal point\n    # optional exponent part, e or E, with optional sign and digits\n    number_regex = re.compile(r'^([+-]?)(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$')\n\n    return bool(number_regex.match(s))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 739, in <module>\n  File \"<string>\", line 738, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Trim input_string for safety\n    input_string = input_string.strip()\n    if not input_string:\n        return False\n\n    # Regex to match a valid number with:\n    # optional sign +/-\n    # digits (integer part)\n    # optional decimal part with dot\n    # optional exponent part (e or E) with optional sign and digits\n    number_regex = re.compile(r\"\"\"\n        ^                           # start of string\n        [+-]?                       # optional sign\n        (?:                         # non-capturing group for number part\n            (?:\\d+\\.\\d*)            # digits dot optional digits (e.g. 1. or 1.0)\n            |                       # or\n            (?:\\.\\d+)               # dot digits (e.g. .5)\n            |                       # or\n            (?:\\d+)                 # digits only (integer)\n        )\n        (?:                         # optional exponent part\n            [eE][+-]?\\d+            # e or E followed by optional sign and digits\n        )?\n        $                           # end of string\n    \"\"\", re.VERBOSE)\n\n    return bool(number_regex.match(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 754, in <module>\n  File \"<string>\", line 753, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    input_string = input_string.strip()\n    if not input_string:\n        return False\n\n    # Regex to match a signed/unsigned float, integer, or scientific notation number.\n    # Explanation:\n    # ^\\s*                 : optional leading spaces (already stripped, but just in case)\n    # [+-]?                : optional sign\n    # (\n    #     (\\d+(\\.\\d*)?)    : digits, optional decimal part (e.g. 123, 123.456, 123.)\n    #   | (\\.\\d+)          : or just decimal fraction without leading digits (e.g. .456)\n    # )\n    # ([eE][+-]?\\d+)?      : optional exponent part\n    # $                    : end of string\n    number_regex = re.compile(r'^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][+-]?\\d+)?$')\n\n    return bool(number_regex.match(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 743, in <module>\n  File \"<string>\", line 742, in test_14\nAssertionError\n", "passed": false}
