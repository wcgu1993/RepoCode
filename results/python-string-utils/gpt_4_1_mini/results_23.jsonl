{"task_id": 23, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # UUID regex with dashes: 8-4-4-4-12 hex digits\n    UUID_RE = re.compile(\n        r'^[0-9a-fA-F]{8}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{12}$'\n    )\n\n    # Hex-only UUID: 32 hex digits, no dashes\n    UUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n    if allow_hex:\n        return bool(UUID_RE.match(input_string) or UUID_HEX_RE.match(input_string))\n\n    return bool(UUID_RE.match(input_string))", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # UUID regex (standard UUID with dashes)\n    UUID_RE = re.compile(\n        r'^[a-fA-F0-9]{8}-'\n        r'[a-fA-F0-9]{4}-'\n        r'[a-fA-F0-9]{4}-'\n        r'[a-fA-F0-9]{4}-'\n        r'[a-fA-F0-9]{12}$'\n    )\n\n    # Hex only UUID regex (32 hex digits, no dashes)\n    HEX_RE = re.compile(r'^[a-fA-F0-9]{32}$')\n\n    if UUID_RE.match(input_string):\n        return True\n\n    if allow_hex and HEX_RE.match(input_string):\n        return True\n\n    return False", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    # Define patterns for standard UUID and hex representation UUID\n    UUID_RE = re.compile(\n        r'^[0-9a-fA-F]{8}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{12}$'\n    )\n    UUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n    if not isinstance(input_string, str):\n        return False\n\n    if allow_hex:\n        return bool(UUID_RE.match(input_string) or UUID_HEX_RE.match(input_string))\n\n    return bool(UUID_RE.match(input_string))", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    # Validate input type\n    if not isinstance(input_string, str):\n        return False\n\n    # Pattern for UUID with dashes\n    uuid_pattern = re.compile(\n        r'^[0-9a-fA-F]{8}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{4}-'\n        r'[0-9a-fA-F]{12}$'\n    )\n\n    # Pattern for UUID hex (no dashes)\n    uuid_hex_pattern = re.compile(\n        r'^[0-9a-fA-F]{32}$'\n    )\n\n    if allow_hex:\n        return bool(uuid_pattern.match(input_string) or uuid_hex_pattern.match(input_string))\n    else:\n        return bool(uuid_pattern.match(input_string))", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\n# UUID regex pattern matching standard UUID format (with dashes)\nUUID_RE = re.compile(\n    r'^[0-9a-fA-F]{8}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{12}$'\n)\n\n# UUID hex pattern (32 hex digits without dashes)\nUUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n\ndef is_string(obj: Any) -> bool:\n    \"\"\"\n    Checks if an object is a string.\n\n    :param obj: Object to test.\n    :return: True if string, false otherwise.\n    \"\"\"\n    return isinstance(obj, str)\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if allow_hex:\n        return UUID_RE.match(input_string) is not None or UUID_HEX_RE.match(input_string) is not None\n\n    return UUID_RE.match(input_string) is not None", "message": "passed", "passed": true}
