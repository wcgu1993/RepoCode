{"task_id": 15, "prediction_id": 0, "generation": "from typing import Any\nfrom string_utils.validation import is_string, is_number, is_decimal\nfrom .errors import InvalidInputError\n\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # Must be a valid number\n    if not is_number(input_string):\n        return False\n\n    # If it is a decimal (has a dot), it is not an integer\n    if is_decimal(input_string):\n        return False\n\n    # If it contains 'e' or 'E' (scientific notation), ensure the exponent part is integer and base is integer\n    # However, is_decimal already excludes floats with dot, so '1e3' is allowed (integer 1000)\n    # To handle scientific notation, check if after parsing float -> int conversion works exactly\n    try:\n        # float conversion for scientific notation cases\n        value = float(input_string)\n        # Check if value is integer exactly\n        if value.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 162, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 15, "prediction_id": 1, "generation": "from typing import Any\nfrom string_utils.validation import is_string, is_number, is_decimal\nfrom .errors import InvalidInputError\n\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    # Validate input type\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # If not a number at all, return False immediately\n    if not is_number(input_string):\n        return False\n\n    # If the string is identified as a decimal (has '.'), it's not an integer\n    if is_decimal(input_string):\n        return False\n\n    # Otherwise, it is a number and not a decimal, so it must be an integer (including scientific notation)\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 162, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 15, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_string, is_number, is_decimal\nfrom string_utils.errors import InvalidInputError\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # Check if it's a number at all\n    if not is_number(input_string):\n        return False\n\n    # If it is decimal, it is not integer\n    if is_decimal(input_string):\n        return False\n\n    # Remaining cases: valid number and not decimal -> integer (including scientific notation representing int)\n    # Additional check for scientific notation that might represent a non-integer (like 1e0 is integer, but 1e-1 is decimal)\n    # We will parse the number and check if it's mathematically an integer.\n\n    try:\n        num = float(input_string)\n    except ValueError:\n        return False\n\n    # For floats that are integers (e.g., 1e3 == 1000.0), check if whole number\n    return num.is_integer()", "message": "passed", "passed": true}
{"task_id": 15, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_number, is_string, is_decimal\nfrom .errors import InvalidInputError\n\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # First check if it's a valid number\n    if not is_number(input_string):\n        return False\n\n    # If it represents a decimal, it's not an integer\n    if is_decimal(input_string):\n        return False\n\n    # Finally, confirm it matches integer pattern explicitly (optional strictness)\n    # Accept integers that may have scientific notation but no decimal point\n    int_pattern = re.compile(r'^[+-]?(?:0|[1-9]\\d*)([eE][+-]?\\d+)?$')\n    return bool(int_pattern.fullmatch(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 164, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 15, "prediction_id": 4, "generation": "from typing import Any\nfrom string_utils.validation import is_string, is_number, is_decimal\nfrom .errors import InvalidInputError\n\n\ndef is_integer(input_string: str) -> bool:\n    \"\"\"\n    Checks whether the given string represents an integer or not.\n\n    An integer may be signed or unsigned or use a \"scientific notation\".\n\n    *Examples:*\n\n    >>> is_integer('42') # returns true\n    >>> is_integer('42.0') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # First, check if it's a valid number at all\n    if not is_number(input_string):\n        return False\n\n    # If it represents a decimal number, then it's not an integer\n    if is_decimal(input_string):\n        return False\n\n    # Otherwise, it is an integer\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 162, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
