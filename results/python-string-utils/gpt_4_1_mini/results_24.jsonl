{"task_id": 24, "prediction_id": 0, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n        # Leading zeros are generally invalid in IPv4 decimal notation: disallow them except for '0' itself\n        if part != '0' and part.startswith('0'):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724, in <module>\n  File \"<string>\", line 723, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\n# Assuming we have the following regex for IPv4 (pattern adapted from usual IPv4 pattern):\n# Matches four groups of 1 to 3 digits separated by dots.\n# Each group must be between 0 and 255.\nIP_V4_RE = re.compile(\n    r\"\"\"^\n    (?:(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\\.){3}\n    (?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)\n    $\"\"\",\n    re.VERBOSE,\n)\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n    return IP_V4_RE.match(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 720, in <module>\n  File \"<string>\", line 719, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 2, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        # Prevents leading zeros like \"01\", \"001\" unless the part is \"0\"\n        if part != str(num):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 723, in <module>\n  File \"<string>\", line 722, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 3, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        # Leading zeros are allowed only if the number is zero itself,\n        # to avoid octal confusion, optionally we can disallow leading zeros in non-zero numbers.\n        # The spec does not explicitly forbid, so we allow \"0\", \"10\" but not \"00\", \"01\", etc.\n        if len(part) > 1 and part[0] == '0':\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 725, in <module>\n  File \"<string>\", line 724, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 4, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n        # prevent \"01\", \"001\" octal-like parts (should be allowed or not?)\n        # The standard: leading zeros are discouraged in IPv4 dotted decimal notation.\n        # To be strict, reject parts with leading zeros unless the part is exactly \"0\"\n        if part != '0' and part.startswith('0'):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 726, in <module>\n  File \"<string>\", line 725, in test_8\nAssertionError\n", "passed": false}
