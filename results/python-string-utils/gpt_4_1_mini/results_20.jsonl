{"task_id": 20, "prediction_id": 0, "generation": "from typing import Any\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Must be only letters and digits\n    if not input_string.isalnum():\n        return False\n\n    # Must contain at least one uppercase and one lowercase letter\n    has_upper = any(c.isupper() for c in input_string)\n    has_lower = any(c.islower() for c in input_string)\n\n    return has_upper and has_lower", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 876, in <module>\n  File \"<string>\", line 875, in test_59\nAssertionError\n", "passed": false}
{"task_id": 20, "prediction_id": 1, "generation": "from typing import Any\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    # Must not start with a number\n    if input_string[0].isdigit():\n        return False\n\n    # Must be composed only by letters and digits\n    if not all(c.isalnum() for c in input_string):\n        return False\n\n    # Must contain at least one uppercase and one lowercase letter\n    has_upper = any(c.isupper() for c in input_string)\n    has_lower = any(c.islower() for c in input_string)\n\n    return has_upper and has_lower", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 876, in <module>\n  File \"<string>\", line 875, in test_59\nAssertionError\n", "passed": false}
{"task_id": 20, "prediction_id": 2, "generation": "from typing import Any\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    # Check all characters: only letters and digits allowed\n    if not all(c.isalpha() or c.isdigit() for c in input_string):\n        return False\n\n    # Must contain at least one lowercase and one uppercase letter\n    has_upper = any(c.isupper() for c in input_string)\n    has_lower = any(c.islower() for c in input_string)\n\n    return has_upper and has_lower", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 875, in <module>\n  File \"<string>\", line 874, in test_59\nAssertionError\n", "passed": false}
{"task_id": 20, "prediction_id": 3, "generation": "from typing import Any\nimport re\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Must not start with a digit\n    if not input_string or input_string[0].isdigit():\n        return False\n\n    # Must contain only letters and digits\n    if not re.fullmatch(r'[a-zA-Z0-9]+', input_string):\n        return False\n\n    # Must contain at least one uppercase and one lowercase letter\n    if not (re.search(r'[a-z]', input_string) and re.search(r'[A-Z]', input_string)):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 874, in <module>\n  File \"<string>\", line 873, in test_59\nAssertionError\n", "passed": false}
{"task_id": 20, "prediction_id": 4, "generation": "from typing import Any\nimport re\n\ndef is_camel_case(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Must not start with a digit\n    if not input_string:\n        return False\n    if input_string[0].isdigit():\n        return False\n\n    # Must be composed only of letters and digits\n    if not re.fullmatch(r'[a-zA-Z0-9]+', input_string):\n        return False\n\n    # Must contain at least one lowercase and at least one uppercase letter\n    if not (re.search(r'[a-z]', input_string) and re.search(r'[A-Z]', input_string)):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 876, in <module>\n  File \"<string>\", line 875, in test_59\nAssertionError\n", "passed": false}
