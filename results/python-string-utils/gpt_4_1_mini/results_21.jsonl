{"task_id": 21, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_string\n\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if separator == '':\n        # Separator cannot be empty for splitting and presence check\n        return False\n\n    # Check it contains at least one separator\n    if separator not in input_string:\n        return False\n\n    # Check it does not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Allowed characters: letters (both cases), digits, and the separator (only as separator)\n    # So the input must match pattern composed only of these characters.\n    # We can use a regex pattern dynamically built depending on separator.\n\n    # Escape separator for regex\n    sep_re = re.escape(separator)\n\n    # Build regex: start with letter or uppercase/lowercase letter, digit allowed after first char.\n    # But requirement only says \"does not start with a number\", so first char can be letter or underscore?\n    # It's valid snake case only if composed only by letters/digits and separators.\n    # So first char must be letter or underscore? No explicit requirement that it must start with a letter, \n    # but must not start with a digit.\n\n    # Pattern: ^[A-Za-z]+([separator][A-Za-z0-9]+)*$ but capital letters are allowed anywhere.\n\n    # Actually, snake case allows uppercase letters? The doc says composed by lowercase/uppercase letters and digits,\n    # so uppercase letters are allowed anywhere.\n\n    # So we'll check the string matches the pattern:\n    #\n    # ^[A-Za-z][A-Za-z0-9]* (separator [A-Za-z0-9]+ )+$\n    #\n    # This ensures:\n    # - Starts with a letter (not digit)\n    # - Contains at least one separator (already checked)\n    # - Tokens separated by separator contain only letters/digits\n    #\n    # But the doc does not say start must be letter, only \"not start with number\". So first char can be underscore?\n    #\n    # It says: \"does not start with a number\"\n    # \"contains at least one underscore (or separator)\"\n    # \"composed only by letters and digits\"\n\n    # Are separators allowed at the beginning or end? Usually no.\n    # So test input \"foo_bar\" => valid\n    # test \"_foo_bar\" => composed of underscore at start: underscore is separator, so starts with separator - should be invalid? The doc is unclear.\n    #\n    # Let's consider leading/trailing separators as invalid.\n\n    # So entire string must match: no start or end with separator, tokens separated by separator, tokens only alnum\n\n    pattern = r'^[A-Za-z][A-Za-z0-9]*(' + sep_re + r'[A-Za-z0-9]+)+$'\n\n    return re.match(pattern, input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 743, in <module>\n  File \"<string>\", line 742, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_string, is_full_string\n\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string) or not is_full_string(input_string):\n        return False\n\n    # Check does not start with number\n    if input_string[0].isdigit():\n        return False\n\n    # Check separator presence\n    if separator not in input_string:\n        return False\n\n    # Only letters (upper/lower), digits and separator allowed\n    # Construct regex pattern for allowed chars\n    pattern = r'^[a-zA-Z0-9' + re.escape(separator) + r']+$'\n\n    if not re.match(pattern, input_string):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1335, in <module>\n  File \"<string>\", line 1334, in test_236\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_string, is_full_string\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not is_full_string(input_string):\n        return False\n\n    # Must contain the separator at least once\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Construct regex pattern to match allowed snake_case structure:\n    # Only letters (both cases), digits and the separator allowed in the string,\n    # and the separator should not be first or last or consecutive\n    # but since spec only states must contain separator and not start with digit, let's be lenient on trailing separator.\n    # Pattern: only letters/digits/separator allowed\n    # We'll allow multiple separators in a row since spec does not forbid that explicitly, but usually snake_case does not have consecutive separators.\n    # To be strict, check no consecutive separators.\n    allowed_chars_pattern = r'^[a-zA-Z0-9' + re.escape(separator) + r']+$'\n    if not re.match(allowed_chars_pattern, input_string):\n        return False\n\n    # Check no consecutive separators\n    if separator * 2 in input_string:\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 717, in <module>\n  File \"<string>\", line 716, in test_12\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Must contain at least one separator\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if not input_string:\n        return False\n    if input_string[0].isdigit():\n        return False\n\n    # Check entire string only contains letters, digits and the separator\n    allowed_chars_pattern = f'^[A-Za-z0-9{re.escape(separator)}]+$'\n    if not re.match(allowed_chars_pattern, input_string):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1332, in <module>\n  File \"<string>\", line 1331, in test_236\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if len(input_string) == 0:\n        return False\n\n    # Must contain at least one separator\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Compose regex to match snake case:\n    # - only letters (lower/upper), digits and separators\n    # - separator can appear multiple times but tokens between separators must not be empty\n    # Regex explanation:\n    # ^               : start\n    # [a-zA-Z0-9]+    : one or more letters/digits\n    # (sep [a-zA-Z0-9]+)* : zero or more groups of separator followed by one or more letters/digits\n    # $               : end\n    sep_escaped = re.escape(separator)\n    pattern = r'^[a-zA-Z0-9]+(' + sep_escaped + r'[a-zA-Z0-9]+)*$'\n\n    return re.match(pattern, input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 707, in <module>\n  File \"<string>\", line 706, in test_10\nAssertionError\n", "passed": false}
