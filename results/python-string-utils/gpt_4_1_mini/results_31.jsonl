{"task_id": 31, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    # A simple regex to detect any substring that looks like an HTML/XML tag,\n    # e.g. <tag>, <tag attr=\"value\">, </tag>, <tag/>\n    html_tag_pattern = re.compile(r'<([a-zA-Z]+)(\\s+[^<>]*)?>|</[a-zA-Z]+>|<[a-zA-Z]+/?>')\n    return bool(html_tag_pattern.search(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 686, in <module>\n  File \"<string>\", line 685, in test_0\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # A simple regex to detect any HTML/XML tag: <...> with optional attributes\n    # This matches any substring with <tag ...> or self closing tags\n    html_tag_pattern = re.compile(r'<[^>]+>')\n\n    return html_tag_pattern.search(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1295, in <module>\n  File \"<string>\", line 1294, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_full_string\n\n\n# Regex to match any HTML/XML tag (opening, closing, self-closing)\n# This pattern tries to match anything like <tag ...> or </tag> or <tag />\nHTML_TAG_TEST_RE = re.compile(r'<[^>]+>')\n\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    return HTML_TAG_TEST_RE.search(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1299, in <module>\n  File \"<string>\", line 1298, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    # Check if input_string is a non-empty string\n    if not isinstance(input_string, str) or not input_string.strip():\n        return False\n\n    # Basic regex to detect HTML/XML tags, i.e. anything like <tag> or </tag> or <tag ...>\n    # This matches tags with optional attributes and self-closing tags.\n    html_tag_re = re.compile(r'<[^>]+>')\n\n    return bool(html_tag_re.search(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1296, in <module>\n  File \"<string>\", line 1295, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Simple regex detecting presence of html/xml tags: <tag> or <tag attribute=\"...\">\n    # This matches any opening or closing tags, including self-closing.\n    tag_pattern = re.compile(r'<[^>]+>')\n    return tag_pattern.search(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1294, in <module>\n  File \"<string>\", line 1293, in test_172\nAssertionError\n", "passed": false}
