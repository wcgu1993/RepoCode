{"task_id": 1, "prediction_id": 0, "generation": "import re\nfrom string_utils.validation import is_camel_case, is_full_string\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before each uppercase letter that follows a lowercase letter or digit\n    # Also handle sequences of uppercase letters properly (e.g. \"HTTPServer\" -> \"http_server\")\n    # This regex inserts separators before uppercase letters preceded by:\n    #  - a lowercase char or digit; or\n    #  - a sequence of uppercase letters followed by a lowercase letter (to split acronyms)\n    \n    # Step 1: Add separator before uppercase letter preceded by lowercase or digit:\n    step1 = re.sub(r'([a-z0-9])([A-Z])', r'\\1' + separator + r'\\2', input_string)\n\n    # Step 2: Add separator before uppercase letter in a sequence like \"HTTPServer\" => \"HTTP_Server\"\n    # We detect uppercase followed by uppercase and then lowercase, and separate before last uppercase\n    step2 = re.sub(r'([A-Z]+)([A-Z][a-z])', r'\\1' + separator + r'\\2', step1)\n\n    # Convert the entire string to lowercase as snake_case requires lowercase\n    snake_case_str = step2.lower()\n\n    return snake_case_str", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1105, in <module>\n  File \"<string>\", line 1104, in test_16\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 1, "generation": "import re\nfrom string_utils.validation import is_camel_case, is_full_string\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_camel_case(input_string):\n        return input_string\n\n    # We'll insert separator before uppercase letters preceded by either lowercase letter or digit,\n    # and also convert the whole string to lowercase afterwards.\n    # This handles cases like \"ThisIsATest\" -> \"this_is_a_test\"\n    # edge: a transition like \"TestABCString\" should become \"test_abc_string\"\n\n    # Pattern: find positions where a lowercase letter or digit is followed by an uppercase letter\n    # and insert separator in between.\n    pattern = re.compile(r'(?<=[a-z0-9])([A-Z])')\n    snake = pattern.sub(lambda m: separator + m.group(1).lower(), input_string)\n\n    # Also handle consecutive uppercase sequences that are followed by lowercase letter,\n    # e.g. \"ABCString\" -> \"abc_string\" not \"a_b_c_string\"\n    # So we replace pattern where an uppercase letter followed by uppercase letter then lowercase.\n    # Insert separator between them.\n    pattern2 = re.compile(r'([A-Z]+)([A-Z][a-z])')\n    snake = pattern2.sub(lambda m: m.group(1).lower() + separator + m.group(2).lower(), snake)\n\n    # If string started with uppercase letters, just lowercase all\n    # (Already handled by previous steps)\n\n    # Finally lowercase any remaining uppercase letters\n    snake = re.sub(r'([A-Z])', lambda m: separator + m.group(1).lower(), snake)\n\n    # But this might insert multiple separators; consolidate multiple separators into one\n    sep_escaped = re.escape(separator)\n    snake = re.sub(rf'{sep_escaped}+', separator, snake)\n\n    # Strip possible leading/trailing separators if any (should not occur but safety)\n    snake = snake.strip(separator)\n\n    return snake", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_65\n  File \"<string>\", line 366, in camel_case_to_snake\n  File \"/usr/local/lib/python3.10/re.py\", line 209, in sub\n    return _compile(pattern, flags).sub(repl, string, count)\n  File \"/usr/local/lib/python3.10/re.py\", line 303, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"/usr/local/lib/python3.10/sre_compile.py\", line 764, in compile\n    p = sre_parse.parse(p, flags)\n  File \"/usr/local/lib/python3.10/sre_parse.py\", line 948, in parse\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n  File \"/usr/local/lib/python3.10/sre_parse.py\", line 443, in _parse_sub\n    itemsappend(_parse(source, state, verbose, nested + 1,\n  File \"/usr/local/lib/python3.10/sre_parse.py\", line 668, in _parse\n    raise source.error(\"nothing to repeat\",\nre.error: nothing to repeat at position 0\n", "passed": false}
{"task_id": 1, "prediction_id": 2, "generation": "import re\nfrom string_utils.validation import is_camel_case, is_full_string\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Split camel case string into words\n    # Basic approach:\n    # - Insert separator before uppercase letters that are preceded by lowercase letters or digits\n    # - Handle consecutive uppercase letters (e.g., \"HTTPResponse\") carefully so all uppercase sequences are considered a word\n    # Here is a robust pattern to split camel case into words:\n    #\n    # 1) Look for boundaries where a lowercase letter is followed by uppercase: e.g. \"sA\" in \"thisIs\"\n    # 2) Look for boundaries where a uppercase letter is followed by uppercase and then a lowercase: e.g. \"TTP\" in \"HTTPResponse\"\n    #\n    # The regex splits by these rules to separate words.\n\n    # Pattern explanation:\n    # (?<=[a-z0-9])(?=[A-Z])  - between a lowercase/digit and uppercase letter\n    # |                       - OR\n    # (?<=[A-Z])(?=[A-Z][a-z]) - between an uppercase letter and uppercase + lowercase (to split acronym from next word)\n    pattern = re.compile(r'(?<=[a-z0-9])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])')\n\n    words = pattern.split(input_string)\n\n    # Lowercase all words\n    words = [w.lower() for w in words if is_full_string(w)]\n\n    # Join words by separator\n    output = separator.join(words)\n\n    return output", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1114, in <module>\n  File \"<string>\", line 1113, in test_16\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 3, "generation": "import re\nfrom string_utils.validation import is_camel_case, is_snake_case\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before each uppercase letter that is not at start, then lowercase all.\n    # For example: \"ThisIsACamelStringTest\" -> \"this_is_a_camel_string_test\"\n    # Use lookahead and lookbehind zero-width assertions to split camel case properly\n\n    # Pattern explanation:\n    # 1) (?<!^)(?=[A-Z]) means positive lookahead for any uppercase letter, but not at start of string\n    parts = re.split(r'(?<!^)(?=[A-Z])', input_string)\n    # Join with separator and lowercase result\n    snake = separator.join(part.lower() for part in parts)\n\n    return snake", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1098, in <module>\n  File \"<string>\", line 1097, in test_16\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 4, "generation": "from string_utils.validation import is_camel_case\nimport re\n\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before uppercase letters that are preceded by a lowercase letter or digit\n    s1 = re.sub('([a-z0-9])([A-Z])', r'\\1' + separator + r'\\2', input_string)\n\n    # Insert separator before uppercase letters that are followed by lowercase letters, but preceded by another uppercase letter\n    # This handles transitions like \"HTTPServer\" -> \"http_server\"\n    s2 = re.sub('([A-Z])([A-Z][a-z])', r'\\1' + separator + r'\\2', s1)\n\n    return s2.lower()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1096, in <module>\n  File \"<string>\", line 1095, in test_16\nAssertionError\n", "passed": false}
