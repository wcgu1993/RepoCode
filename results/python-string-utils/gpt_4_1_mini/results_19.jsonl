{"task_id": 19, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove spaces and hyphens commonly used in card numbers\n    sanitized = re.sub(r'[\\s-]', '', input_string)\n\n    if not sanitized.isdigit():\n        return False\n\n    cc_patterns = {\n        'VISA': r'^4\\d{12}(\\d{3})?$',\n        'MASTERCARD': r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$',\n        'AMERICAN_EXPRESS': r'^3[47]\\d{13}$',\n        'DINERS_CLUB': r'^3(0[0-5]|[68]\\d)\\d{11}$',\n        'DISCOVER': r'^(6011\\d{12}|65\\d{14}|64[4-9]\\d{13}|622(12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9([01]\\d|2[0-5]))\\d{10})$',\n        'JCB': r'^(2131|1800|35\\d{3})\\d{11}$'\n    }\n\n    def luhn_check(card_number: str) -> bool:\n        \"\"\"Validate a card number using the Luhn algorithm.\"\"\"\n        total = 0\n        num_digits = len(card_number)\n        oddeven = num_digits & 1\n\n        for count in range(num_digits):\n            digit = int(card_number[count])\n\n            if (count & 1) ^ oddeven:\n                digit = digit * 2\n                if digit > 9:\n                    digit -= 9\n\n            total += digit\n\n        return (total % 10) == 0\n\n    card_type_upper = card_type.upper() if isinstance(card_type, str) else None\n\n    if card_type_upper:\n        pattern = cc_patterns.get(card_type_upper)\n        if not pattern:\n            # Unsupported card type, return False\n            return False\n        if not re.fullmatch(pattern, sanitized):\n            return False\n    else:\n        # If no specific card type, check if matches any pattern\n        if not any(re.fullmatch(pat, sanitized) for pat in cc_patterns.values()):\n            return False\n\n    return luhn_check(sanitized)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 720, in <module>\n  File \"<string>\", line 719, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 1, "generation": "import re\nfrom typing import Any, Optional\n\ndef is_credit_card(input_string: Any, card_type: Optional[str] = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove spaces and dashes for normalization\n    cc_number = re.sub(r'[\\s-]', '', input_string)\n\n    if not cc_number.isdigit():\n        return False\n\n    # Define regex patterns for supported card types\n    # Patterns based on common rules for card numbers:\n    patterns = {\n        \"VISA\": r'^4\\d{12}(?:\\d{3})?$',                      # 13 or 16 digits, starting with 4\n        \"MASTERCARD\": r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$',  # 16 digits starting with 51-55 or 2221-2720\n        \"AMERICAN_EXPRESS\": r'^3[47]\\d{13}$',                 # 15 digits, starts with 34 or 37\n        \"DINERS_CLUB\": r'^3(?:0[0-5]|[68]\\d)\\d{11}$',         # 14 digits, start with 300-305, 36 or 38\n        \"DISCOVER\": r'^6(?:011|5\\d{2}|4[4-9]\\d)\\d{12}$',      # 16 digits, starting with 6011, 65, or 644-649\n        \"JCB\": r'^(?:2131|1800|35\\d{3})\\d{11}$'               # 15 or 16 digits starting with 2131, 1800, or 35\n    }\n\n    # Helper: Luhn Algorithm implementation\n    def luhn_check(card_num: str) -> bool:\n        total = 0\n        num_digits = len(card_num)\n        parity = num_digits % 2\n        for i, digit in enumerate(card_num):\n            d = int(digit)\n            if i % 2 == parity:\n                d *= 2\n                if d > 9:\n                    d -= 9\n            total += d\n        return total % 10 == 0\n\n    # Normalize card_type string\n    if card_type is not None:\n        card_type_upper = card_type.strip().upper()\n        if card_type_upper not in patterns:\n            return False\n        pattern = patterns[card_type_upper]\n        if not re.match(pattern, cc_number):\n            return False\n    else:\n        # If no card_type specified, check if it matches any pattern\n        if not any(re.match(pat, cc_number) for pat in patterns.values()):\n            return False\n\n    # Finally, check Luhn checksum\n    return luhn_check(cc_number)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 717, in <module>\n  File \"<string>\", line 716, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 2, "generation": "import re\nfrom typing import Any, Optional\n\ndef is_credit_card(input_string: Any, card_type: Optional[str] = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove spaces and dashes commonly found in credit card inputs\n    card_number = input_string.replace(' ', '').replace('-', '')\n\n    if not card_number.isdigit():\n        return False\n\n    # Define regex patterns for each supported card type\n    card_patterns = {\n        \"VISA\": r'^4\\d{12}(\\d{3})?$',  # 13 or 16 digits, starts with 4\n        \"MASTERCARD\": r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$',  # 16 digits, starts 51-55 or 2221-2720\n        \"AMERICAN_EXPRESS\": r'^3[47]\\d{13}$',  # 15 digits, starts with 34 or 37\n        \"DINERS_CLUB\": r'^(3(0[0-5]|[68]\\d)\\d{11})$',  # 14 digits, starts with 300-305, 36 or 38\n        \"DISCOVER\": r'^(6(011|5\\d{2})\\d{12}|64[4-9]\\d{13}|622(12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9([0-1]\\d|2[0-5]))\\d{10})$',  # Various prefixes, mostly 16 digits\n        \"JCB\": r'^(35(2[89]|[3-8]\\d)\\d{12})$',  # 16 digits, starts with 3528-3589\n    }\n\n    # Normalize card type string to upper case if given\n    if card_type is not None:\n        card_type = card_type.upper()\n        if card_type not in card_patterns:\n            return False\n        pattern = re.compile(card_patterns[card_type])\n        if not pattern.match(card_number):\n            return False\n    else:\n        # If no card type specified, accept if matches any type pattern\n        matched = any(re.compile(pat).match(card_number) for pat in card_patterns.values())\n        if not matched:\n            return False\n\n    # Luhn Algorithm check\n    def luhn_check(number: str) -> bool:\n        total = 0\n        reverse_digits = number[::-1]\n\n        for i, d in enumerate(reverse_digits):\n            n = int(d)\n            if i % 2 == 1:\n                n *= 2\n                if n > 9:\n                    n -= 9\n            total += n\n\n        return total % 10 == 0\n\n    return luhn_check(card_number)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 718, in <module>\n  File \"<string>\", line 717, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 3, "generation": "import re\nfrom typing import Any, Optional\n\ndef is_credit_card(input_string: Any, card_type: Optional[str] = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove spaces and dashes commonly included in credit card numbers\n    normalized = re.sub(r'[\\s-]', '', input_string)\n\n    if not normalized.isdigit():\n        return False\n\n    # Define regex patterns for different card types\n    CARD_PATTERNS = {\n        \"VISA\": r'^4\\d{12}(\\d{3})?$',  # 13 or 16 digits, starting with 4\n        \"MASTERCARD\": r'^(5[1-5]\\d{14}|2(22[1-9]\\d{12}|2[3-9]\\d{13}|[3-6]\\d{14}|7[0-1]\\d{13}|720\\d{12}))$',  # 16 digits, starting 51-55 or 2221-2720\n        \"AMERICAN_EXPRESS\": r'^3[47]\\d{13}$',  # 15 digits, starting with 34 or 37\n        \"DINERS_CLUB\": r'^(3(0[0-5]|[68]\\d)\\d{11})$',  # 14 digits, starting 300-305, 36 or 38\n        \"DISCOVER\": r'^(6011\\d{12}|65\\d{14}|64[4-9]\\d{13}|622(12[6-9]\\d{10}|1[3-9]\\d{11}|[2-8]\\d{12}|9([01]\\d{11}|2[0-5]\\d{10})))$',  # 16 digits, various prefixes\n        \"JCB\": r'^(352[89]\\d{12}|35[3-8]\\d{13})$',  # 16 digits, starting 3528-3589\n    }\n\n    card_type_upper = card_type.upper() if card_type is not None else None\n\n    if card_type_upper:\n        pattern = CARD_PATTERNS.get(card_type_upper)\n        if pattern is None:\n            # Unknown card type\n            return False\n\n        if not re.match(pattern, normalized):\n            return False\n\n    else:\n        # Check if matches any card type pattern\n        if not any(re.match(pat, normalized) for pat in CARD_PATTERNS.values()):\n            return False\n\n    # Luhn check function\n    def luhn_check(card_num: str) -> bool:\n        total = 0\n        num_digits = len(card_num)\n        parity = num_digits % 2\n\n        for i, ch in enumerate(card_num):\n            digit = int(ch)\n            if i % 2 == parity:\n                digit *= 2\n                if digit > 9:\n                    digit -= 9\n            total += digit\n\n        return total % 10 == 0\n\n    return luhn_check(normalized)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 721, in <module>\n  File \"<string>\", line 720, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    cc = input_string.replace(' ', '').replace('-', '')\n\n    # Card type regex patterns sourced from common credit card formats\n    patterns = {\n        'VISA': r'^4[0-9]{12}(?:[0-9]{3})?$',                     # Visa: 13 or 16 digits, starting with 4\n        'MASTERCARD': r'^(5[1-5][0-9]{14}|2(2[2-9][0-9]{12}|[3-6][0-9]{13}|7[01][0-9]{12}|720[0-9]{12}))$',  # MasterCard: 16 digits starting 51-55 or 2221-2720\n        'AMERICAN_EXPRESS': r'^3[47][0-9]{13}$',                  # Amex: 15 digits, starting with 34 or 37\n        'DINERS_CLUB': r'^3(?:0[0-5]|[68][0-9])[0-9]{11}$',       # Diners Club: 14 digits, various starts\n        'DISCOVER': r'^6(?:011|5[0-9]{2}|4[4-9][0-9])[0-9]{12}$', # Discover: 16 digits, starting with 6011, 644-649, or 65\n        'JCB': r'^(?:2131|1800|35\\d{3})\\d{11}$',                  # JCB: 15 or 16 digits, various starts\n    }\n\n    # Upper case card_type if provided (to match keys)\n    card_type = card_type.upper() if card_type else None\n\n    # Filter patterns based on card_type arg if provided\n    if card_type:\n        if card_type not in patterns:\n            return False\n        selected_patterns = {card_type: patterns[card_type]}\n    else:\n        selected_patterns = patterns\n\n    # Check pattern match\n    matched = False\n    for pattern in selected_patterns.values():\n        if re.fullmatch(pattern, cc):\n            matched = True\n            break\n    if not matched:\n        return False\n\n    # Luhn algorithm implementation to verify checksum validity\n    def luhn_checksum(card_number: str) -> bool:\n        total = 0\n        num_digits = len(card_number)\n        oddeven = num_digits & 1\n\n        for i in range(num_digits):\n            digit = int(card_number[i])\n\n            if (i & 1) ^ oddeven:\n                digit *= 2\n                if digit > 9:\n                    digit -= 9\n            total += digit\n\n        return (total % 10) == 0\n\n    return luhn_checksum(cc)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722, in <module>\n  File \"<string>\", line 721, in test_2\nAssertionError\n", "passed": false}
