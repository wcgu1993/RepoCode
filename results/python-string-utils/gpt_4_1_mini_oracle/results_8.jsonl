{"task_id": 8, "prediction_id": 0, "generation": "from string_utils.validation import is_string\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    # Split into lines\n    lines = input_string.splitlines()\n\n    # Determine minimum indentation (number of leading whitespace chars) ignoring empty/blank lines\n    min_indent = None\n    for line in lines:\n        stripped = line.lstrip()\n        if stripped:  # non-blank line\n            indent_len = len(line) - len(stripped)\n            if min_indent is None or indent_len < min_indent:\n                min_indent = indent_len\n\n    # If all lines are blank or empty, min_indent is None, set it to zero\n    if min_indent is None:\n        min_indent = 0\n\n    # Remove min_indent chars from the start of each line if line has at least that many chars\n    stripped_lines = []\n    for line in lines:\n        stripped_lines.append(line[min_indent:] if len(line) >= min_indent else '')\n\n    # Rejoin with newline preserving original line breaks (don't add trailing newline if not present)\n    return '\\n'.join(stripped_lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 996, in <module>\n  File \"<string>\", line 991, in test_24\nAssertionError\n", "passed": false}
{"task_id": 8, "prediction_id": 1, "generation": "from string_utils.validation import is_string\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError('Input must be a string')\n\n    # Split input into lines\n    lines = input_string.splitlines()\n\n    # Find minimum indentation (count of leading spaces/tabs) among all non-empty lines\n    min_indent = None\n    for line in lines:\n        stripped = line.lstrip()\n        if stripped:\n            # leading whitespace count\n            indent_len = len(line) - len(stripped)\n            if min_indent is None or indent_len < min_indent:\n                min_indent = indent_len\n\n    # If all lines are empty or no indentation, return joined lines stripped appropriately\n    if min_indent is None or min_indent == 0:\n        # Just strip trailing spaces, preserve empty lines as is\n        return '\\n'.join(lines).strip('\\n')\n\n    # Remove the minimum indentation from each line if possible\n    stripped_lines = []\n    for line in lines:\n        if len(line) >= min_indent:\n            # Remove min_indent chars if they are spaces/tabs at start\n            prefix = line[:min_indent]\n            if all(c in (' ', '\\t') for c in prefix):\n                stripped_lines.append(line[min_indent:])\n            else:\n                # If not all whitespace, remove leading spaces as-is (safer fallback)\n                stripped_lines.append(line.lstrip())\n        else:\n            # line shorter than min_indent, just strip leading spaces\n            stripped_lines.append(line.lstrip())\n\n    # Join stripped lines with '\\n' and strip leading/trailing empty lines\n    return '\\n'.join(stripped_lines).strip('\\n')", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 710, in <module>\n  File \"<string>\", line 705, in test_0\nAssertionError\n", "passed": false}
{"task_id": 8, "prediction_id": 2, "generation": "from string_utils.validation import is_string\n\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f'Input must be a string, got {type(input_string).__name__}')\n\n    # Split the string into lines and discard any leading/trailing empty lines for consistent behavior\n    lines = input_string.splitlines()\n\n    # If all lines are empty, return empty string immediately\n    if not any(line.strip() for line in lines):\n        return ''\n\n    # Find minimal leading whitespace (spaces or tabs) from all non-empty lines\n    min_indent = None\n    for line in lines:\n        stripped_line = line.lstrip()\n        if stripped_line:\n            leading_whitespace_len = len(line) - len(stripped_line)\n            if min_indent is None or leading_whitespace_len < min_indent:\n                min_indent = leading_whitespace_len\n\n    # If no non-empty line found or min_indent is 0, just return the original trimmed string (no margin to remove)\n    if min_indent is None or min_indent == 0:\n        return input_string.strip('\\n\\r')\n\n    # Remove min_indent whitespace chars from the left of each line if line has at least min_indent whitespace\n    stripped_lines = []\n    for line in lines:\n        # Only remove min_indent chars if line length >= min_indent and starts with whitespace\n        if len(line) >= min_indent and line[:min_indent].isspace():\n            stripped_lines.append(line[min_indent:])\n        else:\n            # Leave line as is (for empty lines or lines shorter than min_indent)\n            stripped_lines.append(line)\n\n    # Rejoin lines preserving the original newline style (using '\\n')\n    return '\\n'.join(stripped_lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724, in <module>\n  File \"<string>\", line 719, in test_6\nAssertionError\n", "passed": false}
{"task_id": 8, "prediction_id": 3, "generation": "from string_utils.validation import is_string\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    # Split input into lines preserving line endings\n    lines = input_string.splitlines()\n\n    # Strip off empty leading and trailing lines for better alignment (optional)\n    # But the example shows input with empty trailing lines preserved; so no stripping.\n\n    # Determine minimum leading whitespace (spaces or tabs) among non-empty lines\n    min_leading_ws = None\n\n    for line in lines:\n        stripped = line.lstrip()\n        if stripped:\n            leading_ws_len = len(line) - len(stripped)\n            if min_leading_ws is None or leading_ws_len < min_leading_ws:\n                min_leading_ws = leading_ws_len\n\n    # If no non-empty line found, return the string as is\n    if min_leading_ws is None:\n        return input_string\n\n    # Remove the minimal leading whitespace from each line\n    def strip_leading_ws(line):\n        # Only strip if line has at least min_leading_ws\n        if len(line) >= min_leading_ws:\n            # Remove exactly min_leading_ws chars of whitespace from the start\n            # But only whitespace chars (space or tab) count\n            # To be safe, only remove if those chars are all whitespace characters\n            leading_segment = line[:min_leading_ws]\n            if all(ch in (' ', '\\t') for ch in leading_segment):\n                return line[min_leading_ws:]\n        return line\n\n    result_lines = [strip_leading_ws(line) for line in lines]\n\n    # Join lines with '\\n' (since splitlines removed line endings)\n    return '\\n'.join(result_lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 727, in <module>\n  File \"<string>\", line 722, in test_6\nAssertionError\n", "passed": false}
{"task_id": 8, "prediction_id": 4, "generation": "from string_utils.validation import is_string\n\ndef strip_margin(input_string: str) -> str:\n    \"\"\"\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    # Split the input into lines\n    lines = input_string.splitlines()\n\n    # Find the minimal indentation by counting leading whitespace on non-blank lines\n    min_indent = None\n    for line in lines:\n        stripped_line = line.lstrip()\n        if stripped_line:\n            indent_len = len(line) - len(stripped_line)\n            if min_indent is None or indent_len < min_indent:\n                min_indent = indent_len\n\n    # If no lines or all lines are blank, return original (or empty)\n    if min_indent is None or min_indent == 0:\n        # Just return the string stripped of leading/trailing blank lines for neatness\n        return input_string.strip('\\n\\r')\n\n    # Remove min_indent spaces or tabs from beginning of each line if possible\n    stripped_lines = []\n    for line in lines:\n        # Only strip indentation if line is not empty or whitespace only\n        if line.strip():\n            # Remove min_indent chars from start\n            stripped_lines.append(line[min_indent:])\n        else:\n            # Keep blank lines as empty string to preserve line count\n            stripped_lines.append('')\n\n    # Rejoin lines preserving the line breaks\n    return '\\n'.join(stripped_lines).strip('\\n\\r')", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 705, in <module>\n  File \"<string>\", line 700, in test_0\nAssertionError\n", "passed": false}
