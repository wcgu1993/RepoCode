{"task_id": 17, "prediction_id": 0, "generation": "from typing import Any, Optional, List\nfrom urllib.parse import urlparse\nfrom .errors import InvalidInputError\nfrom . import is_full_string\n\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    try:\n        parsed = urlparse(input_string)\n    except Exception:\n        return False\n\n    # A valid URL must have a scheme and netloc\n    if not parsed.scheme or not parsed.netloc:\n        return False\n\n    if allowed_schemes is not None:\n        if parsed.scheme not in allowed_schemes:\n            return False\n\n    # Basic sanity check for netloc part (should have at least one '.' or be an IP)\n    if '.' not in parsed.netloc and not parsed.netloc.replace(':','').isdigit():\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 196, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 17, "prediction_id": 1, "generation": "from typing import Any, Optional, List\nfrom urllib.parse import urlparse\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n    if input_string.strip() == '':\n        return False\n\n    parsed = urlparse(input_string)\n\n    # scheme is mandatory to be a valid URL in this context\n    if not parsed.scheme or not parsed.netloc:\n        return False\n\n    # Check allowed schemes if provided\n    if allowed_schemes is not None:\n        # Normalize schemes to lower case for case-insensitive comparison\n        if parsed.scheme.lower() not in [scheme.lower() for scheme in allowed_schemes]:\n            return False\n\n    # Further validation: netloc must contain at least one dot or be localhost or an IP\n    # This can avoid cases like .mysite.com (reported as false)\n    netloc = parsed.netloc\n    if netloc.startswith('.') or netloc.endswith('.'):\n        return False\n    if '.' not in netloc and netloc.lower() != 'localhost':\n        # also accept if netloc is an IP address with no dots, e.g. IPv6 or just no dots? \n        # but those generally have dots or colons, so if no dot and not localhost, reject\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 894, in <module>\n  File \"<string>\", line 893, in test_60\nAssertionError\n", "passed": false}
{"task_id": 17, "prediction_id": 2, "generation": "from typing import Any, Optional, List\nfrom urllib.parse import urlparse\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Parse the url using urllib.parse\n    parsed = urlparse(input_string)\n\n    # The scheme and netloc must not be empty for a valid URL\n    if not parsed.scheme or not parsed.netloc:\n        return False\n\n    # If allowed_schemes is provided, scheme must be in allowed_schemes (case-insensitive)\n    if allowed_schemes is not None:\n        if parsed.scheme.lower() not in [scheme.lower() for scheme in allowed_schemes]:\n            return False\n\n    # Basic validation for netloc to contain at least one dot and not start with a dot\n    # This helps reject URLs like '.mysite.com' or invalid netlocs.\n    netloc = parsed.netloc.strip()\n    if netloc.startswith('.') or '.' not in netloc:\n        return False\n\n    # All checks passed\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 889, in <module>\n  File \"<string>\", line 888, in test_60\nAssertionError\n", "passed": false}
{"task_id": 17, "prediction_id": 3, "generation": "from typing import Any, Optional, List\nfrom urllib.parse import urlparse\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Use urlparse to break the URL into components\n    parsed = urlparse(input_string)\n\n    # A valid URL must have a scheme and a network location (netloc)\n    if not parsed.scheme or not parsed.netloc:\n        return False\n\n    # If allowed_schemes is provided, check if the parsed scheme is among them\n    if allowed_schemes is not None and parsed.scheme not in allowed_schemes:\n        return False\n\n    # Additional minimal check: netloc must not start with '.' (to avoid .mysite.com)\n    if parsed.netloc.startswith('.'):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 937, in <module>\n  File \"<string>\", line 936, in test_76\nAssertionError\n", "passed": false}
{"task_id": 17, "prediction_id": 4, "generation": "from typing import Any, Optional, List\nfrom urllib.parse import urlparse\n\nfrom string_utils.validation import is_full_string\n\n\ndef is_url(input_string: Any, allowed_schemes: Optional[List[str]] = None) -> bool:\n    \"\"\"\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    parsed = urlparse(input_string)\n    if not parsed.scheme or not parsed.netloc:\n        return False\n\n    if allowed_schemes is not None:\n        # Normalize schemes to lower case for comparison\n        allowed_schemes_lower = {scheme.lower() for scheme in allowed_schemes}\n        if parsed.scheme.lower() not in allowed_schemes_lower:\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 935, in <module>\n  File \"<string>\", line 934, in test_76\nAssertionError\n", "passed": false}
