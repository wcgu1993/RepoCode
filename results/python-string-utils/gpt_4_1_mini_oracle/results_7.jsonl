{"task_id": 7, "prediction_id": 0, "generation": "from string_utils.validation import is_string\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f\"Expected a string but got {type(input_string).__name__}\")\n\n    positive_strings = {'true', '1', 'yes', 'y'}\n    return input_string.strip().lower() in positive_strings", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1413, in <module>\n  File \"<string>\", line 1408, in test_extra_1\n  File \"<string>\", line 545, in booleanize\nTypeError: Expected a string but got int\n", "passed": false}
{"task_id": 7, "prediction_id": 1, "generation": "from string_utils.validation import is_string\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError('Input must be a string')\n\n    positive_values = {'true', '1', 'yes', 'y'}\n\n    return input_string.strip().lower() in positive_values", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1414, in <module>\n  File \"<string>\", line 1409, in test_extra_1\n  File \"<string>\", line 545, in booleanize\nValueError: Input must be a string\n", "passed": false}
{"task_id": 7, "prediction_id": 2, "generation": "from string_utils.validation import is_string\n\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    # Normalize input to lowercase and strip surrounding whitespace\n    normalized = input_string.strip().lower()\n\n    # Set of accepted true string values\n    positive_values = {'true', '1', 'yes', 'y'}\n\n    return normalized in positive_values", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1419, in <module>\n  File \"<string>\", line 1418, in test_extra_1\nAssertionError\n", "passed": false}
{"task_id": 7, "prediction_id": 3, "generation": "from string_utils.validation import is_string\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f'Expected a string, got {type(input_string).__name__}')\n\n    normalized = input_string.strip().lower()\n    return normalized in {\"true\", \"1\", \"yes\", \"y\"}", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1413, in <module>\n  File \"<string>\", line 1408, in test_extra_1\n  File \"<string>\", line 545, in booleanize\nTypeError: Expected a string, got int\n", "passed": false}
{"task_id": 7, "prediction_id": 4, "generation": "from string_utils.validation import is_string\n\ndef booleanize(input_string: str) -> bool:\n    \"\"\"\n    Turns a string into a boolean based on its content (CASE INSENSITIVE).\n\n    A positive boolean (True) is returned if the string value is one of the following:\n\n    - \"true\"\n    - \"1\"\n    - \"yes\"\n    - \"y\"\n\n    Otherwise False is returned.\n\n    *Examples:*\n\n    >>> booleanize('true') # returns True\n    >>> booleanize('YES') # returns True\n    >>> booleanize('nope') # returns False\n\n    :param input_string: String to convert\n    :type input_string: str\n    :return: True if the string contains a boolean-like positive value, false otherwise\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f\"Invalid input: expected a string but got {type(input_string).__name__}\")\n\n    normalized = input_string.strip().lower()\n    return normalized in {'true', '1', 'yes', 'y'}", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1413, in <module>\n  File \"<string>\", line 1408, in test_extra_1\n  File \"<string>\", line 545, in booleanize\nTypeError: Invalid input: expected a string but got int\n", "passed": false}
