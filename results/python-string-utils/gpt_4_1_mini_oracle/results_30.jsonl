{"task_id": 30, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_full_string\n\n\n_SLUG_PATTERN_TEMPLATE = r'^[a-z0-9]+(?:{sep}[a-z0-9]+)*$'\n\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    sep = re.escape(separator)\n    pattern = re.compile(_SLUG_PATTERN_TEMPLATE.format(sep=sep))\n\n    return pattern.match(input_string) is not None", "message": "passed", "passed": true}
{"task_id": 30, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not (isinstance(input_string, str) and input_string.strip()):\n        return False\n\n    # Slugs are typically lowercase strings, words separated by the separator\n    # containing only letters, digits, and the separator itself.\n    # The string should:\n    # - not start or end with separator\n    # - contain only lowercase letters, digits, or separator\n    # - separators not repeated consecutively\n\n    # Escape separator for regex usage\n    sep_escaped = re.escape(separator)\n\n    # Build a regex pattern for slug validation:\n    # ^            : start of string\n    # [a-z0-9]+    : one or more lowercase letters or digits\n    # (sep + [a-z0-9]+)* : zero or more groups of (separator + letters/digits)\n    # $            : end of string\n    pattern = rf'^[a-z0-9]+(?:{sep_escaped}[a-z0-9]+)*$'\n    return re.match(pattern, input_string) is not None", "message": "passed", "passed": true}
{"task_id": 30, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\nfrom string_utils.validation import is_full_string\n\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not is_full_string(input_string):\n        return False\n\n    # Build a regex pattern:\n    # A slug is typically lowercase letters, digits, and separator characters\n    # separated by the separator, no spaces, no uppercase letters.\n    #\n    # Pattern explanation:\n    # ^                       : start of string\n    # [a-z0-9]+               : one or more lowercase letters or digits\n    # (separator [a-z0-9]+)*  : zero or more groups of separator followed by letters/digits\n    # $                       : end of string\n    #\n    # Escape the separator for safe usage in regex.\n    sep_escaped = re.escape(separator)\n    pattern = rf'^[a-z0-9]+({sep_escaped}[a-z0-9]+)*$'\n\n    return re.fullmatch(pattern, input_string) is not None", "message": "passed", "passed": true}
{"task_id": 30, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str) or not input_string:\n        return False\n    \n    if input_string.startswith(separator) or input_string.endswith(separator):\n        return False\n    \n    # Define a regex pattern that matches only lowercase letters, numbers, and the separator\n    # The slug must be composed of one or more groups of [a-z0-9]+ separated by the separator exactly\n    # e.g. for separator '-', valid slugs are: \"my-blog-post\", \"test1-2-3\", \"a1-b2\"\n    sep_escaped = re.escape(separator)\n    pattern = re.compile(rf'^[a-z0-9]+(?:{sep_escaped}[a-z0-9]+)*$')\n    \n    return bool(pattern.match(input_string))", "message": "passed", "passed": true}
{"task_id": 30, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_slug(input_string: Any, separator: str = '-') -> bool:\n    \"\"\"\n    Checks if a given string is a slug (as created by `slugify()`).\n\n    *Examples:*\n\n    >>> is_slug('my-blog-post-title') # returns true\n    >>> is_slug('My blog post title') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param separator: Join sign used by the slug.\n    :type separator: str\n    :return: True if slug, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str) or not input_string:\n        return False\n\n    # A slug must be lowercase letters, digits, and separated by the separator\n    # It cannot start or end with the separator\n    # It cannot have consecutive separators\n    # We allow only ascii lowercase letters and digits\n    sep_escaped = re.escape(separator)\n    pattern = rf'^[a-z0-9]+(?:{sep_escaped}[a-z0-9]+)*$'\n\n    return re.match(pattern, input_string) is not None", "message": "passed", "passed": true}
