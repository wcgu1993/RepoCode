{"task_id": 1, "prediction_id": 0, "generation": "import re\nfrom string_utils.validation import is_string, is_camel_case\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f'Input must be a string, got {type(input_string)}')\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before uppercase letters preceded by lowercase letters or digits\n    # For example: 'ThisIsATest' => 'This_Is_A_Test'\n    step1 = re.sub(r'(?<=[a-z0-9])([A-Z])', rf'{separator}\\1', input_string)\n\n    # Insert separator before uppercase letters preceded by another uppercase letter and followed by lowercase letters\n    # This handles acronyms or multiple uppercase sequences: 'HTTPResponse' => 'HTTP_Response'\n    step2 = re.sub(r'(?<=[A-Z])([A-Z][a-z])', rf'{separator}\\1', step1)\n\n    # Convert whole string to lowercase\n    result = step2.lower()\n\n    return result", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1102, in <module>\n  File \"<string>\", line 1101, in test_16\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 1, "generation": "import re\nfrom string_utils.validation import is_string, is_camel_case\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError('Input must be a string')\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before each uppercase letter that follows a lowercase letter or number,\n    # then lowercase the whole string.\n    pattern = re.compile(r'(?<=[a-z0-9])([A-Z])')\n    snake = pattern.sub(separator + r'\\1', input_string).lower()\n\n    return snake", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 702, in <module>\n  File \"<string>\", line 701, in test_7\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 2, "generation": "import re\nfrom string_utils.validation import is_string, is_camel_case\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError('Input must be a string')\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    # Insert separator before uppercase letters that follow a lowercase letter or digit\n    # e.g. ThisIs -> This_Is\n    s1 = re.sub('([a-z0-9])([A-Z])', r'\\1' + separator + r'\\2', input_string)\n\n    # Insert separator between consecutive uppercase letters followed by lowercase letters\n    # e.g. \"XMLHttp\" -> \"XML_Http\"\n    s2 = re.sub('([A-Z])([A-Z][a-z])', r'\\1' + separator + r'\\2', s1)\n\n    return s2.lower()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1099, in <module>\n  File \"<string>\", line 1098, in test_16\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 3, "generation": "import re\nfrom typing import Any\nfrom string_utils.validation import is_string, is_camel_case\n\n\ndef camel_case_to_snake(input_string: Any, separator: str = '_') -> str:\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    # Validate input is string and camel case\n    if not is_string(input_string) or not is_camel_case(input_string):\n        return input_string\n\n    # Use regex to find uppercase letters that indicate word boundaries\n    # The pattern captures uppercase letters that start a word, including acronyms\n    # For example: 'ThisIsACamelStringTest' -> ['This', 'Is', 'A', 'Camel', 'String', 'Test']\n    words = re.findall(r'[A-Z]+(?![a-z])|[A-Z][a-z0-9]*', input_string)\n\n    # Convert all words to lowercase and join by separator\n    return separator.join(word.lower() for word in words)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 719, in <module>\n  File \"<string>\", line 718, in test_15\nAssertionError\n", "passed": false}
{"task_id": 1, "prediction_id": 4, "generation": "from string_utils.validation import is_string, is_camel_case\n\ndef camel_case_to_snake(input_string, separator='_'):\n    \"\"\"\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    if not is_camel_case(input_string):\n        return input_string\n\n    result_chars = []\n    for i, char in enumerate(input_string):\n        # If char is uppercase and not the first char, prepend separator\n        if char.isupper() and i > 0:\n            result_chars.append(separator)\n        result_chars.append(char.lower())\n\n    return ''.join(result_chars)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1097, in <module>\n  File \"<string>\", line 1096, in test_16\nAssertionError\n", "passed": false}
