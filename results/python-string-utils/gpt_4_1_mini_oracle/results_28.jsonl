{"task_id": 28, "prediction_id": 0, "generation": "from typing import Any\nimport string\n\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    # Use is_full_string context function logic inline (to avoid import from file context)\n    if not (isinstance(input_string, str) and input_string.strip() != ''):\n        return False\n\n    input_lower = input_string.lower()\n\n    # Set of all ascii lowercase letters\n    letters_set = set(string.ascii_lowercase)\n\n    # Set of letters in input string\n    input_letters = set(ch for ch in input_lower if ch.isalpha())\n\n    return letters_set.issubset(input_letters)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 831, in <module>\n  File \"<string>\", line 830, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 1, "generation": "from typing import Any\nimport string\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Normalize input to lowercase to handle case-insensitivity\n    input_string = input_string.lower()\n\n    # Set of all letters in the English alphabet\n    alphabet = set(string.ascii_lowercase)\n\n    # Create a set of characters from input string that are alphabets\n    input_letters = set(filter(str.isalpha, input_string))\n\n    # If input_letters contains all letters in alphabet, it's a pangram\n    return alphabet.issubset(input_letters)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 831, in <module>\n  File \"<string>\", line 830, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 2, "generation": "from typing import Any\nimport string\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    if not (isinstance(input_string, str) and input_string.strip()):\n        return False\n\n    input_lower = input_string.lower()\n    alphabet = set(string.ascii_lowercase)\n\n    # Check that every letter in alphabet is in the input string\n    return alphabet.issubset(set(input_lower))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 825, in <module>\n  File \"<string>\", line 824, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 3, "generation": "from typing import Any\nimport string\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    # Early exit if input_string is not a full non-empty string with at least one non-space character\n    if not (isinstance(input_string, str) and input_string.strip()):\n        return False\n\n    # Normalize by lowercasing the string\n    normalized = input_string.lower()\n\n    # Create a set of all alphabet letters\n    alphabet_set = set(string.ascii_lowercase)\n\n    # Extract letters from the input string\n    letters_in_input = set(ch for ch in normalized if ch in alphabet_set)\n\n    # Check if all alphabet letters are present\n    return letters_in_input == alphabet_set", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 832, in <module>\n  File \"<string>\", line 831, in test_12\nAssertionError\n", "passed": false}
{"task_id": 28, "prediction_id": 4, "generation": "from typing import Any\nimport string\n\ndef is_pangram(input_string: Any) -> bool:\n    \"\"\"\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    \"\"\"\n    # Using the provided context function is_full_string would be ideal, but to keep this\n    # code self-contained and runnable independently, we'll replicate its logic here.\n    if not (isinstance(input_string, str) and input_string.strip() != ''):\n        return False\n\n    # Normalize the input by lowercasing to ignore case\n    input_string = input_string.lower()\n\n    # Set of all alphabets to check against\n    alphabet_set = set(string.ascii_lowercase)\n\n    # Collect letters found in the input string\n    letters_found = set(ch for ch in input_string if 'a' <= ch <= 'z')\n\n    # Check if all letters are covered\n    return letters_found == alphabet_set or letters_found.issuperset(alphabet_set)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 833, in <module>\n  File \"<string>\", line 832, in test_12\nAssertionError\n", "passed": false}
