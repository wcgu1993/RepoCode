{"task_id": 24, "prediction_id": 0, "generation": "from typing import Any\n\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        # Reject empty parts or parts with leading zeros (if part has more than 1 digit)\n        if not part.isdigit() or (len(part) > 1 and part[0] == '0'):\n            return False\n\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 723, in <module>\n  File \"<string>\", line 722, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 1, "generation": "from typing import Any\n\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    # Check that input is a non-empty string with some non-space characters\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n\n        # Avoid leading zeros that are not '0'\n        if len(part) > 1 and part[0] == '0':\n            return False\n\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 727, in <module>\n  File \"<string>\", line 726, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 2, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        # Prevent leading zeros like \"01\", except for \"0\" itself\n        if part != '0' and part.startswith('0'):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 723, in <module>\n  File \"<string>\", line 722, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 3, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    parts = input_string.split('.')\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n        # leading zeros are not allowed unless the part is exactly \"0\"\n        if part != '0' and part.startswith('0'):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 724, in <module>\n  File \"<string>\", line 723, in test_8\nAssertionError\n", "passed": false}
{"task_id": 24, "prediction_id": 4, "generation": "from typing import Any\n\ndef is_ip_v4(input_string: Any) -> bool:\n    \"\"\"\n    Checks if a string is a valid ip v4.\n\n    *Examples:*\n\n    >>> is_ip_v4('255.200.100.75') # returns true\n    >>> is_ip_v4('nope') # returns false (not an ip)\n    >>> is_ip_v4('255.200.100.999') # returns false (999 is out of range)\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip v4, false otherwise.\n    \"\"\"\n    # Check if input_string is a non-empty string with at least one non-space character\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    parts = input_string.split('.')\n    # IPv4 must have exactly 4 parts\n    if len(parts) != 4:\n        return False\n\n    for part in parts:\n        # Each part must be non-empty and only digits\n        if not part.isdigit():\n            return False\n\n        # Convert part to int and check range 0-255 inclusive\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n\n        # Avoid parts with leading zeros (leading zero allowed only if part is '0')\n        if part != '0' and part.startswith('0'):\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 729, in <module>\n  File \"<string>\", line 728, in test_8\nAssertionError\n", "passed": false}
