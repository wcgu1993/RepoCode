{"task_id": 31, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Basic regex to detect any HTML/XML tag, by looking for <tag ...> or </tag>\n    # Explanation:\n    # < : start tag\n    # \\s* : optional whitespace\n    # /? : optional closing slash for closing tags\n    # [a-zA-Z]+ : tag name (at least one letter)\n    # [^>]* : any chars except >\n    # > : end >\n    pattern = re.compile(r'<\\s*\\/?[a-zA-Z]+[^>]*>', re.IGNORECASE)\n\n    return bool(pattern.search(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 733, in <module>\n  File \"<string>\", line 732, in test_11\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Regex to match opening or closing HTML/XML tags.\n    # Matches patterns like <tag>, <tag attr=\"value\">, </tag>, <tag/>\n    html_tag_re = re.compile(r'<[^>]+>')\n\n    return bool(html_tag_re.search(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1295, in <module>\n  File \"<string>\", line 1294, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\n# Precompiled regex to detect any HTML/XML tag\n_HTML_TAG_RE = re.compile(r'<[^>]+>')\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    return _HTML_TAG_RE.search(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1294, in <module>\n  File \"<string>\", line 1293, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 3, "generation": "import re\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Simple regex to detect any tag-like pattern: <tag ...> or </tag>\n    # This detects anything like <...> including self-closing tags, comments, etc.\n    # It does not validate HTML correctness but detects presence of tags.\n    html_tag_re = re.compile(r'<[^>]+>')\n\n    return bool(html_tag_re.search(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1295, in <module>\n  File \"<string>\", line 1294, in test_172\nAssertionError\n", "passed": false}
{"task_id": 31, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef contains_html(input_string: str) -> bool:\n    \"\"\"\n    Checks if the given string contains HTML/XML tags.\n\n    By design, this function matches ANY type of tag, so don't expect to use it\n    as an HTML validator, its goal is to detect \"malicious\" or undesired tags in the text.\n\n    *Examples:*\n\n    >>> contains_html('my string is <strong>bold</strong>') # returns true\n    >>> contains_html('my string is not bold') # returns false\n\n    :param input_string: Text to check\n    :type input_string: str\n    :return: True if string contains html, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Simple regex to detect any HTML/XML tag:\n    #   < followed by optional / or !, then one or more letters or digits or ! (for comment tags),\n    #   then optionally anything until >\n    # This will match any tag like <tag>, </tag>, <br />, <!-- comment -->, etc.\n    tag_re = re.compile(r'<[^>]+>')\n\n    return tag_re.search(input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1297, in <module>\n  File \"<string>\", line 1296, in test_172\nAssertionError\n", "passed": false}
