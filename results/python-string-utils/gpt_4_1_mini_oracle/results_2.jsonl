{"task_id": 2, "prediction_id": 0, "generation": "from string_utils.validation import is_string, is_snake_case\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    if not is_snake_case(input_string, separator=separator):\n        return input_string\n\n    parts = input_string.split(separator)\n\n    # Capitalize the first letter of each part except possibly the first one,\n    # depending on upper_case_first flag\n    if upper_case_first:\n        camel_parts = [part.capitalize() for part in parts]\n    else:\n        if parts:\n            camel_parts = [parts[0].lower()] + [part.capitalize() for part in parts[1:]]\n        else:\n            camel_parts = []\n\n    return ''.join(camel_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 774, in <module>\n  File \"<string>\", line 773, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 1, "generation": "from string_utils.validation import is_string, is_snake_case\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError('Input must be a string')\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    parts = input_string.split(separator)\n    # Convert all parts to lower, then adjust casing\n    parts = [part.lower() for part in parts]\n\n    if upper_case_first:\n        # Capitalize first letter of each part\n        parts = [part.capitalize() for part in parts]\n        return ''.join(parts)\n    else:\n        # First part remains lowercase, rest capitalize first letter\n        if not parts:\n            return ''\n        return parts[0] + ''.join(part.capitalize() for part in parts[1:])", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 774, in <module>\n  File \"<string>\", line 773, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 2, "generation": "from string_utils.validation import is_string, is_snake_case\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(\"Input must be a string\")\n\n    if not is_snake_case(input_string, separator=separator):\n        return input_string\n\n    # Split string by the separator\n    parts = input_string.split(separator)\n\n    if not parts:\n        return input_string\n\n    # Capitalize first letter of each part if upper_case_first is True; otherwise keep first part as is\n    if upper_case_first:\n        camel_parts = [part.capitalize() for part in parts]\n    else:\n        # first part lower, others capitalized\n        camel_parts = [parts[0].lower()] + [part.capitalize() for part in parts[1:]]\n\n    return ''.join(camel_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 775, in <module>\n  File \"<string>\", line 774, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 3, "generation": "from string_utils.validation import is_string, is_snake_case\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise TypeError(f'Input must be a string, got {type(input_string).__name__}')\n\n    if not is_snake_case(input_string, separator=separator):\n        return input_string\n\n    parts = input_string.split(separator)\n\n    if upper_case_first:\n        # Capitalize first letter of each part\n        camel = ''.join(p.capitalize() for p in parts)\n    else:\n        # Lowercase first part, capitalize subsequent parts\n        if parts:\n            first = parts[0].lower()\n            rest = ''.join(p.capitalize() for p in parts[1:])\n            camel = first + rest\n        else:\n            camel = ''\n\n    return camel", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 776, in <module>\n  File \"<string>\", line 775, in test_37\nAssertionError\n", "passed": false}
{"task_id": 2, "prediction_id": 4, "generation": "from string_utils.validation import is_string, is_snake_case\n\n\ndef snake_case_to_camel(input_string: str, upper_case_first: bool = True, separator: str = '_') -> str:\n    \"\"\"\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel('the_snake_is_green') # returns 'TheSnakeIsGreen'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to \"_\").\n    :type separator: str\n    :return: Converted string\n    \"\"\"\n    if not is_string(input_string):\n        raise ValueError(f\"Invalid input: expected string but got {type(input_string)}\")\n\n    if not is_snake_case(input_string, separator):\n        return input_string\n\n    # Split the string by the separator\n    parts = input_string.split(separator)\n\n    # Capitalize each part (first letter uppercase, rest lowercase)\n    # If upper_case_first is False, the first part will not be capitalized (all lowercase)\n    if upper_case_first:\n        camel_parts = [part.capitalize() for part in parts]\n    else:\n        if parts:\n            camel_parts = [parts[0].lower()] + [part.capitalize() for part in parts[1:]]\n        else:\n            camel_parts = []\n\n    return ''.join(camel_parts)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 775, in <module>\n  File \"<string>\", line 774, in test_37\nAssertionError\n", "passed": false}
