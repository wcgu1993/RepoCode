{"task_id": 23, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\n# UUID regex that matches standard UUID format (8-4-4-4-12 hex digits)\nUUID_RE = re.compile(\n    r'^[0-9a-fA-F]{8}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{12}$'\n)\n\n# Hexadecimal representation of UUID: just 32 hex digits without dashes\nUUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if allow_hex:\n        return UUID_RE.match(input_string) is not None or UUID_HEX_RE.match(input_string) is not None\n    else:\n        return UUID_RE.match(input_string) is not None", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\nUUID_RE = re.compile(\n    r'^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$',\n    re.IGNORECASE\n)\nUUID_HEX_RE = re.compile(r'^[0-9a-f]{32}$', re.IGNORECASE)\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if UUID_RE.match(input_string):\n        return True\n\n    if allow_hex and UUID_HEX_RE.match(input_string):\n        return True\n\n    return False", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\n# UUID regex pattern for standard UUID with hyphens:\nUUID_RE = re.compile(\n    r'^[0-9a-fA-F]{8}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{12}$'\n)\n\n# UUID hex pattern (without hyphens)\nUUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if allow_hex:\n        # Accept either standard UUID format with hyphens or hex format without hyphens\n        return UUID_RE.match(input_string) is not None or UUID_HEX_RE.match(input_string) is not None\n    else:\n        # Only accept standard UUID with hyphens\n        return UUID_RE.match(input_string) is not None", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\n# UUID regex pattern: 8-4-4-4-12 hex digits with hyphens\nUUID_RE = re.compile(\n    r'^[0-9a-fA-F]{8}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{12}$'\n)\n\n# UUID hex pattern: 32 hex digits without hyphens\nUUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if UUID_RE.match(input_string):\n        return True\n\n    if allow_hex:\n        return UUID_HEX_RE.match(input_string) is not None\n\n    return False", "message": "passed", "passed": true}
{"task_id": 23, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\n# UUID regex pattern (standard 8-4-4-4-12 hexadecimal digits)\nUUID_RE = re.compile(\n    r'^[0-9a-fA-F]{8}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{4}-'\n    r'[0-9a-fA-F]{12}$'\n)\n\n# Hex-only UUID regex pattern (32 hexadecimal digits without dashes)\nUUID_HEX_RE = re.compile(r'^[0-9a-fA-F]{32}$')\n\n\ndef is_uuid(input_string: Any, allow_hex: bool = False) -> bool:\n    \"\"\"\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if UUID_RE.match(input_string):\n        return True\n\n    if allow_hex and UUID_HEX_RE.match(input_string):\n        return True\n\n    return False", "message": "passed", "passed": true}
