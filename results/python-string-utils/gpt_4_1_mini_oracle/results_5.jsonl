{"task_id": 5, "prediction_id": 0, "generation": "import unicodedata\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # Normalize to NFKD form to decompose accents and similar marks\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # Filter out all combining characters (accents), keep only base ascii chars\n    output = ''.join(c for c in normalized if not unicodedata.combining(c))\n\n    # Encode to ASCII ignoring errors (some chars may get lost), then decode back to str\n    ascii_output = output.encode('ascii', 'ignore').decode('ascii')\n\n    return ascii_output", "message": "passed", "passed": true}
{"task_id": 5, "prediction_id": 1, "generation": "import unicodedata\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # Normalize the string to NFKD form: separate characters from their diacritics\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # Filter out combining characters (diacritics)\n    ascii_string = ''.join(\n        char for char in normalized\n        if not unicodedata.combining(char)\n    )\n    \n    # Encoding to ASCII ignoring errors ensures removal of any remaining non-ascii chars\n    ascii_string = ascii_string.encode('ascii', 'ignore').decode('ascii')\n\n    return ascii_string", "message": "passed", "passed": true}
{"task_id": 5, "prediction_id": 2, "generation": "import unicodedata\n\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    normalized = unicodedata.normalize('NFKD', input_string)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n    ascii_str = ascii_bytes.decode('ascii')\n    return ascii_str", "message": "passed", "passed": true}
{"task_id": 5, "prediction_id": 3, "generation": "import unicodedata\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    # Normalize to NFKD unicode form, which decomposes accented characters into ascii + combining chars\n    normalized = unicodedata.normalize('NFKD', input_string)\n\n    # Build ascii-only string by filtering out all combining chars (category starting with 'M')\n    ascii_chars = []\n    for ch in normalized:\n        # Keep character only if it does not have a combining mark\n        if unicodedata.category(ch)[0] != 'M':\n            # Only keep ascii characters (code point < 128), ignore others\n            if ord(ch) < 128:\n                ascii_chars.append(ch)\n    return ''.join(ascii_chars)", "message": "passed", "passed": true}
{"task_id": 5, "prediction_id": 4, "generation": "import unicodedata\nfrom string_utils.validation import is_string\nfrom string_utils.errors import InvalidInputError\n\ndef asciify(input_string: str) -> str:\n    \"\"\"\n    Force string content to be ascii-only by translating all non-ascii chars into the closest possible representation\n    (eg: \u00f3 -> o, \u00cb -> E, \u00e7 -> c...).\n\n    **Bear in mind**: Some chars may be lost if impossible to translate.\n\n    *Example:*\n\n    >>> asciify('\u00e8\u00e9\u00f9\u00fa\u00f2\u00f3\u00e4\u00e5\u00eb\u00fd\u00f1\u00c5\u00c0\u00c1\u00c7\u00cc\u00cd\u00d1\u00d3\u00cb') # returns 'eeuuooaaeynAAACIINOE'\n\n    :param input_string: String to convert\n    :return: Ascii utf-8 string\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n    \n    # Normalize the input string to NFKD form, which separates characters from their diacritics\n    normalized = unicodedata.normalize('NFKD', input_string)\n    # Encode to ASCII ignoring errors (drops characters that cannot be represented in ASCII)\n    ascii_bytes = normalized.encode('ascii', 'ignore')\n    # Decode back to string and return\n    return ascii_bytes.decode('ascii')", "message": "passed", "passed": true}
