{"task_id": 19, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    # Check if the input is a non-empty string with at least one non-space character\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    # Remove spaces and hyphens as they can be included in card number formatting\n    sanitized = re.sub(r'[\\s-]', '', input_string)\n\n    # All patterns start with ^ and end with $ to match entire string\n    # VISA: Visa cards start with 4 and have 13 or 16 digits.\n    VISA_RE = r'^4\\d{12}(?:\\d{3})?$'\n\n    # MASTERCARD: MasterCard numbers start with 51 through 55 or 2221 through 2720 and have 16 digits.\n    MASTERCARD_RE = r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$'\n\n    # AMERICAN_EXPRESS: Amex starts with 34 or 37 and have 15 digits.\n    AMERICAN_EXPRESS_RE = r'^3[47]\\d{13}$'\n\n    # DINERS_CLUB: Diners Club cards start with 300-305, 36 or 38; have 14 digits.\n    DINERS_CLUB_RE = r'^(3(0[0-5]|[68]\\d)\\d{11})$'\n\n    # DISCOVER: Discover cards start with 6011, 622126-622925, 644-649, 65; have 16 digits.\n    DISCOVER_RE = (\n        r'^(6011\\d{12}|65\\d{14}|64[4-9]\\d{13}|'\n        r'6221(2[6-9]|[3-9]\\d)\\d{10}|'\n        r'622[2-8]\\d{11}|'\n        r'6229([01]\\d|2[0-5])\\d{10})$'\n    )\n\n    # JCB: JCB cards start with 3528-3589; have 16 digits.\n    JCB_RE = r'^(35(2[89]|[3-8]\\d)\\d{12})$'\n\n    patterns = {\n        'VISA': VISA_RE,\n        'MASTERCARD': MASTERCARD_RE,\n        'AMERICAN_EXPRESS': AMERICAN_EXPRESS_RE,\n        'DINERS_CLUB': DINERS_CLUB_RE,\n        'DISCOVER': DISCOVER_RE,\n        'JCB': JCB_RE,\n    }\n\n    # Normalize card_type parameter to uppercase if given\n    if card_type:\n        card_type = card_type.upper()\n        pattern = patterns.get(card_type)\n        if not pattern:\n            # Unsupported card type, reject\n            return False\n        if not re.fullmatch(pattern, sanitized):\n            return False\n    else:\n        # If no card_type specified, check against all supported regexes\n        if not any(re.fullmatch(pat, sanitized) for pat in patterns.values()):\n            return False\n\n    # Luhn algorithm to validate the credit card number\n    def luhn_check(card_number: str) -> bool:\n        total = 0\n        num_digits = len(card_number)\n        parity = num_digits % 2\n        for i, digit_char in enumerate(card_number):\n            digit = int(digit_char)\n            if i % 2 == parity:\n                digit *= 2\n                if digit > 9:\n                    digit -= 9\n            total += digit\n        return total % 10 == 0\n\n    # Check Luhn checksum\n    if not luhn_check(sanitized):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 742, in <module>\n  File \"<string>\", line 741, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    # First, check that input_string is a non-empty string with at least one non-space char\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    # Normalize input by removing spaces and hyphens - common formatting in credit card numbers\n    normalized = re.sub(r'[\\s\\-]', '', input_string)\n\n    if not normalized.isdigit():\n        return False\n\n    # Dictionary of card type regex patterns (based on standard BIN prefixes and length)\n    card_patterns = {\n        'VISA': re.compile(r'^4\\d{12}(\\d{3})?(\\d{3})?$'),  # Visa 13,16,19 digits\n        'MASTERCARD': re.compile(\n            r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$'),  # MasterCard 16 digits (including new series 2221-2720)\n        'AMERICAN_EXPRESS': re.compile(r'^3[47]\\d{13}$'),  # Amex 15 digits\n        'DINERS_CLUB': re.compile(r'^(3(0[0-5]|[68]\\d)\\d{11})$'),  # Diners Club 14 digits\n        'DISCOVER': re.compile(r'^(6(011|5\\d{2}|4[4-9]\\d)\\d{12}|622(12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9([01]\\d|2[0-5]))\\d{10})$'), # Discover 16 digits with complex prefixes\n        'JCB': re.compile(r'^(35(2[89]|[3-8]\\d)\\d{12})$'),  # JCB 16 digits\n    }\n\n    def luhn_check(card_number: str) -> bool:\n        # Implement Luhn algorithm to verify card number validity\n        total = 0\n        num_digits = len(card_number)\n        oddeven = num_digits & 1\n\n        for count in range(num_digits):\n            digit = int(card_number[count])\n\n            if not ((count & 1) ^ oddeven):\n                digit *= 2\n                if digit > 9:\n                    digit -= 9\n\n            total += digit\n\n        return (total % 10) == 0\n\n    # If a card_type is specified, verify against that pattern and Luhn\n    if card_type:\n        card_type_upper = card_type.upper()\n        if card_type_upper not in card_patterns:\n            return False\n        if not card_patterns[card_type_upper].match(normalized):\n            return False\n        return luhn_check(normalized)\n\n    # If no card_type specified, try all patterns\n    for pattern in card_patterns.values():\n        if pattern.match(normalized) and luhn_check(normalized):\n            return True\n\n    return False", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 723, in <module>\n  File \"<string>\", line 722, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 2, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove spaces and dashes - common formatting in credit card numbers\n    cc = input_string.replace(' ', '').replace('-', '')\n\n    # If after cleanup it's not all digits, immediately fail\n    if not cc.isdigit():\n        return False\n\n    # Define regex patterns for card types\n    # Source for patterns derived from common credit card formats:\n    # VISA: starts with 4, length 13 or 16\n    # MASTERCARD: starts with 51-55 or 2221-2720, length 16\n    # AMERICAN_EXPRESS: starts with 34 or 37, length 15\n    # DINERS_CLUB: starts with 300-305, 36 or 38, length 14\n    # DISCOVER: starts with 6011, 622126\u2013622925, 644-649, or 65, length 16\n    # JCB: starts with 3528-3589, length 16\n\n    card_patterns = {\n        'VISA': re.compile(r'^4(\\d{12}|\\d{15})$'),\n        'MASTERCARD': re.compile(r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7([01]\\d{12}|20\\d{12})))$'),\n        'AMERICAN_EXPRESS': re.compile(r'^3[47]\\d{13}$'),\n        'DINERS_CLUB': re.compile(r'^(3(0[0-5]|[68]\\d)\\d{11})$'),\n        'DISCOVER': re.compile(r'^(6011\\d{12}|65\\d{14}|64[4-9]\\d{13}|622(12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9([01]\\d|2[0-5]))\\d{10})$'),\n        'JCB': re.compile(r'^(35(2[89]|[3-8]\\d)\\d{12})$'),\n    }\n\n    # Normalize card_type argument (case insensitive, underscores/dashes allowed in input)\n    if card_type is not None:\n        ct = card_type.upper().replace('-', '_')\n        if ct not in card_patterns:\n            return False\n        pattern = card_patterns[ct]\n        if not pattern.match(cc):\n            return False\n    else:\n        # Check against all patterns; if any matches, continue, else fail\n        if not any(pattern.match(cc) for pattern in card_patterns.values()):\n            return False\n\n    # Perform Luhn checksum validation\n    def luhn_checksum(card_number: str) -> bool:\n        total = 0\n        num_digits = len(card_number)\n        parity = num_digits % 2\n\n        for i, digit_char in enumerate(card_number):\n            digit = int(digit_char)\n            if i % 2 == parity:\n                digit *= 2\n                if digit > 9:\n                    digit -= 9\n            total += digit\n\n        return total % 10 == 0\n\n    return luhn_checksum(cc)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 727, in <module>\n  File \"<string>\", line 726, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 3, "generation": "from typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n    card_number = input_string.replace(' ', '').replace('-', '')\n    if not card_number.isdigit():\n        return False\n\n    # Define card type regex patterns\n    # Regex explanations:\n    # VISA: Starts with 4, length 13 or 16 or 19\n    # MASTERCARD: Starts 51-55 or 2221-2720, length 16\n    # AMERICAN_EXPRESS: Starts 34 or 37, length 15\n    # DINERS_CLUB: Starts with 300-305, 36 or 38, length 14\n    # DISCOVER: Starts with 6011, 622126\u2013622925, 644-649, 65, length 16 or 19\n    # JCB: Starts with 3528-3589, length 16-19\n\n    import re\n\n    patterns = {\n        \"VISA\": r'^4(\\d{12}|\\d{15}|\\d{18})$',\n        \"MASTERCARD\": r'^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[01]\\d{12}|720\\d{12}))$',\n        \"AMERICAN_EXPRESS\": r'^3[47]\\d{13}$',\n        \"DINERS_CLUB\": r'^(3(0[0-5]|[68]\\d)\\d{11})$',\n        \"DISCOVER\": r'^(6011\\d{12}|65\\d{14}|64[4-9]\\d{13}|622(12[6-9]|1[3-9]\\d|[2-8]\\d\\d|9([0-1]\\d|2[0-5]))\\d{10})$',\n        \"JCB\": r'^(35(2[89]|[3-8]\\d)\\d{12,15})$'\n    }\n\n    # Normalize card_type input\n    if card_type is not None:\n        card_type = card_type.strip().upper()\n        if card_type not in patterns:\n            return False\n        pattern = patterns[card_type]\n        if not re.match(pattern, card_number):\n            return False\n    else:\n        # Check across all patterns\n        if not any(re.match(p, card_number) for p in patterns.values()):\n            return False\n\n    # Luhn algorithm check to verify the card number checksum\n    def luhn_checksum(card_num: str) -> bool:\n        total = 0\n        reverse_digits = card_num[::-1]\n        for i, digit in enumerate(reverse_digits):\n            n = int(digit)\n            if i % 2 == 1:\n                n *= 2\n                if n > 9:\n                    n -= 9\n            total += n\n        return total % 10 == 0\n\n    return luhn_checksum(card_number)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 721, in <module>\n  File \"<string>\", line 720, in test_2\nAssertionError\n", "passed": false}
{"task_id": 19, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_credit_card(input_string: Any, card_type: str = None) -> bool:\n    \"\"\"\n    Checks if a string is a valid credit card number.\n    If card type is provided then it checks against that specific type only,\n    otherwise any known credit card number will be accepted.\n\n    Supported card types are the following:\n\n    - VISA\n    - MASTERCARD\n    - AMERICAN_EXPRESS\n    - DINERS_CLUB\n    - DISCOVER\n    - JCB\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param card_type: Card type. Default to None (any card).\n    :type card_type: str\n\n    :return: True if credit card, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    s = input_string.replace(' ', '').replace('-', '')\n    if not s.isdigit():\n        return False\n\n    card_type = card_type.upper() if isinstance(card_type, str) else None\n\n    # Card type regex patterns (with anchors)\n    patterns = {\n        \"VISA\": r\"^4\\d{12}(\\d{3})?$\",\n        \"MASTERCARD\": r\"^(5[1-5]\\d{14}|2(2[2-9]\\d{12}|[3-6]\\d{13}|7[0-1]\\d{12}|720\\d{12}))$\",\n        \"AMERICAN_EXPRESS\": r\"^3[47]\\d{13}$\",\n        \"DINERS_CLUB\": r\"^(3(0[0-5]|[68]\\d)\\d{11})$\",\n        \"DISCOVER\": r\"^(6(011|5\\d{2})\\d{12})$\",\n        \"JCB\": r\"^(35(2[89]|[3-8]\\d)\\d{12})$\"\n    }\n\n    def luhn_check(card_number: str) -> bool:\n        total = 0\n        num_digits = len(card_number)\n        oddeven = num_digits & 1\n        for count in range(num_digits):\n            digit = int(card_number[count])\n            if not ((count & 1) ^ oddeven):\n                digit = digit * 2\n                if digit > 9:\n                    digit -= 9\n            total += digit\n        return total % 10 == 0\n\n    if card_type:\n        pattern = patterns.get(card_type)\n        if pattern is None:\n            # Unknown card type -> return False since we can't validate it\n            return False\n        if not re.fullmatch(pattern, s):\n            return False\n    else:\n        # If no card type specified, check if it matches any known pattern\n        if not any(re.fullmatch(p, s) for p in patterns.values()):\n            return False\n\n    return luhn_check(s)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 713, in <module>\n  File \"<string>\", line 712, in test_2\nAssertionError\n", "passed": false}
