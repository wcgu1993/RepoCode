{"task_id": 14, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n    input_string = input_string.strip()\n    if not input_string:\n        return False\n\n    # Regex pattern to match signed/unsigned integers, decimals, and scientific notation\n    # Explanation:\n    # ^[+-]?           -> optional sign at start\n    # (                -> group for number\n    #   (\\d+(\\.\\d*)?)  -> integer or decimal number (e.g. 123, 123.45, 123.)\n    #  |               -> or\n    #   (\\.\\d+)        -> number starting with a dot but followed by digits (e.g. .45)\n    # )\n    # ([eE][+-]?\\d+)?$ -> optional scientific notation part\n    \n    number_re = re.compile(r'^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][+-]?\\d+)?$')\n\n    return bool(number_re.match(input_string))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 742, in <module>\n  File \"<string>\", line 741, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Strip whitespace\n    s = input_string.strip()\n    if not s:\n        return False\n\n    # Regex pattern for numbers with optional sign, decimal, and scientific notation:\n    pattern = re.compile(\n        r'^[+-]?'                           # optional sign\n        r'(?:\\d+\\.?\\d*|\\.\\d+)'             # decimal or integer number\n        r'(?:[eE][+-]?\\d+)?$'              # optional exponent part\n    )\n    return bool(pattern.match(s))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 2, "generation": "import re\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    # Remove leading/trailing spaces\n    s = input_string.strip()\n    if s == '':\n        return False\n\n    # Regex for matching a number with optional sign, decimal part, and scientific notation\n    number_regex = re.compile(\n        r\"\"\"^[+-]?                        # optional sign\n             (?:                         # non-capturing group for the main number\n                 (?:\\d+\\.\\d*)            # digits, decimal point, optional digits\n                 |                       # OR\n                 (?:\\.\\d+)               # decimal point, digits\n                 |                       # OR\n                 (?:\\d+)                 # integer digits only\n             )\n             (?:[eE][+-]?\\d+)?           # optional exponent part\n             $\"\"\",\n        re.VERBOSE\n    )\n    return bool(number_regex.match(s))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 745, in <module>\n  File \"<string>\", line 744, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 3, "generation": "import re\nfrom typing import Optional\n\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Trim whitespace at start and end\n    s = input_string.strip()\n    if s == '':\n        return False\n    \n    # Define a regex pattern for matching numbers including:\n    # - optional leading sign (+ or -)\n    # - integer or decimal number (digits possibly with a dot)\n    # - optional exponent part with 'e' or 'E' and optional sign and digits\n    number_pattern = re.compile(\n        r\"\"\"^[+-]?           # optional sign\n            (?:             # non-capturing group for integer or decimal\n                (?:\\d+\\.\\d*)|   # digits dot optional digits\n                (?:\\.\\d+)|      # dot digits\n                (?:\\d+)         # digits only\n            )\n            (?:[eE][+-]?\\d+)?  # optional exponent\n            $\"\"\",\n        re.VERBOSE,\n    )\n\n    return bool(number_pattern.match(s))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 750, in <module>\n  File \"<string>\", line 749, in test_14\nAssertionError\n", "passed": false}
{"task_id": 14, "prediction_id": 4, "generation": "import re\nfrom typing import Any\n\ndef is_number(input_string: str) -> bool:\n    \"\"\"\n    Checks if a string is a valid number.\n\n    The number can be a signed (eg: +1, -2, -3.3) or unsigned (eg: 1, 2, 3.3) integer or double\n    or use the \"scientific notation\" (eg: 1e5).\n\n    *Examples:*\n\n    >>> is_number('42') # returns true\n    >>> is_number('19.99') # returns true\n    >>> is_number('-9.12') # returns true\n    >>> is_number('1e3') # returns true\n    >>> is_number('1 2 3') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if the string represents a number, false otherwise\n    \"\"\"\n\n    if not isinstance(input_string, str):\n        return False\n\n    # Strip leading/trailing spaces\n    s = input_string.strip()\n    if not s:\n        return False\n\n    # This regex matches signed/unsigned integers or decimals with optional scientific notation:\n    # Explanation:\n    # ^\\s*            : start, allowing leading spaces (already stripped, but to be safe)\n    # [+-]?           : optional sign\n    # (?:             : non-capturing group for the main number part\n    #   \\d+(\\.\\d*)?   : digits with optional decimal point and fractional digits\n    #   |             : OR\n    #   \\.\\d+         : decimal starting with decimal point (e.g. .5)\n    # )\n    # ([eE][+-]?\\d+)? : optional scientific notation with optional sign and digits\n    # \\s*$            : trailing spaces (already stripped)\n    \n    number_regex = re.compile(\n        r'^[+-]?('\n        r'(\\d+(\\.\\d*)?)|(\\.\\d+)'\n        r')([eE][+-]?\\d+)?$'\n    )\n\n    return bool(number_regex.match(s))", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 751, in <module>\n  File \"<string>\", line 750, in test_14\nAssertionError\n", "passed": false}
