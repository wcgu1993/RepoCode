{"task_id": 21, "prediction_id": 0, "generation": "import re\nfrom typing import Any\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    # Must contain at least one separator\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Valid characters: letters (a-zA-Z), digits (0-9), and the separator\n    # No other characters allowed\n    # Build regex dynamically based on separator escaped\n    sep_escaped = re.escape(separator)\n    pattern = f'^[a-zA-Z0-9{sep_escaped}]+$'\n    if not re.match(pattern, input_string):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1336, in <module>\n  File \"<string>\", line 1335, in test_236\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 1, "generation": "import re\nfrom typing import Any\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    # must contain the separator at least once\n    if separator not in input_string:\n        return False\n\n    # must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Build regex pattern:\n    # - allowed characters: letters (a-zA-Z), digits (0-9), and the separator\n    # - separator cannot appear consecutively? Not specified, so allow consecutive separators.\n    #\n    # Pattern: only letters, digits and separator allowed\n    pattern = r'^[a-zA-Z0-9' + re.escape(separator) + r']+$'\n\n    if not re.match(pattern, input_string):\n        return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1338, in <module>\n  File \"<string>\", line 1337, in test_236\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 2, "generation": "from typing import Any\n\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    # Must contain at least one separator\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Split by separator and check each part\n    parts = input_string.split(separator)\n    if any(part == '' for part in parts):\n        # Disallow consecutive separators or separators at ends\n        return False\n\n    # Allowed characters: letters and digits only\n    for ch in input_string:\n        if ch == separator:\n            continue\n        if not (ch.isalpha() or ch.isdigit()):\n            return False\n\n    # Also ensure at least one letter (optional, but commonly required)\n    # The description doesn't mandate this, so it's not enforced.\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 712, in <module>\n  File \"<string>\", line 711, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 3, "generation": "import re\nfrom typing import Any\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    # Validate type and non-empty string\n    if not isinstance(input_string, str) or input_string.strip() == '':\n        return False\n\n    # Check separator is non-empty string\n    if not isinstance(separator, str) or separator == '':\n        return False\n\n    # Must contain the separator at least once\n    if separator not in input_string:\n        return False\n\n    # Must not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Build regex pattern dynamically from separator escaped for regex\n    # Pattern explanation:\n    # - start of string ^\n    # - sequence of group (one or more letters/digits) followed by separator, repeated one or more times\n    # - then final group of letters/digits\n    # - all characters must be [a-zA-Z0-9] or separator\n    # This ensures:\n    # - composed of letters, digits, and separators only\n    # - contains at least one separator (already checked explicitly)\n    # - does not start with digit (checked explicitly)\n    escaped_sep = re.escape(separator)\n    pattern = rf'^[a-zA-Z0-9]+({escaped_sep}[a-zA-Z0-9]+)+$'\n\n    return re.match(pattern, input_string) is not None", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 711, in <module>\n  File \"<string>\", line 710, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 4, "generation": "from typing import Any\n\n\ndef is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not isinstance(input_string, str):\n        return False\n\n    if not input_string:\n        return False\n\n    if separator not in input_string:\n        return False\n\n    # Check it does not start with a digit\n    if input_string[0].isdigit():\n        return False\n\n    # Split by separator and check all tokens contain only letters and digits, no empty segments allowed\n    parts = input_string.split(separator)\n\n    # Empty parts means consecutive separators or separator at start/end -> invalid snake case\n    if any(part == '' for part in parts):\n        return False\n\n    for part in parts:\n        if not part.isalnum():\n            return False\n\n    return True", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 706, in <module>\n  File \"<string>\", line 705, in test_10\nAssertionError\n", "passed": false}
