{"task_id": 300, "prediction_id": 0, "generation": "from typing import Iterable, Dict\nfrom .generic import Balance\nfrom .accounts import Account\nfrom .journaling import JournalEntry\nfrom .general_ledger_program import GeneralLedger\nfrom .ledger import Ledger\nfrom ..commons.zeitgeist import DateRange\nfrom ..commons.numbers import Quantity, Amount\n\n\ndef build_general_ledger(\n    period: DateRange, journal: Iterable[JournalEntry[_T]], initial: InitialBalances\n) -> GeneralLedger[_T]:\n    \"\"\"\n    Builds a general ledger.\n\n    :param period: Accounting period.\n    :param journal: All available journal entries.\n    :param initial: Opening balances for terminal accounts, if any.\n    :return: A :py:class:`GeneralLedger` instance.\n    \"\"\"\n    # Prepare ledgers for each account, initialized with the given initial balances or zero balances\n    ledgers: Dict[Account, Ledger[_T]] = {\n        account: Ledger(account=account, initial=balance)\n        for account, balance in initial.items()\n    }\n\n    # Iterate over all journal entries\n    for entry in journal:\n        # For each posting in the journal entry, filter by the accounting period\n        for posting in entry.postings:\n            # Consider postings only if the date is within the accounting period\n            if period.start <= posting.date <= period.end:\n                # Get the ledger for the posting's account or create a new one with zero initial balance\n                ledger = ledgers.get(posting.account)\n                if ledger is None:\n                    ledger = Ledger(account=posting.account, initial=Balance(Quantity(0)))\n                    ledgers[posting.account] = ledger\n                # Add this posting to the ledger (adds a ledger entry and updates balance)\n                ledger.add(posting)\n\n    # Return the built general ledger\n    return GeneralLedger(period=period, ledgers=ledgers)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 300, "prediction_id": 1, "generation": "from typing import Dict, Iterable, TypeVar\nfrom .generic import Balance\nfrom .accounts import Account\nfrom .journaling import JournalEntry, Posting\nfrom . import GeneralLedger, Ledger, InitialBalances\nfrom ..commons.zeitgeist import DateRange\n\n_T = TypeVar(\"_T\")\n\n\ndef build_general_ledger(\n    period: DateRange, journal: Iterable[JournalEntry[_T]], initial: InitialBalances\n) -> GeneralLedger[_T]:\n    \"\"\"\n    Builds a general ledger.\n\n    :param period: Accounting period.\n    :param journal: All available journal entries.\n    :param initial: Opening balances for terminal accounts, if any.\n    :return: A :py:class:`GeneralLedger` instance.\n    \"\"\"\n    # Prepare the ledgers dictionary keyed by Account\n    ledgers: Dict[Account, Ledger[_T]] = {}\n\n    # Initialize ledgers for all accounts present in initial balances\n    for account, balance in initial.items():\n        ledgers[account] = Ledger(account=account, initial=balance)\n\n    # Process each journal entry\n    for entry in journal:\n        # For each posting in the journal entry:\n        for posting in entry.postings:\n            account = posting.account\n\n            # If the ledger for the account does not exist, create it with zero initial balance\n            if account not in ledgers:\n                # Create a zero Balance for initial value\n                zero_balance = Balance(0)\n                ledgers[account] = Ledger(account=account, initial=zero_balance)\n\n            # Add the posting to the ledger\n            ledgers[account].add(posting)\n\n    # Create and return the GeneralLedger instance\n    return GeneralLedger(period=period, ledgers=ledgers)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 300, "prediction_id": 2, "generation": "from typing import Iterable, Dict, TypeVar\nfrom ..commons.zeitgeist import DateRange\nfrom .accounts import Account\nfrom .generic import Balance\nfrom .journaling import JournalEntry, Posting\nfrom . import GeneralLedger, Ledger, InitialBalances, Quantity\n\n_T = TypeVar(\"_T\")\n\n\ndef build_general_ledger(\n    period: DateRange, journal: Iterable[JournalEntry[_T]], initial: InitialBalances\n) -> GeneralLedger[_T]:\n    \"\"\"\n    Builds a general ledger.\n\n    :param period: Accounting period.\n    :param journal: All available journal entries.\n    :param initial: Opening balances for terminal accounts, if any.\n    :return: A :py:class:`GeneralLedger` instance.\n    \"\"\"\n    # Create a dictionary to hold ledgers for each account\n    ledgers: Dict[Account, Ledger[_T]] = {}\n\n    # Initialize ledgers with initial balances\n    for account, balance in initial.items():\n        ledgers[account] = Ledger(account=account, initial=balance)\n\n    # Iterate all journal entries within the accounting period\n    # and add postings to corresponding ledgers\n    for journal_entry in journal:\n        # Skip entries outside period to avoid unnecessary ledger entries\n        # We do this by checking if at least one posting date is in period\n        # However, postings might have individual dates, so check postings explicitly\n        for posting in journal_entry.postings:\n            # Skip if posting date not in period\n            if posting.date not in period:\n                continue\n\n            acct = posting.account\n            # If ledger for account doesn't exist yet, create with zero initial balance\n            if acct not in ledgers:\n                ledgers[acct] = Ledger(account=acct, initial=Balance(Quantity(0)))\n\n            # Add the posting to the ledger; this updates balances and entries\n            ledgers[acct].add(posting)\n\n    # Build and return the general ledger with all ledgers for the period\n    return GeneralLedger(period=period, ledgers=ledgers)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 300, "prediction_id": 3, "generation": "from typing import Iterable, Dict\nfrom .generic import Balance\nfrom .accounts import Account\nfrom .journaling import JournalEntry, Posting\nfrom ..commons.zeitgeist import DateRange\nfrom .ledger import GeneralLedger, Ledger, InitialBalances, LedgerEntry\nfrom ..commons.numbers import Quantity\n\n\ndef build_general_ledger(\n    period: DateRange, journal: Iterable[JournalEntry[_T]], initial: InitialBalances\n) -> GeneralLedger[_T]:\n    \"\"\"\n    Builds a general ledger.\n\n    :param period: Accounting period.\n    :param journal: All available journal entries.\n    :param initial: Opening balances for terminal accounts, if any.\n    :return: A :py:class:`GeneralLedger` instance.\n    \"\"\"\n    # Start with an empty dict of ledgers keyed by Account, initialized with initial balances.\n    ledgers: Dict[Account, Ledger[_T]] = {}\n\n    # Initialize ledgers with initial balances (if any)\n    for account, balance in initial.items():\n        ledgers[account] = Ledger(account=account, initial=balance)\n\n    # Iterate through each journal entry and each posting within it.\n    for journal_entry in journal:\n        for posting in journal_entry.postings:\n            # Only consider postings with date inside the period\n            if not period.includes(posting.date):\n                continue\n\n            account = posting.account\n\n            # If ledger for this account does not exist, create one with zero initial balance\n            if account not in ledgers:\n                ledgers[account] = Ledger(account=account, initial=Balance(Quantity(0)))\n\n            # Add this posting as a ledger entry\n            ledgers[account].add(posting)\n\n    # Build and return the GeneralLedger object\n    return GeneralLedger(period=period, ledgers=ledgers)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 300, "prediction_id": 4, "generation": "from typing import Iterable, Dict\nfrom ..commons.zeitgeist import DateRange\nfrom .accounts import Account\nfrom .generic import Balance\nfrom .journaling import JournalEntry, Posting\nfrom dataclasses import dataclass\nfrom decimal import Decimal\nfrom .generic import Quantity\nfrom .ledger import Ledger, LedgerEntry  # Assuming these classes are in .ledger module\nfrom .general_ledger import GeneralLedger, InitialBalances, _T\n\n\ndef build_general_ledger(\n    period: DateRange, journal: Iterable[JournalEntry[_T]], initial: InitialBalances\n) -> GeneralLedger[_T]:\n    \"\"\"\n    Builds a general ledger.\n\n    :param period: Accounting period.\n    :param journal: All available journal entries.\n    :param initial: Opening balances for terminal accounts, if any.\n    :return: A :py:class:`GeneralLedger` instance.\n    \"\"\"\n    # Initialize ledger dictionary with given initial balances for accounts\n    ledgers: Dict[Account, Ledger[_T]] = {}\n\n    # Create ledger for each account in initial balances, with its initial balance\n    for account, balance in initial.items():\n        ledgers[account] = Ledger(account=account, initial=balance)\n\n    # Iterate over all journal entries\n    for entry in journal:\n        # Only consider postings within the given period\n        for posting in entry.postings:\n            if period.contains(posting.date):\n                # Get or create ledger for posting account\n                ledger = ledgers.get(posting.account)\n                if ledger is None:\n                    # If account has no initial balance, start with zero balance\n                    zero_balance = Balance(Quantity(Decimal(\"0\")))\n                    ledger = Ledger(account=posting.account, initial=zero_balance)\n                    ledgers[posting.account] = ledger\n\n                # Add posting as a ledger entry\n                ledger.add(posting)\n\n    # Build and return GeneralLedger instance with accumulated ledgers\n    return GeneralLedger(period=period, ledgers=ledgers)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 182, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
