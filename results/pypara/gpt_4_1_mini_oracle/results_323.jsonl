{"task_id": 323, "prediction_id": 0, "generation": "import datetime\nfrom decimal import Decimal\nfrom typing import Optional\n\nfrom .commons.zeitgeist import Date\n\ndef dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Adjust start day: if day is 31, set to 30\n    start_day = 30 if start.day == 31 else start.day\n    # Adjust asof day: if day is 31, set to 1 and increment month by 1, adjusting year if necessary\n    if asof.day == 31:\n        # Increment month, adjusting year if month = 12\n        if asof.month == 12:\n            asof_adjusted = datetime.date(asof.year + 1, 1, 1)\n        else:\n            asof_adjusted = datetime.date(asof.year, asof.month + 1, 1)\n    else:\n        asof_adjusted = asof\n\n    nod = (asof_adjusted.day - start_day) + 30 * (asof_adjusted.month - start.month) + 360 * (asof_adjusted.year - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    import datetime\n    ^^^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 323, "prediction_id": 1, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Adjust start day:\n    start_day = 30 if start.day == 31 else start.day\n\n    # Adjust asof day: if asof day is 31, change it to 1 and move month plus one (roll-forward)\n    if asof.day == 31:\n        # Move to next month\n        if asof.month == 12:\n            asof_year = asof.year + 1\n            asof_month = 1\n        else:\n            asof_year = asof.year\n            asof_month = asof.month + 1\n\n        asof_day = 1\n\n        # Construct new asof date safely (handle cases like month with less days)\n        try:\n            asof = datetime.date(asof_year, asof_month, asof_day)\n        except ValueError:\n            # If day 1 is invalid (should never happen), fallback to last day of month\n            asof = datetime.date(asof_year, asof_month, calendar.monthrange(asof_year, asof_month)[1])\n    else:\n        asof_day = asof.day\n\n    # Compute number of days\n    nod = (asof_day - start_day) + 30 * (asof.month - start.month) + 360 * (asof.year - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "passed", "passed": true}
{"task_id": 323, "prediction_id": 2, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # For \"30E+/360\":\n    # - If start.day == 31, adjust start day to 30 (like 30E/360)\n    # - If asof.day == 31, then asof.day becomes 1 and the month is incremented by 1 (rolling over)\n    # Then: compute nod = (asof.day - start.day) + 30*(asof.month - start.month) + 360*(asof.year - start.year)\n    # Return nod / 360 as Decimal.\n\n    from decimal import Decimal\n    import datetime\n\n    # Adjust start date if day == 31\n    if start.day == 31:\n        start = datetime.date(start.year, start.month, 30)\n\n    # Adjust asof date if day == 31\n    if asof.day == 31:\n        # Roll asof day to 1 and increment month (with year rollover)\n        year = asof.year\n        month = asof.month + 1\n        if month == 13:\n            month = 1\n            year += 1\n        asof = datetime.date(year, month, 1)\n\n    nod = (asof.day - start.day) + 30 * (asof.month - start.month) + 360 * (asof.year - start.year)\n    return Decimal(nod) / Decimal(360)", "message": "passed", "passed": true}
{"task_id": 323, "prediction_id": 3, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Adjust start day:\n    s_day = 30 if start.day == 31 else start.day\n    \n    # Adjust asof day according to 30E+ rule:\n    if asof.day == 31:\n        # If asof day is 31, set to 1 and increment month/year accordingly\n        if asof.month == 12:\n            a_year = asof.year + 1\n            a_month = 1\n        else:\n            a_year = asof.year\n            a_month = asof.month + 1\n        a_day = 1\n        asof_adj = datetime.date(a_year, a_month, a_day)\n    else:\n        asof_adj = datetime.date(asof.year, asof.month, asof.day)\n\n    # Calculate number of days according to 30E+/360\n    nod = (asof_adj.day - s_day) + 30 * (asof_adj.month - start.month) + 360 * (asof_adj.year - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "passed", "passed": true}
{"task_id": 323, "prediction_id": 4, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Adjust the start day if it is 31 -> 30\n    if start.day == 31:\n        start = datetime.date(start.year, start.month, 30)\n\n    # Adjust the asof day:\n    # If asof.day == 31, then set asof.day = 1 and increment month by 1\n    if asof.day == 31:\n        # Move to the first day of the next month\n        if asof.month == 12:\n            asof = datetime.date(asof.year + 1, 1, 1)\n        else:\n            asof = datetime.date(asof.year, asof.month + 1, 1)\n\n    nod = (asof.day - start.day) + 30 * (asof.month - start.month) + 360 * (asof.year - start.year)\n    return nod / Decimal(360)", "message": "passed", "passed": true}
