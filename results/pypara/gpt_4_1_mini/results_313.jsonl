{"task_id": 313, "prediction_id": 0, "generation": "from typing import Callable, Optional, Set\nfrom decimal import Decimal\n\nfrom . import DCC, DCCRegistry\nfrom .currencies import Currency\nfrom .commons.zeitgeist import Date\nfrom .typing import DCFC  # Assuming DCFC is imported or aliased properly\n\n\ndef dcc(name: str, altnames: Optional[Set[str]] = None, ccys: Optional[Set[Currency]] = None) -> Callable[[DCFC], DCFC]:\n    \"\"\"\n    Registers a day count fraction calculator under the given names and alternative names (if any).\n\n    :param name: The name of the day count convention.\n    :param altnames: A set of alternative names of the day count convention, if any.\n    :param ccys: A set of currencies which are known to use this convention by default, if any.\n    :return: Registered day count fraction calculation function.\n    \"\"\"\n    altnames_set: Set[str] = altnames or set()\n    ccys_set: Set[Currency] = ccys or set()\n\n    def decorator(func: DCFC) -> DCFC:\n        # Create DCC instance with provided parameters\n        dcc_instance = DCC(\n            name=name,\n            altnames=altnames_set,\n            currencies=ccys_set,\n            calculate_fraction_method=func,\n        )\n\n        # Register the DCC instance into the global registry\n        DCCRegistry.register(dcc_instance)\n\n        # Return the original function unmodified\n        return func\n\n    return decorator", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 389, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 313, "prediction_id": 1, "generation": "from typing import Callable, Optional, Set\nfrom decimal import Decimal\nfrom . import DCC, DCCRegistry, Currency, _as_ccys\nfrom .commons.zeitgeist import Date\n\n\ndef dcc(name: str, altnames: Optional[Set[str]] = None, ccys: Optional[Set[Currency]] = None) -> Callable[[Callable[[Date, Date, Date, Optional[Decimal]], Decimal]], Callable[[Date, Date, Date, Optional[Decimal]], Decimal]]:\n    \"\"\"\n    Registers a day count fraction calculator under the given names and alternative names (if any).\n\n    :param name: The name of the day count convention.\n    :param altnames: A set of alternative names of the day count convention, if any.\n    :param ccys: A set of currencies which are known to use this convention by default, if any.\n    :return: Registered day count fraction calculation function.\n    \"\"\"\n\n    # Normalize inputs\n    main_name = name.strip()\n    alt_names = set(altnames) if altnames else set()\n    alt_names = {a.strip() for a in alt_names if a.strip() and a.strip() != main_name}\n    currencies = _as_ccys(ccys) if ccys else set()\n\n    def decorator(func: Callable[[Date, Date, Date, Optional[Decimal]], Decimal]) -> Callable[[Date, Date, Date, Optional[Decimal]], Decimal]:\n        # Create a DCC instance\n        dcc_instance = DCC(\n            name=main_name,\n            altnames=alt_names,\n            currencies=currencies,\n            calculate_fraction_method=func,\n        )\n        # Register it on the global registry\n        DCCRegistry.register(dcc_instance)\n        # Return the original function unmodified\n        return func\n\n    return decorator", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 388, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 313, "prediction_id": 2, "generation": "from typing import Callable, Optional, Set\nfrom decimal import Decimal\n\nfrom .currencies import Currency\nfrom .dcc import DCC, DCCRegistry, DCFC\n\n\ndef dcc(name: str, altnames: Optional[Set[str]] = None, ccys: Optional[Set[Currency]] = None) -> Callable[[DCFC], DCFC]:\n    \"\"\"\n    Registers a day count fraction calculator under the given names and alternative names (if any).\n\n    :param name: The name of the day count convention.\n    :param altnames: A set of alternative names of the day count convention, if any.\n    :param ccys: A set of currencies which are known to use this convention by default, if any.\n    :return: Registered day count fraction calculation function.\n    \"\"\"\n    altnames = altnames or set()\n    ccys = ccys or set()\n\n    def decorator(func: DCFC) -> DCFC:\n        # Create a DCC instance\n        dcc_instance = DCC(\n            name=name,\n            altnames=altnames,\n            currencies=ccys,\n            calculate_fraction_method=func,\n        )\n\n        # Register the DCC instance in the global registry\n        DCCRegistry.register(dcc_instance)\n\n        # Return the original function unchanged\n        return func\n\n    return decorator", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 389, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 313, "prediction_id": 3, "generation": "from typing import Callable, Optional, Set\nfrom decimal import Decimal\nfrom .currencies import Currency\nfrom .dcc import DCC, DCCRegistry, DCFC\n\n\ndef dcc(name: str, altnames: Optional[Set[str]] = None, ccys: Optional[Set[Currency]] = None) -> Callable[[DCFC], DCFC]:\n    \"\"\"\n    Registers a day count fraction calculator under the given names and alternative names (if any).\n\n    :param name: The name of the day count convention.\n    :param altnames: A set of alternative names of the day count convention, if any.\n    :param ccys: A set of currencies which are known to use this convention by default, if any.\n    :return: Registered day count fraction calculation function.\n    \"\"\"\n    altnames = altnames or set()\n    ccys = ccys or set()\n\n    def decorator(func: DCFC) -> DCFC:\n        dcc_obj = DCC(name=name, altnames=altnames, currencies=ccys, calculate_fraction_method=func)\n        DCCRegistry.register(dcc_obj)\n        return func\n\n    return decorator", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 388, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
{"task_id": 313, "prediction_id": 4, "generation": "from typing import Callable, Optional, Set\nfrom decimal import Decimal\n\nfrom .currencies import Currency\nfrom .commons.zeitgeist import Date\nfrom .dcc import DCC, DCCRegistry, DCFC\n\n\ndef dcc(name: str, altnames: Optional[Set[str]] = None, ccys: Optional[Set[Currency]] = None) -> Callable[[DCFC], DCFC]:\n    \"\"\"\n    Registers a day count fraction calculator under the given names and alternative names (if any).\n\n    :param name: The name of the day count convention.\n    :param altnames: A set of alternative names of the day count convention, if any.\n    :param ccys: A set of currencies which are known to use this convention by default, if any.\n    :return: Registered day count fraction calculation function.\n    \"\"\"\n    # Normalize inputs: ensure altnames and ccys are sets (possibly empty sets)\n    altnames_set = altnames if altnames is not None else set()\n    ccys_set = ccys if ccys is not None else set()\n\n    def decorator(func: DCFC) -> DCFC:\n        # Create DCC instance and register it\n        dcc_instance = DCC(\n            name=name,\n            altnames=altnames_set,\n            currencies=ccys_set,\n            calculate_fraction_method=func,\n        )\n        DCCRegistry.register(dcc_instance)\n        return func\n\n    return decorator", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 389, in <module>\nKeyError: \"'__name__' not in globals\"\n", "passed": false}
