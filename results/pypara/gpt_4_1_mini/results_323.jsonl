{"task_id": 323, "prediction_id": 0, "generation": "import datetime\nfrom decimal import Decimal\nfrom typing import Optional\n\nfrom pypara.dcc import _is_last_day_of_month\n\n\ndef dcfc_30_e_plus_360(start: datetime.date, asof: datetime.date, end: datetime.date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Calculate d1:\n    if start.day == 31:\n        d1 = 30\n    elif start.month == 2 and _is_last_day_of_month(start):\n        d1 = 30\n    else:\n        d1 = start.day\n\n    # Calculate d2:\n    if asof.month == 2 and _is_last_day_of_month(asof) and asof == end:\n        d2 = 30\n    else:\n        d2 = asof.day\n\n    nod = (d2 - d1) + 30 * (asof.month - start.month) + 360 * (asof.year - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    import datetime\n    ^^^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 323, "prediction_id": 1, "generation": "from decimal import Decimal\nimport datetime\nfrom typing import Optional\nfrom .commons.zeitgeist import Date\n\n\ndef dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Adjust start day: if day is 31, use day=30\n    d1 = 30 if start.day == 31 else start.day\n\n    # Adjust asof day: if day is 31, set to 1 and roll month forward by 1 (handle year-end)\n    if asof.day == 31:\n        d2 = 1\n        # Calculate next month and next year if needed\n        if asof.month == 12:\n            y2 = asof.year + 1\n            m2 = 1\n        else:\n            y2 = asof.year\n            m2 = asof.month + 1\n    else:\n        d2 = asof.day\n        y2 = asof.year\n        m2 = asof.month\n\n    # Calculate difference in days, months, and years based on adjusted values\n    nod = (d2 - d1) + 30 * (m2 - start.month) + 360 * (y2 - start.year)\n\n    # Return the day count fraction\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    from decimal import Decimal\n    ^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 323, "prediction_id": 2, "generation": "from decimal import Decimal\nimport datetime\nfrom typing import Optional\n\nfrom .commons.zeitgeist import Date\nfrom .dcc import _is_last_day_of_month\n\n\ndef dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Day adjustment for start date:\n    if start.day == 31:\n        d1 = 30\n    else:\n        d1 = start.day\n\n    # Day adjustment for asof date:\n    # If asof is last day of February and asof != end, day = 30\n    if (asof.month == 2 and _is_last_day_of_month(asof) and asof != end):\n        d2 = 30\n    # Otherwise if asof.day == 31, day = 1 and month advance by 1, if month rolls over >12, increment year\n    elif asof.day == 31:\n        d2 = 1\n        # Advance month and year\n        if asof.month == 12:\n            asof_month_adj = 1\n            asof_year_adj = asof.year + 1\n        else:\n            asof_month_adj = asof.month + 1\n            asof_year_adj = asof.year\n    else:\n        d2 = asof.day\n        asof_month_adj = asof.month\n        asof_year_adj = asof.year\n\n    # If d2 was assigned in elif block (31 day case), then asof_month_adj and asof_year_adj set already,\n    # else set here\n    if asof.day != 31:\n        asof_month_adj = asof.month\n        asof_year_adj = asof.year\n\n    nod = (d2 - d1) + 30 * (asof_month_adj - start.month) + 360 * (asof_year_adj - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    from decimal import Decimal\n    ^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 323, "prediction_id": 3, "generation": "from decimal import Decimal\nimport datetime\nfrom typing import Optional\nfrom .commons.zeitgeist import Date\n\n\ndef dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Day for start date (D1) adjustment:\n    if start.day == 31:\n        d1 = 30\n    else:\n        d1 = start.day\n\n    # Day for asof date (D2) adjustment:\n    if asof.day == 31:\n        d2 = 1\n    else:\n        d2 = asof.day\n\n    # If asof day was 31, increment month by 1 for calculation:\n    month_asof = asof.month\n    year_asof = asof.year\n    if asof.day == 31:\n        month_asof += 1\n        if month_asof == 13:\n            month_asof = 1\n            year_asof += 1\n\n    # Calculate day count numerator:\n    nod = (d2 - d1) + 30 * (month_asof - start.month) + 360 * (year_asof - start.year)\n\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    from decimal import Decimal\n    ^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 323, "prediction_id": 4, "generation": "from decimal import Decimal\nimport datetime\nfrom typing import Optional\n\nfrom pypara.dcc import _is_last_day_of_month\n\n\ndef dcfc_30_e_plus_360(start: datetime.date, asof: datetime.date, end: datetime.date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    # Determine adjusted start day\n    if start.day == 31 or (start.month == 2 and _is_last_day_of_month(start)):\n        d1 = 30\n    else:\n        d1 = start.day\n\n    # For asof day, if it's the last day of month, set day to 1 and increment month/year accordingly\n    if asof.day == 31 or (asof.month == 2 and _is_last_day_of_month(asof) and end != asof):\n        # Move to first day of next month\n        if asof.month == 12:\n            d2_day = 1\n            d2_month = 1\n            d2_year = asof.year + 1\n        else:\n            d2_day = 1\n            d2_month = asof.month + 1\n            d2_year = asof.year\n    else:\n        d2_day = asof.day\n        d2_month = asof.month\n        d2_year = asof.year\n\n    # Compute number of days according to 30E+/360\n    nod = (d2_day - d1) + 30 * (d2_month - start.month) + 360 * (d2_year - start.year)\n\n    # Return day count fraction\n    return Decimal(nod) / Decimal(360)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    from decimal import Decimal\n    ^^^^\nSyntaxError: invalid syntax\n", "passed": false}
