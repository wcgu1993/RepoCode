{"task_id": 215, "prediction_id": 0, "generation": "import collections\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n\n    for status, tasks in task_dict.items():\n        tasks_by_name = collections.defaultdict(list)\n        for task in tasks:\n            task_family = task.__class__.__name__\n            tasks_by_name[task_family].append(task)\n        grouped[status] = dict(tasks_by_name)\n\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 1, "generation": "from collections import defaultdict\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        name_dict = defaultdict(list)\n        for task in tasks:\n            task_name = task.__class__.__name__\n            name_dict[task_name].append(task)\n        grouped[status] = dict(name_dict)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 2, "generation": "from collections import defaultdict\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        grouped_status = defaultdict(list)\n        for task in tasks:\n            task_name = task.__class__.__name__\n            grouped_status[task_name].append(task)\n        grouped[status] = dict(grouped_status)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 3, "generation": "import collections\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        name_group = collections.defaultdict(list)\n        for task in tasks:\n            # Try to get task_family, else fallback to class name\n            task_name = getattr(task, 'task_family', None)\n            if task_name is None:\n                task_name = task.__class__.__name__\n            name_group[task_name].append(task)\n        grouped[status] = dict(name_group)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 4, "generation": "from collections import defaultdict\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        status_group = defaultdict(list)\n        for task in tasks:\n            # Use the class name of the task as the task name\n            task_name = task.__class__.__name__\n            status_group[task_name].append(task)\n        grouped[status] = dict(status_group)\n    return grouped", "message": "passed", "passed": true}
