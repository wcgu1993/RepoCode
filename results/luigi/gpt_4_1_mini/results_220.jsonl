{"task_id": 220, "prediction_id": 0, "generation": "from luigi.notifications import (\n    _email_recipients,\n    _email_disabled_reason,\n    _prefix,\n    send_email_smtp,\n    send_email_ses,\n    send_email_sendgrid,\n    send_email_sns,\n)\nfrom luigi.configuration import LuigiConfigParser\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Compose full recipient list combining configured receiver and passed recipients\n    recipients_final = _email_recipients(recipients)\n\n    # If no recipients, do not send email\n    if not recipients_final:\n        logger.debug(\"No recipients configured, skipping sending email.\")\n        return\n\n    # Check if email sending should be disabled due to configuration or runtime environment\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger.debug(\"Email sending disabled: %s\", disabled_reason)\n        return\n\n    # Prepend prefix to subject if configured\n    subject_prefixed = _prefix(subject)\n\n    # Determine email sending method from config (default 'smtp')\n    method = email().method.lower() if email().method else 'smtp'\n\n    if method == 'smtp':\n        send_email_smtp(sender, subject_prefixed, message, recipients_final, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, subject_prefixed, message, recipients_final, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, subject_prefixed, message, recipients_final, image_png)\n    elif method == 'sns':\n        # For SNS, recipients are expected to be topic ARNs; send only if at least one recipient exists\n        send_email_sns(sender, subject_prefixed, message, recipients_final, image_png)\n    else:\n        logger.error(\"Unknown email method configured: %s\", method)", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 1, "generation": "from luigi.notifications import (\n    _email_recipients,\n    _email_disabled_reason,\n    _prefix,\n    send_email_smtp,\n    send_email_sendgrid,\n    send_email_ses,\n    send_email_sns,\n)\nimport logging\n\nlogger = logging.getLogger(\"luigi-interface\")\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Check for why email sending might be disabled\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason:\n        logger.debug(\"Not sending email: %s\", disabled_reason)\n        return\n\n    # Aggregate recipients: config receiver plus given recipients\n    all_recipients = _email_recipients(recipients)\n\n    # If no recipients, do not send email\n    if not all_recipients:\n        logger.debug(\"Not sending email: no recipients specified\")\n        return\n\n    # Prepend email prefix if configured\n    subject_with_prefix = _prefix(subject)\n\n    method = getattr(sender if hasattr(sender, 'email_method') else None, 'email_method', None)\n    method = None  # ignore any sender attribute, always use config value from email()\n\n    # Get method from config email().method (from file content we know email is a luigi.Config class)\n    from luigi.notifications import email\n    method = email().method if hasattr(email(), 'method') else 'smtp'\n    if not method:\n        method = 'smtp'\n\n    if method == 'smtp':\n        send_email_smtp(sender, subject_with_prefix, message, all_recipients, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, subject_with_prefix, message, all_recipients, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, subject_with_prefix, message, all_recipients, image_png)\n    elif method == 'sns':\n        send_email_sns(sender, subject_with_prefix, message, all_recipients, image_png)\n    else:\n        logger.error(\"Unknown email method configured: %s\", method)", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 2, "generation": "from luigi.notifications import (\n    _email_recipients,\n    _email_disabled_reason,\n    _prefix,\n    send_email_smtp,\n    send_email_ses,\n    send_email_sendgrid,\n    send_email_sns,\n)\nfrom luigi.parameter import _Parameter  # To check if recipients is None or empty\nimport logging\n\nlogger = logging.getLogger(\"luigi-interface\")\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Determine recipients list including configured receiver plus additional recipients\n    all_recipients = _email_recipients(recipients)\n\n    # If no recipients, do not send\n    if not all_recipients:\n        logger.debug(\"Email not sent because there are no recipients.\")\n        return\n\n    # Check if email sending is disabled (like tty without force_send, or format none)\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger.debug(f\"Email not sent because: {disabled_reason}.\")\n        return\n\n    # Prefix subject if configured\n    full_subject = _prefix(subject)\n\n    # Determine send method and send accordingly\n    method = getattr(__import__('luigi').notifications.email(), 'method', 'smtp')\n    # Sometimes method config might not be set, fallback to default\n    if not method:\n        method = 'smtp'\n    method = method.lower()\n\n    if method == 'smtp':\n        send_email_smtp(sender, full_subject, message, all_recipients, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, full_subject, message, all_recipients, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, full_subject, message, all_recipients, image_png)\n    elif method == 'sns':\n        send_email_sns(sender, full_subject, message, all_recipients, image_png)\n    else:\n        logger.error(\"Invalid email method configured: %s\", method)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 296, in <module>\nImportError: cannot import name '_Parameter' from 'luigi.parameter' (/input/test-apps/luigi/luigi/parameter.py)\n", "passed": false}
{"task_id": 220, "prediction_id": 3, "generation": "from luigi.notifications import (\n    _email_recipients,\n    _email_disabled_reason,\n    _prefix,\n    send_email_smtp,\n    send_email_ses,\n    send_email_sendgrid,\n    send_email_sns,\n)\nfrom luigi import email\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Compose the full recipients list including the configured receiver(s)\n    full_recipients = _email_recipients(recipients)\n\n    # If there are no recipients, do not send email\n    if not full_recipients:\n        logger = __import__(\"logging\").getLogger(\"luigi-interface\")\n        logger.debug(\"Not sending email: no recipients specified.\")\n        return\n\n    # Check for reason to disable email sending\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger = __import__(\"logging\").getLogger(\"luigi-interface\")\n        logger.debug(f\"Not sending email: {disabled_reason}.\")\n        return\n\n    # Apply prefix to subject if configured\n    full_subject = _prefix(subject)\n\n    method = email().method.lower() if email().method else 'smtp'\n\n    # Dispatch to the appropriate sending function\n    if method == 'smtp':\n        send_email_smtp(sender, full_subject, message, full_recipients, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, full_subject, message, full_recipients, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, full_subject, message, full_recipients, image_png)\n    elif method == 'sns':\n        # For SNS, recipients are topic ARN(s)\n        send_email_sns(sender, full_subject, message, full_recipients, image_png)\n    else:\n        # Invalid or unsupported email method\n        logger = __import__(\"logging\").getLogger(\"luigi-interface\")\n        logger.error(f\"Unsupported email method '{method}' configured, cannot send email.\")", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 296, in <module>\nImportError: cannot import name 'email' from 'luigi' (/input/test-apps/luigi/luigi/__init__.py)\n", "passed": false}
{"task_id": 220, "prediction_id": 4, "generation": "from luigi.notifications import (\n    _email_recipients,\n    _email_disabled_reason,\n    _prefix,\n    send_email_smtp,\n    send_email_sendgrid,\n    send_email_ses,\n    send_email_sns,\n)\nimport logging\n\nlogger = logging.getLogger(\"luigi-interface\")\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Compose full recipient list including main configured receiver\n    all_recipients = _email_recipients(recipients)\n    if not all_recipients:\n        logger.debug(\"No recipients specified. Email will not be sent.\")\n        return\n\n    # Check if email sending is disabled (format='none', tty, etc)\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger.debug(f\"Email sending disabled: {disabled_reason}\")\n        return\n\n    # Prefix subject if configured\n    subject_with_prefix = _prefix(subject)\n\n    # Dispatch sending email based on configuration\n    method = getattr(email(), 'method', 'smtp').lower()\n\n    try:\n        if method == 'smtp':\n            send_email_smtp(sender, subject_with_prefix, message, all_recipients, image_png)\n        elif method == 'sendgrid':\n            send_email_sendgrid(sender, subject_with_prefix, message, all_recipients, image_png)\n        elif method == 'ses':\n            send_email_ses(sender, subject_with_prefix, message, all_recipients, image_png)\n        elif method == 'sns':\n            # For SNS, recipients is expected to be a list of topic ARNs\n            send_email_sns(sender, subject_with_prefix, message, all_recipients, image_png)\n        else:\n            logger.warning(f\"Unknown email method '{method}'. Email not sent.\")\n    except Exception as e:\n        logger.error(f\"Failed to send email via method '{method}': {e}\")", "message": "passed", "passed": true}
