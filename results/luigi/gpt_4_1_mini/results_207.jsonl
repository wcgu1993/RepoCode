{"task_id": 207, "prediction_id": 0, "generation": "import datetime\nimport time\n\ndef from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    if not utcTime:\n        raise ValueError(\"utcTime parameter is required and cannot be empty\")\n\n    if fmt is not None:\n        dt = datetime.datetime.strptime(utcTime, fmt)\n    else:\n        try:\n            if utcTime.endswith('Z'):\n                utcTime_clean = utcTime.rstrip('Z').rstrip()\n                dt = datetime.datetime.strptime(utcTime_clean, \"%Y-%m-%dT%H:%M:%S\")\n            else:\n                try:\n                    dt = datetime.datetime.fromisoformat(utcTime)\n                except ValueError:\n                    dt = datetime.datetime.strptime(utcTime, \"%Y-%m-%d %H:%M:%S\")\n        except Exception as e:\n            raise ValueError(f\"Cannot parse utcTime string: {utcTime}\") from e\n\n    return dt.timetuple()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 381, in <module>\n  File \"<string>\", line 380, in test_0\nAssertionError\n", "passed": false}
{"task_id": 207, "prediction_id": 1, "generation": "import datetime\nimport time\n\ndef from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    if fmt:\n        dt = datetime.datetime.strptime(utcTime, fmt)\n    else:\n        utc_str = utcTime.rstrip('Z')\n        try:\n            dt = datetime.datetime.fromisoformat(utc_str)\n        except ValueError:\n            try:\n                dt = datetime.datetime.strptime(utc_str, \"%Y-%m-%dT%H:%M:%S.%f\")\n            except ValueError:\n                dt = datetime.datetime.strptime(utc_str, \"%Y-%m-%dT%H:%M:%S\")\n    return dt.utctimetuple()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 374, in <module>\n  File \"<string>\", line 373, in test_0\nAssertionError\n", "passed": false}
{"task_id": 207, "prediction_id": 2, "generation": "import datetime\nimport time\n\ndef from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    # If a format is not provided, try to infer or use a default ISO format\n    if fmt is None:\n        fmt = \"%Y-%m-%d %H:%M:%S\"\n    \n    # Parse the input UTC time string into a datetime object\n    dt = datetime.datetime.strptime(utcTime, fmt)\n    \n    # Convert the datetime object to a timestamp (seconds since epoch)\n    timestamp = time.mktime(dt.timetuple())\n    \n    # Return as a time.struct_time\n    return time.localtime(timestamp)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 374, in <module>\n  File \"<string>\", line 373, in test_0\n  File \"<string>\", line 225, in from_utc\n  File \"/usr/local/lib/python3.10/_strptime.py\", line 568, in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n  File \"/usr/local/lib/python3.10/_strptime.py\", line 352, in _strptime\n    raise ValueError(\"unconverted data remains: %s\" %\nValueError: unconverted data remains: .000000\n", "passed": false}
{"task_id": 207, "prediction_id": 3, "generation": "import datetime\nimport time\n\ndef from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    if fmt:\n        dt = datetime.datetime.strptime(utcTime, fmt)\n    else:\n        try:\n            dt = datetime.datetime.strptime(utcTime, \"%Y-%m-%d %H:%M:%S.%f\")\n        except ValueError:\n            dt = datetime.datetime.strptime(utcTime, \"%Y-%m-%d %H:%M:%S\")\n    return dt.timetuple()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 370, in <module>\n  File \"<string>\", line 369, in test_0\nAssertionError\n", "passed": false}
{"task_id": 207, "prediction_id": 4, "generation": "import datetime\nimport time\n\ndef from_utc(utcTime, fmt=None):\n    \"\"\"convert UTC time string to time.struct_time: change datetime.datetime to time, return time.struct_time type\"\"\"\n    # If no format string is provided, use an ISO 8601 compatible default format with optional fractional seconds and timezone\n    if fmt is None:\n        # Try to parse using fromisoformat (Python 3.7+), fallback if necessary\n        try:\n            # datetime.fromisoformat accepts 'YYYY-MM-DDThh:mm:ss[.ffffff][+HH:MM]'\n            dt = datetime.datetime.fromisoformat(utcTime)\n        except (AttributeError, ValueError):\n            # Fallback: try to parse using strptime with common formats\n\n            # Common formats to try in order\n            formats_to_try = [\n                \"%Y-%m-%dT%H:%M:%S.%fZ\",  # ISO format with microseconds + Z\n                \"%Y-%m-%dT%H:%M:%S.%f\",    # ISO format with microseconds no Z\n                \"%Y-%m-%dT%H:%M:%S\",       # ISO format no microseconds no Z\n                \"%Y-%m-%d %H:%M:%S\",       # Space instead of T\n            ]\n\n            for fmt_try in formats_to_try:\n                try:\n                    dt = datetime.datetime.strptime(utcTime, fmt_try)\n                    break\n                except ValueError:\n                    pass\n            else:\n                # As last resort, raise error\n                raise ValueError(f\"Time data '{utcTime}' does not match any supported format\")\n        # If datetime is naive (no tzinfo), assume UTC\n        if dt.tzinfo is None:\n            dt = dt.replace(tzinfo=datetime.timezone.utc)\n        else:\n            # convert to UTC if timezone is present\n            dt = dt.astimezone(datetime.timezone.utc)\n    else:\n        # When fmt is given, parse accordingly\n        dt = datetime.datetime.strptime(utcTime, fmt)\n        # Assume naive datetime is UTC\n        dt = dt.replace(tzinfo=datetime.timezone.utc)\n\n    # Return time.struct_time in UTC\n    return dt.utctimetuple()", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 402, in <module>\n  File \"<string>\", line 401, in test_0\nAssertionError\n", "passed": false}
