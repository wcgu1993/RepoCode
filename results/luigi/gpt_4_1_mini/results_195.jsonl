{"task_id": 195, "prediction_id": 0, "generation": "def flatten(struct):\n    \"\"\"\n    Creates a flat list of all all items in structured output (dicts, lists, items):\n\n    .. code-block:: python\n\n    >>> sorted(flatten({'a': 'foo', 'b': 'bar'}))\n    ['bar', 'foo']\n    >>> sorted(flatten(['foo', ['bar', 'troll']]))\n    ['bar', 'foo', 'troll']\n    >>> flatten('foo')\n    ['foo']\n    >>> flatten(42)\n    [42]\n    \"\"\"\n    if isinstance(struct, dict):\n        # Flatten all values of the dict\n        result = []\n        for v in struct.values():\n            result.extend(flatten(v))\n        return result\n    elif isinstance(struct, (list, tuple)):\n        # Flatten elements of the list or tuple\n        result = []\n        for item in struct:\n            result.extend(flatten(item))\n        return result\n    else:\n        # Base case: non-iterable or treated as atomic; return as list\n        return [struct]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 981, in <module>\n  File \"<string>\", line 980, in test_23\nAssertionError\n", "passed": false}
{"task_id": 195, "prediction_id": 1, "generation": "def flatten(struct):\n    \"\"\"\n    Creates a flat list of all all items in structured output (dicts, lists, items):\n\n    .. code-block:: python\n\n    >>> sorted(flatten({'a': 'foo', 'b': 'bar'}))\n    ['bar', 'foo']\n    >>> sorted(flatten(['foo', ['bar', 'troll']]))\n    ['bar', 'foo', 'troll']\n    >>> flatten('foo')\n    ['foo']\n    >>> flatten(42)\n    [42]\n    \"\"\"\n    if isinstance(struct, dict):\n        result = []\n        for value in struct.values():\n            result.extend(flatten(value))\n        return result\n    elif isinstance(struct, (list, tuple)):\n        result = []\n        for item in struct:\n            result.extend(flatten(item))\n        return result\n    else:\n        return [struct]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 978, in <module>\n  File \"<string>\", line 977, in test_23\nAssertionError\n", "passed": false}
{"task_id": 195, "prediction_id": 2, "generation": "def flatten(struct):\n    \"\"\"\n    Creates a flat list of all all items in structured output (dicts, lists, items):\n\n    .. code-block:: python\n\n    >>> sorted(flatten({'a': 'foo', 'b': 'bar'}))\n    ['bar', 'foo']\n    >>> sorted(flatten(['foo', ['bar', 'troll']]))\n    ['bar', 'foo', 'troll']\n    >>> flatten('foo')\n    ['foo']\n    >>> flatten(42)\n    [42]\n    \"\"\"\n    flattened = []\n\n    if isinstance(struct, dict):\n        for value in struct.values():\n            flattened.extend(flatten(value))\n    elif isinstance(struct, (list, tuple)):\n        for item in struct:\n            flattened.extend(flatten(item))\n    else:\n        flattened.append(struct)\n\n    return flattened", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 978, in <module>\n  File \"<string>\", line 977, in test_23\nAssertionError\n", "passed": false}
{"task_id": 195, "prediction_id": 3, "generation": "def flatten(struct):\n    \"\"\"\n    Creates a flat list of all all items in structured output (dicts, lists, items):\n\n    .. code-block:: python\n\n    >>> sorted(flatten({'a': 'foo', 'b': 'bar'}))\n    ['bar', 'foo']\n    >>> sorted(flatten(['foo', ['bar', 'troll']]))\n    ['bar', 'foo', 'troll']\n    >>> flatten('foo')\n    ['foo']\n    >>> flatten(42)\n    [42]\n    \"\"\"\n    # If struct is a dictionary, flatten all values\n    if isinstance(struct, dict):\n        result = []\n        for value in struct.values():\n            result.extend(flatten(value))\n        return result\n    # If struct is a list or tuple, flatten all elements\n    elif isinstance(struct, (list, tuple)):\n        result = []\n        for item in struct:\n            result.extend(flatten(item))\n        return result\n    else:\n        # Base case: struct is an atomic item, wrap in a list\n        return [struct]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 981, in <module>\n  File \"<string>\", line 980, in test_23\nAssertionError\n", "passed": false}
{"task_id": 195, "prediction_id": 4, "generation": "def flatten(struct):\n    \"\"\"\n    Creates a flat list of all all items in structured output (dicts, lists, items):\n\n    .. code-block:: python\n\n    >>> sorted(flatten({'a': 'foo', 'b': 'bar'}))\n    ['bar', 'foo']\n    >>> sorted(flatten(['foo', ['bar', 'troll']]))\n    ['bar', 'foo', 'troll']\n    >>> flatten('foo')\n    ['foo']\n    >>> flatten(42)\n    [42]\n    \"\"\"\n    if isinstance(struct, dict):\n        result = []\n        for value in struct.values():\n            result.extend(flatten(value))\n        return result\n    elif isinstance(struct, (list, tuple)):\n        result = []\n        for item in struct:\n            result.extend(flatten(item))\n        return result\n    else:\n        # Base case: a single item, return it in a list\n        return [struct]", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 979, in <module>\n  File \"<string>\", line 978, in test_23\nAssertionError\n", "passed": false}
