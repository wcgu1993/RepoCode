{"task_id": 202, "prediction_id": 0, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove newlines for easier parsing\n    soql_clean = re.sub(r'\\s+', ' ', soql, flags=re.MULTILINE).strip()\n\n    # Extract the part between SELECT and FROM (case insensitive)\n    match = re.search(r'select (.*?) from ', soql_clean, re.IGNORECASE)\n    if not match:\n        # If no match, return empty list since no fields could be found\n        return []\n\n    fields_part = match.group(1).strip()\n\n    # If fields_part is '*', return ['*'] indicating all fields requested\n    if fields_part == '*':\n        return ['*']\n\n    # Split fields by comma, respecting the possibility of functions or aliases with commas inside parentheses\n    # We implement a mini parser to split by commas only at the top level (not inside parentheses)\n    fields = []\n    bracket_level = 0\n    field_start = 0\n    for i, char in enumerate(fields_part):\n        if char == '(':\n            bracket_level += 1\n        elif char == ')':\n            if bracket_level > 0:\n                bracket_level -= 1\n        elif char == ',' and bracket_level == 0:\n            fields.append(fields_part[field_start:i].strip())\n            field_start = i + 1\n    # Add the last field\n    fields.append(fields_part[field_start:].strip())\n\n    # Extract the actual column names from possible aliases or function calls.\n    # We consider that field can be like:\n    # - column_name\n    # - column_name alias\n    # - function(column) alias\n    # We return the full field expression as it appears, since column names might be complex.\n    # But typically, users expect just the column names or expressions as listed.\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 817, in <module>\n  File \"<string>\", line 816, in test_30\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 1, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove linebreaks for easier parsing\n    soql_clean = re.sub(r'\\s+', ' ', soql.strip())\n\n    # Match the part between SELECT and FROM\n    match = re.search(r'SELECT (.+?) FROM ', soql_clean, re.IGNORECASE)\n    if not match:\n        return []\n\n    fields_str = match.group(1).strip()\n\n    # Handle potential nested parentheses (e.g. functions like COUNT(), SUM(), etc.)\n    # We split by commas only those commas that are not inside parentheses.\n    fields = []\n    field = ''\n    paren_level = 0\n\n    for char in fields_str:\n        if char == ',' and paren_level == 0:\n            fields.append(field.strip())\n            field = ''\n        else:\n            field += char\n            if char == '(':\n                paren_level += 1\n            elif char == ')':\n                paren_level = max(paren_level - 1, 0)\n\n    if field:\n        fields.append(field.strip())\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1069, in <module>\n  File \"<string>\", line 1068, in test_166\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 2, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove new lines for easier parsing\n    soql_clean = re.sub(r'\\s+', ' ', soql.strip(), flags=re.IGNORECASE)\n\n    # Match the SELECT ... FROM part (non-greedy match for fields)\n    m = re.match(r'SELECT (.+?) FROM ', soql_clean, flags=re.IGNORECASE)\n    if not m:\n        return []\n\n    fields_part = m.group(1).strip()\n\n    # If fields_part is '*', return ['*']\n    if fields_part == '*':\n        return ['*']\n\n    # Split fields by comma not inside parentheses (in case of function calls)\n    # A simple approach is to split on commas and strip spaces\n    # This is usually sufficient for typical SOQL fields\n    fields = [f.strip() for f in fields_part.split(',') if f.strip()]\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1091, in <module>\n  File \"<string>\", line 1090, in test_0\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 3, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove line breaks for easier regex matching\n    soql_clean = re.sub(r'\\s+', ' ', soql.strip())\n    \n    # Regex to capture the SELECT clause fields before FROM (non greedy)\n    match = re.search(r'^SELECT\\s+(.*?)\\s+FROM\\s', soql_clean, re.IGNORECASE)\n    if not match:\n        # If no match, return empty list, maybe invalid soql string\n        return []\n    \n    fields_str = match.group(1).strip()\n    \n    # Handle the typical case: fields separated by commas\n    # We want to split on commas, but not commas inside parentheses (e.g. COUNT(Id))\n    # A simple approach:\n    # - Split on commas that are not inside parentheses\n    \n    fields = []\n    paren_level = 0\n    current_field = []\n    for char in fields_str:\n        if char == '(':\n            paren_level += 1\n        elif char == ')':\n            if paren_level > 0:\n                paren_level -= 1\n        if char == ',' and paren_level == 0:\n            field = ''.join(current_field).strip()\n            if field:\n                fields.append(field)\n            current_field = []\n        else:\n            current_field.append(char)\n    # Add last field\n    last_field = ''.join(current_field).strip()\n    if last_field:\n        fields.append(last_field)\n    \n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1110, in <module>\n  File \"<string>\", line 1109, in test_0\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 4, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \n    Extracts and returns a list of field names queried in a SOQL (Salesforce Object Query Language) SELECT statement.\n    The function handles simple SELECT queries and attempts to extract fields between SELECT and FROM keywords.\n    \n    Args:\n        soql (str): A SOQL query string.\n    \n    Returns:\n        list of str: A list of queried column names as strings, preserving the order they appear in the query.\n    \"\"\"\n    # Normalize white spaces and remove newlines for easier parsing\n    normalized_soql = re.sub(r'\\s+', ' ', soql.strip(), flags=re.UNICODE | re.MULTILINE).strip()\n    \n    # Use regex to extract everything between SELECT and FROM (case-insensitive)\n    match = re.search(r'^SELECT\\s+(.*?)\\s+FROM\\s', normalized_soql, re.IGNORECASE)\n    if not match:\n        # No match means no SELECT ... FROM pattern found properly\n        return []\n    \n    fields_segment = match.group(1)\n    \n    # Split fields by comma, respecting that field aliases or functions might be present\n    # But since SOQL is fairly simple, we assume commas separate fields.\n    fields = [f.strip() for f in fields_segment.split(',')]\n    \n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 801, in <module>\n  File \"<string>\", line 800, in test_30\nAssertionError\n", "passed": false}
