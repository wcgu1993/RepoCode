{"task_id": 220, "prediction_id": 0, "generation": "from luigi.notifications import _email_disabled_reason, _prefix, send_email_smtp, send_email_sendgrid, send_email_ses, send_email_sns\nfrom luigi.notifications import email\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    if not recipients:\n        logger.debug(\"No recipients provided; skipping sending email.\")\n        return\n\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger.debug(f\"Email sending disabled because: {disabled_reason}\")\n        return\n\n    # Apply email prefix to subject if configured\n    prefixed_subject = _prefix(subject)\n\n    # Determine sending method and call appropriate function\n    method = email().method.lower() if email().method else 'smtp'\n\n    if method == 'smtp':\n        send_email_smtp(sender, prefixed_subject, message, recipients, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, prefixed_subject, message, recipients, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, prefixed_subject, message, recipients, image_png)\n    elif method == 'sns':\n        send_email_sns(sender, prefixed_subject, message, recipients, image_png)\n    else:\n        logger.error(f\"Unknown email sending method '{method}'. No email sent.\")", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 1, "generation": "import logging\nimport sys\n\nfrom luigi.notifications import _email_disabled_reason, _prefix\nfrom luigi.notifications import email, send_email_smtp, send_email_sendgrid, send_email_ses, send_email_sns\n\nlogger = logging.getLogger(\"luigi-interface\")\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    if not recipients:\n        logger.debug(\"No recipients configured, not sending email\")\n        return\n\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason is not None:\n        logger.debug(f\"Not sending notification because {disabled_reason}\")\n        return\n\n    # Prefix the email subject if configured\n    subject = _prefix(subject)\n\n    method = email().method.lower()\n\n    try:\n        if method == 'smtp':\n            send_email_smtp(sender, subject, message, recipients, image_png)\n        elif method == 'sendgrid':\n            send_email_sendgrid(sender, subject, message, recipients, image_png)\n        elif method == 'ses':\n            send_email_ses(sender, subject, message, recipients, image_png)\n        elif method == 'sns':\n            # For SNS, recipients is expected to be a list with the topic ARN as first element\n            send_email_sns(sender, subject, message, recipients, image_png)\n        else:\n            logger.warning(f\"Email method '{method}' not supported; no email sent.\")\n    except Exception:\n        logger.exception(\"Error trying to send email\")", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 2, "generation": "import logging\nimport sys\nfrom luigi.notifications import _email_disabled_reason, _prefix, send_email_smtp, send_email_sendgrid, send_email_ses, send_email_sns\nfrom luigi.notifications import email\n\nlogger = logging.getLogger(\"luigi-interface\")\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    if not recipients:\n        logger.debug(\"No recipients specified, cancelling email send.\")\n        return\n\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason:\n        logger.debug(f\"Not sending email: {disabled_reason}.\")\n        return\n\n    subj = _prefix(subject)\n    method = email().method.lower()\n\n    try:\n        if method == 'smtp':\n            send_email_smtp(sender, subj, message, recipients, image_png)\n        elif method == 'sendgrid':\n            send_email_sendgrid(sender, subj, message, recipients, image_png)\n        elif method == 'ses':\n            send_email_ses(sender, subj, message, recipients, image_png)\n        elif method == 'sns':\n            # SNS expects recipients to be topic ARNs\n            send_email_sns(sender, subj, message, recipients, image_png)\n        else:\n            logger.error(f\"Unknown email method '{method}', cannot send email.\")\n    except Exception:\n        logger.exception(\"Failed to send email.\")", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 3, "generation": "import logging\nimport sys\n\nfrom luigi.notifications import _email_disabled_reason, _prefix\nfrom luigi.notifications import send_email_smtp, send_email_sendgrid, send_email_ses, send_email_sns\nfrom luigi.notifications import email\n\nlogger = logging.getLogger(\"luigi-interface\")\n\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    # Check recipients list\n    if not recipients:\n        logger.debug(\"Not sending email: no recipients specified.\")\n        return\n\n    # Check if email sending is disabled for other reasons (tty, format none, etc)\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason:\n        logger.debug(f\"Not sending email: {disabled_reason}\")\n        return\n\n    # Apply prefix to subject if configured\n    subject = _prefix(subject)\n\n    method = email().method.lower()\n\n    if method == 'smtp':\n        send_email_smtp(sender, subject, message, recipients, image_png)\n    elif method == 'sendgrid':\n        send_email_sendgrid(sender, subject, message, recipients, image_png)\n    elif method == 'ses':\n        send_email_ses(sender, subject, message, recipients, image_png)\n    elif method == 'sns':\n        send_email_sns(sender, subject, message, recipients, image_png)\n    else:\n        logger.error(f\"Email method '{method}' is not supported. Email not sent.\")", "message": "passed", "passed": true}
{"task_id": 220, "prediction_id": 4, "generation": "import logging\nfrom luigi.notifications import _email_disabled_reason, _prefix\n\ndef send_email(subject, message, sender, recipients, image_png=None):\n    \"\"\"\n    Decides whether to send notification. Notification is cancelled if there are\n    no recipients or if stdout is onto tty or if in debug mode.\n\n    Dispatches on config value email.method.  Default is 'smtp'.\n    \"\"\"\n    logger = logging.getLogger(\"luigi-interface\")\n\n    # Must have recipients to send email\n    if not recipients:\n        logger.debug(\"Not sending email: no recipients provided.\")\n        return\n\n    disabled_reason = _email_disabled_reason()\n    if disabled_reason:\n        logger.debug(f\"Not sending email: {disabled_reason}.\")\n        return\n\n    # Apply configured prefix to subject\n    subject_prefixed = _prefix(subject)\n\n    method = None\n    try:\n        method = str(email().method).lower()\n    except Exception:\n        # Default to 'smtp' if config lookup fails or is missing\n        method = 'smtp'\n\n    try:\n        if method == 'smtp':\n            from luigi.notifications import send_email_smtp\n            send_email_smtp(sender, subject_prefixed, message, recipients, image_png)\n        elif method == 'sendgrid':\n            from luigi.notifications import send_email_sendgrid\n            send_email_sendgrid(sender, subject_prefixed, message, recipients, image_png)\n        elif method == 'ses':\n            from luigi.notifications import send_email_ses\n            send_email_ses(sender, subject_prefixed, message, recipients, image_png)\n        elif method == 'sns':\n            from luigi.notifications import send_email_sns\n            send_email_sns(sender, subject_prefixed, message, recipients, image_png)\n        else:\n            logger.error(f\"Unknown email method '{method}', cannot send email.\")\n    except Exception:\n        logger.exception(\"Error sending email\")", "message": "passed", "passed": true}
