{"task_id": 202, "prediction_id": 0, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \n    Extracts the list of column names queried in a SOQL (Salesforce Object Query Language) statement.\n    It parses the SELECT clause fields, handling commas, aliases (AS), functions, and nested parentheses.\n    The result is a list of field names as strings.\n    \n    :param soql: str, the SOQL query string\n    :return: list of str, the queried column names in the order they appear in the SELECT clause\n    \"\"\"\n    # Normalize spaces and remove line breaks for easier parsing\n    soql_clean = re.sub(r'\\s+', ' ', soql.strip())\n\n    # Extract the part between SELECT and FROM (case insensitive)\n    match = re.search(r\"SELECT (.+?) FROM \", soql_clean, re.IGNORECASE)\n    if not match:\n        return []\n    fields_str = match.group(1).strip()\n\n    fields = []\n    depth = 0\n    current_field = []\n    for char in fields_str:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        if char == ',' and depth == 0:\n            field = ''.join(current_field).strip()\n            if field:\n                fields.append(field)\n            current_field = []\n        else:\n            current_field.append(char)\n    # Add last field\n    last_field = ''.join(current_field).strip()\n    if last_field:\n        fields.append(last_field)\n\n    # Process fields to extract aliases or plain field names\n    # Handle \"field AS alias\" or \"field alias\"\n    result = []\n    for f in fields:\n        # Split by AS or space for alias\n        # Case insensitive AS, so use re\n        match_alias = re.match(r'(.+?)\\s+AS\\s+(.+)', f, re.IGNORECASE)\n        if match_alias:\n            field_name = match_alias.group(2).strip()\n            result.append(field_name)\n        else:\n            # Try splitting by last space if it could be alias without AS\n            parts = f.rsplit(' ', 1)\n            if len(parts) == 2:\n                # Check if first part ends with ) meaning function call, so alias present\n                if parts[0].endswith(')'):\n                    result.append(parts[1].strip())\n                else:\n                    result.append(f.strip())\n            else:\n                result.append(f.strip())\n    return result", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1130, in <module>\n  File \"<string>\", line 1129, in test_0\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 1, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and uppercase for consistency\n    soql_upper = soql.upper()\n    select_match = re.search(r\"SELECT\\s+(.*?)\\s+FROM\\s\", soql_upper, re.DOTALL)\n    if not select_match:\n        return []\n\n    fields_part = select_match.group(1)\n\n    # Remove nested SOQL parentheses content to avoid misparsing (optional)\n    # But since SOQL does not commonly have nested selects inside select fields, we skip it.\n\n    # Split fields on commas but be careful of commas inside functions or expressions\n    # A simple approach is to split on commas and then strip each field.\n    # This may fail on complex expressions but matches general SOQL usage.\n    fields = []\n    # Using the original soql substring (not upper) for exact field names\n    # Find corresponding span in original string\n    select_start = soql_upper.find(fields_part)\n    # Map the fields_part indices back to the original soql\n    fields_part_original = soql[select_start:select_start + len(fields_part)]\n\n    # Simple split on commas and strip spaces\n    for f in fields_part_original.split(','):\n        f_clean = f.strip()\n        if f_clean:\n            fields.append(f_clean)\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1100, in <module>\n  File \"<string>\", line 1099, in test_0\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 2, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace, remove newlines for easier regex matching\n    soql = re.sub(r'\\s+', ' ', soql).strip()\n\n    # Regex to find the SELECT clause (from SELECT until first FROM)\n    # using non-greedy match\n    match = re.search(r\"(?i)select\\s+(.*?)\\s+from\\s\", soql)\n    if not match:\n        return []  # Could not find a SELECT-FROM pattern\n\n    fields_str = match.group(1)\n    # Split fields by comma, strip whitespace\n    fields = [f.strip() for f in fields_str.split(',') if f.strip()]\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1086, in <module>\n  File \"<string>\", line 1085, in test_0\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 3, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove trailing semicolon if present\n    soql = soql.strip().rstrip(';').strip()\n    # Regex to extract the part between SELECT and FROM (case-insensitive)\n    match = re.search(r'(?i)^select\\s+(.*?)\\s+from\\s', soql)\n    if not match:\n        return []\n    fields_part = match.group(1).strip()\n    # Split by commas not inside parentheses (to handle functions like COUNT(field))\n    parts = []\n    bracket_level = 0\n    current = []\n    for char in fields_part:\n        if char == '(':\n            bracket_level += 1\n        elif char == ')':\n            bracket_level = max(0, bracket_level -1)\n        if char == ',' and bracket_level == 0:\n            part = ''.join(current).strip()\n            if part:\n                parts.append(part)\n            current = []\n        else:\n            current.append(char)\n    # add last part\n    last_part = ''.join(current).strip()\n    if last_part:\n        parts.append(last_part)\n\n    # Now clean fields of possible aliases (e.g., \"Name n\", or \"Name as n\")\n    # We keep the field before any alias keywords, e.g., 'AS'\n    fields = []\n    for f in parts:\n        # Remove alias suffixes, considering 'AS' or whitespace\n        # So \"COUNT(Name) AS Num\" => \"COUNT(Name)\", \"Account.Name n\" => \"Account.Name\"\n        alias_match = re.match(r'(?i)(.+?)(?:\\s+as\\s+.+|\\s+\\w+)?$', f)\n        if alias_match:\n            field_name = alias_match.group(1).strip()\n            fields.append(field_name)\n        else:\n            fields.append(f.strip())\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 782, in <module>\n  File \"<string>\", line 781, in test_12\nAssertionError\n", "passed": false}
{"task_id": 202, "prediction_id": 4, "generation": "import re\n\ndef get_soql_fields(soql):\n    \"\"\"\n    Gets queried columns names.\n    \"\"\"\n    # Normalize whitespace and remove newlines for easier parsing\n    soql_clean = ' '.join(soql.strip().split())\n\n    # Regex to extract fields between SELECT and FROM (case-insensitive)\n    match = re.search(r\"select\\s+(.*?)\\s+from\\s\", soql_clean, re.IGNORECASE)\n    if not match:\n        return []\n\n    fields_str = match.group(1).strip()\n\n    # Handle the case of SELECT * (all fields)\n    if fields_str == '*':\n        return ['*']\n\n    # Split fields by commas not within quotes or parentheses (basic approach)\n    # This is a basic split by commas for SOQL which typically is simple\n    fields = [f.strip() for f in fields_str.split(',') if f.strip()]\n\n    return fields", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1091, in <module>\n  File \"<string>\", line 1090, in test_0\nAssertionError\n", "passed": false}
