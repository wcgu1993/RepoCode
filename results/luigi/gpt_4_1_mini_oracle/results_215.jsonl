{"task_id": 215, "prediction_id": 0, "generation": "from collections import defaultdict\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks_set in task_dict.items():\n        family_dict = defaultdict(list)\n        for task in tasks_set:\n            family_dict[task.task_family].append(task)\n        grouped[status] = dict(family_dict)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 1, "generation": "def _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        inner_dict = collections.defaultdict(list)\n        for task in tasks:\n            inner_dict[task.task_family].append(task)\n        grouped[status] = dict(inner_dict)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 2, "generation": "from collections import defaultdict\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        by_family = defaultdict(list)\n        for task in tasks:\n            by_family[task.task_family].append(task)\n        grouped[status] = dict(by_family)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 3, "generation": "import collections\n\ndef _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        family_dict = collections.defaultdict(list)\n        for task in tasks:\n            # Get task family name\n            task_family = getattr(task, 'task_family', None)\n            if task_family is None:\n                # fallback to class name if no task_family attribute\n                task_family = task.__class__.__name__\n            family_dict[task_family].append(task)\n        grouped[status] = dict(family_dict)\n    return grouped", "message": "passed", "passed": true}
{"task_id": 215, "prediction_id": 4, "generation": "def _group_tasks_by_name_and_status(task_dict):\n    \"\"\"\n    Takes a dictionary with sets of tasks grouped by their status and\n    returns a dictionary with dictionaries with an array of tasks grouped by\n    their status and task name\n    \"\"\"\n    grouped = {}\n    for status, tasks in task_dict.items():\n        family_dict = {}\n        for task in tasks:\n            family = getattr(task, 'task_family', task.__class__.__name__)\n            family_dict.setdefault(family, []).append(task)\n        grouped[status] = family_dict\n    return grouped", "message": "passed", "passed": true}
