{"task_id": 219, "prediction_id": 0, "generation": "from collections.abc import Mapping\n\ndef recursively_freeze(value):\n    \"\"\"\n    Recursively walks ``Mapping``s and ``list``s and converts them to ``FrozenOrderedDict`` and ``tuples``, respectively.\n    \"\"\"\n    if isinstance(value, Mapping):\n        # Recursively freeze each value in the mapping, then wrap with FrozenOrderedDict\n        return FrozenOrderedDict((k, recursively_freeze(v)) for k, v in value.items())\n    elif isinstance(value, list):\n        # Recursively freeze each item in the list, then convert to tuple\n        return tuple(recursively_freeze(item) for item in value)\n    else:\n        # For other types, return as is\n        return value", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 210, in <module>\n  File \"<string>\", line 209, in test_45\nAssertionError\n", "passed": false}
{"task_id": 219, "prediction_id": 1, "generation": "from collections.abc import Mapping\n\ndef recursively_freeze(value):\n    \"\"\"\n    Recursively walks ``Mapping``s and ``list``s and converts them to ``FrozenOrderedDict`` and ``tuples``, respectively.\n    \"\"\"\n    if isinstance(value, Mapping):\n        # Recursively freeze each value in the mapping and wrap with FrozenOrderedDict\n        return FrozenOrderedDict((k, recursively_freeze(v)) for k, v in value.items())\n    elif isinstance(value, list):\n        # Recursively freeze each element in the list and convert to tuple\n        return tuple(recursively_freeze(v) for v in value)\n    else:\n        # For other types, return as is\n        return value", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 210, in <module>\n  File \"<string>\", line 209, in test_45\nAssertionError\n", "passed": false}
{"task_id": 219, "prediction_id": 2, "generation": "from collections.abc import Mapping\n\ndef recursively_freeze(value):\n    \"\"\"\n    Recursively walks ``Mapping``s and ``list``s and converts them to ``FrozenOrderedDict`` and ``tuples``, respectively.\n    \"\"\"\n    if isinstance(value, Mapping):\n        # Recursively freeze each value in the mapping, then wrap in FrozenOrderedDict\n        frozen_items = ((k, recursively_freeze(v)) for k, v in value.items())\n        return FrozenOrderedDict(frozen_items)\n    elif isinstance(value, list):\n        # Recursively freeze each element in the list, then convert to tuple\n        return tuple(recursively_freeze(v) for v in value)\n    else:\n        # Return as is for any other type\n        return value", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 211, in <module>\n  File \"<string>\", line 210, in test_45\nAssertionError\n", "passed": false}
{"task_id": 219, "prediction_id": 3, "generation": "from collections.abc import Mapping\n\ndef recursively_freeze(value):\n    \"\"\"\n    Recursively walks ``Mapping``s and ``list``s and converts them to ``FrozenOrderedDict`` and ``tuples``, respectively.\n    \"\"\"\n    if isinstance(value, Mapping):\n        # Recursively freeze keys and values: keys stay the same (assuming hashable),\n        # values recursively frozen.\n        # FrozenOrderedDict preserves the order.\n        return FrozenOrderedDict((k, recursively_freeze(v)) for k, v in value.items())\n    elif isinstance(value, list):\n        # Convert list to tuple, recursively freezing each element.\n        return tuple(recursively_freeze(v) for v in value)\n    else:\n        # Return as-is for other types.\n        return value", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 212, in <module>\n  File \"<string>\", line 211, in test_45\nAssertionError\n", "passed": false}
{"task_id": 219, "prediction_id": 4, "generation": "from collections.abc import Mapping\n\ndef recursively_freeze(value):\n    \"\"\"\n    Recursively walks ``Mapping``s and ``list``s and converts them to ``FrozenOrderedDict`` and ``tuples``, respectively.\n    \"\"\"\n    if isinstance(value, Mapping):\n        # Recursively freeze each value in the mapping\n        frozen_dict = ((k, recursively_freeze(v)) for k, v in value.items())\n        return FrozenOrderedDict(frozen_dict)\n    elif isinstance(value, list):\n        # Recursively freeze each element in the list\n        return tuple(recursively_freeze(v) for v in value)\n    else:\n        # Return value unchanged if it's neither mapping nor list\n        return value", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 211, in <module>\n  File \"<string>\", line 210, in test_45\nAssertionError\n", "passed": false}
