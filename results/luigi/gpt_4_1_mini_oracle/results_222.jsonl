{"task_id": 222, "prediction_id": 0, "generation": "def format_task_error(headline, task, command, formatted_exception=None):\n    \"\"\"\n    Format a message body for an error email related to a luigi.task.Task\n\n    :param headline: Summary line for the message\n    :param task: `luigi.task.Task` instance where this error occurred\n    :param formatted_exception: optional string showing traceback\n\n    :return: message body\n    \"\"\"\n    import textwrap\n    from luigi.notifications import wrap_traceback\n\n    lines = [headline, '']\n\n    lines.append('Task: {}'.format(task))\n    lines.append('Command: {}'.format(command))\n    lines.append('')\n\n    if formatted_exception:\n        lines.append('Error:')\n        lines.append('')\n        lines.append(wrap_traceback(formatted_exception))\n        lines.append('')\n\n    # Add task parameters nicely formatted\n    lines.append('Parameters:')\n    lines.append('')\n\n    # Get all parameters of the task (name=value)\n    try:\n        params = task.get_params()\n        for param in params:\n            name = param[0]\n            value = getattr(task, name, None)\n            lines.append('  {}: {}'.format(name, value))\n    except Exception:\n        # Defensive: fallback to vars if get_params fails\n        params = vars(task)\n        for name, value in sorted(params.items()):\n            lines.append('  {}: {}'.format(name, value))\n\n    return '\\n'.join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 446, in <module>\n  File \"<string>\", line 442, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 222, "prediction_id": 1, "generation": "def format_task_error(headline, task, command, formatted_exception=None):\n    \"\"\"\n    Format a message body for an error email related to a luigi.task.Task\n\n    :param headline: Summary line for the message\n    :param task: `luigi.task.Task` instance where this error occurred\n    :param formatted_exception: optional string showing traceback\n\n    :return: message body\n    \"\"\"\n    import textwrap\n    from luigi.notifications import wrap_traceback\n\n    lines = [headline]\n\n    # Include task information: class name and repr with indent\n    task_repr = textwrap.indent(repr(task), ' '*4)\n    lines.append(\"\\nTask:\\n{}\".format(task_repr))\n\n    # Include command that was run (e.g., luigi command line)\n    if command:\n        cmd_repr = textwrap.indent(command, ' '*4)\n        lines.append(\"\\nCommand:\\n{}\".format(cmd_repr))\n\n    # If formatted_exception is given, format it according to email format\n    if formatted_exception:\n        wrapped_exception = wrap_traceback(formatted_exception)\n        lines.append(\"\\nException:\\n{}\".format(wrapped_exception))\n\n    # Join parts with double newlines between sections for clarity\n    return \"\\n\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 434, in <module>\n  File \"<string>\", line 430, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 222, "prediction_id": 2, "generation": "def format_task_error(headline, task, command, formatted_exception=None):\n    \"\"\"\n    Format a message body for an error email related to a luigi.task.Task\n\n    :param headline: Summary line for the message\n    :param task: `luigi.task.Task` instance where this error occurred\n    :param formatted_exception: optional string showing traceback\n\n    :return: message body\n    \"\"\"\n    from luigi.notifications import wrap_traceback\n\n    lines = []\n    lines.append(headline.strip())\n    lines.append(\"\")\n    lines.append(\"Task:\")\n    lines.append(\"  {}\".format(task))\n    lines.append(\"\")\n\n    lines.append(\"Parameters:\")\n    # Collect parameters and their values from task.param_kwargs for listing\n    if hasattr(task, 'param_kwargs'):\n        params = task.param_kwargs\n    else:\n        # fallback: try to get params from task.get_params() (luigi task method)\n        try:\n            params = {param.name: param.value for param in task.get_params()}\n        except Exception:\n            params = {}\n\n    if params:\n        for k in sorted(params):\n            v = params[k]\n            lines.append(\"  {}={}\".format(k, v))\n    else:\n        lines.append(\"  (none)\")\n    lines.append(\"\")\n\n    lines.append(\"Command line:\")\n    if command is not None:\n        # command might be list or string, convert to string sensibly\n        if isinstance(command, (list, tuple)):\n            command_str = ' '.join(map(str, command))\n        else:\n            command_str = str(command)\n    else:\n        command_str = \"(unknown)\"\n    lines.append(\"  {}\".format(command_str))\n    lines.append(\"\")\n\n    if formatted_exception:\n        lines.append(\"Exception traceback:\")\n        lines.append(\"\")\n        lines.append(wrap_traceback(formatted_exception))\n        lines.append(\"\")\n\n    return \"\\n\".join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 460, in <module>\n  File \"<string>\", line 456, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 222, "prediction_id": 3, "generation": "def format_task_error(headline, task, command, formatted_exception=None):\n    \"\"\"\n    Format a message body for an error email related to a luigi.task.Task\n\n    :param headline: Summary line for the message\n    :param task: `luigi.task.Task` instance where this error occurred\n    :param formatted_exception: optional string showing traceback\n\n    :return: message body\n    \"\"\"\n    import textwrap\n    from luigi.notifications import wrap_traceback\n\n    lines = [headline, '']\n\n    # Task id\n    task_id = str(task)\n    lines.append(\"Task id: {}\".format(task_id))\n\n    # Parameters of the task\n    if task.param_kwargs:\n        lines.append(\"Parameters:\")\n        for k in sorted(task.param_kwargs.keys()):\n            v = task.param_kwargs[k]\n            # Represent None explicitly as 'None', else str\n            v_str = repr(v) if v is None else str(v)\n            lines.append(\"  {}={}\".format(k, v_str))\n    else:\n        lines.append(\"No parameters.\")\n\n    # Command (the command string passed to this function)\n    lines.append('')\n    lines.append(\"Command line:\")\n    lines.append(command)\n    lines.append('')\n\n    # Exception traceback if provided\n    if formatted_exception:\n        lines.append(\"Exception traceback:\")\n        lines.append(wrap_traceback(formatted_exception))\n    else:\n        lines.append(\"No traceback available.\")\n\n    # Join lines with newline. If the email format is html, wrap_traceback might produce HTML tags,\n    # so join with '\\n' anyway since most emails accept that.\n    return '\\n'.join(lines)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 449, in <module>\n  File \"<string>\", line 445, in test_extra_0\nAssertionError\n", "passed": false}
{"task_id": 222, "prediction_id": 4, "generation": "from luigi.task import Task\nfrom luigi.notifications import wrap_traceback\nimport textwrap\n\n\ndef format_task_error(headline, task, command, formatted_exception=None):\n    \"\"\"\n    Format a message body for an error email related to a luigi.task.Task\n\n    :param headline: Summary line for the message\n    :param task: `luigi.task.Task` instance where this error occurred\n    :param formatted_exception: optional string showing traceback\n\n    :return: message body\n    \"\"\"\n    # Compose task description: class name and task_id\n    task_name = task.__class__.__name__\n    task_id = task.task_id if hasattr(task, 'task_id') else str(task)\n\n    # Wrap the headline to a max width of 70 characters\n    wrapped_headline = textwrap.fill(headline, width=70)\n\n    # Compose the command line part\n    wrapped_command = textwrap.fill(command, width=70)\n\n    # Compose task info lines\n    task_info = f\"Task {task_name} [{task_id}]\"\n\n    # Compose message parts\n    parts = [wrapped_headline, '', task_info, '', 'Command line:', wrapped_command]\n\n    if formatted_exception:\n        wrapped_tb = wrap_traceback(formatted_exception)\n        parts.extend(['', 'Error traceback:', wrapped_tb])\n\n    # Join all parts with newlines\n    message_body = '\\n'.join(parts)\n\n    return message_body", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 442, in <module>\n  File \"<string>\", line 438, in test_extra_0\nAssertionError\n", "passed": false}
