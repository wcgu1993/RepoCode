{"task_id": 21, "prediction_id": 0, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'{input_string} is not a string.')\n    if not is_full_string(input_string):\n        return False\n    if input_string.startswith(separator):\n        return False\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 688, in <module>\n  File \"<string>\", line 687, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 1, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string.islower():\n        return False\n\n    if not input_string.isupper():\n        return False\n\n    if not input_string.isdigit():\n        return False\n\n    if not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 695, in <module>\n  File \"<string>\", line 694, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 2, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('input_string must be a string')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 3, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(f'Expected a string, got {type(input_string)}')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not input_string.startswith(separator):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696, in <module>\n  File \"<string>\", line 695, in test_12\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 4, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if not input_string.strip():\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "passed", "passed": true}
{"task_id": 21, "prediction_id": 5, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('The input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 6, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    return is_string(input_string) and SNAKE_CASE_TEST_RE.match(input_string)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 676, in <module>\n  File \"<string>\", line 675, in test_9\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 7, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        return False\n\n    if input_string.startswith(separator):\n        input_string = input_string[1:]\n\n    if not input_string:\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 692, in <module>\n  File \"<string>\", line 691, in test_10\nAssertionError\n", "passed": false}
{"task_id": 21, "prediction_id": 8, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if input_string[0].isdigit():\n        return False\n\n    if separator == '_':\n        return SNAKE_CASE_TEST_RE.match(input_string) is not None\n    else:\n        return SNAKE_CASE_TEST_DASH_RE.match(input_string) is not None\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
{"task_id": 21, "prediction_id": 9, "generation": "def is_snake_case(input_string: Any, separator: str = '_') -> bool:\n    \"\"\"\n    Checks if a string is formatted as \"snake case\".\n\n    A string is considered snake case when:\n\n    - it's composed only by lowercase/uppercase letters and digits\n    - it contains at least one underscore (or provided separator)\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_snake_case('foo_bar_baz') # returns true\n    >>> is_snake_case('foo') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :param separator: String to use as separator.\n    :type separator: str\n    :return: True for a snake case string, false otherwise.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError('Input must be a string.')\n\n    if not is_full_string(input_string):\n        return False\n\n    if not SNAKE_CASE_TEST_RE.match(input_string):\n        return False\n\n    if separator and not SNAKE_CASE_TEST_DASH_RE.match(input_string.replace(separator, '-')):\n        return False\n\n    return True\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 740, in <module>\n  File \"<string>\", line 739, in test_26\n  File \"<string>\", line 347, in is_snake_case\nstring_utils.errors.InvalidInputError: Expected \"str\", received \"str\"\n", "passed": false}
