{"task_id": 297, "prediction_id": 0, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 1, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 2, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 3, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 4, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n\nT = TypeVar('T')\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 5, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 6, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 7, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 8, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n", "message": "passed", "passed": true}
{"task_id": 297, "prediction_id": 9, "generation": "def pipe(value, *functions):\n    \"\"\"\n    Perform left-to-right function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from left-to-right\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    \"\"\"\n    return reduce(lambda x, y: y(x), functions, value)\n\nT = TypeVar('T')\n", "message": "passed", "passed": true}
