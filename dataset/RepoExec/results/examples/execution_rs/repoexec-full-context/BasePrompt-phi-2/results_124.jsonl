{"task_id": 124, "prediction_id": 0, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    if isinstance(tree, type_):\n        yield tree\n    for child in tree.body:\n        for node in find(child, type_):\n            yield node\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 106, in <module>\n  File \"<string>\", line 105, in test_1\n  File \"<string>\", line 69, in find\n  File \"<string>\", line 68, in find\nAttributeError: 'Expr' object has no attribute 'body'\n", "passed": false}
{"task_id": 124, "prediction_id": 1, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 2, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 3, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 4, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 5, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 6, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
{"task_id": 124, "prediction_id": 7, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    if isinstance(tree, type_):\n        yield tree\n    for child in tree.body:\n        for node in find(child, type_):\n            yield node\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 106, in <module>\n  File \"<string>\", line 105, in test_1\n  File \"<string>\", line 69, in find\n  File \"<string>\", line 68, in find\nAttributeError: 'Expr' object has no attribute 'body'\n", "passed": false}
{"task_id": 124, "prediction_id": 8, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    if isinstance(tree, type_):\n        yield tree\n    for child in tree.children:\n        for node in find(child, type_):\n            yield node\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 106, in <module>\n  File \"<string>\", line 105, in test_1\n  File \"<string>\", line 68, in find\nAttributeError: 'Module' object has no attribute 'children'\n", "passed": false}
{"task_id": 124, "prediction_id": 9, "generation": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n    for node in ast.walk(tree):\n        if isinstance(node, type_):\n            yield node\n", "message": "passed", "passed": true}
