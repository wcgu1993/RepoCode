{"task_id": 321, "prediction_id": 0, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"Start date must be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date must be after asof date.\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if start == asof:\n        return freq / Decimal('4')\n    if end == asof:\n        return freq / Decimal('5')\n    if start == end:\n        return freq / Decimal('6')\n    if asof == end:\n        return freq / Decimal('7')\n    if start == asof:\n        return freq / Decimal('8')\n    if end == asof:\n        return freq / Decimal('9')\n    if start == end:\n        return freq / Decimal('10')\n    if asof == end:\n        return freq / Decimal('11')\n    if start == asof:\n        return freq / Decimal('12')\n    if end == asof:\n        return freq / Decimal('13')\n    if start == end:\n        return freq / Decimal('14')\n    if asof == end:\n        return freq / Decimal('15')\n    if start == asof:\n        return freq / Decimal('16')\n    if end == asof:\n        return freq / Decimal('17')\n    if start == end:\n        return freq / Decimal('18')\n    if asof == end:\n        return freq / Decimal('19')\n    if start == asof:\n        return freq / Decimal('20')\n    if end == asof:\n        return freq / Decimal('21')\n    if start == end:\n        return freq / Decimal('22')\n    if asof == end:\n        return freq / Decimal('23')\n    if start == asof:\n        return freq / Decimal('24')\n    if end", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    if end\n          ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 321, "prediction_id": 1, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if end < start:\n        raise ValueError(\"end must be after start\")\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == start + relativedelta(months=2):\n        return Decimal('0.5')\n    if asof == start + relativedelta(months=3):\n        return Decimal('0.333333333333')\n    if asof == start + relativedelta(months=4):\n        return Decimal('0.25')\n    if asof == start + relativedelta(months=5):\n        return Decimal('0.2')\n    if asof == start + relativedelta(months=6):\n        return Decimal('0.16666666666667')\n    if asof == start + relativedelta(months=7):\n        return Decimal('0.14285714285714')\n    if asof == start + relativedelta(months=8):\n        return Decimal('0.125')\n    if asof == start + relativedelta(months=9):\n        return Decimal('0.111111111111')\n    if asof == start + relativedelta(months=10):\n        return Decimal('0.1')\n    if asof == start + relativedelta(months=11):\n        return Decimal('0.090909090909091')\n    if asof == start + relativedelta(months=12):\n        return Decimal('0.08333333333333')\n    if asof == start + relativedelta(months=13):\n        return Decimal('0.076923076923077')\n    if asof == start + relativedelta(months=14", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 682\n    if asof == start + relativedelta(months=14\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 321, "prediction_id": 2, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError(\"start date must be before end date\")\n    if asof > end:\n        raise ValueError(\"asof date must be before end date\")\n    if asof < start:\n        raise ValueError(\"asof date must be after start date\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / fre", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 851, in <module>\n  File \"<string>\", line 850, in test_3\nAssertionError\n", "passed": false}
{"task_id": 321, "prediction_id": 3, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return Decimal(1)\n    if start == end:\n        return Decimal(0)\n    if start == end - relativedelta(days=1):\n        return Decimal(1) / freq\n    if start == end - relativedelta(days=2):\n        return Decimal(2) / freq\n    if start == end - relativedelta(days=3):\n        return Decimal(3) / freq\n    if start == end - relativedelta(days=4):\n        return Decimal(4) / freq\n    if start == end - relativedelta(days=5):\n        return Decimal(5) / freq\n    if start == end - relativedelta(days=6):\n        return Decimal(6) / freq\n    if start == end - relativedelta(days=7):\n        return Decimal(7) / freq\n    if start == end - relativedelta(days=8):\n        return Decimal(8) / freq\n    if start == end - relativedelta(days=9):\n        return Decimal(9) / freq\n    if start == end - relativedelta(days=10):\n        return Decimal(10) / freq\n    if start == end - relativedelta(days=11):\n        return Decimal(11) / freq\n    if start == end - relativedelta(days=12):\n        return Decimal(12) / freq\n    if start == end - relativedelta(days=13):\n        return Decimal(13) / freq\n    if start == end - relativedelta(days=14):\n        return Decimal(14) / freq\n    if start == end - relativedelta(days=15):\n        return Decimal(15) / freq\n    if start == end - relativedelta(days=16):\n        return Decimal(16) / freq\n    if start ==", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 684\n    if start ==\n               ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 321, "prediction_id": 4, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=2):\n        return ONE / freq / freq\n    if asof == start + relativedelta(months=3):\n        return ONE / freq / freq / freq\n    if asof == start + relativedelta(months=4):\n        return ONE / freq / freq / freq / freq\n    if asof == start + relativedelta(months=5):\n        return ONE / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=6):\n        return ONE / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=7):\n        return ONE / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=8):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=9):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=10):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relativedelta(months=11):\n        return ONE / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq / freq\n    if asof == start + relat", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 674\n    if asof == start + relat\n                            ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 321, "prediction_id": 5, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if end < start:\n        raise ValueError('end must be after start')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return freq\n    if asof == end:\n        return freq / Decimal('30')\n    if asof == start:\n        return freq / Decimal('360')\n    if asof < start:\n        return freq / Decimal('360')\n    if asof > end:\n        return freq / Decimal('30')\n    return freq / Decimal('360') * (asof - start) / (end - start)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 839, in <module>\n  File \"<string>\", line 838, in test_3\nAssertionError\n", "passed": false}
{"task_id": 321, "prediction_id": 6, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"asof date must be before end date\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if start == asof:\n        return freq / Decimal('4')\n    if asof == end:\n        return freq / Decimal('5')\n    if start == asof:\n        return freq / Decimal('6')\n    if asof == end:\n        return freq / Decimal('7')\n    if start == end:\n        return freq / Decimal('8')\n    if asof == end:\n        return freq / Decimal('9')\n    if start == asof:\n        return freq / Decimal('10')\n    if asof == end:\n        return freq / Decimal('11')\n    if start == end:\n        return freq / Decimal('12')\n    if asof == end:\n        return freq / Decimal('13')\n    if start == asof:\n        return freq / Decimal('14')\n    if asof == end:\n        return freq / Decimal('15')\n    if start == end:\n        return freq / Decimal('16')\n    if asof == end:\n        return freq / Decimal('17')\n    if start == asof:\n        return freq / Decimal('18')\n    if asof == end:\n        return freq / Decimal('19')\n    if start == end:\n        return freq / Decimal('20')\n    if asof == end:\n        return freq / Decimal('21')\n    if start == asof:\n        return freq / Decimal('22')\n    if asof == end:\n        return freq / Decimal('23')\n    if start == end:\n        return freq / Decimal('24')\n    if asof", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    if asof\n           ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 321, "prediction_id": 7, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal(1) / Decimal(360)\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return ONE\n    if asof == end:\n        return ONE / freq\n    if asof == start:\n        return ONE / (freq * (365 if start.month == 12 else 366))\n    if start.month == 12:\n        return ONE / (freq * (365 if asof.month == 12 else 366)) + ONE / (freq * (365 if end.month == 12 else 366))\n    return ONE / (freq * (365 if start.month == asof.month else 366)) + ONE / (freq * (365 if end.month == asof.month else 366)) + ONE / (freq * (365 if end.month == 12 else 366))\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 833, in <module>\n  File \"<string>\", line 832, in test_3\nAssertionError\n", "passed": false}
{"task_id": 321, "prediction_id": 8, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == end - relativedelta(months=1):\n        return ZERO\n    if asof == start + relativedelta(months=2):\n        return ONE\n    if asof == end - relativedelta(months=2):\n        return ZERO\n    if asof == start + relativedelta(months=3):\n        return ONE\n    if asof == end - relativedelta(months=3):\n        return ZERO\n    if asof == start + relativedelta(months=4):\n        return ONE\n    if asof == end - relativedelta(months=4):\n        return ZERO\n    if asof == start + relativedelta(months=5):\n        return ONE\n    if asof == end - relativedelta(months=5):\n        return ZERO\n    if asof == start + relativedelta(months=6):\n        return ONE\n    if asof == end - relativedelta(months=6):\n        return ZERO\n    if asof == start + relativedelta(months=7):\n        return ONE\n    if asof == end - relativedelta(months=7):\n        return ZERO\n    if asof == start + relativedelta(months=8):\n        return ONE\n    if asof == end - relativedelta(months=8):\n        return ZERO\n    if asof == start + relativedelta(months=9):\n        return ONE\n    if asof == end - relativedelta(months=9):\n        return ZERO\n    if asof == start + relativedelta(months=10):\n        return ONE\n    if asof == end - relativedelta(months=10):\n        return ZERO\n    if asof == start + relativedelta(months=11):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 696\n    @dcc(\"30E/360\", {\"30/360 ISMA\", \"30/360 European\", \"30S/360 Special German\", \"Eurobond Basis\"})\nIndentationError: expected an indented block after 'if' statement on line 692\n", "passed": false}
{"task_id": 321, "prediction_id": 9, "generation": "def dcfc_30_360_isda(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30/360 ISDA\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_isda(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_isda(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_isda(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_isda(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('Start date must be before asof date.')\n    if end < asof:\n        raise ValueError('End date must be after asof date.')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('1') / freq\n    if start == asof:\n        return Decimal('1') / freq + dcfc_30_360_isda(start=start, asof=end, freq=freq)\n    if end == asof:\n        return Decimal('1') / freq + dcfc_30_360_isda(start=start, asof=end, freq=freq)\n    return (dcfc_30_360_isda(start=start, asof=asof, freq=freq) + dcfc_30_360_isda(start=asof, asof=end, freq=freq)) / freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 835, in <module>\n  File \"<string>\", line 834, in test_3\nAssertionError\n", "passed": false}
