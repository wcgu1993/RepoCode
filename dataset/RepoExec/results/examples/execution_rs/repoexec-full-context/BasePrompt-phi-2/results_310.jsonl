{"task_id": 310, "prediction_id": 0, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if frequency == 1:\n        return start\n    elif frequency == 2:\n        return start + relativedelta(months=+1)\n    elif frequency == 3:\n        return start + relativedelta(months=+2)\n    elif frequency == 4:\n        return start + relativedelta(months=+3)\n    elif frequency == 5:\n        return start + relativedelta(months=+4)\n    elif frequency == 6:\n        return start + relativedelta(months=+5)\n    elif frequency == 7:\n        return start + relativedelta(months=+6)\n    elif frequency == 8:\n        return start + relativedelta(months=+7)\n    elif frequency == 9:\n        return start + relativedelta(months=+8)\n    elif frequency == 10:\n        return start + relativedelta(months=+9)\n    elif frequency == 11:\n        return start + relativedelta(months=+10)\n    elif frequency == 12:\n        return start + relativedelta(months=+11)\n    elif frequency == 13:\n        return start + relativedelta(months=+12)\n    elif frequency == 14:\n        return start + relativedelta(months=+13)\n    elif frequency == 15:\n        return start + relativedelta(months=+14)\n    elif frequency == 16:\n        return start + relativedelta(months=+15)\n    elif frequency == 17:\n        return start + relativedelta(months=+16)\n    elif frequency == 18:\n        return start + relativedelta(months=+17)\n    elif frequency == 19:\n        return start + relativedelta(months=+18)\n    elif frequency == 20:\n        return start + relativedelta(months=+19)\n    elif frequency == 21:\n        return start + relativedelta(months=+20)\n    elif frequency == 22:\n        return start + relativedelta(months=+21)\n    elif frequency == 23:\n        return start + relativedelta(months=+22)\n    elif frequency == 24:\n        return start + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 187\n    return start + relativedelta(\n                                ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 310, "prediction_id": 1, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof\n    elif frequency == 2:\n        return asof - relativedelta(months=1)\n    elif frequency == 4:\n        return asof - relativedelta(months=2)\n    elif frequency == 6:\n        return asof - relativedelta(months=3)\n    elif frequency == 8:\n        return asof - relativedelta(months=4)\n    elif frequency == 12:\n        return asof - relativedelta(months=12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6, 8 or 12\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 820, in <module>\n  File \"<string>\", line 819, in test_0\nAssertionError\n", "passed": false}
{"task_id": 310, "prediction_id": 2, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof - relativedelta(months=eom)\n    elif frequency == 2:\n        return asof - relativedelta(months=eom - 1)\n    elif frequency == 4:\n        return asof - relativedelta(months=eom - 2)\n    elif frequency == 6:\n        return asof - relativedelta(months=eom - 3)\n    elif frequency == 12:\n        return asof - relativedelta(months=eom - 12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6 or 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 818, in <module>\n  File \"<string>\", line 817, in test_0\nAssertionError\n", "passed": false}
{"task_id": 310, "prediction_id": 3, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if frequency == 1:\n        return start\n    elif frequency == 2:\n        return start + relativedelta(months=+eom)\n    elif frequency == 3:\n        return start + relativedelta(months=+eom, days=-1)\n    elif frequency == 4:\n        return start + relativedelta(months=+eom, days=-2)\n    elif frequency == 5:\n        return start + relativedelta(months=+eom, days=-3)\n    elif frequency == 6:\n        return start + relativedelta(months=+eom, days=-4)\n    elif frequency == 7:\n        return start + relativedelta(months=+eom, days=-5)\n    elif frequency == 8:\n        return start + relativedelta(months=+eom, days=-6)\n    elif frequency == 9:\n        return start + relativedelta(months=+eom, days=-7)\n    elif frequency == 10:\n        return start + relativedelta(months=+eom, days=-8)\n    elif frequency == 11:\n        return start + relativedelta(months=+eom, days=-9)\n    elif frequency == 12:\n        return start + relativedelta(months=+eom, days=-10)\n    else:\n        raise ValueError(\"frequency must be in [1, 12].\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 834, in <module>\n  File \"<string>\", line 833, in test_1\n  File \"<string>\", line 143, in _last_payment_date\nTypeError: bad operand type for unary +: 'NoneType'\n", "passed": false}
{"task_id": 310, "prediction_id": 4, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof - relativedelta(months=eom)\n    elif frequency == 2:\n        return asof - relativedelta(months=eom - 1)\n    elif frequency == 4:\n        return asof - relativedelta(months=eom - 2)\n    elif frequency == 6:\n        return asof - relativedelta(months=eom - 3)\n    elif frequency == 12:\n        return asof - relativedelta(months=eom - 12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6 or 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 818, in <module>\n  File \"<string>\", line 817, in test_0\nAssertionError\n", "passed": false}
{"task_id": 310, "prediction_id": 5, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof - relativedelta(months=1)\n    elif frequency == 2:\n        return asof - relativedelta(months=1, days=1)\n    elif frequency == 4:\n        return asof - relativedelta(months=1, days=1, weeks=1)\n    elif frequency == 6:\n        return asof - relativedelta(months=1, days=1, weeks=1, days=1)\n    elif frequency == 8:\n        return asof - relativedelta(months=1, days=1, weeks=1, days=1, hours=1)\n    elif frequency == 12:\n        return asof - relativedelta(months=1, days=1, weeks=1, days=1, hours=1, days=1, weeks=1)\n    else:\n        raise ValueError(\"frequency must be an integer between 1 and 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 149\nSyntaxError: keyword argument repeated: days\n", "passed": false}
{"task_id": 310, "prediction_id": 6, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if frequency == 1:\n        return _construct_date(asof.year, asof.month, asof.day)\n    elif frequency == 2:\n        return _construct_date(asof.year, asof.month, asof.day - 1)\n    elif frequency == 3:\n        return _construct_date(asof.year, asof.month, asof.day - 2)\n    elif frequency == 4:\n        return _construct_date(asof.year, asof.month, asof.day - 3)\n    elif frequency == 5:\n        return _construct_date(asof.year, asof.month, asof.day - 4)\n    elif frequency == 6:\n        return _construct_date(asof.year, asof.month, asof.day - 5)\n    elif frequency == 7:\n        return _construct_date(asof.year, asof.month, asof.day - 6)\n    elif frequency == 8:\n        return _construct_date(asof.year, asof.month, asof.day - 7)\n    elif frequency == 9:\n        return _construct_date(asof.year, asof.month, asof.day - 8)\n    elif frequency == 10:\n        return _construct_date(asof.year, asof.month, asof.day - 9)\n    elif frequency == 11:\n        return _construct_date(asof.year, asof.month, asof.day - 10)\n    elif frequency == 12:\n        return _construct_date(asof.year, asof.month, asof.day - 11)\n    elif frequency == 13:\n        return _construct_date(asof.year, asof.month, asof.day - 12)\n    elif frequency == 14:\n        return _construct_date(asof.year, asof.month, asof.day - 13)\n    elif frequency == 15:\n        return _construct_date(asof.year, asof.month, asof.day - 14)\n    elif frequency == 16:\n        return _construct_date(asof.year", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 171\n    return _construct_date(asof.year\n                          ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 310, "prediction_id": 7, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof - relativedelta(months=eom)\n    elif frequency == 2:\n        return asof - relativedelta(months=eom - 1)\n    elif frequency == 4:\n        return asof - relativedelta(months=eom - 2)\n    elif frequency == 6:\n        return asof - relativedelta(months=eom - 3)\n    elif frequency == 12:\n        return asof - relativedelta(months=eom - 12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6 or 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 818, in <module>\n  File \"<string>\", line 817, in test_0\nAssertionError\n", "passed": false}
{"task_id": 310, "prediction_id": 8, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof - relativedelta(months=eom)\n    elif frequency == 2:\n        return asof - relativedelta(months=eom - 1)\n    elif frequency == 4:\n        return asof - relativedelta(months=eom - 2)\n    elif frequency == 6:\n        return asof - relativedelta(months=eom - 3)\n    elif frequency == 12:\n        return asof - relativedelta(months=eom - 12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6 or 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 818, in <module>\n  File \"<string>\", line 817, in test_0\n  File \"<string>\", line 141, in _last_payment_date\nNameError: name 'monthrange' is not defined\n", "passed": false}
{"task_id": 310, "prediction_id": 9, "generation": "def _last_payment_date(start: Date, asof: Date, frequency: Union[int, Decimal], eom: Optional[int] = None) -> Date:\n    \"\"\"\n    Returns the last coupon payment date.\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2015,  1,  1), datetime.date(2015, 12, 31), 1)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  8, 31), 2)\n    datetime.date(2015, 7, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  1,  1), datetime.date(2015,  4, 30), 2)\n    datetime.date(2015, 1, 1)\n\n    >>> _last_payment_date(datetime.date(2014,  6,  1), datetime.date(2015,  4, 30), 1)\n    datetime.date(2014, 6, 1)\n\n    >>> _last_payment_date(datetime.date(2008,  7,  7), datetime.date(2015, 10,  6), 4)\n    datetime.date(2015, 7, 7)\n\n    >>> _last_payment_date(datetime.date(2014, 12,  9), datetime.date(2015, 12,  4), 1)\n    datetime.date(2014, 12, 9)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2016,  1,  6), 2)\n    datetime.date(2015, 12, 15)\n\n    >>> _last_payment_date(datetime.date(2012, 12, 15), datetime.date(2015, 12, 31), 2)\n    datetime.date(2015, 12, 15)\n    \"\"\"\n    if eom is None:\n        eom = calendar.monthrange(asof.year, asof.month)[1]\n    if frequency == 1:\n        return asof\n    elif frequency == 2:\n        return asof - relativedelta(months=1)\n    elif frequency == 4:\n        return asof - relativedelta(months=2)\n    elif frequency == 6:\n        return asof - relativedelta(months=3)\n    elif frequency == 12:\n        return asof - relativedelta(months=12)\n    else:\n        raise ValueError(\"frequency must be 1, 2, 4, 6 or 12.\")\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 818, in <module>\n  File \"<string>\", line 817, in test_0\nAssertionError\n", "passed": false}
