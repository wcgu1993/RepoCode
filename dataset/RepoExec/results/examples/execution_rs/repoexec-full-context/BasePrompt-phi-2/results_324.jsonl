{"task_id": 324, "prediction_id": 0, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n\n    if asof < start:\n        raise ValueError(f\"asof ({asof}) must be after start ({start})\")\n\n    if asof > end:\n        raise ValueError(f\"asof ({asof}) must be before end ({end})\")\n\n    if asof == start:\n        return freq\n\n    if asof == end:\n        return ONE\n\n    if _is_last_day_of_month(asof):\n        return freq * dcfc_30_360_german(start=start, asof=asof, end=end)\n\n    return freq * dcfc_30_360_german(start=start, asof=asof + relativedelta(days=1), end=end)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 833, in <module>\n  File \"<string>\", line 832, in test_126\n  File \"<string>\", line 773, in dcfc_30_360_german\n  File \"<string>\", line 773, in dcfc_30_360_german\n  File \"<string>\", line 773, in dcfc_30_360_german\n  [Previous line repeated 975 more times]\n  File \"<string>\", line 772, in dcfc_30_360_german\n  File \"<string>\", line 103, in _is_last_day_of_month\n  File \"/usr/local/lib/python3.10/calendar.py\", line 125, in monthrange\n    day1 = weekday(year, month, 1)\n  File \"/usr/local/lib/python3.10/calendar.py\", line 115, in weekday\n    if not datetime.MINYEAR <= year <= datetime.MAXYEAR:\nRecursionError: maximum recursion depth exceeded in comparison\n", "passed": false}
{"task_id": 324, "prediction_id": 1, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return Decimal('1')\n    if end == asof:\n        return Decimal('0')\n    if start > asof:\n        return Decimal('0')\n    if end < asof:\n        return Decimal('0')\n    if start == end:\n        return Decimal('1')\n    if start == asof:\n        return Decimal('0')\n    if end == asof:\n        return Decimal('1')\n    if start == end:\n        return Decimal('0')\n    if start == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if end == asof + relativedelta(months=1):\n        return Decimal('0.5')\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2):\n        return Decimal('0.3333333333333333')\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2) and _is_last_day_of_month(asof):\n        return Decimal('0.3333333333333333')\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2) and not _is_last_day_of_month(asof):\n        return Decimal('0.3333333333333333')\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2) and _is_last_day_of_month(asof) and _is_last_day_of_month(end):\n        return Decimal('0.3333333333333333')\n    if start == asof + relativedelta(months=1) and end == asof + relativedelta(months=2) and _is_last_day_of_month(asof) and not _is_last_day_of_month(end):\n        return Decimal('0.3333333333333333')\n    if start == asof + relativedelta", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 789\n    if start == asof + relativedelta\n                                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": 324, "prediction_id": 2, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n\n    if asof < start:\n        raise ValueError('asof cannot be before start')\n\n    if asof > end:\n        raise ValueError('asof cannot be after end')\n\n    if asof == start:\n        return freq\n\n    if asof == end:\n        return ONE\n\n    if _is_last_day_of_month(asof):\n        return freq * dcfc_30_360_german(start=start, asof=asof, end=end)\n\n    if _is_last_day_of_month(asof + relativedelta(days=1)):\n        return freq * dcfc_30_360_german(start=start, asof=asof, end=asof + relativedelta(days=1))\n\n    return freq * dcfc_30_360_german(start=start, asof=asof, end=asof + relativedelta(days=1)) + \\\n           dcfc_30_360_german(start=asof + relativedelta(days=1), asof=end, end=end)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_126\n  File \"<string>\", line 773, in dcfc_30_360_german\n  File \"<string>\", line 773, in dcfc_30_360_german\n  File \"<string>\", line 773, in dcfc_30_360_german\n  [Previous line repeated 975 more times]\n  File \"<string>\", line 772, in dcfc_30_360_german\n  File \"<string>\", line 103, in _is_last_day_of_month\n  File \"/usr/local/lib/python3.10/calendar.py\", line 125, in monthrange\n    day1 = weekday(year, month, 1)\n  File \"/usr/local/lib/python3.10/calendar.py\", line 115, in weekday\n    if not datetime.MINYEAR <= year <= datetime.MAXYEAR:\nRecursionError: maximum recursion depth exceeded in comparison\n", "passed": false}
{"task_id": 324, "prediction_id": 3, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n\n    if asof == start:\n        return Decimal('1')\n\n    if asof == end:\n        return Decimal('0')\n\n    if asof.year == start.year:\n        if _is_last_day_of_month(start):\n            return Decimal('1')\n        else:\n            return Decimal('0.5')\n\n    if asof.year == end.year:\n        if _is_last_day_of_month(end):\n            return Decimal('0.5')\n        else:\n            return Decimal('1')\n\n    if asof.year < start.year:\n        return Decimal('0')\n\n    if asof.year > end.year:\n        return Decimal('0')\n\n    if asof.month == start.month:\n        if _is_last_day_of_month(start):\n            return Decimal('1')\n        else:\n            return Decimal('0.5')\n\n    if asof.month == end.month:\n        if _is_last_day_of_month(end):\n            return Decimal('0.5')\n        else:\n            return Decimal('1')\n\n    if asof.month < start.month:\n        return Decimal('0')\n\n    if asof.month > end.month:\n        return Decimal('0')\n\n    return Decimal('0.5')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 866, in <module>\n  File \"<string>\", line 865, in test_126\nAssertionError\n", "passed": false}
{"task_id": 324, "prediction_id": 4, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > end:\n        raise ValueError('start must be before end')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return freq\n    if asof == end:\n        return ONE\n    if _is_last_day_of_month(asof):\n        if asof == start:\n            return freq\n        if asof == end:\n            return ONE\n        if asof == start + relativedelta(months=1):\n            return ONE / freq\n        return (freq / 2) * (1 + dcfc_30_360_german(start=start, asof=asof + relativedelta(days=1), end=end))\n    if asof == start + relativedelta(months=1):\n        return freq / 2\n    return (freq / 2) * (1 + dcfc_30_360_german(start=start, asof=asof + relativedelta(days=1), end=end))\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_126\nAssertionError\n", "passed": false}
{"task_id": 324, "prediction_id": 5, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return freq\n    if start > asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if _is_last_day_of_month(start):\n        return freq / Decimal('30')\n    if _is_last_day_of_month(asof):\n        return freq / Decimal('30')\n    return freq / Decimal('30') + dcfc_30_360_german(start=start, asof=asof + relativedelta(days=1), end=end, freq=freq)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 827, in <module>\n  File \"<string>\", line 826, in test_126\nAssertionError\n", "passed": false}
{"task_id": 324, "prediction_id": 6, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('Start date must be before asof date.')\n    if end < asof:\n        raise ValueError('End date must be after asof date.')\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('2')\n    if start == end:\n        return freq / Decimal('3')\n    if _is_last_day_of_month(start):\n        return freq / Decimal('2') + dcfc_30_360_german(start=start, asof=asof, end=end)\n    return freq / Decimal('2') + dcfc_30_360_german(start=start, asof=asof, end=end + relativedelta(months=1))\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 829, in <module>\n  File \"<string>\", line 828, in test_126\n  File \"<string>\", line 771, in dcfc_30_360_german\n  File \"<string>\", line 771, in dcfc_30_360_german\n  File \"<string>\", line 771, in dcfc_30_360_german\n  [Previous line repeated 975 more times]\n  File \"/usr/local/lib/python3.10/site-packages/dateutil/relativedelta.py\", line 172, in __init__\n    if any(x is not None and x != int(x) for x in (years, months)):\n  File \"/usr/local/lib/python3.10/site-packages/dateutil/relativedelta.py\", line 172, in <genexpr>\n    if any(x is not None and x != int(x) for x in (years, months)):\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "passed": false}
{"task_id": 324, "prediction_id": 7, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return freq\n    if start == end:\n        return freq / 2\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(days=2):\n        return freq / 3\n    if start == end - relativedelta(days=3):\n        return freq / 4\n    if start == end - relativedelta(days=4):\n        return freq / 5\n    if start == end - relativedelta(days=5):\n        return freq / 6\n    if start == end - relativedelta(days=6):\n        return freq / 7\n    if start == end - relativedelta(days=7):\n        return freq / 8\n    if start == end - relativedelta(days=8):\n        return freq / 9\n    if start == end - relativedelta(days=9):\n        return freq / 10\n    if start == end - relativedelta(days=10):\n        return freq / 11\n    if start == end - relativedelta(days=11):\n        return freq / 12\n    if start == end - relativedelta(days=12):\n        return freq / 13\n    if start == end - relativedelta(days=13):\n        return freq / 14\n    if start == end - relativedelta(days=14):\n        return freq / 15\n    if start == end - relativedelta(days=15):\n        return freq / 16\n    if start == end - relativedelta(days=16):\n        return freq / 17\n    if start == end - relativedelta(days=17):\n        return freq / 18\n    if start == end - relativedelta(days=18):\n        return freq / 19\n    if start == end - relativedelta(days=19):\n        return freq / 20\n    if start == end -", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 805\n    if start == end -\n                     ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 324, "prediction_id": 8, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal(30) / Decimal(360)\n    return (asof - start).days / Decimal(360) * freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 817, in <module>\n  File \"<string>\", line 816, in test_126\nAssertionError\n", "passed": false}
{"task_id": 324, "prediction_id": 9, "generation": "def dcfc_30_360_german(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return freq\n    if start > asof:\n        return 0\n    if end == asof:\n        return freq\n    if end < asof:\n        return 0\n    if _is_last_day_of_month(start):\n        return freq * dcfc_30_360_german(start=start, asof=asof, end=end)\n    if _is_last_day_of_month(end):\n        return freq * dcfc_30_360_german(start=start, asof=asof, end=end)\n    return freq * (dcfc_30_360_german(start=start, asof=asof, end=end) + dcfc_30_360_german(start=end, asof=asof, end=asof)) / 2\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 829, in <module>\n  File \"<string>\", line 828, in test_126\n  File \"<string>\", line 771, in dcfc_30_360_german\n  File \"<string>\", line 771, in dcfc_30_360_german\n  File \"<string>\", line 771, in dcfc_30_360_german\n  [Previous line repeated 975 more times]\n  File \"<string>\", line 767, in dcfc_30_360_german\n  File \"<string>\", line 103, in _is_last_day_of_month\n  File \"/usr/local/lib/python3.10/calendar.py\", line 125, in monthrange\n    day1 = weekday(year, month, 1)\n  File \"/usr/local/lib/python3.10/calendar.py\", line 115, in weekday\n    if not datetime.MINYEAR <= year <= datetime.MAXYEAR:\nRecursionError: maximum recursion depth exceeded in comparison\n", "passed": false}
