{"task_id": 74, "prediction_id": 0, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if status >= 400:\n        return f'{status} ({to_unicode(status_message(status))})'\n    return status_message(status)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 122, in test_0\n  File \"<string>\", line 72, in response_status_message\nNameError: name 'status_message' is not defined\n", "passed": false}
{"task_id": 74, "prediction_id": 1, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        status = str(status)\n    if isinstance(status, str):\n        status = status.strip()\n    if status.startswith('2'):\n        return '2xx'\n    elif status.startswith('3'):\n        return '3xx'\n    elif status.startswith('4'):\n        return '4xx'\n    elif status.startswith('5'):\n        return '5xx'\n    else:\n        return 'Unknown'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 133, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 2, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, str):\n        return status\n    if isinstance(status, (bytes, int)):\n        status = str(status)\n    if isinstance(status, float):\n        status = str(int(status))\n    return f'{status} {html.escape(status)}'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 124, in test_0\n  File \"<string>\", line 74, in response_status_message\nAttributeError: module 'w3lib.html' has no attribute 'escape'\n", "passed": false}
{"task_id": 74, "prediction_id": 3, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        if status >= 400:\n            return f'{status} {http.HTTPStatus(status).phrase}'\n        return f'{status}'\n    raise TypeError(f'Invalid status code type: {type(status).__name__}')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 127, in <module>\n  File \"<string>\", line 126, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 4, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        status = str(status)\n    if isinstance(status, bytes):\n        status = status.decode('utf-8')\n    return f'{status} ({status})'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 124, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 5, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, str):\n        status = int(status)\n    if status >= 400:\n        return f'{status} {status_messages[status]}'\n    return f'{status} OK'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 124, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 6, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        status = str(status)\n    if isinstance(status, str):\n        status = status.strip()\n    if status.startswith('2'):\n        return '2xx'\n    if status.startswith('3'):\n        return '3xx'\n    if status.startswith('4'):\n        return '4xx'\n    if status.startswith('5'):\n        return '5xx'\n    return 'Unknown'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 134, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 7, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        if status == 200:\n            return 'OK'\n        elif status == 404:\n            return 'Not Found'\n        elif status == 500:\n            return 'Internal Server Error'\n        else:\n            return f'{status}'\n    else:\n        raise TypeError('status must be a number or string')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 132, in test_0\nAssertionError\n", "passed": false}
{"task_id": 74, "prediction_id": 8, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if status < 200 or status >= 300:\n        return f'{status} {html.unescape(html.unescape(to_unicode(http.HTTPStatus(status).phrase)))}'\n    return f'{status}'\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 122, in test_0\n  File \"<string>\", line 71, in response_status_message\nAttributeError: module 'w3lib.html' has no attribute 'unescape'\n", "passed": false}
{"task_id": 74, "prediction_id": 9, "generation": "def response_status_message(status: Union[bytes, float, int, str]) -> str:\n    \"\"\"Return status code plus status text descriptive message\n    \"\"\"\n    if isinstance(status, (bytes, str)):\n        status = int(status)\n    if isinstance(status, float):\n        status = int(status)\n    if isinstance(status, int):\n        status = str(status)\n    if isinstance(status, str):\n        status = status.lower()\n    if status == 200:\n        return 'OK'\n    if status == 404:\n        return 'Not Found'\n    if status == 500:\n        return 'Internal Server Error'\n    if status == 403:\n        return 'Forbidden'\n    if status == 401:\n        return 'Unauthorized'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'\n    if status == 403:\n        return 'Forbidden'", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 187, in <module>\n  File \"<string>\", line 186, in test_0\nAssertionError\n", "passed": false}
