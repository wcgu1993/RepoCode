{"task_id": 323, "prediction_id": 0, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return freq\n    if start == end:\n        return freq * (1 - ONE)\n    if start == end - relativedelta(days=1):\n        return freq * (1 - ONE)\n    if start == end - relativedelta(days=2):\n        return freq * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=3):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=4):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=5):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=6):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=7):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=8):\n        return freq * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE) * (1 - ONE)\n    if start == end - relativedelta(days=9):\n        return freq * (1 - ONE) * (1 - ONE) * (1", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 748\n    return freq * (1 - ONE) * (1 - ONE) * (1\n                                          ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 323, "prediction_id": 1, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (asof - start).days * freq + (end - asof).days * freq\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 822, in <module>\n  File \"<string>\", line 821, in test_23\nAssertionError\n", "passed": false}
{"task_id": 323, "prediction_id": 2, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if asof == end:\n        return freq\n    if asof < start:\n        return ZERO\n    if asof < end:\n        return freq * (1 + dcfc_30_e_plus_360(start=start, asof=asof + relativedelta(days=1), end=end))\n    return ZERO\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 831, in <module>\n  File \"<string>\", line 830, in test_23\nAssertionError\n", "passed": false}
{"task_id": 323, "prediction_id": 3, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (asof - start).days / (end - start).days + freq\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 822, in <module>\n  File \"<string>\", line 821, in test_23\n  File \"<string>\", line 721, in dcfc_30_e_plus_360\nTypeError: unsupported operand type(s) for +: 'float' and 'decimal.Decimal'\n", "passed": false}
{"task_id": 323, "prediction_id": 4, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (asof - start).days * freq + (end - asof).days * freq\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 821, in <module>\n  File \"<string>\", line 820, in test_23\nAssertionError\n", "passed": false}
{"task_id": 323, "prediction_id": 5, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (end - start).days * freq + (asof - start).days * (freq + ONE)\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 822, in <module>\n  File \"<string>\", line 821, in test_23\nAssertionError\n", "passed": false}
{"task_id": 323, "prediction_id": 6, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE\n    if asof > end:\n        raise ValueError(\"asof must be before end\")\n    if asof < start:\n        raise ValueError(\"asof must be after start\")\n    if asof == start:\n        return freq\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return freq / 2\n    if asof == start + relativedelta(months=2):\n        return freq / 3\n    if asof == start + relativedelta(months=3):\n        return freq / 4\n    if asof == start + relativedelta(months=4):\n        return freq / 5\n    if asof == start + relativedelta(months=5):\n        return freq / 6\n    if asof == start + relativedelta(months=6):\n        return freq / 7\n    if asof == start + relativedelta(months=7):\n        return freq / 8\n    if asof == start + relativedelta(months=8):\n        return freq / 9\n    if asof == start + relativedelta(months=9):\n        return freq / 10\n    if asof == start + relativedelta(months=10):\n        return freq / 11\n    if asof == start + relativedelta(months=11):\n        return freq / 12\n    if asof == start + relativedelta(months=12):\n        return freq / 13\n    if asof == start + relativedelta(months=13):\n        return freq / 14\n    if asof == start + relativedelta(months=14):\n        return freq / 15\n    if asof == start + relativedelta(months=15):\n        return freq / 16\n    if asof == start + relativedelta(months=16):\n        return freq / 17\n    if asof == start + relativedelta(months=17):\n        return freq / 18\n    if asof == start + relativedelta(months=18):\n        return freq / 19\n    if asof == start + relativedelta(months=19):", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 768\n    @dcc(\"30/360 German\", {\"30E/360 ISDA\"})\nIndentationError: expected an indented block after 'if' statement on line 765\n", "passed": false}
{"task_id": 323, "prediction_id": 7, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) - relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) - relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(months=1) - relativedelta(days=1) - relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == start + relativedelta(months=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1) + relativedelta(days=1):\n        return ONE / freq\n    if asof == end - relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 751\n    if asof == end - relativedelta(\n                                  ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 323, "prediction_id": 8, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    return (asof - start).days / (end - start).days + freq\n\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 822, in <module>\n  File \"<string>\", line 821, in test_23\n  File \"<string>\", line 721, in dcfc_30_e_plus_360\nTypeError: unsupported operand type(s) for +: 'float' and 'decimal.Decimal'\n", "passed": false}
{"task_id": 323, "prediction_id": 9, "generation": "def dcfc_30_e_plus_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E+/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33333333333333')\n    \"\"\"\n    if freq is None:\n        freq = ONE\n    if start > asof:\n        raise ValueError(\"Start date cannot be after asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < start:\n        raise ValueError(\"End date cannot be before start date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < start:\n        raise ValueError(\"End date cannot be before start date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before asof date.\")\n    if end < asof:\n        raise ValueError(\"End date cannot be before", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 764\n    raise ValueError(\"End date cannot be before\n                     ^\nSyntaxError: unterminated string literal (detected at line 764)\n", "passed": false}
