{"task_id": 281, "prediction_id": 0, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 1, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match is None:\n        raise ValueError(\"Invalid netloc: %r\" % netloc)\n    return match.group(1), int(match.group(2))\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 1133, in <module>\n  File \"<string>\", line 1132, in test_0\n  File \"<string>\", line 1034, in split_host_and_port\nValueError: Invalid netloc: '192.168.1.1'\n", "passed": false}
{"task_id": 281, "prediction_id": 2, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 3, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    else:\n        return netloc, None\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 4, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    else:\n        return netloc, None\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 5, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 6, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    else:\n        return netloc, None\n\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 7, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 8, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n", "message": "passed", "passed": true}
{"task_id": 281, "prediction_id": 9, "generation": "def split_host_and_port(netloc: str) -> Tuple[str, Optional[int]]:\n    \"\"\"Returns ``(host, port)`` tuple from ``netloc``.\n\n    Returned ``port`` will be ``None`` if not present.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    match = _netloc_re.match(netloc)\n    if match:\n        return match.group(1), int(match.group(2))\n    return netloc, None\n", "message": "passed", "passed": true}
