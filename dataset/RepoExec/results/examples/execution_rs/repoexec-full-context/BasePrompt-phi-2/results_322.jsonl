{"task_id": 322, "prediction_id": 0, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError('start must be before asof')\n    if end < asof:\n        raise ValueError('end must be after asof')\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if start == asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    if end == asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    if start < asof:\n        return freq / Decimal('30') + freq / Decimal('360') * (asof - start) / Decimal('30')\n    return freq / Decimal('30') + freq / Decimal('360') * (end - start) / Decimal('30')\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 837, in <module>\n  File \"<string>\", line 836, in test_11\nAssertionError\n", "passed": false}
{"task_id": 322, "prediction_id": 1, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start date cannot be after asof date\")\n    if end < asof:\n        raise ValueError(\"termination date cannot be before asof date\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ONE / freq\n    if start == end:\n        return ONE / (freq * (1 + freq))\n    if start == end - relativedelta(days=1):\n        return ONE / (freq * (1 + freq))\n    if start == end - relativedelta(days=2):\n        return ONE / (freq * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=3):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=4):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=5):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=6):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=7):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq) * (1 + freq))\n    if start == end - relativedelta(days=8):\n        return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq)", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 707\n    return ONE / (freq * (1 + freq) * (1 + freq) * (1 + freq)\n                 ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 322, "prediction_id": 2, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == end - relativedelta(days=1):\n        return freq / 2\n    if end == start + relativedelta(days=1):\n        return freq / 2\n    if start == end - relativedelta(months=1):\n        return freq / 12\n    if end == start + relativedelta(months=1):\n        return freq / 12\n    if start == end - relativedelta(years=1):\n        return freq / 360\n    if end == start + relativedelta(years=1):\n        return freq / 360\n    if start == end - relativedelta(years=1, months=1):\n        return freq / 360 / 12\n    if end == start + relativedelta(years=1, months=1):\n        return freq / 360 / 12\n    if start == end - relativedelta(years=1, months=2):\n        return freq / 360 / 12 / 2\n    if end == start + relativedelta(years=1, months=2):\n        return freq / 360 / 12 / 2\n    if start == end - relativedelta(years=1, months=3):\n        return freq / 360 / 12 / 2 / 2\n    if end == start + relativedelta(years=1, months=3):\n        return freq / 360 / 12 / 2 / 2\n    if start == end - relativedelta(years=1, months=4):\n        return freq / 360 / 12 / 2 / 2 / 2\n    if end == start + relativedelta(years=1, months=4):\n        return freq / 360 / 12 / 2 / 2 / 2\n    if start == end - relativedelta(years=1, months=5):\n        return freq / 360 / 12 / 2 /", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 721\n    return freq / 360 / 12 / 2 /\n                                ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 322, "prediction_id": 3, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if end == asof:\n        return ZERO\n    if start == end:\n        return ONE / freq\n    if start == end - relativedelta(days=1):\n        return ONE / freq\n    if start == end - relativedelta(days=2):\n        return ONE / freq\n    if start == end - relativedelta(days=3):\n        return ONE / freq\n    if start == end - relativedelta(days=4):\n        return ONE / freq\n    if start == end - relativedelta(days=5):\n        return ONE / freq\n    if start == end - relativedelta(days=6):\n        return ONE / freq\n    if start == end - relativedelta(days=7):\n        return ONE / freq\n    if start == end - relativedelta(days=8):\n        return ONE / freq\n    if start == end - relativedelta(days=9):\n        return ONE / freq\n    if start == end - relativedelta(days=10):\n        return ONE / freq\n    if start == end - relativedelta(days=11):\n        return ONE / freq\n    if start == end - relativedelta(days=12):\n        return ONE / freq\n    if start == end - relativedelta(days=13):\n        return ONE / freq\n    if start == end - relativedelta(days=14):\n        return ONE / freq\n    if start == end - relativedelta(days=15):\n        return ONE / freq\n    if start == end - relativedelta(days=16):\n        return ONE / freq\n    if start == end - relativedelta(days=17):\n        return ONE / freq\n    if start == end - relativedelta(days=18):\n        return ONE / freq\n    if start == end - relativedelta(days=19):\n        ", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 732\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 728\n", "passed": false}
{"task_id": 322, "prediction_id": 4, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if start == asof:\n        return freq\n    if end == asof:\n        return freq / Decimal('30')\n    if start == end:\n        return freq / Decimal('360')\n    if start == end - relativedelta(days=1):\n        return freq / Decimal('360')\n    if start == end - relativedelta(months=1):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1):\n        return freq / Decimal('360')\n    if start == end - relativedelta(years=1, months=1):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=2):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=3):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=4):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=5):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=6):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=7):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=8):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=9):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=10):\n        return freq / Decimal('30')\n    if start == end - relativedelta(years=1, months=11):\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722\n    @dcc(\"30E+/360\")\nIndentationError: expected an indented block after 'if' statement on line 718\n", "passed": false}
{"task_id": 322, "prediction_id": 5, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError('asof must be before end')\n    if asof < start:\n        raise ValueError('asof must be after start')\n    if asof == start:\n        return Decimal('1')\n    if asof == end:\n        return Decimal('0')\n    if asof == start + relativedelta(months=1):\n        return Decimal('1')\n    if asof == start + relativedelta(months=2):\n        return Decimal('1.5')\n    if asof == start + relativedelta(months=3):\n        return Decimal('2.25')\n    if asof == start + relativedelta(months=4):\n        return Decimal('2.625')\n    if asof == start + relativedelta(months=5):\n        return Decimal('3.125')\n    if asof == start + relativedelta(months=6):\n        return Decimal('3.375')\n    if asof == start + relativedelta(months=7):\n        return Decimal('3.625')\n    if asof == start + relativedelta(months=8):\n        return Decimal('4.25')\n    if asof == start + relativedelta(months=9):\n        return Decimal('4.5')\n    if asof == start + relativedelta(months=10):\n        return Decimal('4.75')\n    if asof == start + relativedelta(months=11):\n        return Decimal('5.25')\n    if asof == start + relativedelta(months=12):\n        return Decimal('5.5')\n    if asof == start + relativedelta(months=13):\n        return Decimal('5.75')\n    if asof == start + relativedelta(months=14):\n        return Decimal('6.25')\n    if asof == start + relativedelta(months=15):\n        return Decimal('6.5')\n    if asof == start + relativedelta(months=16):\n        return Decimal('6.75')\n    if asof ==", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 722\n    if asof ==\n              ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": 322, "prediction_id": 6, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if not freq:\n        freq = Decimal('1')\n    if asof > end:\n        raise ValueError(\"asof cannot be after end\")\n    if asof < start:\n        raise ValueError(\"asof cannot be before start\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return ONE\n    if asof == start + relativedelta(months=2):\n        return ONE / 2\n    if asof == start + relativedelta(months=3):\n        return ONE / 3\n    if asof == start + relativedelta(months=4):\n        return ONE / 4\n    if asof == start + relativedelta(months=5):\n        return ONE / 5\n    if asof == start + relativedelta(months=6):\n        return ONE / 6\n    if asof == start + relativedelta(months=7):\n        return ONE / 7\n    if asof == start + relativedelta(months=8):\n        return ONE / 8\n    if asof == start + relativedelta(months=9):\n        return ONE / 9\n    if asof == start + relativedelta(months=10):\n        return ONE / 10\n    if asof == start + relativedelta(months=11):\n        return ONE / 11\n    if asof == start + relativedelta(months=12):\n        return ONE / 12\n    if asof == start + relativedelta(months=13):\n        return ONE / 13\n    if asof == start + relativedelta(months=14):\n        return ONE / 14\n    if asof == start + relativedelta(months=15):\n        return ONE / 15\n    if asof == start + relativedelta(months=16):\n        return ONE / 16\n    if asof == start + relativedelta(months=17):\n        return ONE / 17\n    if asof == start + relativedelta(months=18):\n        return ONE / 18\n    if asof == start + relativedelta(months=19):\n        return ONE / 19\n    if asof == start + relativedelta(", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 728\n    if asof == start + relativedelta(\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 322, "prediction_id": 7, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start == asof:\n        return ONE\n    if start > asof:\n        return ZERO\n    if end == asof:\n        return ONE\n    if end < asof:\n        return ZERO\n    if start == end:\n        return freq\n    if start == asof:\n        return freq / (1 - freq)\n    if end == asof:\n        return freq / (1 + freq)\n    return freq / (1 - freq) * (asof - start) / (end - start)\n", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 835, in <module>\n  File \"<string>\", line 834, in test_11\nAssertionError\n", "passed": false}
{"task_id": 322, "prediction_id": 8, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = ONE / 360\n    if start > asof:\n        raise ValueError(\"start date must be before asof date\")\n    if end < asof:\n        raise ValueError(\"end date must be after asof date\")\n    if asof > end:\n        raise ValueError(\"asof date must be before end date\")\n    if asof == start:\n        return ONE\n    if asof == end:\n        return ZERO\n    if asof == start + relativedelta(months=1):\n        return freq\n    if asof == start + relativedelta(months=2):\n        return freq / 2\n    if asof == start + relativedelta(months=3):\n        return freq / 3\n    if asof == start + relativedelta(months=4):\n        return freq / 4\n    if asof == start + relativedelta(months=5):\n        return freq / 5\n    if asof == start + relativedelta(months=6):\n        return freq / 6\n    if asof == start + relativedelta(months=7):\n        return freq / 7\n    if asof == start + relativedelta(months=8):\n        return freq / 8\n    if asof == start + relativedelta(months=9):\n        return freq / 9\n    if asof == start + relativedelta(months=10):\n        return freq / 10\n    if asof == start + relativedelta(months=11):\n        return freq / 11\n    if asof == start + relativedelta(months=12):\n        return freq / 12\n    if asof == start + relativedelta(months=13):\n        return freq / 13\n    if asof == start + relativedelta(months=14):\n        return freq / 14\n    if asof == start + relativedelta(months=15):\n        return freq / 15\n    if asof == start + relativedelta(months=16):\n        return freq / 16\n    if asof == start + relativedelta(months=17):\n        return freq / 17\n    if asof == start + relativedelta(months", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 726\n    if asof == start + relativedelta(months\n                                    ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": 322, "prediction_id": 9, "generation": "def dcfc_30_e_360(start: Date, asof: Date, end: Date, freq: Optional[Decimal] = None) -> Decimal:\n    \"\"\"\n    Computes the day count fraction for the \"30E/360\" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal('0.16666666666667')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal('0.16944444444444')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal('1.08333333333333')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal('1.33055555555556')\n    \"\"\"\n    if freq is None:\n        freq = Decimal('1')\n    if start > asof:\n        raise ValueError(\"start must be before asof\")\n    if end < asof:\n        raise ValueError(\"end must be after asof\")\n    if start == asof:\n        return ONE\n    if start == end:\n        return ZERO\n    if start == end - relativedelta(days=1):\n        return ONE\n    if start == end - relativedelta(days=2):\n        return ZERO\n    if start == end - relativedelta(days=3):\n        return ONE\n    if start == end - relativedelta(days=4):\n        return ZERO\n    if start == end - relativedelta(days=5):\n        return ONE\n    if start == end - relativedelta(days=6):\n        return ZERO\n    if start == end - relativedelta(days=7):\n        return ONE\n    if start == end - relativedelta(days=8):\n        return ZERO\n    if start == end - relativedelta(days=9):\n        return ONE\n    if start == end - relativedelta(days=10):\n        return ZERO\n    if start == end - relativedelta(days=11):\n        return ONE\n    if start == end - relativedelta(days=12):\n        return ZERO\n    if start == end - relativedelta(days=13):\n        return ONE\n    if start == end - relativedelta(days=14):\n        return ZERO\n    if start == end - relativedelta(days=15):\n        return ONE\n    if start == end - relativedelta(days=16):\n        return ZERO\n    if start == end - relativedelta(days=17):\n        return ONE\n    if start == end - relativedelta(days=18):\n        return ZERO\n    if start == end - relativedelta(days=19):\n        return ONE\n    if start == end - relativedelta(days=20):\n        return ZERO\n    if start == end - relativedelta(days=21):\n        return ONE\n    if start == end - relativedelta(days=22):\n        return Z", "message": "failed: Traceback (most recent call last):\n  File \"/codegendata/human-eval/human_eval/execution.py\", line 57, in unsafe_execute\n    exec(check_program, exec_globals)\n  File \"<string>\", line 871, in <module>\n  File \"<string>\", line 870, in test_11\nTypeError: float() argument must be a string or a real number, not 'NoneType'\n", "passed": false}
