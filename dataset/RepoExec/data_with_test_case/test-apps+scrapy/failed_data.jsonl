{"problem_ids": 405, "project": "test-apps/scrapy", "focal_function": "def method_is_overridden(subclass, base_class, method_name):\n    \"\"\"\n    Return True if a method named ``method_name`` of a ``base_class``\n    is overridden in a ``subclass``.\n\n    >>> class Base:\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub1(Base):\n    ...     pass\n    >>> class Sub2(Base):\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub3(Sub1):\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub4(Sub2):\n    ...     pass\n    >>> method_is_overridden(Sub1, Base, 'foo')\n    False\n    >>> method_is_overridden(Sub2, Base, 'foo')\n    True\n    >>> method_is_overridden(Sub3, Base, 'foo')\n    True\n    >>> method_is_overridden(Sub4, Base, 'foo')\n    True\n    \"\"\"\n    base_method = getattr(base_class, method_name)\n    sub_method = getattr(subclass, method_name)\n    return base_method.__code__ is not sub_method.__code__", "module": "scrapy.utils.deprecate", "code": "import warnings\nimport inspect\nfrom scrapy.exceptions import ScrapyDeprecationWarning\n\ndef method_is_overridden(subclass, base_class, method_name):\n    \"\"\"\n    Return True if a method named ``method_name`` of a ``base_class``\n    is overridden in a ``subclass``.\n\n    >>> class Base:\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub1(Base):\n    ...     pass\n    >>> class Sub2(Base):\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub3(Sub1):\n    ...     def foo(self):\n    ...         pass\n    >>> class Sub4(Sub2):\n    ...     pass\n    >>> method_is_overridden(Sub1, Base, 'foo')\n    False\n    >>> method_is_overridden(Sub2, Base, 'foo')\n    True\n    >>> method_is_overridden(Sub3, Base, 'foo')\n    True\n    >>> method_is_overridden(Sub4, Base, 'foo')\n    True\n    \"\"\"\n    base_method = getattr(base_class, method_name)\n    sub_method = getattr(subclass, method_name)\n    return base_method.__code__ is not sub_method.__code__", "entry_point": "method_is_overridden", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert method_is_overridden(A, A, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert method_is_overridden(B, A, '__new__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert method_is_overridden(object, object, '__init__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert method_is_overridden(type('Sub11', (type('Sub1'),), {'foo': lambda: BaseClass}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert method_is_overridden(object, object, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert method_is_overridden(F, A, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert method_is_overridden(Sub4, Base, 'foo') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert method_is_overridden(type('Sub7', (type('Sub1'),), {'foo': None}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert method_is_overridden(type('Sub10', (type('Sub2'),), {'foo': lambda: None}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert method_is_overridden(Sub3, Base, 'foo')  == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert method_is_overridden(Sub1, Base, 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert method_is_overridden(type('Sub2', (type('Base'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert method_is_overridden(str, str, '__init__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert method_is_overridden(type('Sub8', (type('Sub2'),), {'foo': None}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert method_is_overridden(Sub3, Base, 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert method_is_overridden(Sub3, Base, 'foo') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert method_is_overridden(Sub2, Base, 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert method_is_overridden(str, object, '__repr__') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert method_is_overridden(Sub1, Base, 'foo')  is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert method_is_overridden(type('Sub1', (type('Base'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert method_is_overridden(F, A, 'foo') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert method_is_overridden(Sub2, Base, 'foo') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert method_is_overridden(object, object, '__repr__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert method_is_overridden(A, object, '__new__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert method_is_overridden(A, object, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert method_is_overridden(type('Sub4', (type('Sub2'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert method_is_overridden(B, A, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert method_is_overridden(tuple, tuple, '__repr__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert method_is_overridden(type('Sub12', (type('Sub2'),), {'foo': lambda: BaseClass}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert method_is_overridden(D, B, '__new__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert method_is_overridden(A, object, '__str__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert method_is_overridden(dict, dict, 'clear') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert method_is_overridden(Sub4, Base, 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert method_is_overridden(E, B, '__new__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert method_is_overridden(type('Sub13', (type('Sub1'),), {'foo': lambda: Sub1Class}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert method_is_overridden(dict, dict, 'update') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert method_is_overridden(Sub1, Base, 'foo') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert method_is_overridden(str, str, '__repr__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert method_is_overridden(dict, dict, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert method_is_overridden(tuple, tuple, '__init__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert method_is_overridden(Sub1, Base, 'foo')  == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert method_is_overridden(Sub2, Base, 'foo')  is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert method_is_overridden(object, object, '__str__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert method_is_overridden(type('Sub5', (type('Sub1'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert method_is_overridden(Sub2, Base, 'foo')  == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert method_is_overridden(Sub4, Base, 'foo')  is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert method_is_overridden(E, B, '__init__') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert method_is_overridden(B, A, 'foo') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert method_is_overridden(Sub4, Base, 'foo')  == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert method_is_overridden(Sub3, Base, 'foo')  is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert method_is_overridden(type('Sub3', (type('Sub1'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert method_is_overridden(E, B, 'foo') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert method_is_overridden(type('Sub9', (type('Sub1'),), {'foo': lambda: None}), type('Base'), 'foo') is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert method_is_overridden(str, object, '__init__') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert method_is_overridden(D, B, 'foo') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert method_is_overridden(type('Sub6', (type('Sub2'),), {}), type('Base'), 'foo') is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert method_is_overridden(D, B, '__init__') == False"]}
{"problem_ids": 412, "project": "test-apps/scrapy", "focal_function": "def _get_form(response, formname, formid, formnumber, formxpath):\n    \"\"\"Find the form element \"\"\"\n    root = create_root_node(response.text, lxml.html.HTMLParser,\n                            base_url=get_base_url(response))\n    forms = root.xpath('//form')\n    if not forms:\n        raise ValueError(f\"No <form> element found in {response}\")\n\n    if formname is not None:\n        f = root.xpath(f'//form[@name=\"{formname}\"]')\n        if f:\n            return f[0]\n\n    if formid is not None:\n        f = root.xpath(f'//form[@id=\"{formid}\"]')\n        if f:\n            return f[0]\n\n    # Get form element from xpath, if not found, go up\n    if formxpath is not None:\n        nodes = root.xpath(formxpath)\n        if nodes:\n            el = nodes[0]\n            while True:\n                if el.tag == 'form':\n                    return el\n                el = el.getparent()\n                if el is None:\n                    break\n        raise ValueError(f'No <form> element found with {formxpath}')\n\n    # If we get here, it means that either formname was None\n    # or invalid\n    if formnumber is not None:\n        try:\n            form = forms[formnumber]\n        except IndexError:\n            raise IndexError(f\"Form number {formnumber} not found in {response}\")\n        else:\n            return form", "module": "scrapy.http.request.form", "code": "from urllib.parse import urljoin, urlencode\nimport lxml.html\nfrom parsel.selector import create_root_node\nfrom w3lib.html import strip_html5_whitespace\nfrom scrapy.http.request import Request\nfrom scrapy.utils.python import to_bytes, is_listlike\nfrom scrapy.utils.response import get_base_url\n\ndef get_base_url(response: \"scrapy.http.response.text.TextResponse\") -> str:\n    \"\"\"Return the base url of the given response, joined with the response url\"\"\"\n\ndef _get_form(response, formname, formid, formnumber, formxpath):\n    \"\"\"Find the form element \"\"\"\n    root = create_root_node(response.text, lxml.html.HTMLParser,\n                            base_url=get_base_url(response))\n    forms = root.xpath('//form')\n    if not forms:\n        raise ValueError(f\"No <form> element found in {response}\")\n\n    if formname is not None:\n        f = root.xpath(f'//form[@name=\"{formname}\"]')\n        if f:\n            return f[0]\n\n    if formid is not None:\n        f = root.xpath(f'//form[@id=\"{formid}\"]')\n        if f:\n            return f[0]\n\n    # Get form element from xpath, if not found, go up\n    if formxpath is not None:\n        nodes = root.xpath(formxpath)\n        if nodes:\n            el = nodes[0]\n            while True:\n                if el.tag == 'form':\n                    return el\n                el = el.getparent()\n                if el is None:\n                    break\n        raise ValueError(f'No <form> element found with {formxpath}')\n\n    # If we get here, it means that either formname was None\n    # or invalid\n    if formnumber is not None:\n        try:\n            form = forms[formnumber]\n        except IndexError:\n            raise IndexError(f\"Form number {formnumber} not found in {response}\")\n        else:\n            return form", "entry_point": "_get_form", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert isinstance(_get_form(Response(url='http://example.com'), formname='bla', formid='bla1', formnumber=1, formxpath='bla2'), lxml.etree.ElementBase)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert _get_form('<form id=\"test\"></form>', formname=None, formid='test', formnumber=None, formxpath=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert _get_form('<form name=\"test\"></form>', formname='test', formid=None, formnumber=None, formxpath=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert _get_form('http://www.example.com/1', formxpath='//div[@class=\"classname\"]/form').tag == 'form'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert _get_form(b\"<form action='abc'></form><form action='xyz'></form>\",\n                      formname=None, formid=None, formnumber=None, formxpath=\"//form\") == \\\n            lxml.html.HtmlElement('<form action=\"abc\"></form>')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert _get_form(b\"<form action='abc'></form><form action='xyz'></form>\",\n                      formname=None, formid=None, formnumber=1, formxpath=None) == \\\n            lxml.html.HtmlElement('<form action=\"abc\"></form>')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert _get_form(response, 'search', None, None, None).tag == 'form'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert _get_form(r, 'ctl00$ContentPlaceHolder1$investorMaster$investorQuickSearch', \n        None, 1, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert _get_form(resp, formname=None, formid=None, formnumber=1, formxpath=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert _get_form('<form name=\"test\"><div><input></div></form>', formname='test', formid=None, formnumber=None, formxpath='//div')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert _get_form(b\"<form action='abc'></form><form action='xyz'></form>\",\n                     formname=None, formid=None, formnumber=0, formxpath=None) == \\\n            lxml.html.HtmlElement('<form action=\"xyz\"></form>')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert _get_form(b\"<form action='abc'></form><form action='xyz'></form>\",\n                      formname=None, formid=None, formnumber=None, formxpath=\"//form[2]\") == \\\n            lxml.html.HtmlElement('<form action=\"xyz\"></form>')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert _get_form('http://www.example.com/1', formxpath='//div[@class=\"classname\"]/table') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert _get_form(response, \"login\", None, None, None)"]}
{"problem_ids": 414, "project": "test-apps/scrapy", "focal_function": "def listen_tcp(portrange, host, factory):\n    \"\"\"Like reactor.listenTCP but tries different ports in a range.\"\"\"\n    from twisted.internet import reactor\n    if len(portrange) > 2:\n        raise ValueError(f\"invalid portrange: {portrange}\")\n    if not portrange:\n        return reactor.listenTCP(0, factory, interface=host)\n    if not hasattr(portrange, '__iter__'):\n        return reactor.listenTCP(portrange, factory, interface=host)\n    if len(portrange) == 1:\n        return reactor.listenTCP(portrange[0], factory, interface=host)\n    for x in range(portrange[0], portrange[1] + 1):\n        try:\n            return reactor.listenTCP(x, factory, interface=host)\n        except error.CannotListenError:\n            if x == portrange[1]:\n                raise", "module": "scrapy.utils.reactor", "code": "import asyncio\nfrom contextlib import suppress\nfrom twisted.internet import asyncioreactor, error\nfrom scrapy.utils.misc import load_object\n\nfrom twisted.internet reactor, error\n\ndef listen_tcp(portrange, host, factory):\n    \"\"\"Like reactor.listenTCP but tries different ports in a range.\"\"\"\n    from twisted.internet import reactor\n    if len(portrange) > 2:\n        raise ValueError(f\"invalid portrange: {portrange}\")\n    if not portrange:\n        return reactor.listenTCP(0, factory, interface=host)\n    if not hasattr(portrange, '__iter__'):\n        return reactor.listenTCP(portrange, factory, interface=host)\n    if len(portrange) == 1:\n        return reactor.listenTCP(portrange[0], factory, interface=host)\n    for x in range(portrange[0], portrange[1] + 1):\n        try:\n            return reactor.listenTCP(x, factory, interface=host)\n        except error.CannotListenError:\n            if x == portrange[1]:\n                raise", "entry_point": "listen_tcp", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 1234 == int(listen_tcp([1235, 1234], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 1000 == int(listen_tcp((1000, 1000), 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 1235 == int(listen_tcp([1234, 1235, 1236], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 1234 == int(listen_tcp([1234, 1235], \"localhost\", None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert listen_tcp((1,), 0, 0).getHost() == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 12345 == int(listen_tcp([12344, 12346], None, None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 12345 == int(listen_tcp([12344, 12345], None, None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 1234 == listen_tcp(1234, None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 8888 == int(listen_tcp(range(8888, 8889), 'localhost', None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1234 == int(listen_tcp([1234, 1235], '', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 8002 == listen_tcp(range(8000, 8003), '', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 1234 == int(listen_tcp(range(1234, 1236), '', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 20000 == listen_tcp([20000], 'localhost').getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 1236 == int(listen_tcp([1234, 1236, 1237], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 1234 == listen_tcp((1234, 1234), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 1235 == listen_tcp(None, \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 1235 == listen_tcp((1234, 1235), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 9999 == listen_tcp([9999], \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 1000 < listen_tcp(range(1001), '127.0.0.1', None).getHost().port < 1001", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 1000 == int(listen_tcp((1000, 10000), '0.0.0.0', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert listen_tcp((8000, 8000), None, None).getHost().port == 8000", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 8000 == listen_tcp(range(8000, 8001), '', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 12345 == int(listen_tcp(12345, None, None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 9999 != listen_tcp(9999, \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 1234 == int(listen_tcp([(1234, 1235), (1234, 1235)], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 1234 == listen_tcp((), None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 1 == listen_tcp((1, 1), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 1235 == listen_tcp((1234, 1236), \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 1234 == int(listen_tcp(1234, \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 8888 == int(listen_tcp(8888, 'localhost', None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 1234 == int(listen_tcp(1234, \"localhost\", None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 1234 == listen_tcp((0, 1234), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 1234 == listen_tcp(('127.0.0.1', 1234), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 1234 == listen_tcp((1234,), None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 1235 == int(listen_tcp(range(1234, 1236), '', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 8992 == listen_tcp((8990,8991), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 1234 == int(listen_tcp([1234, 1234], \"localhost\", None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 2 == listen_tcp(2, \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 1234 == listen_tcp(range(1234, 1235), None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 3 == listen_tcp([3, 1], 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 1000 == int(listen_tcp((1000, 1000), '0.0.0.0', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert 1234 == listen_tcp((1234,), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1234 == listen_tcp(1234, \"0.0.0.0\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 8000 <= listen_tcp(9999, None, None).getHost().port <= 9999", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 10 == int(listen_tcp(10, '0.0.0.0', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 20001 == listen_tcp([20000, 20001], 'localhost').getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 1234 == listen_tcp(1234, \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 1234 == listen_tcp((1233, 1234), None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 20000 == listen_tcp([20000, 20001], 'localhost').getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert listen_tcp((8000, 9999), None, None).getHost().port >= 8000", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 9898 == listen_tcp(9898, \"0.0.0.0\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 1234 == int(listen_tcp([1234], \"localhost\", None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert 10000 != listen_tcp((9999, 10000), \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 1000 == int(listen_tcp((10000, 10000), 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 1234 == int(listen_tcp(1234, 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert 2 == listen_tcp(2, '', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 2 == listen_tcp((2, 2), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 1234 == listen_tcp([1234], None, None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 1235 == int(listen_tcp([(1235, 1236)], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert 8990 == listen_tcp(8990, \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert 10 == int(listen_tcp(10, 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 20001 == listen_tcp((20001, 20000), 'localhost').getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert 2 == listen_tcp([1], 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert 1234 == int(listen_tcp([1234, 1234], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert 12346 == int(listen_tcp([12345, 12346], None, None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 1235 == int(listen_tcp([1234, 1235], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert 10000 <= int(listen_tcp(range(10000,10001), '0.0.0.0', None).getHost().port) <= 10001", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 3 == listen_tcp([1, 3, 5, 7], 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 1234 == listen_tcp((1234, 1234), \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert 1234 == int(listen_tcp([1233, 1234], \"localhost\", None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert listen_tcp(range(1, 3), 0, 0).getHost() == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 8990 == listen_tcp((8990,8990), \"localhost\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 1235 == int(listen_tcp([1234, 1235], '', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 1234 == int(listen_tcp([(1234, 1235)], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert 20001 == listen_tcp([20001, 20000], 'localhost').getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert 1234 == int(listen_tcp([1235, 1234], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert 1234 == int(listen_tcp([1234, 1235], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 1234 == int(listen_tcp([(1235, 1236), (1234, 1235)], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert 8888 == int(listen_tcp([8888], 'localhost', None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 1234 == int(listen_tcp([(1235, 1234)], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert 8000 == listen_tcp(8000, '', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert 1234 == int(listen_tcp(1234, '', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert 12345 == int(listen_tcp(12344, None, None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 1234 == listen_tcp((1233, 1234), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 2 == listen_tcp([1, 3], 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert 1234 == listen_tcp((1234, 1235), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert 1000 == int(listen_tcp((10000, 10000), '0.0.0.0', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 2 == listen_tcp(1, 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert 1234 == listen_tcp(1234, '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert 1234 == int(listen_tcp([1234], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert 1000 == int(listen_tcp((1000, 10000), 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert 1234 == int(listen_tcp([1234, 1235], '127.0.0.1', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert 1234 == int(listen_tcp([1234], \"localhost\", None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert 1234 == int(listen_tcp([1234], 'localhost', None).getHost().port)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert 0 == listen_tcp((), '127.0.0.1', None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert 8888 == int(listen_tcp(range(8888, 8890), 'localhost', None)._realPortNumber)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 9999 == listen_tcp((9999, 9999), \"127.0.0.1\", None).getHost().port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert 1000 < listen_tcp(range(1000, 1001), '127.0.0.1', None).getHost().port < 1001", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert 2 == listen_tcp([1, 3, 1], 'localhost', '').port", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert 1000 < listen_tcp(range(1000, 1002), '127.0.0.1', None).getHost().port < 1002", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert listen_tcp((1, 2), 0, 0).getHost() == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert 1234 == int(listen_tcp([1234, 1235, 1236], '127.0.0.1', None).getHost().port)"]}
{"problem_ids": 423, "project": "test-apps/scrapy", "focal_function": "def parallel(iterable, count, callable, *args, **named):\n    \"\"\"Execute a callable over the objects in the given iterable, in parallel,\n    using no more than ``count`` concurrent calls.\n\n    Taken from: https://jcalderone.livejournal.com/24285.html\n    \"\"\"\n    coop = task.Cooperator()\n    work = (callable(elem, *args, **named) for elem in iterable)\n    return defer.DeferredList([coop.coiterate(work) for _ in range(count)])", "module": "scrapy.utils.defer", "code": "import asyncio\nimport inspect\nfrom functools import wraps\nfrom twisted.internet import defer, task\nfrom twisted.python import failure\nfrom scrapy.exceptions import IgnoreRequest\nfrom scrapy.utils.reactor import is_asyncio_reactor_installed\n\ndef parallel(iterable, count, callable, *args, **named):\n    \"\"\"Execute a callable over the objects in the given iterable, in parallel,\n    using no more than ``count`` concurrent calls.\n\n    Taken from: https://jcalderone.livejournal.com/24285.html\n    \"\"\"\n    coop = task.Cooperator()\n    work = (callable(elem, *args, **named) for elem in iterable)\n    return defer.DeferredList([coop.coiterate(work) for _ in range(count)])", "entry_point": "parallel", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 120 == parallel(range(120), 60, lambda x: x).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 0 == len(parallel([], 1, lambda: defer.Deferred().addCallback(lambda _: 1)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 8 == len([x for x in parallel(range(10), 5, lambda x: x)])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 2 == parallel(range(10), 4, sum).result.index((True, []))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 6 == parallel([1, 2, 3], 3, lambda *a, **kw: 1).addCallback(sum)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 3 == len(parallel(range(3), 3, lambda x: defer.succeed(x + 1)).result)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 5 == len(list(parallel([1,2,3,4,5], 5, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 1 == len(parallel([lambda: defer.succeed(1), lambda: defer.succeed(2)], 2, lambda: defer.Deferred()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 1 == len(parallel([lambda: defer.succeed(1)], 1, lambda: defer.Deferred()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 2 == len(parallel([1, 2, 3, 4], 2, defer.succeed))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 0 == parallel(list(range(2)), 1, lambda x: 0).addErrback(\n        lambda f: f.value.index).result.args[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 3 == len(list(parallel([1,2,3,4,5], 3, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 1 == len([x for x in parallel(range(1), 1, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 2 == len(parallel([lambda: defer.succeed(1), lambda: defer.succeed(2)], 1, lambda: defer.Deferred()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 1 == len([x for x in parallel([1, 2], 1, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 120 == parallel(range(120), 120, lambda x: x).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 6 == sum([e[1] for e in parallel(range(6), 2, lambda x: defer.succeed(x + 1))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 100 == len([i for i in parallel(range(100), 100, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 9 <= sum([x for x in parallel(range(100), 10, lambda x: (x, sum([i for i in range(x)])))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 4 == parallel(range(10), 10, len).result[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 0 == defer.DeferredList([parallel(range(100), 10, lambda x: defer.succeed(x + 1))]).addCallback(lambda r: sum([i[1] for i in r])).addCallback(lambda r: r - 100)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 2 == len([x for x in parallel(range(10), 10, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 1 == len([x for x in parallel([1], 1, lambda x: defer.Deferred().addCallback(lambda _: x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 0 == parallel(range(1), 1, lambda x: 0).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert [4, 5, 6] == parallel([2, 3, 4], 1, lambda i: i + 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert [4, 5, 6] == parallel([2, 3, 4], 3, lambda i: i + 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 3 == len(list(parallel([1,2,3,4,5], 2, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 4 == len([x for x in parallel(range(4), 3, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 2 == len([x for x in parallel([1, 2], 2, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert [4, 5, 6] == parallel([2, 3, 4], 2, lambda i: i + 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 4 == len(parallel(range(4), 4, lambda x: defer.succeed(x + 1)).result)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 1 == len(parallel([1, 2, 3], 1, defer.succeed))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 5 == len(parallel(range(10), 10, lambda x: x + 1))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 5 == len(list(parallel([1,2,3,4,5], 1, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 120 == parallel(range(120), 20, lambda x: x).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 5 == len([x for x in parallel(range(5), 4, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 2 == len([i for i in parallel(range(100), 2, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 1 == parallel(list(range(2)), 1, lambda x: 0 if x else 1/0).addErrback(\n        lambda f: f.value.index).result.args[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 120 == parallel(range(120), 10, lambda x: x).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 3 == len([x for x in parallel(range(100), 1000, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 10 == len(parallel(range(10), 5, lambda x: x))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert 1 == len([x for x in parallel(range(10), 1, lambda x: defer.succeed(x + 1))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 3 == len([i for i in parallel(range(5), 2, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 10 == parallel(range(10), 5, lambda x: defer.succeed(x)).addCallback(len).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 1 == parallel(list(range(1)), 2, lambda x: 0 if x else 1/0).addErrback(\n        lambda f: f.value.index).result.args[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 2 == [i for i in parallel(range(10), 5, lambda x: defer.Deferred().addCallback(lambda _: x) and i)[0]][0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 0 == parallel(list(range(1)), 1, lambda x: 0).addErrback(\n        lambda f: f.value.index).result.args[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert [8, 8, 8] == parallel(\n        [1, 2, 3], 3, lambda x, timeout: task.deferLater(reactor, timeout, lambda: x)).addCallback(\n            lambda results: [len(results), *map(lambda r: r[1], results)]).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 0 == (parallel(range(10), 1, lambda x: defer.succeed(x + 1)).addCallback(\n        lambda r: sum([i[1] for i in r if i[0]]))).addCallback(\n            lambda r: (r == sum(range(1, 11)))).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 2 == len([x for x in parallel(range(2), 1, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 6 == parallel([1, 2, 3], 4, lambda *a, **kw: 1).addCallback(sum)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 5 == len(parallel(range(10), 10, lambda x: x + 1, 2, 3, a=10))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert 5 == len(parallel(range(5), 5, lambda x: defer.succeed(x + 1)).result)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 3 == len([x for x in parallel(range(3), 2, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 6 == parallel([1, 2, 3], 2, lambda *a, **kw: 1).addCallback(sum)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert 0 == parallel([], 1, lambda *a, **kw: 1).addCallback(sum)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 0 == parallel(list(range(2)), 2, lambda x: 0).addErrback(\n        lambda f: f.value.index).result.args[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 120 == parallel(range(120), 1, lambda x: x).addCallback(lambda r: sum(r))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 500 == sum([x for x in parallel(range(500), 100, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert 10 == list(map(lambda x: x[0] + 1, parallel(range(10), 2, lambda x: defer.succeed(x + 1))))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert 4 == len(list(parallel([1,2,3,4,5], 4, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 2 == len([x for x in parallel(range(4), 4, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert 3 == len(parallel([1, 2, 3, 4, 5, 6], 3, defer.succeed))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert 1 == len(parallel([1], 1, defer.succeed))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert 2 == 0 or parallel([0, 1], 2, lambda x: defer.Deferred())[0][1] is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 1 == len(parallel(range(1), 1, lambda x: defer.succeed(x + 1)).result)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert 0 == parallel(range(1000), 1000, lambda x: x).addCallback(lambda x: sum(x)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 10 == parallel(list(range(10)), 1, defer.Deferred.succeed).addCallback(lambda res: sum([x[1] for x in res])).addCallback(lambda x: x)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 1 == (\n        parallel([1, 2, 3], 1, lambda x: defer.succeed(x))\n        .addCallback(lambda r: sum([x[1] for x in r]))\n        .addCallback(lambda s: s == 6)\n    ).addCallback(lambda s: int(s))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert 1 == len([i for i in parallel(range(100), 1, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 5 == len(parallel(\"12345\", 10, lambda elem: elem))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 2 == len(parallel(range(2), 2, lambda x: defer.succeed(x + 1)).result)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 4 == len([x for x in parallel(range(100), 10, lambda x: defer.succeed(x))])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 5 == len(list(parallel([1,2,3,4,5], 6, lambda x: x)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert 4 == parallel([2], 1, lambda i: i + 1)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert 3 == parallel([1, 2, 3], 1, lambda *a, **kw: 1).addCallback(sum)"]}
{"problem_ids": 443, "project": "test-apps/scrapy", "focal_function": "def url_is_from_spider(url, spider):\n    \"\"\"Return True if the url belongs to the given spider\"\"\"\n    return url_is_from_any_domain(url, [spider.name] + list(getattr(spider, 'allowed_domains', [])))", "module": "scrapy.utils.url", "code": "import posixpath\nimport re\nfrom urllib.parse import ParseResult, urldefrag, urlparse, urlunparse\nfrom w3lib.url import *\nfrom w3lib.url import _safe_chars, _unquotepath\nfrom scrapy.utils.python import to_unicode\n\ndef url_is_from_any_domain(url, domains):\n    \"\"\"Return True if the url belongs to any of the given domains\"\"\"\n\ndef url_is_from_spider(url, spider):\n    \"\"\"Return True if the url belongs to the given spider\"\"\"\n    return url_is_from_any_domain(url, [spider.name] + list(getattr(spider, 'allowed_domains', [])))", "entry_point": "url_is_from_spider", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert url_is_from_spider(\"http://wheele-bin-art.co.uk/tub.html\", \"wheelebinart\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"www.wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert not url_is_from_spider('http://www.wscraping.com/', 'wrongdomain.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert url_is_from_spider('http://sub.wscraping.com/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert url_is_from_spider(\"http://www.wscraping.com/help\", 'www.wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert url_is_from_spider(\"http://www.wheeee.net\", \"wheeee.org\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert not url_is_from_spider('http://www.wscraping.com/good/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert url_is_from_spider(\"http://www.wscraping.com/index.html\", [\"example.it\", \"wscraping\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", [\"wscraping\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert not url_is_from_spider(\"http://spider.wheele-bin-art.co.uk/get/product/137\", \"wheel\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert url_is_from_spider(\"http://www.wscraping.com/index.html\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", \"wscraping_com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='wheele-bin-art.co.uk', allowed_domains=['troll.net']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert not url_is_from_spider('http://www.example.com/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert url_is_from_spider('http://www.wheee.org', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert not url_is_from_spider(\"http://www.example.com/\", 'quotes_spider')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert not url_is_from_spider(\"http://www.example.org/article.html\", \n                scrapy.Spider(name=\"example.com\"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert not url_is_from_spider('http://www.example.com/', ScrapySpider)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert url_is_from_spider('http://scrapy.org/something', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert not url_is_from_spider('http://www.example.com/some/page.html', Mock(spec=Spider, allowed_domains=['www.example2.com']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", [\"example\", \"wscraping\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert not url_is_from_spider(\"http://wheele-bin-art.com/get/product/123\",\n                \"wheele-bin-art\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert url_is_from_spider('http://www.wscraping.com/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.co.uk/tub.html\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert url_is_from_spider(\"http://wscraping.com\",     \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n            mock.Mock(spec=scrapy.Spider, name=\"art\", allowed_domains=['co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/137?arg\", \"wheel\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"wheelebinart.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert url_is_from_spider('http://scrapy.org.something', ['scrapy', 'wheee'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert not url_is_from_spider(\"http://www.wheeee.net\", \"wheeee\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert not url_is_from_spider('http://wscraping.com/index', 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", \"wscraping.com/in/\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert not url_is_from_spider('http://wheele-bin-art.co.uk/',    Spider(name='wheele-bin-art.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert url_is_from_spider(\"http://www.wscraping.com/help\", ['www.wscraping.com', 'wscraping.com'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n                                  scrapy.Spider(name='art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert not url_is_from_spider('http://wheele-bin-art.co.uk',     Spider(name='wheele-bin-art.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert url_is_from_spider('http://www.wscraping.com/index/', \n                                ScrapyCrawlerRunSpider('http://www.wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert not url_is_from_spider('http://www.wscrapy.com/test/test.html', Spider('http://www.wscrapy.com/test/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert url_is_from_spider('http://www.wscrapy.com/test/test.html', Spider('http://www.wscrapy.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert url_is_from_spider(\"http://www.wscraping.com/help\", ['wscraping.com', 'www.wscraping.com'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert url_is_from_spider(\"http://www.baidu.com\", \"shida\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert not url_is_from_spider('http://www.wscraping.com/', 'notwscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert not url_is_from_spider(\"http://www.wscraping.com/help\", None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert url_is_from_spider(\"http://www.wscraping.com/foo\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                                  ScrapySpider('http://www.wheele-bin-art.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert url_is_from_spider('http://www.wscraping.com/index/', \n                                ScrapyCrawlerRunSpider('http://www.wscraping.com/index/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/147', \"wheelebinart.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", \"WWW.WSCRAPING.COM\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"wscraping_com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert not url_is_from_spider(\"http://wscraping.com\", \"www.wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert not url_is_from_spider(\"http://www.wscraping.org\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert url_is_from_spider('http://wscraping.com/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/item/123',\n                scrapy.Spider(name='artsnova'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert not url_is_from_spider('http://www.wscraping.co.uk/', 'wscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert url_is_from_spider('http://www.w3af.org/', w3afCore())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/137\", \"ant\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert url_is_from_spider(\"http://www.example.com/article.html\", \n                scrapy.Spider(name=\"example.com\"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert not url_is_from_spider('http://www.wscrapy.com/test2/', Spider('http://www.wscrapy.com/test'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/t-sets/wheele_bin_art_misc-1/wheele_art-bin_11.htm', \"wheele\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n            scrapy.Spider('foo', allowed_domains=['bar.com']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", [\"WWW.WSCRAPING.COM\", \"anotherdomain.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert url_is_from_spider('http://wheele-bin-art.co.uk',     Spider(name='wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert not url_is_from_spider(\"http://www.example.com/\", \"wscraping\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert not url_is_from_spider(\"http://wheele-bin-art.co.uk/get/product/137\", \"wheel\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert not url_is_from_spider('http://www.google.com/', w3afCore())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert url_is_from_spider('http://scrapy.org', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \"wheelebinart\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert url_is_from_spider(\"http://www.wscraping.com\", [\"wscraping_com\", \"anotherdomain.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tubing.html',\n                scrapy.Spider(name='art.wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub-style-1000.html', \n        scrapy.Spider(name = 'art', allowed_domains=['www.wheele-bin-art.co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/', Spider(name='wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert not url_is_from_spider('http://wheee.org', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert url_is_from_spider(\"http://www.wscraping.com/foo\", \"wscraping.com/foo\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n            mock.Mock(spec=scrapy.Spider, name=\"art\", allowed_domains=None))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert url_is_from_spider(\"http://www.wscraping.com/index.html\", [\"wscraping.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert not url_is_from_spider('http://www.example.com/',\n                                  DummySpider(name='wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"wscraping\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert url_is_from_spider(\"http://wheele-bin-art.co.uk/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.com/tub.html\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert not url_is_from_spider('http://www.wscrapy.org/test', Spider('http://www.wscrapy.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert url_is_from_spider('http://www.wscraping.com/',\n                    scrapy.Spider(name='wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert url_is_from_spider('http://wheee.org', ['scrapy', 'wheee'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert url_is_from_spider('http://www.wheee.org/something', ['scrapy', 'wheee'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert url_is_from_spider('http://www.wscrapy.com/test/', Spider('http://www.wscrapy.com/test'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert not url_is_from_spider('http://www.wscraping.com/index/', \n                                ScrapyCrawlerRunSpider('http://www.other.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n            mock.Mock(spec=scrapy.Spider, name=\"art\", allowed_domains=['bin']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/147', \"art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                               ScrapySpider('http://www.wheele-bin-art.co.uk/get/product/123'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"bin\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/138/Pooks-Farm-Bag\", \"foo\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert url_is_from_spider(\"http://www.wheeee.org\", \"wheeee\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert not url_is_from_spider(\"http://www.example.com/\", [\"example.it\", \"wscraping.it\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert url_is_from_spider('http://www.wscraping.com/index/', \n                                ScrapySpider('http://www.wscraping.com/index/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.co.uk/wheels\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert not url_is_from_spider(\"http://www.wscraping.com/index.html\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert not url_is_from_spider('http://wheee.org/something', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert url_is_from_spider(\"http://www.wscraping.com/help\", ['wscraping.com'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert not url_is_from_spider('http://scraping.wscraping.com/index', 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"foo\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.com/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    assert url_is_from_spider(\"http://www.baidu.com\", \"baidu\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    assert url_is_from_spider('http://www.wscrapy.com/test', Spider('http://www.wscrapy.com/test'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    assert url_is_from_spider('http://www.w3af.org/', w3afCommunity())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/137?arg\", \"whe\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/tub-style-1000.html', \n        scrapy.Spider(name = 'art'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert url_is_from_spider('http://www.wscraping.com/',\n                               DummySpider(name='wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub-style-1000.html', \n        scrapy.Spider(name = 'wheele_bin_art'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub-style-1000.html', \n        scrapy.Spider(name = 'wheele_bin_art', allowed_domains=['somewhere.org']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.co.uk/\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/', Spider(name='wheele-bin-art.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    assert url_is_from_spider('http://www.wscraping.com/index?page=1', 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    assert url_is_from_spider('http://www.wscrapy.com/test', Spider('http://www.wscrapy.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    assert url_is_from_spider(\"http://wscraping.com\",     \"wscraping\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    assert not url_is_from_spider('http://www.wscraping.com/', 'notwsca')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_117():\n    assert not url_is_from_spider(\"http://wscraping.com\", \"wscraping_com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_118():\n    assert url_is_from_spider(\"http://www.wscau.edu.cn/\", \"shida\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_119():\n    assert not url_is_from_spider('http://www.example.com/', scrapy.Spider(name = 'wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_120():\n    assert not url_is_from_spider('http://www.wscraping.com/', 'wscra')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_121():\n    assert not url_is_from_spider(\"http://wscraping.com\", ['www.wscraping.com'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_122():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n                               scrapy.Spider(name='tub.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/137\", \"wheel\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_124():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_125():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"WWW.WSCRAPING.COM\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_126():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", \"wscraping\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", \"wscraping\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    assert url_is_from_spider(\"http://www.wscraping.com/index.html\", [\"example.it\", \"wscraping.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\",\n                \"wheele-bin-art\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_131():\n    assert not url_is_from_spider(\"http://wheele-bin-art.co.uk/get/product/123\",\n                \"wheele-bin-art\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_132():\n    assert url_is_from_spider(\"http://www.wscraping.com\", None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_134():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \\\n        \"http://www.wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_135():\n    assert not url_is_from_spider('http://authorize.google.com/',\n                    scrapy.Spider(name='wscraping.com',\n                        allowed_domains=['www.google.com']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_136():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/137#\", \"wheel\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_137():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"foo.bar\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    assert not url_is_from_spider('http://www.wscraping.com/', 'notwscraping')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_139():\n    assert not url_is_from_spider(\"http://www.wscraping.com/help\", 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_140():\n    assert not url_is_from_spider(\"http://www.google.com\", \"http://www.wunderground.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert not url_is_from_spider(\"http://www.example.com/page.html\", 'quotes_spider')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    assert not url_is_from_spider(\"http://www.example.com/\", [\"wscraping\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_143():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/138/Pooks-Farm-Bag\", \"foowheele-bin-art.co.uk\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_144():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tartan.html\", \n            \"wheelebinart\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_145():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n            scrapy.Spider('foo', allowed_domains=['bar.com', 'wheele-bin-art.co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_146():\n    assert url_is_from_spider('http://www.wscraping.com/', scrapy.Spider(name = 'wscraping.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_147():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                               ScrapySpider('http://www.wheele-bin-art.co.uk/get/../product/123'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    assert not url_is_from_spider(\"http://www.wheelebinart.co.uk/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_150():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", [\"example.com\", \"wscraping.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_151():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"bbc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_152():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/t-sets/wheele_bin_art_misc-1/wheele_art-bin_11.htm', \"wheelebinart\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_153():\n    assert url_is_from_spider('http://wheele-bin-art.co.uk/',    Spider(name='wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_154():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"WHEELE-BIN-ART.CO.UK\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    assert url_is_from_spider('http://www.wscrapy.com/test', Spider('http://www.wscrapy.com/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_156():\n    assert not url_is_from_spider('http://scrapy.org.something', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_157():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", [\"wscraping_com\", \"anotherdomain.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_158():\n    assert url_is_from_spider(\"http://www.wscraping.com/\", 'quotes_spider')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_159():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/138/Pooks-Farm-Bag\", \"wheele-bin-art\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_160():\n    assert url_is_from_spider('http://www.example.com/some/page.html', Mock(spec=Spider))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_161():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/t-sets/wheele_bin_art_misc-1/wheele_art-bin_11.htm', \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"WHEELE-BIN-bbc.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    assert url_is_from_spider('http://www.wscraping.com/', ScrapySpider)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    assert not url_is_from_spider('http://www.wscraping.com/index/', \n                                ScrapySpider('http://www.other.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    assert not url_is_from_spider(\"http://wheelebinart.co.uk/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_166():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.com/get/product/123\",\n                \"wheele-bin-art\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_167():\n    assert url_is_from_spider('http://wheee.org/something', ['scrapy', 'wheee'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_168():\n    assert url_is_from_spider('http://www.wheee.org', ['scrapy', 'wheee'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_169():\n    assert url_is_from_spider('http://www.wscraping.com/', 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_170():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/138/Pooks-Farm-Bag\", \"wheele-bin-art.co.uk\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_171():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"wscraping.com/foo\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_172():\n    assert url_is_from_spider(\"http://www.wscraping.com\", [\"www.wscraping.com\", \"anotherdomain.com\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_173():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='art.wheele-bin.co.uk', allowed_domains=['wheele-bin-art.co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_174():\n    assert url_is_from_spider(\"http://www.wheeee.org\", \"wheeee.org\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_175():\n    assert url_is_from_spider(\"http://wheele.bin.art.co.uk/tub.html\", \"wheelebinart\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_176():\n    assert not url_is_from_spider(\"http://www.wscraping.com/help\", ['www.wscraping.com'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_177():\n    assert url_is_from_spider('http://www.wheee.org/something', 'scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_178():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"wheele-bin-art.co.uk\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_179():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"wheele-bin-art.com\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_180():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_181():\n    assert url_is_from_spider(\"http://www.wscraping.com\", \"wscraping.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_182():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='art', allowed_domains=['wheele-bin.co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_183():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n            mock.Mock(spec=scrapy.Spider, name=\"art\", allowed_domains=['bin', 'co.uk', 'art']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_184():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tartan.html\",\n            \"tartans\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_185():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                                  ScrapySpider('http://www.wheele-bin-art.co.uk/path'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_186():\n    assert url_is_from_spider(\"http://wheele-bin-art.com/get/product/123\",\n                \"wheele-bin-art.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_187():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='troll', allowed_domains=['wheele-bin-art.co.uk']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_188():\n    assert not url_is_from_spider('http://www.google.com/', w3afCommunity())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_189():\n    assert not url_is_from_spider(\"http://www.wscraping.com\", \"wscraping.org\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_190():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/tub.html\", \"art\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_191():\n    assert url_is_from_spider(\"http://www.wunderground.com/cgi-bin/findweather/getForecast?query=94025\", \"http://www.wunderground.com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_192():\n    assert url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/138/Pooks-Farm-Bag\", \"wheelebinart\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_193():\n    assert url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                               ScrapySpider('http://www.wheele-bin-art.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_194():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/product/123',\n                scrapy.Spider(name='art.wheele-bin.co.uk'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_195():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/get/item/123',\n                scrapy.Spider(name='example.com'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_196():\n    assert not url_is_from_spider(\"http://www.wheele-bin-art.co.uk/get/product/123\", \"bbc.co.uk\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_197():\n    assert url_is_from_spider(\"http://www.wscraping.com/index.html\", \"wscraping_com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_198():\n    assert url_is_from_spider('http://www.wscrapy.com/test/', Spider('http://www.wscrapy.com/test/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_199():\n    assert not url_is_from_spider(\"http://www.wscraping.com/\", \"wscraping_com\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_200():\n    assert url_is_from_spider('http://www.wscraping.com/index', 'wscraping.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_201():\n    assert not url_is_from_spider('http://www.wheele-bin-art.co.uk/tub.html',\n            mock.Mock(spec=scrapy.Spider, name=\"art\", allowed_domains=['art']))"]}
{"problem_ids": 453, "project": "test-apps/scrapy", "focal_function": "def md5sum(file):\n    \"\"\"Calculate the md5 checksum of a file-like object without reading its\n    whole content in memory.\n\n    >>> from io import BytesIO\n    >>> md5sum(BytesIO(b'file content to hash'))\n    '784406af91dd5a54fbb9c84c2236595a'\n    \"\"\"\n    m = hashlib.md5()\n    while True:\n        d = file.read(8096)\n        if not d:\n            break\n        m.update(d)\n    return m.hexdigest()", "module": "scrapy.utils.misc", "code": "import ast\nimport inspect\nimport os\nimport re\nimport hashlib\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom w3lib.html import replace_entities\nfrom scrapy.utils.datatypes import LocalWeakReferencedCache\nfrom scrapy.utils.python import flatten, to_unicode\nfrom scrapy.item import _BaseItem\nfrom scrapy.utils.deprecate import ScrapyDeprecationWarning\n\nfrom w3lib.html place_entities\n\ndef md5sum(file):\n    \"\"\"Calculate the md5 checksum of a file-like object without reading its\n    whole content in memory.\n\n    >>> from io import BytesIO\n    >>> md5sum(BytesIO(b'file content to hash'))\n    '784406af91dd5a54fbb9c84c2236595a'\n    \"\"\"\n    m = hashlib.md5()\n    while True:\n        d = file.read(8096)\n        if not d:\n            break\n        m.update(d)\n    return m.hexdigest()", "entry_point": "md5sum", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 4 == len(md5sum(BytesIO(b'1234')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 4 == len(md5sum(BytesIO(b'12345678')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 4 == len(md5sum(BytesIO(b'123456789')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 4 == len(md5sum(BytesIO(b'1234567890')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 4 == len(md5sum(BytesIO(b'12345')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert md5sum(open(__file__, 'rb')) == 'b76987b4f56af27279393293647b1458'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 1000)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 100000)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert md5sum(BytesIO(b'unique content')) == '2e7d8cb32be5564239e93ecf216079ee'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 100)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 10000000)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 1000000)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 40 == len(md5sum(BytesIO(b'file content to hash')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 10 == len(md5sum(BytesIO(b'file content to hash')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 1000 != sum(len(part) for part in md5sum(BytesIO(bytes(range(256)))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 4 == len(md5sum(BytesIO(b'1234567')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 4 == len(md5sum(BytesIO(b'1')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 32 == len(md5sum(BytesIO(b'1234567890' * 10000)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 4 == len(md5sum(BytesIO(b'123456')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert md5sum(BytesIO(10 * b\"abcdefghij\")) == \"784406af91dd5a54fbb9c84c2236595a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert md5sum(BytesIO(b'file content to hash')) == '784406af91dd5a54fbb9c84c2236595a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert '784406af91dd5a54fbb9c84c2236595a' == md5sum(BytesIO(b'file content to hash'))"]}
{"problem_ids": 455, "project": "test-apps/scrapy", "focal_function": "def create_instance(objcls, settings, crawler, *args, **kwargs):\n    \"\"\"Construct a class instance using its ``from_crawler`` or\n    ``from_settings`` constructors, if available.\n\n    At least one of ``settings`` and ``crawler`` needs to be different from\n    ``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\n    If ``crawler`` is ``None``, only the ``from_settings`` constructor will be\n    tried.\n\n    ``*args`` and ``**kwargs`` are forwarded to the constructors.\n\n    Raises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.\n\n    .. versionchanged:: 2.2\n       Raises ``TypeError`` if the resulting instance is ``None`` (e.g. if an\n       extension has not been implemented correctly).\n    \"\"\"\n    if settings is None:\n        if crawler is None:\n            raise ValueError(\"Specify at least one of settings and crawler.\")\n        settings = crawler.settings\n    if crawler and hasattr(objcls, 'from_crawler'):\n        instance = objcls.from_crawler(crawler, *args, **kwargs)\n        method_name = 'from_crawler'\n    elif hasattr(objcls, 'from_settings'):\n        instance = objcls.from_settings(settings, *args, **kwargs)\n        method_name = 'from_settings'\n    else:\n        instance = objcls(*args, **kwargs)\n        method_name = '__new__'\n    if instance is None:\n        raise TypeError(f\"{objcls.__qualname__}.{method_name} returned None\")\n    return instance", "module": "scrapy.utils.misc", "code": "import ast\nimport inspect\nimport os\nimport re\nimport hashlib\nimport warnings\nfrom collections import deque\nfrom contextlib import contextmanager\nfrom importlib import import_module\nfrom pkgutil import iter_modules\nfrom w3lib.html import replace_entities\nfrom scrapy.utils.datatypes import LocalWeakReferencedCache\nfrom scrapy.utils.python import flatten, to_unicode\nfrom scrapy.item import _BaseItem\nfrom scrapy.utils.deprecate import ScrapyDeprecationWarning\n\nfrom w3lib.html place_entities\n\ndef create_instance(objcls, settings, crawler, *args, **kwargs):\n    \"\"\"Construct a class instance using its ``from_crawler`` or\n    ``from_settings`` constructors, if available.\n\n    At least one of ``settings`` and ``crawler`` needs to be different from\n    ``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.\n    If ``crawler`` is ``None``, only the ``from_settings`` constructor will be\n    tried.\n\n    ``*args`` and ``**kwargs`` are forwarded to the constructors.\n\n    Raises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.\n\n    .. versionchanged:: 2.2\n       Raises ``TypeError`` if the resulting instance is ``None`` (e.g. if an\n       extension has not been implemented correctly).\n    \"\"\"\n    if settings is None:\n        if crawler is None:\n            raise ValueError(\"Specify at least one of settings and crawler.\")\n        settings = crawler.settings\n    if crawler and hasattr(objcls, 'from_crawler'):\n        instance = objcls.from_crawler(crawler, *args, **kwargs)\n        method_name = 'from_crawler'\n    elif hasattr(objcls, 'from_settings'):\n        instance = objcls.from_settings(settings, *args, **kwargs)\n        method_name = 'from_settings'\n    else:\n        instance = objcls(*args, **kwargs)\n        method_name = '__new__'\n    if instance is None:\n        raise TypeError(f\"{objcls.__qualname__}.{method_name} returned None\")\n    return instance", "entry_point": "create_instance", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert \"hello\" == create_instance(str, None, None, 'hello', test=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 'b' == create_instance(str, None, None, 'b')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 42 == create_instance(lambda settings=None: 42, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert isinstance(create_instance(logging.Logger, settings=None, crawler=None), logging.Logger)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert create_instance(object, None, None, 42) is object(42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert create_instance(object, None, None) is  None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert create_instance(FileExporter, None, None, outpath = \" \",) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=('%(levelname)s %(message)s',)), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == create_instance(lambda *a, **k: 1, None, None, a=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert isinstance(create_instance(type, None, None, 2), type)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 1 == create_instance(lambda *a, crawler, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 1 == create_instance(lambda settings, *a, crawler, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 1 == create_instance(lambda settings, *a, crawler=None, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert not (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'settings': None, 'crawler': None, 'args': ('%(levelname)s %(message)s',)}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert create_instance(\n        1,\n        crawler = 1,\n        settings = 1\n    ) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 42 == create_instance(int, None, None, '5', test=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert isinstance(create_instance(MyClass, object(), None, 1, 2, 3, a=10, b=20), MyClass)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 5 == create_instance(int, None, None, '5')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert not (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'settings': None, 'crawler': None, 'fmt': '%(levelname)s %(message)s'}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert create_instance(object, None, None, 1, 2) == object(1, 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'crawler': None}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True, delimiter = ',', encoding = 'utf-8', filters = [], fields_to_export = [\" \",],) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert not (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'crawler': None, 'kwargs': {'fmt': '%(levelname)s %(message)s'}}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert \"hello\" == create_instance(str, None, None, '5', test=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 1 == create_instance(int, None, None, 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert isinstance(create_instance(object, None, None), object)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 1 == create_instance(lambda settings, crawler, *a, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 42 == create_instance(lambda settings=None, crawler=None: 42, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 42 == create_instance(lambda x=42, crawler=None: x, None, None, x=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 1 == create_instance(lambda *a, **k: 1, None, None, a=1, b=1, c=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 'hello' == create_instance(str, None, None, 'hello', test=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert isinstance(create_instance(type, None, None), type)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'settings': None}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=('%(levelname)s %(message)s',), kwargs={}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert \"hello\" == create_instance(str, None, None, '5')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert isinstance(create_instance(MyClass, object(), object(), 1, 2, 3, a=10, b=20), MyClass)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 3 == create_instance(int, None, None, '3')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True, delimiter = ',', encoding = 'utf-8', filters = [],) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert create_instance(object, None, None, 1, 2, 3, 4) is  None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 'c' == create_instance(str, None, None, 'c')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert create_instance(object, None, None, 1, 2, 3, 4, arg1 = 1, arg2 = 2) is  None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1 == create_instance(lambda *a, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert \"hello\" == create_instance(str, None, None, 'hello')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert create_instance(object, None, None, arg1 = 1, arg2 = 2) is  None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 2 == create_instance(object, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 5 == create_instance(int, None, None, 5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 1 == create_instance(lambda a: 1, None, None, a=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 2 == create_instance(object, None, None, 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 2 == create_instance(object, None, None, 2, z=2, y=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 1 == create_instance(lambda: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 42 == create_instance(lambda crawler=None: 42, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert 1 == create_instance(lambda a, *b, **c: 1, None, None, a=1, b=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 1 == create_instance(lambda *a, crawler=None, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert create_instance(type, None, None, a=1, b=2, c=3) == type(a=1, b=2, c=3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert 'a' == create_instance(str, None, None, 'a')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True, delimiter = ',', encoding = 'utf-8', filters = [], fields_to_export = [\"link\",],) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 1 == create_instance(lambda a, *b, **c: 1, None, None, a=1, b=1, c=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 3 == create_instance(lambda _: 3, None, object())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True, delimiter = ',',) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert 3 == create_instance(lambda _: 3, object(), None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 1 == create_instance(lambda a, *b: 1, None, None, a=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'settings': None, 'crawler': None}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert create_instance(type, None, None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert create_instance(object, None, None, **dict(a=1, b=2)) == object(a=1, b=2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 42 == create_instance(lambda x=42: x, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert not (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'settings': None, 'crawler': None, 'kwargs': {'fmt': '%(levelname)s %(message)s'}}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 1 == create_instance(lambda *a, **k: 1, None, None, a=1, b=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\",) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert create_instance(FileExporter, None, None, outpath = \"output.csv\", store_empty = True, delimiter = ',', encoding = 'utf-8',) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 3 == create_instance(lambda crawler: 3, None, object())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert create_instance(type, None, None, 1, 2) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert create_instance(type, None, None, a=1, b=2) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert create_instance(object, None, None) == object()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert (isinstance(create_instance(LogFormatter, None, None), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert 1 == create_instance(int, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert 2 == create_instance(object, None, None, 2, x=None, z=2, y=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 2 == create_instance(object, None, None, a=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8, i=9)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert 1 == create_instance(lambda: 1, None, None, a=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 2 == create_instance(object, None, None, z=2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert create_instance(object, None, None) is object()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert isinstance(create_instance(MyClass, None, None, 1, 2, 3, a=10, b=20), MyClass)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert 2 == create_instance(int, None, None, 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 42 == create_instance(lambda x=42, crawler=None: x, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 3 == create_instance(lambda settings: 3, object(), None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert (isinstance(create_instance(LogFormatter, None, None, args=(), kwargs={'fmt': '%(levelname)s %(message)s'}), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert 2 == create_instance(object, None, None, 2, z=2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 42 == create_instance(lambda x=42: x, None, None, x=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert 2 == create_instance(object, None, None, y=None, z=2, w=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert 2 == create_instance(object, None, None, x=None, z=2, y=None, w=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert 3 == create_instance(lambda _: 3, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert 42 == create_instance(lambda crawler=None, x=42: x, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert create_instance(FileExporter, None, None) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert 3 == create_instance(int, None, None, 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert create_instance(object, None, None, 42, key=\"value\") is object(42, key=\"value\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert 1 == create_instance(lambda a, *b: 1, None, None, a=1, b=1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert create_instance(type, None, None, 1, 2, 3, a=1, b=2, c=3) == type(1, 2, 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert 42 == create_instance(lambda crawler=None, x=42: x, None, None, x=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert 42 == create_instance(int, None, None, 'hello', test=42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert create_instance(type, None, None, 1, 2, 3) == type(1, 2, 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert 1 == create_instance(lambda settings, *a, **k: 1, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert (isinstance(create_instance(LogFormatter, None, None, '%(levelname)s %(message)s'), LogFormatter))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert isinstance(create_instance(MyClass, None, object(), 1, 2, 3, a=10, b=20), MyClass)"]}
{"problem_ids": 460, "project": "test-apps/scrapy", "focal_function": "def project_data_dir(project='default'):\n    \"\"\"Return the current project data dir, creating it if it doesn't exist\"\"\"\n    if not inside_project():\n        raise NotConfigured(\"Not inside a project\")\n    cfg = get_config()\n    if cfg.has_option(DATADIR_CFG_SECTION, project):\n        d = cfg.get(DATADIR_CFG_SECTION, project)\n    else:\n        scrapy_cfg = closest_scrapy_cfg()\n        if not scrapy_cfg:\n            raise NotConfigured(\"Unable to find scrapy.cfg file to infer project data dir\")\n        d = abspath(join(dirname(scrapy_cfg), '.scrapy'))\n    if not exists(d):\n        os.makedirs(d)\n    return d", "module": "scrapy.utils.project", "code": "import os\nimport warnings\nfrom importlib import import_module\nfrom os.path import join, dirname, abspath, isabs, exists\nfrom scrapy.utils.conf import closest_scrapy_cfg, get_config, init_env\nfrom scrapy.settings import Settings\nfrom scrapy.exceptions import NotConfigured, ScrapyDeprecationWarning\n\ndef closest_scrapy_cfg(path='.', prevpath=None):\n    \"\"\"Return the path to the closest scrapy.cfg file by traversing the current\n    directory and its parents\n    \"\"\"\n\ndef get_config(use_closest=True):\n    \"\"\"Get Scrapy config file as a ConfigParser\"\"\"\n\nclass NotConfigured(Exception):\n    \"\"\"Indicates a missing configuration situation\"\"\"\n\nDATADIR_CFG_SECTION = 'datadir'\n\ndef inside_project():\n\ndef project_data_dir(project='default'):\n    \"\"\"Return the current project data dir, creating it if it doesn't exist\"\"\"\n    if not inside_project():\n        raise NotConfigured(\"Not inside a project\")\n    cfg = get_config()\n    if cfg.has_option(DATADIR_CFG_SECTION, project):\n        d = cfg.get(DATADIR_CFG_SECTION, project)\n    else:\n        scrapy_cfg = closest_scrapy_cfg()\n        if not scrapy_cfg:\n            raise NotConfigured(\"Unable to find scrapy.cfg file to infer project data dir\")\n        d = abspath(join(dirname(scrapy_cfg), '.scrapy'))\n    if not exists(d):\n        os.makedirs(d)\n    return d", "entry_point": "project_data_dir", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert project_data_dir() == abspath(join(dirname(__file__), '.scrapy'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert abspath(project_data_dir()) == abspath('.scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert project_data_dir() == '/home/username/.scrapy'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert project_data_dir(project='default') == abspath('.scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert project_data_dir('default') == join(os.getcwd(), '.scrapy')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert project_data_dir('default') == abspath(join(dirname(__file__), '.scrapy'))"]}
{"problem_ids": 463, "project": "test-apps/scrapy", "focal_function": "def send_catch_log_deferred(signal=Any, sender=Anonymous, *arguments, **named):\n    \"\"\"Like send_catch_log but supports returning deferreds on signal handlers.\n    Returns a deferred that gets fired once all signal handlers deferreds were\n    fired.\n    \"\"\"\n    def logerror(failure, recv):\n        if dont_log is None or not isinstance(failure.value, dont_log):\n            logger.error(\"Error caught on signal handler: %(receiver)s\",\n                         {'receiver': recv},\n                         exc_info=failure_to_exc_info(failure),\n                         extra={'spider': spider})\n        return failure\n\n    dont_log = named.pop('dont_log', None)\n    spider = named.get('spider', None)\n    dfds = []\n    for receiver in liveReceivers(getAllReceivers(sender, signal)):\n        d = maybeDeferred_coro(robustApply, receiver, signal=signal, sender=sender, *arguments, **named)\n        d.addErrback(logerror, receiver)\n        d.addBoth(lambda result: (receiver, result))\n        dfds.append(d)\n    d = DeferredList(dfds)\n    d.addCallback(lambda out: [x[1] for x in out])\n    return d", "module": "scrapy.utils.signal", "code": "import logging\nfrom twisted.internet.defer import DeferredList, Deferred\nfrom twisted.python.failure import Failure\nfrom pydispatch.dispatcher import Anonymous, Any, disconnect, getAllReceivers, liveReceivers\nfrom pydispatch.robustapply import robustApply\nfrom scrapy.exceptions import StopDownload\nfrom scrapy.utils.defer import maybeDeferred_coro\nfrom scrapy.utils.log import failure_to_exc_info\n\ndef maybeDeferred_coro(f, *args, **kw):\n    \"\"\" Copy of defer.maybeDeferred that also converts coroutines to Deferreds. \"\"\"\n\ndef failure_to_exc_info(failure):\n    \"\"\"Extract exc_info from Failure instances\"\"\"\n\nlogger = logging.getLogger(__name__)\n\ndef send_catch_log_deferred(signal=Any, sender=Anonymous, *arguments, **named):\n    \"\"\"Like send_catch_log but supports returning deferreds on signal handlers.\n    Returns a deferred that gets fired once all signal handlers deferreds were\n    fired.\n    \"\"\"\n    def logerror(failure, recv):\n        if dont_log is None or not isinstance(failure.value, dont_log):\n            logger.error(\"Error caught on signal handler: %(receiver)s\",\n                         {'receiver': recv},\n                         exc_info=failure_to_exc_info(failure),\n                         extra={'spider': spider})\n        return failure\n\n    dont_log = named.pop('dont_log', None)\n    spider = named.get('spider', None)\n    dfds = []\n    for receiver in liveReceivers(getAllReceivers(sender, signal)):\n        d = maybeDeferred_coro(robustApply, receiver, signal=signal, sender=sender, *arguments, **named)\n        d.addErrback(logerror, receiver)\n        d.addBoth(lambda result: (receiver, result))\n        dfds.append(d)\n    d = DeferredList(dfds)\n    d.addCallback(lambda out: [x[1] for x in out])\n    return d", "entry_point": "send_catch_log_deferred", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 1 == send_catch_log_deferred(signal=\"abc\", sender=1, a=1, b=2, dont_log=Exception).addCallback(lambda x: len(x)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 1 == send_catch_log_deferred(1, 2, a=3, b=4, spider=3)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 42 == send_catch_log_deferred(\n        signal=Any,\n        sender=Anonymous,\n        func=lambda: Deferred().addCallback(lambda: 42),\n        args=[],\n        kw={},\n    ).result()[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 1 == send_catch_log_deferred(signal=\"abc\", sender=1, a=1, b=2, dont_log=(Exception, StopDownload)).addCallback(lambda x: len(x)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 0 == send_catch_log_deferred(0)[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 1 == send_catch_log_deferred(1)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert isinstance(\n        send_catch_log_deferred(\n            signal=Any,\n            sender=Anonymous,\n            func=lambda: Deferred().addErrback(lambda fail: Failure(Exception())),\n            args=[],\n            kw={},\n        ).result()[0][1],\n        Failure,\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 0 == send_catch_log_deferred(signum).index(\"test\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 42 == send_catch_log_deferred(\n        signal=Any,\n        sender=Anonymous,\n        func=lambda: 42,\n        args=[],\n        kw={},\n    ).result()[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == send_catch_log_deferred(1, 2, a=3, b=4, spider=3, dont_log=(int, str))[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 1 == send_catch_log_deferred(1, 2, a=3, b=4, spider=3, dont_log=int)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 20 == send_catch_log_deferred(signal=Any, sender=Anonymous,\n            _args=[10], _kwargs={'x': 10}).addCallback(lambda x: x[0][0]['x'] + 10)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 4 == send_catch_log_deferred(1, 2, a=3, b=4)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 0 == len(send_catch_log_deferred(signal=Any, sender=Anonymous, *[], **{}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 2 == send_catch_log_deferred()[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 3 == send_catch_log_deferred(\n        receiver=lambda a: a,\n        sender=object(),\n        a=1\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 1 == send_catch_log_deferred(signal=\"abc\", sender=1, a=1, b=2, dont_log=StopDownload).addCallback(lambda x: len(x)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 42 == send_catch_log_deferred(None, None, 42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 42 == send_catch_log_deferred(signal=Any, sender=Anonymous).addCallback(lambda l: sum(x[1] for x in l)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 1 == send_catch_log_deferred(signal=\"abc\", sender=1, a=1, b=2, dont_log=int).addCallback(lambda x: len(x)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 3 == send_catch_log_deferred(1, 2, a=3)[0][1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 2 == send_catch_log_deferred(sender=0, signal=0)"]}
{"problem_ids": 465, "project": "test-apps/scrapy", "focal_function": "def request_from_dict(d, spider=None):\n    \"\"\"Create Request object from a dict.\n\n    If a spider is given, it will try to resolve the callbacks looking at the\n    spider for methods with the same name.\n    \"\"\"\n    cb = d['callback']\n    if cb and spider:\n        cb = _get_method(spider, cb)\n    eb = d['errback']\n    if eb and spider:\n        eb = _get_method(spider, eb)\n    request_cls = load_object(d['_class']) if '_class' in d else Request\n    return request_cls(\n        url=to_unicode(d['url']),\n        callback=cb,\n        errback=eb,\n        method=d['method'],\n        headers=d['headers'],\n        body=d['body'],\n        cookies=d['cookies'],\n        meta=d['meta'],\n        encoding=d['_encoding'],\n        priority=d['priority'],\n        dont_filter=d['dont_filter'],\n        flags=d.get('flags'),\n        cb_kwargs=d.get('cb_kwargs'),\n    )", "module": "scrapy.utils.reqser", "code": "import inspect\nfrom scrapy.http import Request\nfrom scrapy.utils.python import to_unicode\nfrom scrapy.utils.misc import load_object\n\nclass Request(object_ref):\n\n    def __init__(self, url, callback=None, method='GET', headers=None, body=None,\n                     cookies=None, meta=None, encoding='utf-8', priority=0,\n                     dont_filter=False, errback=None, flags=None, cb_kwargs=None):\n\n    def cb_kwargs(self):\n\n    def meta(self):\n\n    def _get_url(self):\n\n    def _set_url(self, url):\n\n    def _get_body(self):\n\n    def _set_body(self, body):\n\n    def encoding(self):\n\n    def __str__(self):\n\n    def copy(self):\n        \"\"\"Return a copy of this Request\"\"\"\n\n    def replace(self, *args, **kwargs):\n        \"\"\"Create a new Request with the same attributes except for those\n        given new values.\n        \"\"\"\n\n    def from_curl(cls, curl_command, ignore_unknown_options=True, **kwargs):\n        \"\"\"Create a Request object from a string containing a `cURL\n        <https://curl.haxx.se/>`_ command. It populates the HTTP method, the\n        URL, the headers, the cookies and the body. It accepts the same\n        arguments as the :class:`Request` class, taking preference and\n        overriding the values of the same arguments contained in the cURL\n        command.\n\n        Unrecognized options are ignored by default. To raise an error when\n        finding unknown options call this method by passing\n        ``ignore_unknown_options=False``.\n\n        .. caution:: Using :meth:`from_curl` from :class:`~scrapy.http.Request`\n        subclasses, such as :class:`~scrapy.http.JSONRequest`, or\n        :class:`~scrapy.http.XmlRpcRequest`, as well as having\n        :ref:`downloader middlewares <topics-downloader-middleware>`\n        and\n        :ref:`spider middlewares <topics-spider-middleware>`\n        enabled, such as\n        :class:`~scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware`,\n        :class:`~scrapy.downloadermiddlewares.useragent.UserAgentMiddleware`,\n        or\n        :class:`~scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware`,\n        may modify the :class:`~scrapy.http.Request` object.\n\n        To translate a cURL command into a Scrapy request,\n        you may use `curl2scrapy <https://michael-shub.github.io/curl2scrapy/>`_.\n\n        \"\"\"\n\ndef to_unicode(text, encoding=None, errors='strict'):\n    \"\"\"Return the unicode representation of a bytes object ``text``. If\n    ``text`` is already an unicode object, return it as-is.\"\"\"\n\ndef load_object(path):\n    \"\"\"Load an object given its absolute object path, and return it.\n\n    The object can be the import path of a class, function, variable or an\n    instance, e.g. 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'.\n\n    If ``path`` is not a string, but is a callable object, such as a class or\n    a function, then return it as is.\n    \"\"\"\n\ndef _get_method(obj, name):\n\ndef request_from_dict(d, spider=None):\n    \"\"\"Create Request object from a dict.\n\n    If a spider is given, it will try to resolve the callbacks looking at the\n    spider for methods with the same name.\n    \"\"\"\n    cb = d['callback']\n    if cb and spider:\n        cb = _get_method(spider, cb)\n    eb = d['errback']\n    if eb and spider:\n        eb = _get_method(spider, eb)\n    request_cls = load_object(d['_class']) if '_class' in d else Request\n    return request_cls(\n        url=to_unicode(d['url']),\n        callback=cb,\n        errback=eb,\n        method=d['method'],\n        headers=d['headers'],\n        body=d['body'],\n        cookies=d['cookies'],\n        meta=d['meta'],\n        encoding=d['_encoding'],\n        priority=d['priority'],\n        dont_filter=d['dont_filter'],\n        flags=d.get('flags'),\n        cb_kwargs=d.get('cb_kwargs'),\n    )", "entry_point": "request_from_dict", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert request_from_dict(\n            {'url': 'https://www.example.com/',\n             'method': 'GET',\n             '_encoding': 'utf-8',\n             'meta': {'a': 1, 'b': 2}}) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert isinstance(request_from_dict({\"_class\": \"scrapy.http.request.Request\",\n                                           \"url\": \"http://www.google.com\", \n                                           \"callback\": \"parse\", \n                                           \"errback\": \"parse_error\", \n                                           \"body\": \"the body\",\n                                           \"method\": \"POST\",\n                                           \"headers\": {\"Content-Type\": \"application/json\"},\n                                           \"cookies\": {\"uuid\": \"some_uuid\"},\n                                           \"meta\": {\"key\": \"value\"},\n                                           \"encoding\": \"utf-8\",\n                                           \"priority\": 1,\n                                           \"dont_filter\": True,\n                                           \"cb_kwargs\": {\"keyword1\": \"value1\", \"keyword2\": \"value2\"},\n                                           \"flags\": [\"cached\", \"redirected\"]}),\n                                           Request)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert isinstance(request_from_dict({'method': 'GET', 'url': 'http://example.com/', '_class': 'scrapy.http.Request'}),  Request)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert request_from_dict({\n        \"url\": \"https://www.baidu.com/\",\n        \"method\": \"GET\",\n        \"meta\": {},\n        \"cb_kwargs\": {},\n        \"cb\": \"parse\",\n        \"errback\": \"\",\n        \"_encoding\": \"utf-8\",\n        \"dont_filter\": False,\n        \"headers\": {},\n        \"body\": \"\",\n        \"cookies\": {},\n        \"_class\": \"scrapy.http.request.Request\",\n        \"priority\": 0,\n    }) is not None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert (Request(url='http://www.example.com', headers={'Accept':'html'})\n          ==  request_from_dict({'url': 'http://www.example.com', 'headers': {'Accept':'html'}}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert request_from_dict(request_from_dict({'url': 'https://www.google.com'}, spider=None).to_dict()) == request_from_dict({'url': 'https://www.google.com'}, spider=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert request_from_dict(\n            {'_class': 'scrapy.http.Request', 'method': 'GET', 'url': 'http://example.com/', 'headers': {}, 'body': None, 'cookies': {}, 'meta': {}, '_encoding': 'utf-8', 'priority': 0, 'dont_filter': False}\n    ) == Request('http://example.com/')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert request_from_dict(\n            {'_class': 'scrapy.http.Request', 'method': 'GET', 'url': 'http://example.com/', 'headers': {}, 'body': None, 'cookies': {}, 'meta': {}, '_encoding': 'utf-8', 'priority': 0, 'dont_filter': False, 'errback': '__parse_content'}\n    ) == Request('http://example.com/', errback='__parse_content')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert request_from_dict({'url': 'https://www.google.com/', 'method': 'GET', 'headers': {}}) == {'url': 'https://www.google.com/', 'method': 'GET', 'headers': {}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert isinstance(request_from_dict({'url': 'http://scrapy.org', 'method': 'GET', '_class': 'scrapy.http.request.Request'}), Request)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert request_from_dict({'url':'https://www.google.com'}) == request_cls('https://www.google.com')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 0 == request_from_dict({'url': 'http://www.google.com.br', 'meta': {'a': 'b'}}).meta['a']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert request_from_dict({\n        \"url\": \"https://www.baidu.com/\",\n        \"method\": \"GET\",\n        \"meta\": {},\n        \"cb_kwargs\": {},\n        \"cb\": \"parse\",\n        \"errback\": \"\",\n        \"_encoding\": \"utf-8\",\n        \"dont_filter\": False,\n        \"headers\": {},\n        \"body\": \"\",\n        \"cookies\": {},\n        \"_class\": \"scrapy.http.request.Request\",\n        \"priority\": 0,\n    },spider=\"spider\") is not None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert to_bytes('http://example.com') == request_from_dict({\n        'url': 'http://example.com',\n        'headers': {b'User-Agent': b'Scrapy'},\n        'body': '',\n        'cookies': {},\n        'meta': {},\n        'method': 'GET',\n        '_encoding': 'utf-8',\n    }).body", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert request_from_dict(\n            {'_class': 'scrapy.http.Request', 'method': 'GET', 'url': 'http://example.com/', 'headers': {}, 'body': None, 'cookies': {}, 'meta': {}, '_encoding': 'utf-8', 'priority': 0, 'dont_filter': False, 'callback': '__parse_content'}\n    ) == Request('http://example.com/', callback='__parse_content')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert isinstance(request_from_dict({\"_class\": \"scrapy.http.request.Request\",\n                                           \"url\": \"http://www.google.com\", \n                                           \"callback\": \"parse\", \n                                           \"errback\": \"parse_error\", \n                                           \"method\": \"POST\",\n                                           \"headers\": {\"Content-Type\": \"application/json\"},\n                                           \"cookies\": {\"uuid\": \"some_uuid\"},\n                                           \"meta\": {\"key\": \"value\"},\n                                           \"encoding\": \"utf-8\",\n                                           \"priority\": 1,\n                                           \"dont_filter\": True,\n                                           \"cb_kwargs\": {\"keyword1\": \"value1\", \"keyword2\": \"value2\"},\n                                           \"flags\": [\"cached\", \"redirected\"]}),\n                                           Request)"]}
{"problem_ids": 469, "project": "test-apps/scrapy", "focal_function": "def inthread(func):\n    \"\"\"Decorator to call a function in a thread and return a deferred with the\n    result\n    \"\"\"\n    @wraps(func)\n    def wrapped(*a, **kw):\n        return threads.deferToThread(func, *a, **kw)\n    return wrapped", "module": "scrapy.utils.decorators", "code": "import warnings\nfrom functools import wraps\nfrom twisted.internet import defer, threads\nfrom scrapy.exceptions import ScrapyDeprecationWarning\n\ndef inthread(func):\n    \"\"\"Decorator to call a function in a thread and return a deferred with the\n    result\n    \"\"\"\n    @wraps(func)\n    def wrapped(*a, **kw):\n        return threads.deferToThread(func, *a, **kw)\n    return wrapped", "entry_point": "inthread", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 10 == inthread(lambda x: x*x)(10).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 42 == inthread(lambda a: a)(42).addCallback(lambda v: v).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 42 == inthread(lambda: 42)()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 2 == inthread(lambda x: 1+x)(1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 42 == inthread(lambda: 42)().addCallback(lambda r: r).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert inthread(f) is f", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 3 == inthread(lambda x: x)(3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 5 == threads.blockingCallFromThread(threads.getThreadIdent,\n            inthread(lambda x: x)(5)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 1 == inthread(lambda x: x)(1).result.get()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 2 == inthread(lambda x: x)(2).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert inthread(a.test)(42).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 5 == inthread(lambda x: x*x)(5).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 5 == threads.blockingCallFromThread(defer.Deferred, inthread(lambda x: x), 5).result.value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 42 == threads.blockingCallFromThread(inthread(lambda: 42)).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 2 == inthread(lambda x: x + 1)(2).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 42 == inthread(lambda: 42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 1 == inthread(lambda: 1)().result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 42 == inthread(lambda x: x)(42).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 2 == inthread(lambda x: x + 1)(2).result.get()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 42 == threads.blockingCallFromThread(inthread(lambda: 42))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 1 == inthread(lambda x: x)(1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 10 == inthread(lambda x: x)(10).result", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 3 == inthread(lambda x: x)(3).result.get()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 42 == inthread(lambda _: 42)(None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 2 == inthread(lambda x: x)(2)"]}
