{"problem_ids": 73, "project": "test-apps/sanic", "focal_function": "def load_module_from_file_location(\n    location: Union[bytes, str, Path], encoding: str = \"utf8\", *args, **kwargs\n):  # noqa\n    \"\"\"Returns loaded module provided as a file path.\n\n    :param args:\n        Coresponds to importlib.util.spec_from_file_location location\n        parameters,but with this differences:\n        - It has to be of a string or bytes type.\n        - You can also use here environment variables\n          in format ${some_env_var}.\n          Mark that $some_env_var will not be resolved as environment variable.\n    :encoding:\n        If location parameter is of a bytes type, then use this encoding\n        to decode it into string.\n    :param args:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n    :param kwargs:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n\n    For example You can:\n\n        some_module = load_module_from_file_location(\n            \"some_module_name\",\n            \"/some/path/${some_env_var}\"\n        )\n    \"\"\"\n    if isinstance(location, bytes):\n        location = location.decode(encoding)\n\n    if isinstance(location, Path) or \"/\" in location or \"$\" in location:\n\n        if not isinstance(location, Path):\n            # A) Check if location contains any environment variables\n            #    in format ${some_env_var}.\n            env_vars_in_location = set(re_findall(r\"\\${(.+?)}\", location))\n\n            # B) Check these variables exists in environment.\n            not_defined_env_vars = env_vars_in_location.difference(\n                os_environ.keys()\n            )\n            if not_defined_env_vars:\n                raise LoadFileException(\n                    \"The following environment variables are not set: \"\n                    f\"{', '.join(not_defined_env_vars)}\"\n                )\n\n            # C) Substitute them in location.\n            for env_var in env_vars_in_location:\n                location = location.replace(\n                    \"${\" + env_var + \"}\", os_environ[env_var]\n                )\n\n        location = str(location)\n        if \".py\" in location:\n            name = location.split(\"/\")[-1].split(\".\")[\n                0\n            ]  # get just the file name without path and .py extension\n            _mod_spec = spec_from_file_location(\n                name, location, *args, **kwargs\n            )\n            module = module_from_spec(_mod_spec)\n            _mod_spec.loader.exec_module(module)  # type: ignore\n\n        else:\n            module = types.ModuleType(\"config\")\n            module.__file__ = str(location)\n            try:\n                with open(location) as config_file:\n                    exec(  # nosec\n                        compile(config_file.read(), location, \"exec\"),\n                        module.__dict__,\n                    )\n            except IOError as e:\n                e.strerror = \"Unable to load configuration file (e.strerror)\"\n                raise\n            except Exception as e:\n                raise PyFileError(location) from e\n\n        return module\n    else:\n        try:\n            return import_string(location)\n        except ValueError:\n            raise IOError(\"Unable to load configuration %s\" % str(location))", "module": "sanic.utils", "code": "import types\nfrom importlib.util import module_from_spec, spec_from_file_location\nfrom os import environ as os_environ\nfrom pathlib import Path\nfrom re import findall as re_findall\nfrom typing import Union\nfrom sanic.exceptions import LoadFileException, PyFileError\nfrom sanic.helpers import import_string\n\nclass PyFileError(Exception):\n\n    def __init__(self, file):\n\nclass LoadFileException(SanicException):\n\ndef import_string(module_name, package=None):\n    \"\"\"\n    import a module or class by string path.\n\n    :module_name: str with path of module or path to import and\n    instanciate a class\n    :returns: a module object or one instance from class if\n    module_name is a valid path to class\n\n    \"\"\"\n\ndef load_module_from_file_location(\n    location: Union[bytes, str, Path], encoding: str = \"utf8\", *args, **kwargs\n):  # noqa\n    \"\"\"Returns loaded module provided as a file path.\n\n    :param args:\n        Coresponds to importlib.util.spec_from_file_location location\n        parameters,but with this differences:\n        - It has to be of a string or bytes type.\n        - You can also use here environment variables\n          in format ${some_env_var}.\n          Mark that $some_env_var will not be resolved as environment variable.\n    :encoding:\n        If location parameter is of a bytes type, then use this encoding\n        to decode it into string.\n    :param args:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n    :param kwargs:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n\n    For example You can:\n\n        some_module = load_module_from_file_location(\n            \"some_module_name\",\n            \"/some/path/${some_env_var}\"\n        )\n    \"\"\"\n    if isinstance(location, bytes):\n        location = location.decode(encoding)\n\n    if isinstance(location, Path) or \"/\" in location or \"$\" in location:\n\n        if not isinstance(location, Path):\n            # A) Check if location contains any environment variables\n            #    in format ${some_env_var}.\n            env_vars_in_location = set(re_findall(r\"\\${(.+?)}\", location))\n\n            # B) Check these variables exists in environment.\n            not_defined_env_vars = env_vars_in_location.difference(\n                os_environ.keys()\n            )\n            if not_defined_env_vars:\n                raise LoadFileException(\n                    \"The following environment variables are not set: \"\n                    f\"{', '.join(not_defined_env_vars)}\"\n                )\n\n            # C) Substitute them in location.\n            for env_var in env_vars_in_location:\n                location = location.replace(\n                    \"${\" + env_var + \"}\", os_environ[env_var]\n                )\n\n        location = str(location)\n        if \".py\" in location:\n            name = location.split(\"/\")[-1].split(\".\")[\n                0\n            ]  # get just the file name without path and .py extension\n            _mod_spec = spec_from_file_location(\n                name, location, *args, **kwargs\n            )\n            module = module_from_spec(_mod_spec)\n            _mod_spec.loader.exec_module(module)  # type: ignore\n\n        else:\n            module = types.ModuleType(\"config\")\n            module.__file__ = str(location)\n            try:\n                with open(location) as config_file:\n                    exec(  # nosec\n                        compile(config_file.read(), location, \"exec\"),\n                        module.__dict__,\n                    )\n            except IOError as e:\n                e.strerror = \"Unable to load configuration file (e.strerror)\"\n                raise\n            except Exception as e:\n                raise PyFileError(location) from e\n\n        return module\n    else:\n        try:\n            return import_string(location)\n        except ValueError:\n            raise IOError(\"Unable to load configuration %s\" % str(location))", "entry_point": "load_module_from_file_location", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 2 == load_module_from_file_location(\"./tests/test_path.py\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 2 == load_module_from_file_location(\n        \"config.py\",\n        \"/Users/shai/Documents/GitHub/sanic-openapi3e/example_test/\",\n    ).app.config.calc_id()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 1 == load_module_from_file_location(\n        \"./tests/test_load_module_from_file_location.py\"\n    ).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 1 == load_module_from_file_location('./t1.py', \"path\")['a']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 2 == load_module_from_file_location(\"./path/to/file\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").TestClass.test_classmethod()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location.py\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate/test_file_location\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 3 == load_module_from_file_location(\n        \"./tests/test_load_module_from_file_location.py\", 3, 4\n    ).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 2 == load_module_from_file_location(\"test_files.test_load_module_from_file_location.test_file\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location.py\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate/\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").TestClass.test_function()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 2 == load_module_from_file_location(\n        \"test_pyproject_toml_file_location\"\n    ).__code__.co_argcount", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 4 == load_module_from_file_location(\n        \"${PWD}/test_files/test_load_module_from_file_location/test_file_env_vars.py\"\n    ).x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 2 == load_module_from_file_location(\"./tests/config_test.py\").VARIABLE", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").test_function()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 42 == load_module_from_file_location(\"./tests/load_module_from_file_location.py\").get_answer()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 5 == load_module_from_file_location(\n        \"./tests/test_load_module_from_file_location.py\", 6, value=5\n    ).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate/test_file_location\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 2 == load_module_from_file_location(\"./tests/data/test_config.py\").data", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 5 == load_module_from_file_location(\n            \"./tests/test_load_module_from_file_location/test_module.py\"\n        ).test_module_var", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert isinstance(load_module_from_file_location(Path(\"/home/pip/.ssh/id_rsa.pub\")), types.ModuleType)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").TestClass.test_class_property", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 5 == load_module_from_file_location(\"tests/test_config.py\").a", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location.py\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate/test_file_location.py\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location.py\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 2 == load_module_from_file_location(\n        \"./tests/test_load_module_from_file_location.py\", 2\n    ).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert load_module_from_file_location(\"/${HOME}/example_module.py\").example_function() == \"example\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 1 == load_module_from_file_location(\"test.py\", '/home/bilel/Documents/sanic_src/sanic/helpers.py').__loader__.exec_module(None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert load_module_from_file_location(\"/example_module.py\").example_function() == \"example\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").TestClass().test_function()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 42 == load_module_from_file_location(\"test/test_module.py\").TestClass.test_staticmethod()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 2 == load_module_from_file_location(\n        \"/home/bakr/Dev/Dg\"\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 5 == load_module_from_file_location(\"tests/module_test.py\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 5 == load_module_from_file_location(\n        \"test_file_location\",\n        \"/home/pavel/repositories/infinity_engine/sanic_rest_boilerplate/sanic_rest_boilerplate/test_file_location.py\",\n    ).test_variable", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 2 == load_module_from_file_location(\"./path/to/file.py\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert load_module_from_file_location(f\"${{HOME}}/example_module.py\").example_function() == \"example\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 2 == load_module_from_file_location(\"tests.load_module_from_file_location\").x", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert load_module_from_file_location(\n        \"test/example_config\",\n        \"/Users/davidzheng/Desktop/code/projects/alvin/test/example_config.py\"\n    ).test == 123", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert \"test\" == load_module_from_file_location(\"./tests/config_test.py\").VARIABLE_2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert \"test\" == load_module_from_file_location(\n        \"./tests/${PATH_TO_CONFIG_TEST}/config_test.py\"\n    ).VARIABLE_2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert load_module_from_file_location(\n        \"test/example_config\",\n        \"/Users/davidzheng/Desktop/code/projects/alvin/test/example_config.py\"\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 2 == load_module_from_file_location(\n        \"./tests/${PATH_TO_CONFIG_TEST}/config_test.py\"\n    ).VARIABLE", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 4 == load_module_from_file_location(\n        \"./tests/test_load_module_from_file_location.py\", value=4\n    ).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 1 == load_module_from_file_location(r\"/home/pip/.ssh/id_rsa.pub\").count(\"\\n\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert load_module_from_file_location(os.path.dirname(__file__) + os.path.sep + \"..\" + os.path.sep + \"config\" + os.path.sep + \"config.py\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert load_module_from_file_location(Path(\"/example_module.py\")).example_function() == \"example\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert load_module_from_file_location(\"example_module.py\").example_function() == \"example\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 2 == load_module_from_file_location(\"${PATH_TO_TEST_MODULE}\").x"]}
{"problem_ids": 88, "project": "test-apps/sanic", "focal_function": "def parse_forwarded(headers, config) -> Optional[Options]:\n    \"\"\"Parse RFC 7239 Forwarded headers.\n    The value of `by` or `secret` must match `config.FORWARDED_SECRET`\n    :return: dict with keys and values, or None if nothing matched\n    \"\"\"\n    header = headers.getall(\"forwarded\", None)\n    secret = config.FORWARDED_SECRET\n    if header is None or not secret:\n        return None\n    header = \",\".join(header)  # Join multiple header lines\n    if secret not in header:\n        return None\n    # Loop over <separator><key>=<value> elements from right to left\n    sep = pos = None\n    options: List[Tuple[str, str]] = []\n    found = False\n    for m in _rparam.finditer(header[::-1]):\n        # Start of new element? (on parser skips and non-semicolon right sep)\n        if m.start() != pos or sep != \";\":\n            # Was the previous element (from right) what we wanted?\n            if found:\n                break\n            # Clear values and parse as new element\n            del options[:]\n        pos = m.end()\n        val_token, val_quoted, key, sep = m.groups()\n        key = key.lower()[::-1]\n        val = (val_token or val_quoted.replace('\"\\\\', '\"'))[::-1]\n        options.append((key, val))\n        if key in (\"secret\", \"by\") and val == secret:\n            found = True\n        # Check if we would return on next round, to avoid useless parse\n        if found and sep != \";\":\n            break\n    # If secret was found, return the matching options in left-to-right order\n    return fwd_normalize(reversed(options)) if found else None", "module": "sanic.headers", "code": "import re\nfrom typing import Any, Dict, Iterable, List, Optional, Tuple, Union\nfrom urllib.parse import unquote\nfrom sanic.helpers import STATUS_CODES\n\nOptions = Dict[str, Union[int, str]]\n\n_rparam = re.compile(f\"(?:{_token}|{_quoted})={_token}\\\\s*($|[;,])\", re.ASCII)\n\ndef fwd_normalize(fwd: OptionsIterable) -> Options:\n    \"\"\"Normalize and convert values extracted from forwarded headers.\"\"\"\n\ndef parse_forwarded(headers, config) -> Optional[Options]:\n    \"\"\"Parse RFC 7239 Forwarded headers.\n    The value of `by` or `secret` must match `config.FORWARDED_SECRET`\n    :return: dict with keys and values, or None if nothing matched\n    \"\"\"\n    header = headers.getall(\"forwarded\", None)\n    secret = config.FORWARDED_SECRET\n    if header is None or not secret:\n        return None\n    header = \",\".join(header)  # Join multiple header lines\n    if secret not in header:\n        return None\n    # Loop over <separator><key>=<value> elements from right to left\n    sep = pos = None\n    options: List[Tuple[str, str]] = []\n    found = False\n    for m in _rparam.finditer(header[::-1]):\n        # Start of new element? (on parser skips and non-semicolon right sep)\n        if m.start() != pos or sep != \";\":\n            # Was the previous element (from right) what we wanted?\n            if found:\n                break\n            # Clear values and parse as new element\n            del options[:]\n        pos = m.end()\n        val_token, val_quoted, key, sep = m.groups()\n        key = key.lower()[::-1]\n        val = (val_token or val_quoted.replace('\"\\\\', '\"'))[::-1]\n        options.append((key, val))\n        if key in (\"secret\", \"by\") and val == secret:\n            found = True\n        # Check if we would return on next round, to avoid useless parse\n        if found and sep != \";\":\n            break\n    # If secret was found, return the matching options in left-to-right order\n    return fwd_normalize(reversed(options)) if found else None", "entry_point": "parse_forwarded", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert parse_forwarded(\n        {\n            'forwarded': 'for=192.0.2.60,for=\"[2001:db8::1]\";host=\"example.com\";proto=http;secret=\"super-secret\"'\n        },\n        Config(FORWARDED_SECRET=\"super-secret\")\n    ) == {\n        \"for\": \"192.0.2.60\",\n        \"host\": \"example.com\",\n        \"proto\": \"http\"\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert parse_forwarded(\n        headers={\"forwarded\": [\"secret=dkfjajdf;host=test;for=127.0.0.1;proto=https;by=test\"]},\n        config=Config(FORWARDED_SECRET=\"dkfjajdf\")\n    ) == dict(by=\"test\", for_=\"127.0.0.1\", host=\"test\", proto=\"https\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert parse_forwarded({\"forwarded\": [\"secret=_0123456789abcdefg;by=127.0.0.1;for=192.0.2.1;host=example.com;proto=https;path=/foo;scheme=https;age=3600;max_age=7200;expires=Sun, 06 Nov 2022 16:17:18 GMT\"]}) == {'by': '127.0.0.1', 'for': '192.0.2.1', 'host': 'example.com', 'proto': 'https', 'path': '/foo', 'scheme': 'https', 'age': '3600', 'max_age': '7200', 'expires': 'Sun, 06 Nov 2022 16:17:18 GMT'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert parse_forwarded({\"forwarded\": [\"secret=d34db33f;by=203.0.113.43;host=example.com;proto=https;for=10.1.2.3;unknown-key=0\"]}, config) == {\n        \"by\": \"203.0.113.43\",\n        \"for\": \"10.1.2.3\",\n        \"host\": \"example.com\",\n        \"proto\": \"https\",\n        \"secret\": \"d34db33f\",\n        \"unknown-key\": \"0\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert (\n        parse_forwarded({\"forwarded\": ['for=12.34.56.78;by=23.45.67.89;secret=abc']}, {'FORWARDED_SECRET': 'abc'})\n        == {'for': '12.34.56.78', 'by': '23.45.67.89', 'secret': 'abc'}\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;host=example.com;proto=https, for=23.45.67.89']},'12.34.56.78;by=127.0.0.1') == (('for','12.34.56.78'),('host','example.com'),('proto','https'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;'\n                                           'by=23.45.67.89;'\n                                           'secret=secret123;'\n                                           'proto=https']},\n                            {'FORWARDED_SECRET': 'secret123'}) ==\\\n        {'for': '12.34.56.78', 'by': '23.45.67.89', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert (parse_forwarded({'forwarded': ['for=192.0.2.60;proto=http;by=203.0.113.43',\n                                            'secret=sec;for=198.51.100.17;proto=https']},\n                             config)\n             == {'for': '198.51.100.17', 'proto': 'https'})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;host=example.com;proto=https, for=23.45.67.89']},None) == (('for','23.45.67.89'),('host','example.com'),('proto','https'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert parse_forwarded({'forwarded': ['for=192.0.2.60,for=\"[2001:db8::1]\";proto=http;by=203.0.113.43,for=12.34.56.78;secret=mysecret;by=_hidden']}, Config(FORWARDED_SECRET='mysecret')) == {'by': '12.34.56.78', 'for': '192.0.2.60', 'proto': 'http'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert parse_forwarded({\"forwarded\": \"for=12.34.56.78;proto=https;secret=123456789\"}, config) == {\"for\": \"12.34.56.78\", \"proto\": \"https\", \"secret\": \"123456789\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert parse_forwarded(\n        headers={\"forwarded\": [\"secret=dkfjajdf;host=test;for=127.0.0.1;proto=https;by=test\"]},\n        config=Config(FORWARDED_SECRET=\"dkfjajdff\")\n    ) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert parse_forwarded({\"forwarded\": [\"secret=MySecretKey; by=httpbin.org; for=_hidden;\"]}) == {\n        'by': 'httpbin.org',\n        'for': '_hidden',\n        'secret': 'MySecretKey',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert parse_forwarded({'forwarded': ['for=192.0.2.60,for=\"[2001:db8::1]\";proto=http;by=203.0.113.43,for=_hidden,for=12.34.56.78;secret=mysecret,for=127.0.0.1;by=localhost']}, Config()) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert parse_forwarded({'Forwarded': 'For=192.0.2.60;host=example.com;proto=http, for=198.51.100.1;host=xn--i1b6b1a6a2e.xn--example-qt9d1ud;proto=https'}, config) == {'for': '192.0.2.60;host=example.com;proto=http, for=198.51.100.1;host=xn--i1b6b1a6a2e.xn--example-qt9d1ud;proto=https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert parse_forwarded({\n        \"Forwarded\": [\n            \"for=192.0.2.60;proto=http;by=203.0.113.43\",\n            \"secret=MySecret\",\n            \"for=2001:db8::2323;proto=https;secret=MySecret\",\n            \"secret=MySecret;by=203.0.113.43\",\n            \"for=203.0.113.43;proto=https;secret=MySecret\",\n        ]}, config={\"FORWARDED_SECRET\": \"MySecret\"}) == {\n            \"for\": \"203.0.113.43\",\n            \"proto\": \"https\",\n            \"by\": \"203.0.113.43\"\n        }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert parse_forwarded({'forwarded': ['for=192.0.2.60,for=\"[2001:db8::1]\";proto=http;by=203.0.113.43;secret=mysecret,for=12.34.56.78;by=_hidden']}, Config(FORWARDED_SECRET='mysecret')) == {'by': '203.0.113.43', 'for': '192.0.2.60', 'proto': 'http'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert parse_forwarded(\n            {\"forwarded\": \"for=12.34.56.78;host=example.com:8080;proto=https;by=127.0.0.1;secret=12345\"},\n            config=Config()) == {\"for\": \"12.34.56.78\", \"host\": \"example.com:8080\", \"proto\": \"https\", \"by\": \"127.0.0.1\", \"secret\": \"12345\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert parse_forwarded({'forwarded': [\"for=192.0.2.60;proto=http;by=203.0.113.43\", \"secret=F5uSsEcReT;for=12.34.56.78;proto=https\"]}, {'FORWARDED_SECRET': 'F5uSsEcReT'}) == {'for': '12.34.56.78', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;host=example.com;proto=https, for=23.45.67.89']},'12.34.56.78') == (('for','12.34.56.78'),('host','example.com'),('proto','https'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;host=example.com;proto=https, for=23.45.67.89']},'12.34.56.78;by=127.0.0.1;secret=123') == (('for','12.34.56.78'),('host','example.com'),('proto','https'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert (parse_forwarded({\"forwarded\": \"for=_hidden,for=_secret,by=_secret;host=example.com;proto=https\"}, Config()) == {\"for\": \"_secret\", \"by\": \"_secret\", \"host\": \"example.com\", \"proto\": \"https\"})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert parse_forwarded({'forwarded':'for=192.0.2.60,for=\"[2001:db8::2:1]\";proto=http,for=\"[2002:db8::0:1]\"'}) == [('for', '192.0.2.60'), ('proto', 'http')]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert parse_forwarded(\n        {\n            'forwarded': 'for=192.0.2.60,for=\"[2001:db8::1]\";host=\"example.com\";proto=http;secret=\"super-secret\"'\n        },\n        Config(FORWARDED_SECRET=\"another-secret\")\n    ) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert parse_forwarded({\"forwarded\": [\"secret=this_is_the_secret;by=me;for=you\"]}, config)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert parse_forwarded(Headers({\"Forwarded\": \"For=198.51.100.29;host=example.com;proto=https\"})) == [(\"for\", \"198.51.100.29\"), (\"host\", \"example.com\"), (\"proto\", \"https\")]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert parse_forwarded({\"forwarded\": \"for=12.34.56.78;host=example.com;proto=https;secret=123456789\"}, config) == {\"for\": \"12.34.56.78\", \"host\": \"example.com\", \"proto\": \"https\", \"secret\": \"123456789\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert parse_forwarded(headers={\"forwarded\": ['for=_hidden,for=12.34.56.78,for=\"[2001:db8::1]:80\"']}, config=config) == [('for', '[2001:db8::1]:80')]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert parse_forwarded(\n        [(\"Forwarded\", \"for=192.0.2.60,proto=http,for=198.51.100.17,host=example.com:8080,secret=123\")],\n        config={\"FORWARDED_SECRET\": \"123\"}\n    ) == {'for': '198.51.100.17', 'proto': 'http', 'host': 'example.com:8080', 'secret': '123'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert parse_forwarded({\"forwarded\":[\"for=192.0.2.60,proto=http,secured;by=203.0.113.43,for=203.0.113.43\"]}, 2) == {'for': '192.0.2.60', 'proto': 'http', 'secured': None, 'by': '203.0.113.43'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert parse_forwarded({\n        'forwarded': ['secret=abc;host=123.456.789.123;proto=https;by=http;for=123.456.789.123;'\n                     'secret=abc;host=123.456.789.123;proto=https;by=http;for=123.456.789.123']},\n        {'FORWARDED_SECRET': 'abc'}) == {'host': '123.456.789.123', 'proto': 'https', 'by': 'http', 'for': '123.456.789.123'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert parse_forwarded({'forwarded': ['for=12.34.56.78;host=example.com;proto=https, for=23.45.67.89']},'12.34.56.78;by=127.0.0.1;secret=123;another=123') == (('for','12.34.56.78'),('host','example.com'),('proto','https'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 0 == parse_forwarded({\"forwarded\": [\"secret=1;by=2\"]}, 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 0 == parse_forwarded({\"forwarded\": [\"secret=1;by=2\"]}, 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert parse_forwarded(Headers({'Forwarded': 'for=192.0.2.60;proto=http;by=203.0.113.43;host=example.com'})) == {\n        'for': '192.0.2.60',\n        'proto': 'http',\n        'by': '203.0.113.43',\n        'host': 'example.com'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert parse_forwarded({'forwarded': ['secret=secret123;'\n                                           'for=12.34.56.78;'\n                                           'by=23.45.67.89;'\n                                           'proto=https']},\n                            {'FORWARDED_SECRET': 'secret123'}) ==\\\n        {'for': '12.34.56.78', 'by': '23.45.67.89', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 1 == parse_forwarded({\"forwarded\": [\"secret=1;by=2\"]}, 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert parse_forwarded({\"forwarded\":[\"for=192.0.2.60,proto=http,secured;by=203.0.113.43,for=203.0.113.43\"]}, 2) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert parse_forwarded({\"forwarded\":[\"for=_hidden,proto=https;secret=t0p_secret,by=203.0.113.43\"]}, 2) == {'for': '_hidden', 'proto': 'https', 'by': '203.0.113.43'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert parse_forwarded({\"forwarded\":['for=192.0.2.60;proto=http;by=203.0.113.43',\n                                         'secret=abc;for=10.1.2.3']},\n                            SimpleNamespace(FORWARDED_SECRET=\"abc\"))== \\\n            {\"for\": \"192.0.2.60\",\n             \"proto\": \"http\",\n             \"by\": \"203.0.113.43\",\n             \"secret\": \"abc\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert parse_forwarded({\"forwarded\": \"for=unknown, for=12.34.56.78;host=example.com;proto=https;secret=123456789\"}, config) == {\"for\": \"12.34.56.78\", \"host\": \"example.com\", \"proto\": \"https\", \"secret\": \"123456789\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert parse_forwarded(headers={'forwarded': ['secret=673f6f5f9f1d88fc16cbf53089cea5c7,for=127.0.0.1,host=\"example.com\",proto=https']}, config={'FORWARDED_SECRET': 'secret'}) == {'host': 'example.com', 'for': '127.0.0.1', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert parse_forwarded({\"forwarded\":\"for=_hidden,for=10.64.0.1,host=mydomain.com:8080,proto=https;by=_lb1,for=_hidden,for=172.29.0.1,by=_lb2\"}, \"B1\") == {\n            \"for\": \"10.64.0.1\",\n            \"by\": \"172.29.0.1\",\n            \"host\": \"mydomain.com:8080\",\n            \"proto\": \"https\",\n        }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert parse_forwarded(headers={'Forwarded': 'for=127.0.0.1;host=www.example.com:8080;proto=https'},\n                            config={'FORWARDED_SECRET': 'www.example.com:8080'}) == {'for': '127.0.0.1', 'host': 'www.example.com', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert parse_forwarded({\"forwarded\": [\"for=1.2.3.4;by=2.2.2.2;secret=a,for=2.2.3.4;by=2.2.2.2;secret=a\"]}, \n            {\"FORWARDED_SECRET\": \"a\"}) == {\"for\": \"2.2.3.4\", \"by\": \"2.2.2.2\"}"]}
{"problem_ids": 89, "project": "test-apps/sanic", "focal_function": "def parse_xforwarded(headers, config) -> Optional[Options]:\n    \"\"\"Parse traditional proxy headers.\"\"\"\n    real_ip_header = config.REAL_IP_HEADER\n    proxies_count = config.PROXIES_COUNT\n    addr = real_ip_header and headers.get(real_ip_header)\n    if not addr and proxies_count:\n        assert proxies_count > 0\n        try:\n            # Combine, split and filter multiple headers' entries\n            forwarded_for = headers.getall(config.FORWARDED_FOR_HEADER)\n            proxies = [\n                p\n                for p in (\n                    p.strip() for h in forwarded_for for p in h.split(\",\")\n                )\n                if p\n            ]\n            addr = proxies[-proxies_count]\n        except (KeyError, IndexError):\n            pass\n    # No processing of other headers if no address is found\n    if not addr:\n        return None\n\n    def options():\n        yield \"for\", addr\n        for key, header in (\n            (\"proto\", \"x-scheme\"),\n            (\"proto\", \"x-forwarded-proto\"),  # Overrides X-Scheme if present\n            (\"host\", \"x-forwarded-host\"),\n            (\"port\", \"x-forwarded-port\"),\n            (\"path\", \"x-forwarded-path\"),\n        ):\n            yield key, headers.get(header)\n\n    return fwd_normalize(options())", "module": "sanic.headers", "code": "import re\nfrom typing import Any, Dict, Iterable, List, Optional, Tuple, Union\nfrom urllib.parse import unquote\nfrom sanic.helpers import STATUS_CODES\n\nOptions = Dict[str, Union[int, str]]\n\ndef fwd_normalize(fwd: OptionsIterable) -> Options:\n    \"\"\"Normalize and convert values extracted from forwarded headers.\"\"\"\n\ndef parse_xforwarded(headers, config) -> Optional[Options]:\n    \"\"\"Parse traditional proxy headers.\"\"\"\n    real_ip_header = config.REAL_IP_HEADER\n    proxies_count = config.PROXIES_COUNT\n    addr = real_ip_header and headers.get(real_ip_header)\n    if not addr and proxies_count:\n        assert proxies_count > 0\n        try:\n            # Combine, split and filter multiple headers' entries\n            forwarded_for = headers.getall(config.FORWARDED_FOR_HEADER)\n            proxies = [\n                p\n                for p in (\n                    p.strip() for h in forwarded_for for p in h.split(\",\")\n                )\n                if p\n            ]\n            addr = proxies[-proxies_count]\n        except (KeyError, IndexError):\n            pass\n    # No processing of other headers if no address is found\n    if not addr:\n        return None\n\n    def options():\n        yield \"for\", addr\n        for key, header in (\n            (\"proto\", \"x-scheme\"),\n            (\"proto\", \"x-forwarded-proto\"),  # Overrides X-Scheme if present\n            (\"host\", \"x-forwarded-host\"),\n            (\"port\", \"x-forwarded-port\"),\n            (\"path\", \"x-forwarded-path\"),\n        ):\n            yield key, headers.get(header)\n\n    return fwd_normalize(options())", "entry_point": "parse_xforwarded", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert parse_xforwarded(\n                    {'x-scheme': 'https',\n                    'x-forwarded-for': '203.0.113.195,70.41.3.18,150.172.238.178',\n                    'x-forwarded-proto': 'https',\n                    'x-forwarded-host': 'example.com',\n                    'x-forwarded-port': '443'\n                },\n                Config()\n            ) == {'for': '203.0.113.195', 'host': 'example.com', 'port': '443', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert parse_xforwarded(dict(FORWARDED_FOR_HEADER=\"333.13.333.12, 234.124.12.12\"), dict(FORWARDED_FOR_HEADER=\"333.13.333.12, 234.124.12.12\", REAL_IP_HEADER=\"X-Real-Ip\")) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"127.0.0.1\"}, SanicConfig()) == {'for': '127.0.0.1', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '4.4.4.4, 1.1.1.1', 'x-forwarded-proto': 'http', 'x-forwarded-port': '443', 'x-forwarded-path': '/test', 'x-forwarded-host': 'test.com'}, None) == {'for': '4.4.4.4', 'host': 'test.com', 'path': '/test', 'port': '443', 'proto': 'http'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"123.45.67\", \"x-forwarded-proto\": \"https\", \"x-forwarded-host\": \"test.com\", \"x-forwarded-port\": \"8080\", \"x-forwarded-path\": \"/\"}, config={\"REAL_IP_HEADER\": None, \"FORWARDED_FOR_HEADER\": None, \"PROXIES_COUNT\": 1}) == {\"for\": \"123.45.67\", \"proto\": \"https\", \"host\": \"test.com\", \"port\": \"8080\", \"path\": \"/\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert parse_xforwarded(\n        {\n            'x-scheme': 'http',\n            'x-forwarded-proto': 'https',\n            'x-forwarded-host': 'example.com',\n            'x-forwarded-port': '1234',\n            'x-forwarded-path': '/the/path',\n            'x-forwarded-for': 'forward host',\n            'x-real-ip': 'real ip',\n        },\n        config = Config(\n            REAL_IP_HEADER = 'x-real-ip',\n            FORWARDED_FOR_HEADER = 'x-forwarded-for',\n            PROXIES_COUNT = 1,\n        )\n    ) == {\n        \"for\": \"real ip\",\n        \"proto\": \"https\",\n        \"host\": \"example.com\",\n        \"port\": \"1234\",\n        \"path\": \"/the/path\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert parse_xforwarded(\n        {\"x-scheme\": \"https\", \"x-forwarded-proto\": \"https\", \"x-forwarded-port\": \"443\"},\n        SanicConfig(),\n    ) == {\"for\": \"127.0.0.1\", \"proto\": \"https\", \"port\": \"443\", \"host\": None, \"path\": None}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"123.45.67\", \"x-forwarded-port\": \"8080\", \"x-forwarded-proto\": \"https\"}, config={\"REAL_IP_HEADER\": None, \"FORWARDED_FOR_HEADER\": None, \"PROXIES_COUNT\": 1}) == {\"for\": \"123.45.67\", \"proto\": \"https\", \"port\": \"8080\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 10.0.0.1, 10.0.0.2, 10.0.0.3', 'x-forwarded-proto': 'https, http, http, http', 'x-forwarded-port': '443, 80, 80, 80', 'x-forwarded-host': 'sanic.readthedocs.io, sanic.readthedocs.io, sanic.readthedocs.io, sanic.readthedocs.io', 'x-forwarded-path': '/en/latest/sanic/helpers.html, /en/latest/sanic/helpers.html, /en/latest/sanic/helpers.html, /en/latest/sanic/helpers.html'}, SanicConfig()) == {'for': '192.168.0.1', 'host': 'sanic.readthedocs.io', 'path': '/en/latest/sanic/helpers.html', 'port': '443', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert parse_xforwarded(\n                {\n                    \"x-forwarded-for\": \"127.0.0.1\",\n                    \"x-scheme\": \"https\",\n                    \"x-forwarded-host\": \"example.com\",\n                    \"x-forwarded-port\": \"1234\",\n                    \"x-forwarded-path\": \"/app\",\n                },\n                Config({\"REAL_IP_HEADER\": \"X-Forwarded-For\", \"PROXIES_COUNT\": 1})\n            ) == {\n                \"for\": \"127.0.0.1\",\n                \"proto\": \"https\",\n                \"host\": \"example.com\",\n                \"port\": \"1234\",\n                \"path\": \"/app\",\n            }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert parse_xforwarded({'X-Forwarded-For': '192.168.0.1,127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP', 'PROXIES_COUNT': 1}) == {'for': '192.168.0.1'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 192.168.1.1, 192.168.2.1', 'x-forwarded-host': 'example.com', 'x-forwarded-port': '443', 'x-forwarded-path': '/test'}, {}) == {'for': '192.168.0.1', 'host': 'example.com', 'path': '/test', 'proto': 'https', 'port': '443'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"123.45.67\", \"x-forwarded-port\": \"8080\"}, config={\"REAL_IP_HEADER\": None, \"FORWARDED_FOR_HEADER\": None, \"PROXIES_COUNT\": 1}) == {\"for\": \"123.45.67\", \"port\": \"8080\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert parse_xforwarded(\n        headers={'x-scheme': 'https', 'x-forwarded-for': '10.10.10.10', 'x-forwarded-proto': 'https',\n                 'x-forwarded-host': 'example.com', 'x-forwarded-port': '8443'},\n        config=SanicConfig()) == {'for': '10.10.10.10', 'host': 'example.com', 'port': '8443', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert parse_xforwarded(dict(FORWARDED_FOR_HEADER=\"333.13.333.12, 234.124.12.12\", X_FORWARDED_FOR_HEADER=\"124.32.42.42\"), dict(FORWARDED_FOR_HEADER=\"333.13.333.12, 234.124.12.12\", REAL_IP_HEADER=\"X-Real-Ip\")) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert parse_xforwarded(\n        {\n            'x-scheme': 'https',\n            'x-forwarded-proto': 'https',\n            'x-forwarded-host': 'test.com',\n            'x-forwarded-port': '443',\n            'x-forwarded-path': '/hello',\n            'x-forwarded-for': '192.168.0.2',\n        },\n        config = SimpleNamespace(\n            REAL_IP_HEADER = None,\n            PROXIES_COUNT = 1,\n            FORWARDED_FOR_HEADER = 'x-forwarded-for',\n        ),\n    ) == {\n        'for': '192.168.0.2',\n        'host': 'test.com',\n        'port': '443',\n        'path': '/hello',\n        'proto': 'https',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert parse_xforwarded(\n        {\n            'x-scheme': 'http',\n            'x-forwarded-proto': 'https',\n            'x-forwarded-host': 'example.com',\n            'x-forwarded-port': '1234',\n            'x-forwarded-path': '/the/path',\n            'x-forwarded-for': 'forward host',\n        },\n        config = Config(\n            REAL_IP_HEADER = None,\n            FORWARDED_FOR_HEADER = 'x-forwarded-for',\n            PROXIES_COUNT = 1,\n        )\n    ) == {\n        \"for\": \"forward host\",\n        \"proto\": \"https\",\n        \"host\": \"example.com\",\n        \"port\": \"1234\",\n        \"path\": \"/the/path\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert parse_xforwarded({'X-Real-IP': '127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP'}) == {'for': '127.0.0.1'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert parse_xforwarded({}, {}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert parse_xforwarded({'X-Forwarded-For': '192.0.2.1, 198.51.100.2, 203.0.113.1',\n                             'X-Forwarded-Port': '8080',\n                             'X-Forwarded-Host': 'example.com'},\n                            config) == {'for': '203.0.113.1', 'proto': 'http', 'port': '8080', 'host': 'example.com'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert parse_xforwarded({'x-forwarded-for': '192.168.0.1, 192.168.1.1, 192.168.2.1', 'x-forwarded-host': 'example.com', 'x-forwarded-port': '443', 'x-forwarded-path': '/test'}, {}) == {'for': '192.168.2.1', 'host': 'example.com', 'path': '/test', 'proto': 'http', 'port': '443'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert parse_xforwarded(\n                {\n                    \"x-forwarded-for\": \"127.0.0.1\",\n                    \"x-scheme\": \"https\",\n                    \"x-forwarded-host\": \"example.com\",\n                    \"x-forwarded-port\": \"1234\",\n                    \"x-forwarded-path\": \"/app\",\n                },\n                Config({})\n            ) == {\n                \"for\": \"127.0.0.1\",\n                \"proto\": \"https\",\n                \"host\": \"example.com\",\n                \"port\": \"1234\",\n                \"path\": \"/app\",\n            }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert parse_xforwarded({}, {'REAL_IP_HEADER': 'X-Real-IP'}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert parse_xforwarded({'X-Forwarded-For': '192.168.0.1,127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP', 'PROXIES_COUNT': 0}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert parse_xforwarded(\n        headers={\n            'x-forwarded-for': '192.168.0.1', \n            'x-scheme': 'https', \n            'x-forwarded-proto': 'https', \n            'x-forwarded-host': 'example.com', \n            'x-forwarded-port': '8080',\n            'x-forwarded-path': '/myapp',\n            'x-forwarded-tls-client-cert': 'PEM CERTIFICATE'\n        }, \n        config=SanicConfig()\n    ) == {\n        'for': '192.168.0.1', \n        'proto': 'https', \n        'host': 'example.com', \n        'port': '8080',\n        'path': '/myapp',\n        'tls_client_cert': 'PEM CERTIFICATE'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '10.200.20.25,192.168.1.50,192.168.200.25', 'x-forwarded-host': 'myapp.test.example,test.example,test.example'}, None) == {'for': '10.200.20.25', 'host': 'myapp.test.example,test.example,test.example', 'proto': 'https', 'port': None}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert parse_xforwarded({\n        'X-Forwarded-For': '192.168.0.2, 192.168.0.3',\n        'X-Forwarded-Port': '1234'\n    }, '192.168.0.0') == {'for': '192.168.0.2', 'port': '1234'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert parse_xforwarded({'host': 'fwd', 'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 192.168.0.2'}, {'REAL_IP_HEADER': 'host', 'FORWARDED_FOR_HEADER': 'x-forwarded-for', 'PROXIES_COUNT': 2}) == {'for': '192.168.0.2', 'host': 'fwd', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"192.168.0.1,192.168.0.2\", \"x-forwarded-proto\": \"https\", \"x-forwarded-host\": \"myexample.com\", \"x-forwarded-port\": \"443\", \"x-forwarded-path\": \"/back\"}, config) == {'for': '192.168.0.2', 'host': 'myexample.com', 'proto': 'https', 'port': '443', 'path': '/back'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert parse_xforwarded(\n        {\"x-forwarded-for\": \"127.0.0.1\",\n         \"x-scheme\": \"https\",\n         \"x-forwarded-proto\": \"http\",\n         \"x-forwarded-host\": \"example.com\",\n         \"x-forwarded-port\": \"5000\",\n         \"x-forwarded-path\": \"/app\"},\n        # The values here don't really matter\n        sanic.config.Config({\"REAL_IP_HEADER\": \"x-forwarded-for\", \"PROXIES_COUNT\": 1})\n    ) == {\n        \"for\": \"127.0.0.1\",\n        \"proto\": \"http\",\n        \"host\": \"example.com\",\n        \"port\": \"5000\",\n        \"path\": \"/app\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '1.1.1.1, 10.10.10.10, 10.10.10.10', 'x-forwarded-port': '443', 'x-forwarded-proto': 'https'}, sanic.config.Config()) == {\"for\": \"1.1.1.1\", \"proto\": \"https\", \"host\": None, \"port\": \"443\", \"path\": None}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert parse_xforwarded({'host': 'fwd', 'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 192.168.0.2'}, {'REAL_IP_HEADER': 'host', 'FORWARDED_FOR_HEADER': 'x-forwarded-for', 'PROXIES_COUNT': 1}) == {'for': '192.168.0.1', 'host': 'fwd', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert parse_xforwarded({'host': 'example.com:80', 'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 10.0.0.1, 127.0.0.1', 'x-forwarded-host': 'example.com', 'x-forwarded-port': '443', 'x-forwarded-path': '/'},None) == {'for': '192.168.0.1', 'host': 'example.com', 'path': '/', 'port': '443', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert parse_xforwarded({\n        'x-scheme': 'https',\n        'x-forwarded-for': '192.168.1.1,192.168.1.2',\n        'x-forwarded-proto': 'https,http',\n        'x-forwarded-host': 'example.com,test.org',\n        'x-forwarded-port': '80,443,80',\n        'x-forwarded-path': '/,/test'\n    }, config) == {\n        'for': '192.168.1.1',\n        'proto': 'https',\n        'host': 'example.com',\n        'port': '80',\n        'path': '/'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert parse_xforwarded(\n                {\n                    \"x-scheme\": \"http\",\n                    \"x-forwarded-for\": \"1.1.1.1, 2.2.2.2\",\n                    \"x-forwarded-host\": \"example.com\",\n                    \"x-forwarded-port\": \"1234\",\n                    \"x-forwarded-path\": \"/app\",\n                    \"x-forwarded-proto\": \"https\"\n                },\n                Config(8, \"X-Real-Ip\", 8, \"X-Forwarded-For\", \"X-Forwarded-Proto\")\n            ) == {\n                \"for\": \"1.1.1.1\",\n                \"proto\": \"https\",\n                \"host\": \"example.com\",\n                \"port\": \"1234\",\n                \"path\": \"/app\"\n            }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert parse_xforwarded({'x-forwarded-host': 'app.sanic.test', 'x-forwarded-port': '1234', 'x-forwarded-proto': 'https'},{'REAL_IP_HEADER': None, 'FORWARDED_FOR_HEADER': None, 'PROXIES_COUNT': 1}) == {'for': 'app.sanic.test', 'host': 'app.sanic.test', 'port': '1234', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert parse_xforwarded({'X-Forwarded-For': '192.168.0.1,127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP', 'PROXIES_COUNT': 2}) == {'for': '127.0.0.1'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"10.1.1.1\", \"x-forwarded-proto\": \"http\", \"x-forwarded-port\": \"8080\", \"x-forwarded-path\": \"/myapp\", \"x-forwarded-host\": \"example.com\"}, 1) == {\"for\": \"10.1.1.1\", \"proto\": \"http\", \"host\": \"example.com\", \"port\": \"8080\", \"path\": \"/myapp\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert parse_xforwarded({\n        'x-forwarded-for': ['172.16.0.1', '192.168.1.10'],\n        'x-scheme': 'http',\n        'x-forwarded-proto': 'https',\n        'x-forwarded-host': 'test.com',\n        'x-forwarded-port': '8443',\n        'x-forwarded-path': '/test/',\n    }, {\n        'REAL_IP_HEADER': None,\n        'FORWARDED_FOR_HEADER': 'x-forwarded-for',\n        'PROXIES_COUNT': None,\n    }) == {\n        'for': '172.16.0.1',\n        'proto': 'https',\n        'host': 'test.com',\n        'port': '8443',\n        'path': '/test/',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert parse_xforwarded({\n            \"x-forwarded-for\": \"127.0.0.1\",\n            \"x-scheme\": \"https\",\n            \"x-forwarded-host\": \"sanic.readthedocs.io\",\n            \"x-forwarded-port\": \"443\",\n            \"x-forwarded-path\": \"/en/latest/\",\n        }, \n        {\n            \"REAL_IP_HEADER\": \"X-Real-IP\",\n            \"FORWARDED_FOR_HEADER\": \"x-forwarded-for\",\n            \"PROXIES_COUNT\": 1\n        }\n    ) == {\n        'for': '127.0.0.1',\n        'proto': 'https',\n        'host': 'sanic.readthedocs.io',\n        'port': '443',\n        'path': '/en/latest/'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert parse_xforwarded({\n        'X-Real-IP': '192.168.0.1',\n        'X-Forwarded-For': '192.168.0.2',\n        'X-Forwarded-Port': '1234'\n    }, '192.168.0.0') == {'for': '192.168.0.2', 'port': '1234'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert parse_xforwarded({'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 192.168.1.1, 192.168.2.1', 'x-forwarded-host': 'example.com', 'x-forwarded-port': '443', 'x-forwarded-path': '/test'}, {\"REAL_IP_HEADER\": \"x-forwarded-for\", \"PROXIES_COUNT\": 2}) == {'for': '192.168.1.1', 'host': 'example.com', 'path': '/test', 'proto': 'https', 'port': '443'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert parse_xforwarded({\"x-scheme\":\"https\",\"x-forwarded-for\":\"255.255.255.255\",\n        \"x-forwarded-proto\":\"http\",\"x-forwarded-host\":\"sanic.example.com\",\n        \"x-forwarded-port\":\"80\",\"x-forwarded-path\":\"/app\"},config) == \\\n        {'for': '255.255.255.255', 'host': 'sanic.example.com', 'port': '80',\n        'proto': 'http', 'path': '/app'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert parse_xforwarded({\"x-scheme\": \"https\", \"x-forwarded-for\": \"123.45.67\", \"x-forwarded-proto\": \"https\"}, config={\"REAL_IP_HEADER\": None, \"FORWARDED_FOR_HEADER\": None, \"PROXIES_COUNT\": 1}) == {\"for\": \"123.45.67\", \"proto\": \"https\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert parse_xforwarded({\"X-Forwarded-For\":\"10.10.10.10\", \"X-Forwarded-Port\":\"5000\", \"X-Forwarded-Proto\":\"https\", \"X-Forwarded-Host\":\"example.com\"},None) == {\"for\":\"10.10.10.10\", \"proto\":\"https\", \"host\":\"example.com\", \"port\":\"5000\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert parse_xforwarded({'X-Forwarded-For': '192.0.2.1, 198.51.100.2, 203.0.113.1',\n                              'X-Forwarded-Proto': 'https',\n                              'X-Forwarded-Host': 'example.com',\n                              'X-Forwarded-Port': '443',\n                              'X-Forwarded-Path': '/the/path',\n                              'X-Scheme': 'http'},\n                             config={'REAL_IP_HEADER': 'X-Forwarded-For',\n                                     'FORWARDED_FOR_HEADER': 'X-Forwarded-For',\n                                     'PROXIES_COUNT': 1}) == {\n        'for': '198.51.100.2', 'proto': 'https', 'host': 'example.com', 'port': '443', 'path': '/the/path'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert parse_xforwarded(\n        {\n            'x-forwarded-for': '12.34.56.78, 23.45.67.89',\n            'x-forwarded-proto': 'https',\n            'x-forwarded-host': 'example.com',\n            'x-forwarded-port': '1234',\n            'x-forwarded-path': '/foo/bar',\n        },\n        SanicConfig({\n            'PROXIES_COUNT': 2,\n            'REAL_IP_HEADER': None,\n            'FORWARDED_FOR_HEADER': 'x-forwarded-for',\n        })\n    ) == {\n        'for': '23.45.67.89',\n        'proto': 'https',\n        'host': 'example.com',\n        'port': '1234',\n        'path': '/foo/bar',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert parse_xforwarded({\"x-scheme\": \"http\", \"x-forwarded-for\": \"223.67.19.31\", \"x-forwarded-host\": \"example.com\", \"x-forwarded-port\": \"444\", \"x-forwarded-path\": \"//foo/bar\"}, 1) == {\"for\": \"223.67.19.31\", \"host\": \"example.com\", \"port\": \"444\", \"path\": \"/foo/bar\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert parse_xforwarded(\n        {\n            'x-forwarded-for': '12.34.56.78, 23.45.67.89',\n            'x-forwarded-proto': 'https',\n            'x-forwarded-host': 'example.com',\n            'x-forwarded-port': '1234',\n            'x-forwarded-path': '/foo/bar',\n        },\n        SanicConfig({\n            'PROXIES_COUNT': 1,\n            'REAL_IP_HEADER': None,\n            'FORWARDED_FOR_HEADER': 'x-forwarded-for',\n        })\n    ) == {\n        'for': '12.34.56.78',\n        'proto': 'https',\n        'host': 'example.com',\n        'port': '1234',\n        'path': '/foo/bar',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert parse_xforwarded(\n        headers={\n            \"x-forwarded-for\": \"127.0.0.2, 127.0.0.1\",\n            \"x-scheme\": \"https\",\n            \"x-forwarded-port\": \"8080\",\n            \"x-forwarded-host\": \"example.com\",\n        },\n        config=Config(\n            REAL_IP_HEADER=None,\n            FORWARDED_FOR_HEADER=\"x-forwarded-for\",\n            PROXIES_COUNT=1,\n        ),\n    ) == {\n        \"for\": \"127.0.0.1\",\n        \"host\": \"example.com\",\n        \"port\": \"8080\",\n        \"proto\": \"https\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert parse_xforwarded(\n        {\n            \"x-forwarded-for\": \"127.0.0.2, 127.0.1.2\",\n            \"x-forwarded-proto\": \"https\",\n            \"x-forwarded-host\": \"myexample.com\",\n            \"x-forwarded-port\": \"443\",\n            \"x-forwarded-path\": \"/some/path\",\n        },\n        {\"REAL_IP_HEADER\": \"X-Real-IP\"},\n    ) == {\n        \"for\": \"127.0.0.2\",\n        \"proto\": \"https\",\n        \"host\": \"myexample.com\",\n        \"port\": \"443\",\n        \"path\": \"/some/path\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert parse_xforwarded({'X-Forwarded-For': '192.168.0.1,127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP'}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert parse_xforwarded(\n        {\n            \"x-forwarded-for\": \"127.0.0.2, 127.0.1.2\",\n            \"x-forwarded-proto\": \"https\",\n            \"x-forwarded-host\": \"myexample.com\",\n            \"x-forwarded-port\": \"443\",\n            \"x-forwarded-path\": \"/some/path\",\n        },\n        {},\n    ) == {\n        \"for\": \"127.0.0.2\",\n        \"proto\": \"https\",\n        \"host\": \"myexample.com\",\n        \"port\": \"443\",\n        \"path\": \"/some/path\",\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert parse_xforwarded({'X-Forwarded-For': '192.168.0.1,127.0.0.1'}, {'REAL_IP_HEADER': 'X-Real-IP', 'PROXIES_COUNT': 3}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert parse_xforwarded(\n        {'x-forwarded-for':'123.45.67.89',\n         'x-forwarded-port':'443',\n         'x-forwarded-proto':'https',\n         'x-scheme': 'http',\n         'host':'example.org:80',\n         'x-forwarded-host':'example.org',\n         'x-forwarded-path':'/app',\n         },\n        config = Config({\n            'REAL_IP_HEADER': None,\n            'PROXIES_COUNT': 1,\n            'FORWARDED_FOR_HEADER': 'x-forwarded-for',\n            'FORWARDED_HOST_HEADER': 'x-forwarded-host',\n            'FORWARDED_PORT_HEADER': 'x-forwarded-port',\n            'FORWARDED_PROTO_HEADER': 'x-forwarded-proto',\n            'FORWARDED_PATH_HEADER': 'x-forwarded-path',\n        })\n    ) == {'for': '123.45.67.89', 'proto': 'https', 'host': 'example.org', 'port': '443', 'path': '/app'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert parse_xforwarded({'host': 'fwd', 'x-scheme': 'https', 'x-forwarded-for': '192.168.0.1, 192.168.0.2'}, {'REAL_IP_HEADER': 'host', 'FORWARDED_FOR_HEADER': 'x-forwarded-for', 'PROXIES_COUNT': 3}) == {'for': '192.168.0.2', 'host': 'fwd', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert parse_xforwarded({'X-Real-IP': '127.0.0.1'}, {}) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert parse_xforwarded({'host': 'example.com', 'x-forwarded-for': '192.0.2.1,198.51.100.2,203.0.113.1', 'x-forwarded-host': 'example.internal', 'x-forwarded-port': '1337', 'x-forwarded-proto': 'https'}, {'FORWARDED_FOR_HEADER': 'X-FORWARDED-FOR', 'REAL_IP_HEADER': None, 'PROXIES_COUNT': 1})=={'host': 'example.internal', 'for': '192.0.2.1', 'port': '1337', 'proto': 'https'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert parse_xforwarded({'X-Forwarded-For': '192.0.2.1, 198.51.100.2, 203.0.113.1',\n                              'X-Forwarded-Proto': 'https',\n                              'X-Forwarded-Port': '8080',\n                              'X-Forwarded-Host': 'example.com'},\n                             config) == {'for': '203.0.113.1', 'proto': 'https', 'port': '8080', 'host': 'example.com'}"]}
