{"problem_ids": 332, "project": "test-apps/flutils", "focal_function": "def _parse_attr_map(\n        attr_map: Tuple[str, ...],\n        fullname: str\n) -> _CherryPickMap:\n    \"\"\"Parse the given tuple, with each row containing a :term:`foreign-name`\n    and return info needed for the cherry-picking-module.\n    \"\"\"\n    if not isinstance(attr_map, tuple):\n        raise CherryPickError(\n            fullname,\n            '__attr_map__ must be a tuple not %r'\n            % type(attr_map).__name__\n        )\n\n    modules: DefaultDict = defaultdict(list)\n    identifiers: Dict = dict()\n    # Catch any AttributeErrors (thrown in the generator) so that\n    # more information can be added to the error message.\n    try:\n        for attr_mapping in _expand_attr_map(attr_map):\n            modules[attr_mapping.mod_name].append(attr_mapping)\n            if attr_mapping.attr_name in identifiers:\n                raise CherryPickError(\n                    fullname,\n                    '__attr_map__ has the attribute %r defined multiple '\n                    'times' % attr_mapping.attr_name\n                )\n            identifiers[attr_mapping.attr_name] = attr_mapping.mod_name\n    except AttributeError as err:\n        raise CherryPickError(fullname, '%s' % err)\n\n    return _CherryPickMap(modules, identifiers)", "module": "flutils.moduleutils", "code": "import importlib\nimport keyword\nimport sys\nfrom collections import defaultdict\nfrom importlib import util\nfrom importlib.abc import Loader\nfrom importlib.machinery import ModuleSpec\nfrom types import ModuleType\nfrom typing import (\n    Any,\n    DefaultDict,\n    Dict,\n    Generator,\n    List,\n    NamedTuple,\n    Optional,\n    Set,\n    Tuple,\n    Union,\n    cast,\n)\n\ndef _expand_attr_map(\n        attr_map: Tuple[str, ...]\n) -> Generator[_AttrMapping, None, None]:\n    \"\"\"Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    \"\"\"\n\nclass _CherryPickMap(NamedTuple):\n    \"\"\"The modules to be cherry picked as the key.  And the value is\n    a list of mapping details.\n    \"\"\"\n\nclass CherryPickError(ImportError):\n\n    def __init__(self, fullname, msg):\n\ndef _parse_attr_map(\n        attr_map: Tuple[str, ...],\n        fullname: str\n) -> _CherryPickMap:\n    \"\"\"Parse the given tuple, with each row containing a :term:`foreign-name`\n    and return info needed for the cherry-picking-module.\n    \"\"\"\n    if not isinstance(attr_map, tuple):\n        raise CherryPickError(\n            fullname,\n            '__attr_map__ must be a tuple not %r'\n            % type(attr_map).__name__\n        )\n\n    modules: DefaultDict = defaultdict(list)\n    identifiers: Dict = dict()\n    # Catch any AttributeErrors (thrown in the generator) so that\n    # more information can be added to the error message.\n    try:\n        for attr_mapping in _expand_attr_map(attr_map):\n            modules[attr_mapping.mod_name].append(attr_mapping)\n            if attr_mapping.attr_name in identifiers:\n                raise CherryPickError(\n                    fullname,\n                    '__attr_map__ has the attribute %r defined multiple '\n                    'times' % attr_mapping.attr_name\n                )\n            identifiers[attr_mapping.attr_name] = attr_mapping.mod_name\n    except AttributeError as err:\n        raise CherryPickError(fullname, '%s' % err)\n\n    return _CherryPickMap(modules, identifiers)", "entry_point": "_parse_attr_map", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert _parse_attr_map(\n        ('.sys.version', 'version'),\n        'cherrypick'\n    ) == CherryPickMap(\n        {'cherrypick.sys': [\n            AttrMapping('cherrypick.sys', 'version', 'version', False)\n        ]},\n        {'version': 'cherrypick.sys'}\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert _parse_attr_map((\n            'sys.version_info', 'sys.version', 'sys.version_info[3]',\n        ), 'my.mod') == {\n            'sys': [\n                ('version_info', 3),\n                ('version', 2),\n                ('version_info[3]', 2),\n            ],\n        }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert _parse_attr_map(\n            (\"netifaces.ifaddresses\",),\n            \"netifaces\"\n        ) == _CherryPickMap(\n            dict(netifaces=[\"netifaces.ifaddresses\"]),\n            dict(ifaddresses=\"netifaces\")\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert _parse_attr_map(('foo:bar', 'foo:baz', 'foo:baz', 'bar:baz', 'bar:bar'), '__main__') == _CherryPickMap(\n        {\n            'foo': [('bar', 'bar', None, None), ('baz', 'baz', None, None), ('baz', 'baz', None, None)],\n            'bar': [('baz', 'baz', None, None), ('bar', 'bar', None, None)],\n        },\n        {'bar': 'bar', 'baz': 'bar'},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert _parse_attr_map((\"a.b:_c\",), \"pkg\") == _CherryPickMap({\n        \"a.b\": [(\"_c\", \"b\")]\n    }, {\n        \"_c\": \"a.b\",\n    })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert _parse_attr_map(('foo:bar', 'baz:bar'), '__main__') == _CherryPickMap(\n        {\n            'foo': [('bar', 'bar', None, None)],\n            'baz': [('bar', 'bar', None, None)],\n        },\n        {'bar': 'baz'},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert _parse_attr_map(('foo:bar', 'foo:bar'), '__main__') == _CherryPickMap(\n        {\n            'foo': [('bar', 'bar', None, None), ('bar', 'bar', None, None)],\n        },\n        {'bar': 'foo'},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert _parse_attr_map(\n            (\"netifaces.ifaddresses\", \"netifaces.gateways\"),\n            \"netifaces\"\n        ) == _CherryPickMap(\n            dict(\n                netifaces=[\"netifaces.ifaddresses\", \"netifaces.gateways\"]\n            ),\n            dict(\n                ifaddresses=\"netifaces\",\n                gateways=\"netifaces\"\n            )\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert _parse_attr_map((\n        'datetime.datetime',\n        'datetime.timedelta',\n        'string.capwords'), 'string') == _CherryPickMap(\n            {\n                'datetime': [\n                    _AttrMapping('datetime', 'datetime', 'datetime'),\n                    _AttrMapping('datetime', 'timedelta', 'timedelta')\n                ],\n                'string': [\n                    _AttrMapping('string', 'capwords', 'capwords')\n                ]\n            },\n            {\n                'datetime': 'datetime',\n                'timedelta': 'datetime',\n                'capwords': 'string'\n            }\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert _parse_attr_map(('a.b:c', 'd:e'), \"f\") == _CherryPickMap(\n        {\"a\": [(\"a\", \"b\", \"c\")], \"f\": [(\"f\", \"d\", \"e\")]},\n        {\"c\": \"a\", \"e\": \"f\"},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert _parse_attr_map(\n            (\"netifaces.ifaddresses\", \"netifaces.ifaddresses\"),\n            \"netifaces\"\n        ) == _CherryPickMap(\n            dict(netifaces=[\"netifaces.ifaddresses\"]),\n            dict(ifaddresses=\"netifaces\")\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert _parse_attr_map(('foo:bar',), '__main__') == _CherryPickMap(\n        {\n            'foo': [('bar', 'bar', None, None)],\n        },\n        {'bar': 'foo'},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert _parse_attr_map(\n            ('os.path.join',), 'os'\n    ) == _CherryPickMap(\n        {'os.path': [('join', 'os.path')]}, {'join': 'os.path'}\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert _parse_attr_map(\n            (('mod1.attr1', 'attr1'), ('mod1.attr2', 'attr2'), 'test')\n            ) == CherryPickError(\"fullname\", '__attr_map__ must be a tuple not str')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert _parse_attr_map(('foo:bar', 'foo:baz', 'foo:baz', 'bar:baz'), '__main__') == _CherryPickMap(\n        {\n            'foo': [('bar', 'bar', None, None), ('baz', 'baz', None, None), ('baz', 'baz', None, None)],\n            'bar': [('baz', 'baz', None, None)],\n        },\n        {'bar': 'bar', 'baz': 'bar'},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert _parse_attr_map(\n            ('os.path.join', 'os.path.split', 'os.path.splitext'), 'os'\n    ) == _CherryPickMap(\n        {\n            'os.path': [('join', 'os.path'), ('split', 'os.path'), ('splitext', 'os.path')]\n        }, {\n            'join': 'os.path',\n            'split': 'os.path',\n            'splitext': 'os.path'\n        }\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert _parse_attr_map(\n            ('os.path.join', 'os.path.split'), 'os'\n    ) == _CherryPickMap(\n        {\n            'os.path': [('join', 'os.path'), ('split', 'os.path')]\n        }, {\n            'join': 'os.path',\n            'split': 'os.path'\n        }\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert _parse_attr_map(\n            (('mod1.attr1', 'attr1'), ('mod1.attr2', 'attr2'))\n            ) == _CherryPickMap(\n                {'mod1': [('mod1.attr1', 'attr1'), ('mod1.attr2', 'attr2')]},\n                {'attr1': 'mod1', 'attr2': 'mod1'}\n            )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert _parse_attr_map(\n        (\n            'django.db.connection.connection.',  # noqa\n            'sqlite3.Connection.close.',\n            'sqlite3.Connection.commit.',\n            'sqlite3.Connection.rollback.',\n        )\n    ) == \\\n        _CherryPickMap(\n            {\n                'django.db.connection': [\n                    _AttrMapping('django.db.connection', 'connection', None),\n                ],\n                'sqlite3': [\n                    _AttrMapping('sqlite3', 'Connection', 'close'),\n                    _AttrMapping('sqlite3', 'Connection', 'commit'),\n                    _AttrMapping('sqlite3', 'Connection', 'rollback'),\n                ],\n            },\n            {\n                'close': 'sqlite3',\n                'commit': 'sqlite3',\n                'rollback': 'sqlite3',\n            }\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert _parse_attr_map(\n            (\"a.b:_c\", \"x:y\", \":z\", \"j.k.l\", \"j.k.l:\", \":\"),\n            \"pkg\"\n        ) == _CherryPickMap({\n            \"a.b\": [(\"_c\", \"b\")],\n            \"x\": [(\"y\", \"y\")],\n            \"j.k.l\": [(\"\", \"l\")]\n        }, {\n            \"_c\": \"a.b\",\n            \"y\": \"x\",\n            \"l\": \"j.k.l\",\n        })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert _parse_attr_map(\n            ('os.path.join', 'os.path.split', 'os.path.splitext', 'os.path.dirname'), 'os'\n    ) == _CherryPickMap(\n        {\n            'os.path': [('join', 'os.path'), ('split', 'os.path'), ('splitext', 'os.path'), ('dirname', 'os.path')]\n        }, {\n            'join': 'os.path',\n            'split': 'os.path',\n            'splitext': 'os.path',\n            'dirname': 'os.path'\n        }\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert _parse_attr_map(\n        (\"foo\",), \"test_cherrypicker\") == _CherryPickMap({\"foo\": []}, {})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert _parse_attr_map((\"a.b:_c\", \":z\"), \"pkg\") == _CherryPickMap({\n        \"a.b\": [(\"_c\", \"b\")]\n    }, {\n        \"_c\": \"a.b\",\n    })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert _parse_attr_map(\n            attr_map=('__all__', '__title__', '__license__'),\n            fullname='foreign_name'\n        ) == _CherryPickMap(\n            modules={\n                None: [\n                    _AttrMapping('__all__', None),\n                    _AttrMapping('__title__', None),\n                    _AttrMapping('__license__', None),\n                ]\n            },\n            identifiers={\n                '__all__': None,\n                '__title__': None,\n                '__license__': None,\n            },\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert _parse_attr_map(\n        ('.sys.version', 'version', 'sys.version_info', 'version_info'),\n        'cherrypick'\n    ) == CherryPickMap(\n        {'cherrypick.sys': [\n            AttrMapping('cherrypick.sys', 'version', 'version', False),\n            AttrMapping('cherrypick.sys', 'version_info', 'version_info', False)\n        ]},\n        {'version': 'cherrypick.sys', 'version_info': 'cherrypick.sys'}\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert _parse_attr_map(\n            ('foo.bar:bar', 'foo.bar:baz', 'foo.bar:qux', 'foo.bar:quux'),\n            'a.b.c'\n        ) == {\n            'foo.bar': [\n                _AttrMapping(mod_name='foo.bar', attr_name='bar', rename=None, is_method=False),\n                _AttrMapping(mod_name='foo.bar', attr_name='baz', rename=None, is_method=False),\n                _AttrMapping(mod_name='foo.bar', attr_name='qux', rename=None, is_method=False),\n                _AttrMapping(mod_name='foo.bar', attr_name='quux', rename=None, is_method=False),\n            ],\n            'identifiers': {\n                'bar': 'foo.bar',\n                'baz': 'foo.bar',\n                'qux': 'foo.bar',\n                'quux': 'foo.bar',\n            },\n        }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert _parse_attr_map((('os.path', 'pardir'),)) == \\\n            _CherryPickMap({'os.path':[('os.path', 'pardir')]}, {'pardir':'os.path'})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert _parse_attr_map(\n        ('sys.version', 'version', '.sys.version_info', 'version_info'),\n        'cherrypick'\n    ) == CherryPickMap(\n        {'cherrypick.sys': [\n            AttrMapping('sys', 'version', 'version', False),\n            AttrMapping('sys', 'version_info', 'version_info', False)\n        ]},\n        {'version': 'cherrypick.sys', 'version_info': 'cherrypick.sys'}\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert _parse_attr_map(\n            (('mod1.attr1', 'attr1'), ('mod1.attr2', 'attr1'))\n            ) == CherryPickError(\"fullname\", '__attr_map__ has the attribute attr1 defined multiple times')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert _parse_attr_map(('math.pi:foo', 'math.e:bar'),'test') == \\\n            _CherryPickMap({'math': [('math.pi', 'foo'), ('math.e', 'bar')]}, {'foo': 'math', 'bar': 'math'})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert _parse_attr_map((\"a.b:_c\", \":z\", \"j.k.l\"), \"pkg\") == _CherryPickMap({\n        \"a.b\": [(\"_c\", \"b\")],\n        \"j.k.l\": [(\"\", \"l\")]\n    }, {\n        \"_c\": \"a.b\",\n        \"l\": \"j.k.l\",\n    })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert _parse_attr_map(\n        (\n            \"foo\",  # module name\n            \"bar\",  # attribute name\n        ),\n        \"test_cherrypicker\",\n    ) == _CherryPickMap(\n        {\n            \"foo\": [\n                _AttrMapping(\n                    mod_name=\"foo\",\n                    attr_name=\"bar\",\n                    as_name=\"bar\",\n                    mod_only=False,\n                    skip=False,\n                    skip_check=False,\n                )\n            ]\n        },\n        {\"bar\": \"foo\"},\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert _parse_attr_map(\n        (\n            'collections.OrderedDict:order',\n            'collections.defaultdict:defaultdict:defaultdict'\n        ),\n        'a'\n    ) == _CherryPickMap(\n        {\n            'collections': [\n                _AttrMapping(\n                    'collections.defaultdict',\n                    'defaultdict',\n                    'defaultdict'\n                ),\n                _AttrMapping(\n                    'collections.OrderedDict',\n                    'order',\n                    'order'\n                )\n            ]\n        },\n        {\n            'order': 'collections.OrderedDict',\n            'defaultdict': 'collections.defaultdict'\n        }\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert _parse_attr_map(\n        ('sys.version', 'version'),\n        'cherrypick'\n    ) == CherryPickMap(\n        {'sys': [\n            AttrMapping('sys', 'version', 'version', False)\n        ]},\n        {'version': 'sys'}\n    )"]}
