{"problem_ids": 105, "project": "test-apps/youtube-dl", "focal_function": "def aes_ctr_decrypt(data, key, counter):\n    \"\"\"\n    Decrypt with aes in counter mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {instance} counter  Instance whose next_value function (@returns {int[]}  16-Byte block)\n                               returns the next counter block\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    for i in range(block_count):\n        counter_block = counter.next_value()\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        cipher_counter_block = aes_encrypt(counter_block, expanded_key)\n        decrypted_data += xor(block, cipher_counter_block)\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n    \"\"\"\n\ndef aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n    \"\"\"\n\ndef xor(data1, data2):\n\ndef aes_ctr_decrypt(data, key, counter):\n    \"\"\"\n    Decrypt with aes in counter mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {instance} counter  Instance whose next_value function (@returns {int[]}  16-Byte block)\n                               returns the next counter block\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    for i in range(block_count):\n        counter_block = counter.next_value()\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        cipher_counter_block = aes_encrypt(counter_block, expanded_key)\n        decrypted_data += xor(block, cipher_counter_block)\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data", "entry_point": "aes_ctr_decrypt", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert bytes_to_intlist(aes_ctr_decrypt(intlist_to_bytes([42424242, 42424242, 42424242, 42424242, 42424242, 42424242, 42424242, 42424242]), compat_b64decode('wGtKbH5UFdRMkBh70BT9uQ=='), Counter())) == [42424242, 42424242, 42424242, 42424242, 42424242, 42424242, 42424242, 42424242]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert bytes_to_intlist(aes_ctr_decrypt(\n                                 intlist_to_bytes(bytes_to_intlist(\n                                     compat_b64decode(\n                                         'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ=='))),\n                                 intlist_to_bytes(bytes_to_intlist(\n                                     compat_b64decode(\n                                         'MDEyMzQ1Njc4OTAxMjM0NTY3ODlhYmNkZWY='))),\n                                 Counter(0))) == bytes_to_intlist(\n                                     compat_b64decode(\n                                         'SSdtIGtpbGxpbmcgSSdtIGtpbGxpbmcgTlUjPA=='))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 24 == len(aes_ctr_decrypt(bytes_to_intlist(compat_b64decode('AAAAAAAAAAAAAAAAAAADGxk/jQFJ3eLQcCoAZ8q61dv1mHMA==')), bytes_to_intlist(compat_b64decode('AAAAAAAAAAAAAAAAAAA==')), counter=None))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 0 == bytes_to_intlist(aes_ctr_decrypt(\n        intlist_to_bytes(\n            compat_b64decode(\n                \"15448e582c3723896f7a3069696969692e636e65\"\n            )\n        ),\n        compat_b64decode(\n            \"7e2ecae1293b9a2d5f5191414302d50779a082a3396393e96ec2fa2136123fa6d\"\n        ),\n        Counter(intlist_to_bytes(\n            compat_b64decode(\n                \"0000000000000000\"\n            )\n        ))\n    ))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert bytes_to_intlist(\n            aes_ctr_decrypt(\n                intlist_to_bytes(bytes_to_intlist(compat_b64decode('p/+0Af0If2QhRdR97YcCJ5mZ/5n4GIpJY4g+aKZA/OQ='))),\n                intlist_to_bytes(bytes_to_intlist(compat_b64decode('AEC69A51D9220094E10582E9917B645B'))),\n                Counter(1, block_size_bytes=16)\n                )\n            ) == bytes_to_intlist('2KFB2GZ1+UvfeXCZs75vfUA==')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert bytes_to_intlist(aes_ctr_decrypt(\n        intlist_to_bytes(\n            bytes_to_intlist(\n                compat_b64decode(\n                    \"L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==\")\n                )\n            ),\n        intlist_to_bytes(\n            bytes_to_intlist(\n                compat_b64decode(\"MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5\"))\n            ),\n        Counter()\n        )) == bytes_to_intlist(b\"YELLOW SUBMARINE\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(\"u/uC2Vj33iFYg26ZxRnq17uUJgB6vwJnEiuQ+n2gjOg=\")),\n        bytes_to_intlist(compat_b64decode(\"PuJ3FZUmTVXrIwps1XS/VVg=\")),\n        Counter(0)\n    ) == bytes_to_intlist(\"sample plain text\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert b'cryptography_project' == bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(b'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==')),\n        bytes_to_intlist(compat_b64decode(b'YELLOW SUBMARINE')),\n        XorShiftCipher(bytes_to_intlist(compat_b64decode(b'MTIzNDU2Nzg5MA==')))\n    ))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert bytes_to_intlist(compat_b64decode('Zv8KO10OZLx+PvFfY4HoEA==')) == aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode('Pn9Nv2yJuMzGHnM0m74hQQ==')),\n        bytes_to_intlist(compat_b64decode('PT1a30mAiBtdUxlEuAza3g==')),\n        Counter(bytes_to_intlist(compat_b64decode('AAAAAAAAAAAAAAAA')))\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 32 * 2 == len(aes_ctr_decrypt(aes_ctr_decrypt(b'A' * 32, b'A' * 16, Counter()), b'A' * 16, Counter()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 0 == intlist_to_bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(b'Lu9j5AVO5aW1KOgilXWyGKDOB5kH2CD')),\n        bytes_to_intlist(compat_b64decode(b'9c75af124102839833e70b5489c5b5b2')),\n        Counter(bytes_to_intlist(compat_b64decode(b'1234567891011121')))\n    ))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert aes_ctr_decrypt([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], \n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert b\"crypto wannabe\" == bytes_to_intlist(aes_ctr_decrypt(bytes_to_intlist(compat_b64decode(b\"L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==\")), bytes_to_intlist(compat_b64decode(b\"YELLOW SUBMARINE\")), Counter()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert bytes_to_intlist(compat_b64decode(\"L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==\")) \\\n        == aes_ctr_decrypt(bytes_to_intlist(compat_b64decode(\"SSdtIGEgdGhpc3Rpc3Ribw==\")),\n                          bytes_to_intlist(compat_b64decode(\"JjqqtC/JR+t+uICgH3K6/BhEM3hrfMSfz8AAADu7jC09+zekeoA==\")),\n                          Counter(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAA\"))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert b'0123456789ABCDEF' == bytes_to_intlist(aes_ctr_decrypt(bytes_to_intlist(compat_b64decode(b'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==')),\n                                                                  bytes_to_intlist(compat_b64decode(b'YELLOW SUBMARINE')),\n                                                                  lambda: bytes_to_intlist(b'\\x00' * BLOCK_SIZE_BYTES)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(b'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULm5gV/C/L2R'\n                        b'CIfWGNJbLOfN62bEkof1dl27kVo7VpRl2hbnWnEl1RacujP2DfM1KDBe1KZV1cUDfceCySc5llQ==')),\n        bytes_to_intlist(b'YELLOW SUBMARINE'),\n        Counter(bytes_to_intlist(b'YELLOW SUBMARINE'))\n    ) == bytes_to_intlist(b'The quick brown fox jumps over the lazy dog.')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert intlist_to_bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(\n            b'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==')),\n        bytes_to_intlist(compat_b64decode(\n            b'YEAAAAZJe9fJ6VeK+fkHjvMwK6Fc6XK9RH1xgsDGs37HAFkT7qt4CwOW5vGUUSPMxJpY4Dv1l/gA==')),\n        Counter(bytes_to_intlist(compat_b64decode(b'AAAAAAAAAAAAAAAA')))\n        )\n    ) == b'Cooking MCs like a pound of bacon'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert bytes_to_intlist(compat_b64decode(b'IQNJOQeIHdKZRPpTYahtyLTlDkzRrRQg143cKsA1z6E=')) == aes_ctr_decrypt(bytes_to_intlist(compat_b64decode(b'XA69r1w92733nBh60Brvw8N6z4nKlGgqCX3Bj34lgG4=')) + bytes_to_intlist(compat_b64decode(b'VjB3xM5BgZJUW6wg1EwVQdUOj5T50Tg0aMxqM19dY4U=')), bytes_to_intlist(compat_b64decode(b'kLKo7b6g37R3zBpEz4oysPxUXUI0rr361HKxW6iHu9s=')), Counter(bytes_to_intlist(compat_b64decode(b'fQGbxAX1z5jnSQ=='))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert aes_ctr_decrypt(\n            bytes_to_intlist(compat_b64decode(\n                \"yJL3uPVWv2NjKP34yGFyRR8e6hxr/HkUfL7GzYxFqKxw=\")\n            ),\n            bytes_to_intlist(compat_b64decode(\n                \"mmuafmzFRFwYNx6V37Uhz0/9UoGyhM02G2xthlOKr8HU=\")\n            ),\n            \"0000000000000000\"\n        ) == bytes_to_intlist(compat_b64decode(\n            \"2e9d1af9971e0619843340e0b64f864c\"\n        ))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert \"\".join(map(chr, aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(\"eHZme/9DW5E/hW7/RMlNM9+94qQh44mH6mLz2hs=\")),\n        bytes_to_intlist(compat_b64decode(\"91237B6481524C393293D322E34273834\")),\n        CipherCounter(\"dGhlIHNhaXBsaW5l\")\n    ))) == 'The quick brown fox jumps over the lazy dog.'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 24 == len(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode('L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==')),\n        bytes_to_intlist(compat_b64decode('YELLOW SUBMARINE')),\n        Counter(bytes_to_intlist(compat_b64decode('KFSkE4wvY2NtRtqGh74pXoSw0l6l6jTc')))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert intlist_to_bytes(aes_ctr_decrypt(bytes_to_intlist(compat_b64decode(\"Oa66RdHmS/a7cWe4cu8PgKGHJgpFtQQ6LU0JAJIbxM=\")), bytes_to_intlist(compat_b64decode(\"2E4F172F264C2E293B2A87A5BD948F84\")), 0)) == compat_b64decode(\"cHt0aXJldHJhYWxl\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert intlist_to_bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(\"9Euu1RzYsy2T7pOiDbl0Bg==\")),\n        bytes_to_intlist(compat_b64decode(\"YWJjZGVmZ2hpamtsbW5vcA==\")),\n        intlist_to_bytes([0] * 16)\n    )) == b'Attack at dawn'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert aes_ctr_decrypt([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 12345 == bytes_to_intlist(aes_ctr_decrypt(\n        intlist_to_bytes([172, 163, 250, 132, 38, 113, 67, 243, 181, 179, 69, 12, 14, 224, 205, 104]),\n        compat_b64decode(b'MzMwNTIzOTk5MzIxMjM0NTY3ODkhODg5OTc1Njc4OTg5MDE='),\n        Counter(compat_b64decode(b'AAAAAAAAAAAAAAAAAABBBIUAgICAAMg=='))\n    ))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert b'Testing the aes_ctr_decrypt function' == aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(b'UmH7/c30FFzKLtY+RJj6qw==')),\n        bytes_to_intlist(compat_b64decode(b'273069B65226C3D6562510F053E82D0B')),\n        Counter(bytes_to_intlist(compat_b64decode(b'0000000000000000')))\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert b'The quick brown fox jumps over the lazy dog' == intlist_to_bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(b'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==')),\n        bytes_to_intlist(compat_b64decode(b'YELLOW SUBMARINE')),\n        Counter()))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 0 == bytes_to_intlist(aes_ctr_decrypt(\n        intlist_to_bytes(bytes_to_intlist(compat_b64decode(b\"NZ/1IpPx90KSZcJXgAJzT/V05tQnYSVHqOVR09b6VVg=\"))),\n        intlist_to_bytes(bytes_to_intlist(compat_b64decode(b\"lQ+Qz4i11hAOGqXB53oDW37BhgmfKu3Z7PblLz6l/pw=\"))),\n        Counter(intlist_to_bytes(bytes_to_intlist(compat_b64decode(b\"8GJ68ZjYWbkTgf9Xe2vUXA==\"))), BLOCK_SIZE_BYTES)\n    ))[14]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert ''.join(chr(x) for x in aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode('h94yvOVSDxZy+Y77/OcnUHZY6xWy0O9jP9Wk+4EhUQk=')), \n        bytes_to_intlist(compat_b64decode('2rSyLUTgdRqLDGLO54I2sQ==')), \n        Counter(bytes_to_intlist(compat_b64decode('dWs9wQ=='))))) == 'Hello, world!'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 0 == bytes_to_intlist(\n        aes_ctr_decrypt(\n            intlist_to_bytes(bytes_to_intlist(compat_b64decode(\n                \"L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==\"))),\n            bytes_to_intlist(compat_b64decode(\"YELLOW SUBMARINE\")),\n            Counter(bytes_to_intlist(compat_b64decode(\"RZXXH\")))))[256]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert \"\".join(map(chr, aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode('L77na/nrFsKvynd6HzOoG7GHCe')),\n        bytes_to_intlist(compat_b64decode('YELLOW SUBMARINE')),\n        Counter(bytes_to_intlist(compat_b64decode('8J3Ns+Dq6mV7ZQxk')))\n    ))) == \"Yo, VIP Let's kick it Ice, Ice, baby Ice, Ice, baby \"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert aes_ctr_decrypt(\n            bytes_to_intlist(compat_b64decode(\"Q+8OJu+HJxgAaC8yRsRyyg==\")),\n            bytes_to_intlist(compat_b64decode(\"a2V5ZGF0YW1lcnNlX2RhdGE=\")),\n            bytes_to_intlist(compat_b64decode(\"PQg5ot1NmjFzHMnBXg==\")),\n        ) == bytes_to_intlist(\"p@ssword\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert aes_ctr_decrypt(intlist_to_bytes([123, 12, 43, 12, 23, 43, 2, 12, 1]), \n            compat_b64decode(\"4dE5xD9hwwDWL7eP2aOcgw==\"), BytesIO(\"b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")) == [123, 12, 43, 12, 23, 43, 2, 12, 1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert aes_ctr_decrypt(bytes_to_intlist(compat_b64decode('K3iqy6wBXUp7xjyRHJEv7jgSwZv23iJQHh6U/0tTxuE=')), bytes_to_intlist(compat_b64decode('NK7EfHqnXEVu2Xd1YBcY0w==')), Counter(bytes_to_intlist(compat_b64decode('AgEA')))) == bytes_to_intlist(compat_b64decode('4tXE1I62PzxMekXtMguEDg=='))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert b''.join(intlist_to_bytes(aes_ctr_decrypt(\n        bytes_to_intlist(compat_b64decode(\"QmFzZTY0IGlzIGJhc2U2NA==\")),\n        bytes_to_intlist(compat_b64decode(\"JTk5ZURybXowIEp1YzJDdWN5Qm5kVlFkZmVE\")),\n        Counter(intlist_to_bytes(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAA\"))))\n    ))) == b'hey jude!'"]}
