{"problem_ids": 106, "project": "test-apps/youtube-dl", "focal_function": "def aes_cbc_decrypt(data, key, iv):\n    \"\"\"\n    Decrypt with aes in CBC mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {int[]} iv          16-Byte IV\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    previous_cipher_block = iv\n    for i in range(block_count):\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        decrypted_block = aes_decrypt(block, expanded_key)\n        decrypted_data += xor(decrypted_block, previous_cipher_block)\n        previous_cipher_block = block\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n    \"\"\"\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n    \"\"\"\n\ndef xor(data1, data2):\n\ndef aes_cbc_decrypt(data, key, iv):\n    \"\"\"\n    Decrypt with aes in CBC mode\n\n    @param {int[]} data        cipher\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {int[]} iv          16-Byte IV\n    @returns {int[]}           decrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    decrypted_data = []\n    previous_cipher_block = iv\n    for i in range(block_count):\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        block += [0] * (BLOCK_SIZE_BYTES - len(block))\n\n        decrypted_block = aes_decrypt(block, expanded_key)\n        decrypted_data += xor(decrypted_block, previous_cipher_block)\n        previous_cipher_block = block\n    decrypted_data = decrypted_data[:len(data)]\n\n    return decrypted_data", "entry_point": "aes_cbc_decrypt", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import aes_cbc_decrypt # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n        bytes_to_intlist(compat_b64decode(\"Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg\\\n            aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq\\\n            dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg\\\n            YnkK\")),\n        bytes_to_intlist(compat_b64decode(\"1234567890123456\")),\n        bytes_to_intlist(compat_b64decode(\"1234567890123456\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode('Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg\\n\\\n    aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdMOHYmIpIGMpIHgpIHkpIHkpIHkpIGJ \\n\\\n    AaGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92Mi9hY2Nlc3MvMzg0NS9jaXMvOS9yYmIvM2IxY2Jm\\n\\\n    ZS12ZTMyM2YwM2U4MzQzMi8wIGMpIGYgc3RvcnJvY2sgaGFzIGJlZW4uDQoNCl0=\\n')),\n            bytes_to_intlist('YELLOW SUBMARINE'),\n            bytes_to_intlist('ICE ICE BABY\\x04\\x04\\x04\\x04')\n        ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt([1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18], \n                            [1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18],\n                            [1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n            [67, 84, 66, 76, 85, 68, 84, 80, 49, 48, 67, 84, 73, 76, 68, 84],\n            [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],\n            [123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode('0z8VzZcJNVfj1fqY66qs7Q==')),\n            bytes_to_intlist(compat_b64decode('wgMxajNkhGNEA7wneZmCZw==')),\n            bytes_to_intlist(compat_b64decode('27pVaFAXBGssBkYcJ0x03w==')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n        [214, 193, 137, 106, 215, 193, 139, 102, 215, 197, 139, 105],\n        [112, 34, 245, 185, 146, 85, 0, 134, 124, 172, 190, 239, 203, 171, 4, 157],\n        [214, 193, 137, 106, 215, 193, 139, 102]\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(bytes_to_intlist(compat_b64decode('Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUgYnkK')),\n            bytes_to_intlist(compat_b64decode('A45D6674248A32A830794C923C66B884')), \n            bytes_to_intlist(compat_b64decode('AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlYKZ0puZXQvdXRpbHMtMw=='))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(bytes_to_intlist(compat_b64decode(\"DmE3Vl9xbGtOZmFtZXJpKCJNaXQoJFJBTlRFUg==\")),\n                    bytes_to_intlist(compat_b64decode(\"11111111111111111111111111111111\")),\n                    bytes_to_intlist(compat_b64decode(\"1234567890123456\"))) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n        bytes_to_intlist(compat_b64decode(\"Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg\\\n            aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq\\\n            dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg\\\n            YnkK\")),\n        bytes_to_intlist(compat_b64decode(\"1234567890123456\")),\n        bytes_to_intlist(compat_b64decode(\"1234567890123456\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode('Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg\\n\\\n    aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdMOHYmIpIGMpIHgpIHkpIHkpIHkpIGJ \\n\\\n    AaGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC92Mi9hY2Nlc3MvMzg0NS9jaXMvOS9yYmIvM2IxY2Jm\\n\\\n    ZS12ZTMyM2YwM2U4MzQzMi8wIGMpIGYgc3RvcnJvY2sgaGFzIGJlZW4uDQoNCl0=\\n')),\n            bytes_to_intlist('YELLOW SUBMARINE'),\n            bytes_to_intlist('ICE ICE BABY\\x04\\x04\\x04\\x04')\n        ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt([1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18], \n                            [1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18],\n                            [1, 4, 7, 7, 13, 15, 18, 15, 13, 4, 1, 7, 7, 13, 15, 18]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n            [67, 84, 66, 76, 85, 68, 84, 80, 49, 48, 67, 84, 73, 76, 68, 84],\n            [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],\n            [123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode('0z8VzZcJNVfj1fqY66qs7Q==')),\n            bytes_to_intlist(compat_b64decode('wgMxajNkhGNEA7wneZmCZw==')),\n            bytes_to_intlist(compat_b64decode('27pVaFAXBGssBkYcJ0x03w==')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(\n        [214, 193, 137, 106, 215, 193, 139, 102, 215, 197, 139, 105],\n        [112, 34, 245, 185, 146, 85, 0, 134, 124, 172, 190, 239, 203, 171, 4, 157],\n        [214, 193, 137, 106, 215, 193, 139, 102]\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(bytes_to_intlist(compat_b64decode('Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUgYnkK')),\n            bytes_to_intlist(compat_b64decode('A45D6674248A32A830794C923C66B884')), \n            bytes_to_intlist(compat_b64decode('AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlYKZ0puZXQvdXRpbHMtMw=='))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_decrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_decrypt(bytes_to_intlist(compat_b64decode(\"DmE3Vl9xbGtOZmFtZXJpKCJNaXQoJFJBTlRFUg==\")),\n                    bytes_to_intlist(compat_b64decode(\"11111111111111111111111111111111\")),\n                    bytes_to_intlist(compat_b64decode(\"1234567890123456\"))) == output"]}
{"problem_ids": 107, "project": "test-apps/youtube-dl", "focal_function": "def aes_cbc_encrypt(data, key, iv):\n    \"\"\"\n    Encrypt with aes in CBC mode. Using PKCS#7 padding\n\n    @param {int[]} data        cleartext\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {int[]} iv          16-Byte IV\n    @returns {int[]}           encrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    encrypted_data = []\n    previous_cipher_block = iv\n    for i in range(block_count):\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        remaining_length = BLOCK_SIZE_BYTES - len(block)\n        block += [remaining_length] * remaining_length\n        mixed_block = xor(block, previous_cipher_block)\n\n        encrypted_block = aes_encrypt(mixed_block, expanded_key)\n        encrypted_data += encrypted_block\n\n        previous_cipher_block = encrypted_block\n\n    return encrypted_data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n    \"\"\"\n\ndef aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n    \"\"\"\n\ndef xor(data1, data2):\n\ndef aes_cbc_encrypt(data, key, iv):\n    \"\"\"\n    Encrypt with aes in CBC mode. Using PKCS#7 padding\n\n    @param {int[]} data        cleartext\n    @param {int[]} key         16/24/32-Byte cipher key\n    @param {int[]} iv          16-Byte IV\n    @returns {int[]}           encrypted data\n    \"\"\"\n    expanded_key = key_expansion(key)\n    block_count = int(ceil(float(len(data)) / BLOCK_SIZE_BYTES))\n\n    encrypted_data = []\n    previous_cipher_block = iv\n    for i in range(block_count):\n        block = data[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES]\n        remaining_length = BLOCK_SIZE_BYTES - len(block)\n        block += [remaining_length] * remaining_length\n        mixed_block = xor(block, previous_cipher_block)\n\n        encrypted_block = aes_encrypt(mixed_block, expanded_key)\n        encrypted_data += encrypted_block\n\n        previous_cipher_block = encrypted_block\n\n    return encrypted_data", "entry_point": "aes_cbc_encrypt", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import aes_cbc_encrypt # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 16 == len(aes_cbc_encrypt([1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert aes_cbc_encrypt([1, 2, 3, 4], [1] * 16, [0] * 16) != [1, 2, 3, 4]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert aes_cbc_encrypt([1, 2, 3, 4, 1, 2, 3, 4], [1] * 16, [0] * 16) != [1, 2, 3, 4, 1, 2, 3, 4]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert aes_cbc_encrypt([], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert aes_cbc_encrypt([], [0] * 32, [0] * 16) == []\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert aes_cbc_encrypt([], [0x00] * 16, [0x00] * 16) == []\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(\n                bytes_to_intlist(b\"This is a test. This is only a test.\"),\n                bytes_to_intlist(b\"YELLOW SUBMARINE\"),\n                bytes_to_intlist(b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\")\n            ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(bytes_to_intlist(b'A' * 16),\n                                             bytes_to_intlist(b'A' * 16),\n                                             bytes_to_intlist(b'B' * 16))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_encrypt(\n        bytes_to_intlist(\"Hello World!\"),\n        bytes_to_intlist(\"Secret Key123\"),\n        bytes_to_intlist(\"Initialization V3\")\n    )) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4], [0] * 32, [0] * 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(\"VIGENERE CIPHER\"), bytes_to_intlist(\"0123456789ABCDEF\"), bytes_to_intlist(\"0123456789ABCDEF\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(b'This is a test!'), bytes_to_intlist(b'This is a key123'), bytes_to_intlist(b'This is an IV456')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_encrypt(bytes_to_intlist(\"test\"),\n                                             bytes_to_intlist(\"secretkey\"),\n                                             bytes_to_intlist(\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(b'ICE ICE BABY\\x04\\x04\\x04\\x04'), bytes_to_intlist(b'YELLOW SUBMARINE'), bytes_to_intlist(b'ICE ICE ICE ICE ICE ICE ICE ICE ICE ')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(bytes_to_intlist(\"Cryptography is cool\"), bytes_to_intlist(\"AAAAAAAAAAAAAAAA\"), bytes_to_intlist(\"1234567890123456\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([],\n        bytes_to_intlist(compat_b64decode('hvIrGHqpOVu4/39sBRU6Sg==')),\n        bytes_to_intlist(compat_b64decode('5m2Y0J6ScxX7f8u8+8fzeQ=='))\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(\n        bytes_to_intlist(compat_b64decode(\"53616C7465645F5F5F5F3030313233343536\")),\n        bytes_to_intlist(compat_b64decode(\"2B7E151628AED2A6ABF7158809CF4F3C\")),\n        bytes_to_intlist(compat_b64decode(\"00000000000000000000000000000000\"))\n    )) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1,2,3,4], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4], [0] * 16, [0] * 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1,2,3,4,5,6,7,8,9,10,11],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_45\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0x00] * 16, [0x00] * 16, [0x00] * 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(aes_cbc_encrypt([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(\n        bytes_to_intlist(b\"This is a secret message\"),\n        bytes_to_intlist(compat_b64decode(\"58QjGzeAhgwIJ7nUF2SsQw==\")),\n        bytes_to_intlist(compat_b64decode(\"Y7i7oCnvU4+1UdIjV4nPog==\"))\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(compat_b64decode('jgj5lXftMPkbjHn0xOAQCg==')),\n        bytes_to_intlist(compat_b64decode('hvIrGHqpOVu4/39sBRU6Sg==')),\n        bytes_to_intlist(compat_b64decode('5m2Y0J6ScxX7f8u8+8fzeQ=='))\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(aes_cbc_encrypt([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 16 == len(aes_cbc_encrypt([1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert aes_cbc_encrypt([1, 2, 3, 4], [1] * 16, [0] * 16) != [1, 2, 3, 4]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert aes_cbc_encrypt([1, 2, 3, 4, 1, 2, 3, 4], [1] * 16, [0] * 16) != [1, 2, 3, 4, 1, 2, 3, 4]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert aes_cbc_encrypt([], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert aes_cbc_encrypt([], [0] * 32, [0] * 16) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert aes_cbc_encrypt([], [0x00] * 16, [0x00] * 16) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(\n                bytes_to_intlist(b\"This is a test. This is only a test.\"),\n                bytes_to_intlist(b\"YELLOW SUBMARINE\"),\n                bytes_to_intlist(b\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\")\n            ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(bytes_to_intlist(b'A' * 16),\n                                             bytes_to_intlist(b'A' * 16),\n                                             bytes_to_intlist(b'B' * 16))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_encrypt(\n        bytes_to_intlist(\"Hello World!\"),\n        bytes_to_intlist(\"Secret Key123\"),\n        bytes_to_intlist(\"Initialization V3\")\n    )) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4], [0] * 32, [0] * 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(\"VIGENERE CIPHER\"), bytes_to_intlist(\"0123456789ABCDEF\"), bytes_to_intlist(\"0123456789ABCDEF\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(b'This is a test!'), bytes_to_intlist(b'This is a key123'), bytes_to_intlist(b'This is an IV456')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_cbc_encrypt(bytes_to_intlist(\"test\"),\n                                             bytes_to_intlist(\"secretkey\"),\n                                             bytes_to_intlist(\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(b'ICE ICE BABY\\x04\\x04\\x04\\x04'), bytes_to_intlist(b'YELLOW SUBMARINE'), bytes_to_intlist(b'ICE ICE ICE ICE ICE ICE ICE ICE ICE ')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(bytes_to_intlist(\"Cryptography is cool\"), bytes_to_intlist(\"AAAAAAAAAAAAAAAA\"), bytes_to_intlist(\"1234567890123456\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([],\n        bytes_to_intlist(compat_b64decode('hvIrGHqpOVu4/39sBRU6Sg==')),\n        bytes_to_intlist(compat_b64decode('5m2Y0J6ScxX7f8u8+8fzeQ=='))\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_cbc_encrypt(\n        bytes_to_intlist(compat_b64decode(\"53616C7465645F5F5F5F3030313233343536\")),\n        bytes_to_intlist(compat_b64decode(\"2B7E151628AED2A6ABF7158809CF4F3C\")),\n        bytes_to_intlist(compat_b64decode(\"00000000000000000000000000000000\"))\n    )) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1,2,3,4], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4], [0] * 16, [0] * 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1,2,3,4,5,6,7,8,9,10,11],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_45\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0x00] * 16, [0x00] * 16, [0x00] * 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(aes_cbc_encrypt([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(\n        bytes_to_intlist(b\"This is a secret message\"),\n        bytes_to_intlist(compat_b64decode(\"58QjGzeAhgwIJ7nUF2SsQw==\")),\n        bytes_to_intlist(compat_b64decode(\"Y7i7oCnvU4+1UdIjV4nPog==\"))\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt(bytes_to_intlist(compat_b64decode('jgj5lXftMPkbjHn0xOAQCg==')),\n        bytes_to_intlist(compat_b64decode('hvIrGHqpOVu4/39sBRU6Sg==')),\n        bytes_to_intlist(compat_b64decode('5m2Y0J6ScxX7f8u8+8fzeQ=='))\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(aes_cbc_encrypt([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], \n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n                                     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_cbc_encrypt/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_cbc_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output"]}
{"problem_ids": 108, "project": "test-apps/youtube-dl", "focal_function": "def key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    data = data[:]  # copy\n    rcon_iteration = 1\n    key_size_bytes = len(data)\n    expanded_key_size_bytes = (key_size_bytes // 4 + 7) * BLOCK_SIZE_BYTES\n\n    while len(data) < expanded_key_size_bytes:\n        temp = data[-4:]\n        temp = key_schedule_core(temp, rcon_iteration)\n        rcon_iteration += 1\n        data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        if key_size_bytes == 32:\n            temp = data[-4:]\n            temp = sub_bytes(temp)\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3 if key_size_bytes == 32 else 2 if key_size_bytes == 24 else 0):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n    data = data[:expanded_key_size_bytes]\n\n    return data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef sub_bytes(data):\n\ndef key_schedule_core(data, rcon_iteration):\n\ndef xor(data1, data2):\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n\n    @param {int[]} data  16/24/32-Byte cipher key\n    @returns {int[]}     176/208/240-Byte expanded key\n    \"\"\"\n    data = data[:]  # copy\n    rcon_iteration = 1\n    key_size_bytes = len(data)\n    expanded_key_size_bytes = (key_size_bytes // 4 + 7) * BLOCK_SIZE_BYTES\n\n    while len(data) < expanded_key_size_bytes:\n        temp = data[-4:]\n        temp = key_schedule_core(temp, rcon_iteration)\n        rcon_iteration += 1\n        data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        if key_size_bytes == 32:\n            temp = data[-4:]\n            temp = sub_bytes(temp)\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n\n        for _ in range(3 if key_size_bytes == 32 else 2 if key_size_bytes == 24 else 0):\n            temp = data[-4:]\n            data += xor(temp, data[-key_size_bytes: 4 - key_size_bytes])\n    data = data[:expanded_key_size_bytes]\n\n    return data", "entry_point": "key_expansion", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import key_expansion # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 240 == len(key_expansion([0] * 32))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"WmZeqoc4omTliC9OGcQJzQ==\"))))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"iRQaLBzUf14gDRXaJy8HYw==\"))))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode('Mu+eYQhP9RdYgPcGlSzb5qg=='))))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 176 == len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"qkV1uwegl+ZCw0SJuh1zxA==\"))))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 208 == len(key_expansion([0] * 24))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"AQIDBAUGBwgJCgsMDQ4PAAE=\"))))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 176 == len(key_expansion([0] * 16))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"9b7e16924b93d8f849e1d9342a096157\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('PNWdRNYqshmP27Z8FiYdTg==')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(b'MTIzNDU2Nzg=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"zXWsl1pSgDjR2f5OwWOmAw==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"PVRwXkZSMzY=\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"47uZ9nUgVlZM\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAA\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"5O/r191p/DvBq0RZYIJ93A==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0] * 16)) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([int(x) for x in '00 01 02 03 04 05 06 07'.split(' ')])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAAAAAB\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(b'0123456789abcdeffedcba9876543210'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('Yk9MPnZuYyA=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"ZJve42C0dA==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"VuK8gP2hRfZBdseFRqJI1g==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhz\"))) ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('oTqsJ6V3XaC4wLGJN0zDVs86CjHXBWKK')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhsdGhz\"))) ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('qp4rguG3hC44qib7A4Fs5uP2PQMsy23y')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"SwIoVj+yCkLy69ujM8g6Eg==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\n        'Cj2tX/OUYAjrWyb7jP5UyGjG3JPW4J8q')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('XvB54dO5O2+o6x3Z/J2X9w==')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16,\n                                    0x28, 0xae, 0xd2, 0xa6,\n                                    0xab, 0xf7, 0x15, 0x88,\n                                    0x09, 0xcf, 0x4f, 0x3c])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"1VwT0MGlXd/sxX98+GZhSw==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"0YWVjZHVtbXk=\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"VuK8gP2hRfZBdseFRqJI1g==\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([164, 175, 255, 102, 164, 168, 194, 141, 217, 185, 232, 101, 103, 164, 172, 142])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('DH193Y1RDt18gtCvYzg8xQ==')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([2, 15, 32, 239, 113, 142, 210, 103, 210, 136, 103, 112, 145, 125, 231, 231])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('Sz4Ijyc25fP8tSOxJ4B2ZaXAeOEZ38NK')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('JCqdN5Sfgf8=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"M2cOQ1g21i3e\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('0123456789ABCDEF')))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16,\n                                     0x28, 0xae, 0xd2, 0xa6,\n                                     0xab, 0xf7, 0x15, 0x88,\n                                     0x09, 0xcf, 0x4f, 0x3c,\n                                     0x2b, 0x7e, 0x15, 0x16,\n                                     0x28, 0xae, 0xd2, 0xa6,\n                                     0xab, 0xf7, 0x15, 0x88,\n                                     0x09, 0xcf, 0x4f, 0x3c])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_80\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhsdGhsdGhz\"))) ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c, 0x02, 0x01, 0x01, 0x03, 0x00, 0x02, 0x03, 0x01])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"eJaS7K7bYVxS85sMvj928w==\")))) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 240 == len(key_expansion([0] * 32))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"WmZeqoc4omTliC9OGcQJzQ==\"))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"iRQaLBzUf14gDRXaJy8HYw==\"))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode('Mu+eYQhP9RdYgPcGlSzb5qg=='))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 176 == len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"qkV1uwegl+ZCw0SJuh1zxA==\"))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 208 == len(key_expansion([0] * 24))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 176 == len(key_expansion(bytes_to_intlist(compat_b64decode(\"AQIDBAUGBwgJCgsMDQ4PAAE=\"))))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 176 == len(key_expansion([0] * 16))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"9b7e16924b93d8f849e1d9342a096157\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('PNWdRNYqshmP27Z8FiYdTg==')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(b'MTIzNDU2Nzg=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"zXWsl1pSgDjR2f5OwWOmAw==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"PVRwXkZSMzY=\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"47uZ9nUgVlZM\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAA\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"5O/r191p/DvBq0RZYIJ93A==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0] * 16)) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([int(x) for x in '00 01 02 03 04 05 06 07'.split(' ')])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"AAAAAAAAAAAAAAAAAAAB\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(b'0123456789abcdeffedcba9876543210'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('Yk9MPnZuYyA=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"ZJve42C0dA==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"VuK8gP2hRfZBdseFRqJI1g==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhz\"))) ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('oTqsJ6V3XaC4wLGJN0zDVs86CjHXBWKK')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhsdGhz\"))) ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('qp4rguG3hC44qib7A4Fs5uP2PQMsy23y')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"SwIoVj+yCkLy69ujM8g6Eg==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\n        'Cj2tX/OUYAjrWyb7jP5UyGjG3JPW4J8q')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('XvB54dO5O2+o6x3Z/J2X9w==')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16,\n                                    0x28, 0xae, 0xd2, 0xa6,\n                                    0xab, 0xf7, 0x15, 0x88,\n                                    0x09, 0xcf, 0x4f, 0x3c])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"1VwT0MGlXd/sxX98+GZhSw==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"0YWVjZHVtbXk=\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"VuK8gP2hRfZBdseFRqJI1g==\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([164, 175, 255, 102, 164, 168, 194, 141, 217, 185, 232, 101, 103, 164, 172, 142])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('DH193Y1RDt18gtCvYzg8xQ==')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([2, 15, 32, 239, 113, 142, 210, 103, 210, 136, 103, 112, 145, 125, 231, 231])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('Sz4Ijyc25fP8tSOxJ4B2ZaXAeOEZ38NK')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('JCqdN5Sfgf8=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('bXlDbGFzczEyMzQ1Njc4OTA=')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"M2cOQ1g21i3e\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode('0123456789ABCDEF')))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16,\n                                     0x28, 0xae, 0xd2, 0xa6,\n                                     0xab, 0xf7, 0x15, 0x88,\n                                     0x09, 0xcf, 0x4f, 0x3c,\n                                     0x2b, 0x7e, 0x15, 0x16,\n                                     0x28, 0xae, 0xd2, 0xa6,\n                                     0xab, 0xf7, 0x15, 0x88,\n                                     0x09, 0xcf, 0x4f, 0x3c])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_80\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"dGhsdGhsdGhsdGhz\"))) ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c, 0x02, 0x01, 0x01, 0x03, 0x00, 0x02, 0x03, 0x01])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/key_expansion/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(key_expansion(bytes_to_intlist(compat_b64decode(\"eJaS7K7bYVxS85sMvj928w==\")))) == output"]}
{"problem_ids": 109, "project": "test-apps/youtube-dl", "focal_function": "def aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n\n    @param {int[]} data          16-Byte state\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte cipher\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n    for i in range(1, rounds + 1):\n        data = sub_bytes(data)\n        data = shift_rows(data)\n        if i != rounds:\n            data = mix_columns(data)\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n\n    return data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef sub_bytes(data):\n\ndef xor(data1, data2):\n\ndef mix_columns(data, matrix=MIX_COLUMN_MATRIX):\n\ndef shift_rows(data):\n\ndef aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n\n    @param {int[]} data          16-Byte state\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte cipher\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n    for i in range(1, rounds + 1):\n        data = sub_bytes(data)\n        data = shift_rows(data)\n        if i != rounds:\n            data = mix_columns(data)\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n\n    return data", "entry_point": "aes_encrypt", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import aes_encrypt # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 16 == len(aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000002\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"abcdefghijklmnop\"),  bytes_to_intlist(b\"1234567890123456\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"0123456789abcdef\"), bytes_to_intlist(b\"00000000000000000000000000000000\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'\\x00' * 16), bytes_to_intlist(b'\\x00' * 32))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000001\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ''.join('{:02x}'.format(b) for b in aes_encrypt(bytes.fromhex('00000000000000000000000000000000'), bytes.fromhex('0000000000000000000000000000000000000000000000000000000000000000'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([105, 110, 116, 101, 103, 114, 105, 116, 121, 32, 77, 97, 103, 101, 32, 60]), intlist_to_bytes(b\"foobar\" * 3)) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(\n        bytes_to_intlist(b'test string'),\n        bytes_to_intlist(compat_b64decode(\"528016e106d2a0d979b28b8bf73e933d\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996993'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1] * 88) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(\n        intlist_to_bytes([17, 254, 3, 14, 228, 62, 96, 35, 187, 55, 136, 43, 90, 201, 18, 235]),\n        bytes_to_intlist(b'YELLOW SUBMARINE') + [0] * 16)) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(bytes_to_intlist(\"6bc1bee22e409f96e93d7e117393172a\"), bytes_to_intlist(\"2b7e151628aed2a6abf7158809cf4f3c\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0] * 176) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0] * 240) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(bytes_to_intlist(\"6bc1bee22e409f96e93d7e117393172a\"), bytes_to_intlist(\n        \"2b7e151628aed2a6abf7158809cf4f3c\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996994'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(compat_b64decode(\"76e90f9e1fb784a1e99508bb3ec58281\")), bytes_to_intlist(compat_b64decode(\"2b7e151628aed2a6abf7158809cf4f3c\")))).hex() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(\n        intlist_to_bytes([\n            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n            0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]),\n        bytes_to_intlist(compat_b64decode(\n            'aRuXDkZyb3J4dXRheXBhZ2VlZA=='))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'dddddddddddddddd'), bytes_to_intlist(b'DDDDDDDDDDDDDDDD'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1] * 176) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([\n        0x48, 0x38, 0x89, 0x7f, 0x0b, 0x69, 0xe8, 0x96,\n        0x75, 0x88, 0x00, 0xd3, 0x4d, 0x16, 0x61, 0xb2],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] * 17\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(b'0000000000000000', b'00000000000000000000000000000000') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b'testing123456'), bytes_to_intlist(b'key1234567890123456'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"abcdefghijklmnop\"),  bytes_to_intlist(b\"0\" * 32))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'eeeeeeeeeeeeeeee'), bytes_to_intlist(b'EEEEEEEEEEEEEEEE'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996995'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1] * 16, [0] * 176) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_43\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0] * 16, [0] * 176) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'aaaaaaaaaaaaaaaa'), bytes_to_intlist(b'AAAAAAAAAAAAAAAA'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_46\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([0x00, 0x11, 0x22, 0x33,\n                                          0x44, 0x55, 0x66, 0x77,\n                                          0x88, 0x99, 0xaa, 0xbb,\n                                          0xcc, 0xdd, 0xee, 0xff]),\n                       compat_b64decode('VEhBQ0hfTEVNQVJST1VTQQ==')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1] * 88) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),\n                        compat_b64decode('l0FMTz2gNpHKQJb2ZV37XnU5qTLm+OQnm7QWMybM6uI=')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'ffffffffffffffff'), bytes_to_intlist(b'FFFFFFFFFFFFFFFF'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0123456789abcdef'), bytes_to_intlist(b'0123456789abcdef'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"0123456789abcdef\"), bytes_to_intlist(b\"00000000000000000000000000000000\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b'hello world'), bytes_to_intlist(b'YELLOW SUBMARINE'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'cccccccccccccccc'), bytes_to_intlist(b'CCCCCCCCCCCCCCCC'))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt([1 for i in range(16)], [1 for i in range(240)])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000000\"))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'bbbbbbbbbbbbbbbb'), bytes_to_intlist(b'BBBBBBBBBBBBBBBB'))) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 16 == len(aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000002\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"abcdefghijklmnop\"),  bytes_to_intlist(b\"1234567890123456\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"0123456789abcdef\"), bytes_to_intlist(b\"00000000000000000000000000000000\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'\\x00' * 16), bytes_to_intlist(b'\\x00' * 32))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000001\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ''.join('{:02x}'.format(b) for b in aes_encrypt(bytes.fromhex('00000000000000000000000000000000'), bytes.fromhex('0000000000000000000000000000000000000000000000000000000000000000'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([105, 110, 116, 101, 103, 114, 105, 116, 121, 32, 77, 97, 103, 101, 32, 60]), intlist_to_bytes(b\"foobar\" * 3)) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(\n        bytes_to_intlist(b'test string'),\n        bytes_to_intlist(compat_b64decode(\"528016e106d2a0d979b28b8bf73e933d\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996993'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1] * 88) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(\n        intlist_to_bytes([17, 254, 3, 14, 228, 62, 96, 35, 187, 55, 136, 43, 90, 201, 18, 235]),\n        bytes_to_intlist(b'YELLOW SUBMARINE') + [0] * 16)) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(bytes_to_intlist(\"6bc1bee22e409f96e93d7e117393172a\"), bytes_to_intlist(\"2b7e151628aed2a6abf7158809cf4f3c\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0] * 176) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0] * 240) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(bytes_to_intlist(\"6bc1bee22e409f96e93d7e117393172a\"), bytes_to_intlist(\n        \"2b7e151628aed2a6abf7158809cf4f3c\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996994'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(compat_b64decode(\"76e90f9e1fb784a1e99508bb3ec58281\")), bytes_to_intlist(compat_b64decode(\"2b7e151628aed2a6abf7158809cf4f3c\")))).hex() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(\n        intlist_to_bytes([\n            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n            0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]),\n        bytes_to_intlist(compat_b64decode(\n            'aRuXDkZyb3J4dXRheXBhZ2VlZA=='))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'dddddddddddddddd'), bytes_to_intlist(b'DDDDDDDDDDDDDDDD'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1] * 176) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([\n        0x48, 0x38, 0x89, 0x7f, 0x0b, 0x69, 0xe8, 0x96,\n        0x75, 0x88, 0x00, 0xd3, 0x4d, 0x16, 0x61, 0xb2],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] * 17\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(b'0000000000000000', b'00000000000000000000000000000000') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b'testing123456'), bytes_to_intlist(b'key1234567890123456'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"abcdefghijklmnop\"),  bytes_to_intlist(b\"0\" * 32))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'eeeeeeeeeeeeeeee'), bytes_to_intlist(b'EEEEEEEEEEEEEEEE'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0000000000000000'), bytes_to_intlist(b'4060C8EE015169A86E06D743E0996995'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1] * 16, [0] * 176) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_43\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0] * 16, [0] * 176) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'aaaaaaaaaaaaaaaa'), bytes_to_intlist(b'AAAAAAAAAAAAAAAA'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_46\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([0x00, 0x11, 0x22, 0x33,\n                                          0x44, 0x55, 0x66, 0x77,\n                                          0x88, 0x99, 0xaa, 0xbb,\n                                          0xcc, 0xdd, 0xee, 0xff]),\n                       compat_b64decode('VEhBQ0hfTEVNQVJST1VTQQ==')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1] * 88) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_encrypt(intlist_to_bytes([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),\n                        compat_b64decode('l0FMTz2gNpHKQJb2ZV37XnU5qTLm+OQnm7QWMybM6uI=')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'ffffffffffffffff'), bytes_to_intlist(b'FFFFFFFFFFFFFFFF'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'0123456789abcdef'), bytes_to_intlist(b'0123456789abcdef'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b\"0123456789abcdef\"), bytes_to_intlist(b\"00000000000000000000000000000000\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(b'hello world'), bytes_to_intlist(b'YELLOW SUBMARINE'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'cccccccccccccccc'), bytes_to_intlist(b'CCCCCCCCCCCCCCCC'))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt([1 for i in range(16)], [1 for i in range(240)])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_encrypt(bytes_to_intlist(\"4142434445464748494a4b4c4d4e4f\"), bytes_to_intlist(\"00000000000000000000000000000000\"))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_encrypt/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_encrypt(bytes_to_intlist(b'bbbbbbbbbbbbbbbb'), bytes_to_intlist(b'BBBBBBBBBBBBBBBB'))) == output"]}
{"problem_ids": 110, "project": "test-apps/youtube-dl", "focal_function": "def aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    for i in range(rounds, 0, -1):\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n        if i != rounds:\n            data = mix_columns_inv(data)\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\nBLOCK_SIZE_BYTES = 16\n\ndef sub_bytes_inv(data):\n\ndef xor(data1, data2):\n\ndef mix_columns_inv(data):\n\ndef shift_rows_inv(data):\n\ndef aes_decrypt(data, expanded_key):\n    \"\"\"\n    Decrypt one block with aes\n\n    @param {int[]} data          16-Byte cipher\n    @param {int[]} expanded_key  176/208/240-Byte expanded key\n    @returns {int[]}             16-Byte state\n    \"\"\"\n    rounds = len(expanded_key) // BLOCK_SIZE_BYTES - 1\n\n    for i in range(rounds, 0, -1):\n        data = xor(data, expanded_key[i * BLOCK_SIZE_BYTES: (i + 1) * BLOCK_SIZE_BYTES])\n        if i != rounds:\n            data = mix_columns_inv(data)\n        data = shift_rows_inv(data)\n        data = sub_bytes_inv(data)\n    data = xor(data, expanded_key[:BLOCK_SIZE_BYTES])\n\n    return data", "entry_point": "aes_decrypt", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import aes_decrypt # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert aes_decrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(bytes_to_intlist(intlist_to_bytes(bytes_to_intlist(\"00\" * 16))), bytes_to_intlist(compat_b64decode(\"MzIwMzIwMzIwMzIwMzIwMzIwMzIwMzIwMzIwMzI=\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt([6, 8, 15, 15, 14, 11, 8, 15, 6, 8, 15, 15, 14, 11, 8, 5],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         1, 6, 11, 10, 9, 5, 14, 15, 8, 0, 2, 7, 12, 13, 3, 4,\n                         3, 8, 13, 11, 6, 4, 9, 1, 10, 7, 0, 5, 14, 12, 15, 15,\n                         12, 5, 1, 15, 14, 13, 10, 0, 7, 8, 9, 2, 4, 6, 3, 11]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(b'2\\x88\\x86\\xe9S\\xe2\\xd14\\xd0\\x11\\xdb\\xaf\\x95+\\x0b\\x82\\xee\\xa6', compat_b64decode('Y2Y3Y2Y1Y2Y1Y2Y4Y3Y2N7MDAwMDAwMDBAQk9PQ=='))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt(intlist_to_bytes(aes_encrypt(b'hello', b'key')), b'key') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt([0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10], [0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff], [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt(bytes_to_intlist(compat_b64decode('X4KgGl8K6J0u2VUzZHakWw==')), bytes_to_intlist(compat_b64decode('M21g1R/17Pf612GWlhXa8Q==')))\n        ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(\n                bytes_to_intlist(compat_b64decode(\"x37n3k9v27h1962517363b6855137174\")),\n                bytes_to_intlist(compat_b64decode(\"25c1f46cfb71c3d1a1749c16c35440b617425c2871f46cfb8671c3d1a1749c16c35440b6\")))) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt(\n        bytes_to_intlist(b'9b60087e323b9269'),\n        bytes_to_intlist(b'32189159c5947f40' * 4 + b'32189159c5947f40')\n    )) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert aes_decrypt([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n                        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(bytes_to_intlist(intlist_to_bytes(bytes_to_intlist(\"00\" * 16))), bytes_to_intlist(compat_b64decode(\"MzIwMzIwMzIwMzIwMzIwMzIwMzIwMzIwMzIwMzI=\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt([6, 8, 15, 15, 14, 11, 8, 15, 6, 8, 15, 15, 14, 11, 8, 5],\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n                         1, 6, 11, 10, 9, 5, 14, 15, 8, 0, 2, 7, 12, 13, 3, 4,\n                         3, 8, 13, 11, 6, 4, 9, 1, 10, 7, 0, 5, 14, 12, 15, 15,\n                         12, 5, 1, 15, 14, 13, 10, 0, 7, 8, 9, 2, 4, 6, 3, 11]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(b'2\\x88\\x86\\xe9S\\xe2\\xd14\\xd0\\x11\\xdb\\xaf\\x95+\\x0b\\x82\\xee\\xa6', compat_b64decode('Y2Y3Y2Y1Y2Y1Y2Y4Y3Y2N7MDAwMDAwMDBAQk9PQ=='))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt(intlist_to_bytes(aes_encrypt(b'hello', b'key')), b'key') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt([0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10], [0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff], [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt(bytes_to_intlist(compat_b64decode('X4KgGl8K6J0u2VUzZHakWw==')), bytes_to_intlist(compat_b64decode('M21g1R/17Pf612GWlhXa8Q==')))\n        ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert bytes_to_intlist(aes_decrypt(\n                bytes_to_intlist(compat_b64decode(\"x37n3k9v27h1962517363b6855137174\")),\n                bytes_to_intlist(compat_b64decode(\"25c1f46cfb71c3d1a1749c16c35440b617425c2871f46cfb8671c3d1a1749c16c35440b6\")))) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert intlist_to_bytes(aes_decrypt(\n        bytes_to_intlist(b'9b60087e323b9269'),\n        bytes_to_intlist(b'32189159c5947f40' * 4 + b'32189159c5947f40')\n    )) == output"]}
{"problem_ids": 111, "project": "test-apps/youtube-dl", "focal_function": "def aes_decrypt_text(data, password, key_size_bytes):\n    \"\"\"\n    Decrypt text\n    - The first 8 Bytes of decoded 'data' are the 8 high Bytes of the counter\n    - The cipher key is retrieved by encrypting the first 16 Byte of 'password'\n      with the first 'key_size_bytes' Bytes from 'password' (if necessary filled with 0's)\n    - Mode of operation is 'counter'\n\n    @param {str} data                    Base64 encoded string\n    @param {str,unicode} password        Password (will be encoded with utf-8)\n    @param {int} key_size_bytes          Possible values: 16 for 128-Bit, 24 for 192-Bit or 32 for 256-Bit\n    @returns {str}                       Decrypted data\n    \"\"\"\n    NONCE_LENGTH_BYTES = 8\n\n    data = bytes_to_intlist(compat_b64decode(data))\n    password = bytes_to_intlist(password.encode('utf-8'))\n\n    key = password[:key_size_bytes] + [0] * (key_size_bytes - len(password))\n    key = aes_encrypt(key[:BLOCK_SIZE_BYTES], key_expansion(key)) * (key_size_bytes // BLOCK_SIZE_BYTES)\n\n    nonce = data[:NONCE_LENGTH_BYTES]\n    cipher = data[NONCE_LENGTH_BYTES:]\n\n    class Counter(object):\n        __value = nonce + [0] * (BLOCK_SIZE_BYTES - NONCE_LENGTH_BYTES)\n\n        def next_value(self):\n            temp = self.__value\n            self.__value = inc(self.__value)\n            return temp\n\n    decrypted_data = aes_ctr_decrypt(cipher, key, Counter())\n    plaintext = intlist_to_bytes(decrypted_data)\n\n    return plaintext", "module": "youtube_dl.aes", "code": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\n\ndef bytes_to_intlist(bs):\n\ndef intlist_to_bytes(xs):\n\nBLOCK_SIZE_BYTES = 16\n\ndef aes_ctr_decrypt(data, key, counter):\n    \"\"\"\n    Decrypt with aes in counter mode\n    returns the next counter block\n    \"\"\"\n\ndef key_expansion(data):\n    \"\"\"\n    Generate key schedule\n    \"\"\"\n\ndef aes_encrypt(data, expanded_key):\n    \"\"\"\n    Encrypt one block with aes\n    \"\"\"\n\ndef inc(data):\n\ndef aes_decrypt_text(data, password, key_size_bytes):\n    \"\"\"\n    Decrypt text\n    - The first 8 Bytes of decoded 'data' are the 8 high Bytes of the counter\n    - The cipher key is retrieved by encrypting the first 16 Byte of 'password'\n      with the first 'key_size_bytes' Bytes from 'password' (if necessary filled with 0's)\n    - Mode of operation is 'counter'\n\n    @param {str} data                    Base64 encoded string\n    @param {str,unicode} password        Password (will be encoded with utf-8)\n    @param {int} key_size_bytes          Possible values: 16 for 128-Bit, 24 for 192-Bit or 32 for 256-Bit\n    @returns {str}                       Decrypted data\n    \"\"\"\n    NONCE_LENGTH_BYTES = 8\n\n    data = bytes_to_intlist(compat_b64decode(data))\n    password = bytes_to_intlist(password.encode('utf-8'))\n\n    key = password[:key_size_bytes] + [0] * (key_size_bytes - len(password))\n    key = aes_encrypt(key[:BLOCK_SIZE_BYTES], key_expansion(key)) * (key_size_bytes // BLOCK_SIZE_BYTES)\n\n    nonce = data[:NONCE_LENGTH_BYTES]\n    cipher = data[NONCE_LENGTH_BYTES:]\n\n    class Counter(object):\n        __value = nonce + [0] * (BLOCK_SIZE_BYTES - NONCE_LENGTH_BYTES)\n\n        def next_value(self):\n            temp = self.__value\n            self.__value = inc(self.__value)\n            return temp\n\n    decrypted_data = aes_ctr_decrypt(cipher, key, Counter())\n    plaintext = intlist_to_bytes(decrypted_data)\n\n    return plaintext", "entry_point": "aes_decrypt_text", "test": "from __future__ import unicode_literals\nfrom math import ceil\nfrom .compat import compat_b64decode\nfrom .utils import bytes_to_intlist, intlist_to_bytes\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.aes import * # noqa: autoimport\nfrom youtube_dl.aes import aes_decrypt_text # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert aes_decrypt_text('', 'password', 16) == b''\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert 16 == len(aes_decrypt_text('CfEuQhZ9ZhOo8k8HrA1OcwAZ1nUkDrRp', 'topsecret', 16))\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"U2FsdGVkX1+OTwGlq5bxHg==\", \"testpass\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'c', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"JXw0H3/e0qPx1qwBmCmVAZ1FXK5HgQWk4SzrMUi1f3U=\", \"test\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\n        \"UwgkVXA8IlJIMWllcnB6b251ciAqTG9yZSBjcmVhdGlvbiAxNDUgbWVzc2FnZSAtIGJ1dHRvbiAjMzIgLz4gZW5jb2RlZCAvdGhpcyAyNTYgaGVyZSAxMzMzNjc4NjU=\",\n        \"12345678901234567890123456789012\",\n        24\n    ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'd', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AQAAAI9RHQwA1s3G7yqUgAe0kR10QF07Z4jVkHU85s6lM/DlQhv0pRkxZsYM5KZ+uF8hX8u79Y6a+tQ==\", \"password\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'T3fLYdIrLKjU3bD6H6s9Jg==', '123456', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"QgvK1a7uQnFo\", \"password\", 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'J9k_HKj-8j67aR0gAExL3w==', 'test', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"Ng6fzIvQwD02246dAHX5T3Bq1r5sIpH0xpsfGDc+54+iCzrXox3OzAiEA7nq2Pf3I061lJJ/c8qfG6GyyTzqXd6+4qQI3qhOJXgA=\", 'mypassword', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"KYoqDQs2hSf910T731JP27Nx12Q1Tc2Ju6rDpI+fM1k=\", \"secret\", 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"Qg4YVz76qJKy/fhSs9tv5RxO290qTZJXnkUk6ttcoBc=\", \"supersecretpassword\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('W6TbkP+yP+NVGnwRx3k252a2RQv6d/N4ezb6nH47HlRg=', u'This is a test', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_43\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'a', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'e', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"TzB1Yi4+YmljZS5iZQo=\", \"secret\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"k7RDpJZ5j2sNuG0314H3J0m3l3/UrXtUvA+GzUzFB28=\", \"pass\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('ZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZA==', 'password', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'h', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'IhbVqkXlVmXUAj6l9YE7Rw==', 'test123', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"QmFzZTY0IHN0cmluZwk=\", 'password', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'g', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"iVQEIyMRUoVy\", \"password\", 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('ZDVlNjIxMGQxZTU5NGU1YTJmMjNiZjY4ZTFiYmIyZDM=', 'password', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_71\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'lzx5qYxQ29HYGpYGJrD8IA==', 'test', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'b', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_79\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'L9qYQLm3jT6M7v2CB7XVEA==', 'a', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_83\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'V15mfW0/JpzXU/J2lwJQ==', '123456', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_84\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UFBKQDTC+18MU0UtLg==', 'Secret', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('CfEuQhZ9ZhOo8k8HrA1OcwAZ1nUkDrRp', 'topsecret', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_87\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'VjxjA97/nk8d+U591T99Vw==', '123456', 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_88\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_94\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_95\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"OZB7zzGJa1cY6u+kVc4mXw==\", \"123\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_96\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'qU9aBbejV91nAx06d20JNw==', 'test', 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_100\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"LBBaQn9rkZuIREhW8/Uh8A==\", \"secret\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 32) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"jL5pA4w6qN9+Ik5JPqoEkH/AYBVo0fNjAAG4Ho6X+UcgAOQ715A90T0b4WuZ/ZvXQ4rSbJ+R5JorBs534nTg==\", \"0123456789abcdeffedcba9876543210\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_105\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'EBmlzrVT3PVUlVMJhZLnhA==', 'a', 24) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"MzYwMDA0OTkzMw==-976a759449e0011c9d4987549b8b641c\", \"passwort\", 16) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_107\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'f', 16) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert aes_decrypt_text('', 'password', 16) == b''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert 16 == len(aes_decrypt_text('CfEuQhZ9ZhOo8k8HrA1OcwAZ1nUkDrRp', 'topsecret', 16))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"U2FsdGVkX1+OTwGlq5bxHg==\", \"testpass\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'c', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"JXw0H3/e0qPx1qwBmCmVAZ1FXK5HgQWk4SzrMUi1f3U=\", \"test\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\n        \"UwgkVXA8IlJIMWllcnB6b251ciAqTG9yZSBjcmVhdGlvbiAxNDUgbWVzc2FnZSAtIGJ1dHRvbiAjMzIgLz4gZW5jb2RlZCAvdGhpcyAyNTYgaGVyZSAxMzMzNjc4NjU=\",\n        \"12345678901234567890123456789012\",\n        24\n    ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'd', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AQAAAI9RHQwA1s3G7yqUgAe0kR10QF07Z4jVkHU85s6lM/DlQhv0pRkxZsYM5KZ+uF8hX8u79Y6a+tQ==\", \"password\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'T3fLYdIrLKjU3bD6H6s9Jg==', '123456', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"QgvK1a7uQnFo\", \"password\", 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'J9k_HKj-8j67aR0gAExL3w==', 'test', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"Ng6fzIvQwD02246dAHX5T3Bq1r5sIpH0xpsfGDc+54+iCzrXox3OzAiEA7nq2Pf3I061lJJ/c8qfG6GyyTzqXd6+4qQI3qhOJXgA=\", 'mypassword', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"KYoqDQs2hSf910T731JP27Nx12Q1Tc2Ju6rDpI+fM1k=\", \"secret\", 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"Qg4YVz76qJKy/fhSs9tv5RxO290qTZJXnkUk6ttcoBc=\", \"supersecretpassword\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('W6TbkP+yP+NVGnwRx3k252a2RQv6d/N4ezb6nH47HlRg=', u'This is a test', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_43\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'a', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'e', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"TzB1Yi4+YmljZS5iZQo=\", \"secret\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"k7RDpJZ5j2sNuG0314H3J0m3l3/UrXtUvA+GzUzFB28=\", \"pass\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('OQYQ/1RB50tEA2ZfAqc6D/Vg=', 'aaaabbbb', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('ZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZGZmZA==', 'password', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'h', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'IhbVqkXlVmXUAj6l9YE7Rw==', 'test123', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"QmFzZTY0IHN0cmluZwk=\", 'password', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'g', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"iVQEIyMRUoVy\", \"password\", 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('ZDVlNjIxMGQxZTU5NGU1YTJmMjNiZjY4ZTFiYmIyZDM=', 'password', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_71\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('l8UYdV1XlYk3vSb5D1cizP261jvA33D6v1nR2eE/GKRk0/Bx/GyFhvA==', 'password', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'lzx5qYxQ29HYGpYGJrD8IA==', 'test', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'b', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_79\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", \"test\", 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'L9qYQLm3jT6M7v2CB7XVEA==', 'a', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_83\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'V15mfW0/JpzXU/J2lwJQ==', '123456', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_84\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UFBKQDTC+18MU0UtLg==', 'Secret', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('CfEuQhZ9ZhOo8k8HrA1OcwAZ1nUkDrRp', 'topsecret', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_87\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'VjxjA97/nk8d+U591T99Vw==', '123456', 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_88\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text('UwgL7gAAAAAAAABlAEX7VUA==', 'This is a secret message!', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_94\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_95\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"OZB7zzGJa1cY6u+kVc4mXw==\", \"123\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_96\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'qU9aBbejV91nAx06d20JNw==', 'test', 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_100\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"LBBaQn9rkZuIREhW8/Uh8A==\", \"secret\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"AM/w4XBmNpX2KAoCYz/8wCw==\", u\"test\", 32) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b\"jL5pA4w6qN9+Ik5JPqoEkH/AYBVo0fNjAAG4Ho6X+UcgAOQ715A90T0b4WuZ/ZvXQ4rSbJ+R5JorBs534nTg==\", \"0123456789abcdeffedcba9876543210\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_105\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'EBmlzrVT3PVUlVMJhZLnhA==', 'a', 24) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(\"MzYwMDA0OTkzMw==-976a759449e0011c9d4987549b8b641c\", \"passwort\", 16) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+aes/aes_decrypt_text/test_107\", \"rb\") as f:\n        output = pickle.load(f)\n    assert aes_decrypt_text(b'DsYvN0PXr4UJL1YkP17c0A==', 'f', 16) == output"]}
{"problem_ids": 112, "project": "test-apps/youtube-dl", "focal_function": "def build_fragments_list(boot_info):\n    \"\"\" Return a list of (segment, fragment) for each fragment in the video \"\"\"\n    res = []\n    segment_run_table = boot_info['segments'][0]\n    fragment_run_entry_table = boot_info['fragments'][0]['fragments']\n    first_frag_number = fragment_run_entry_table[0]['first']\n    fragments_counter = itertools.count(first_frag_number)\n    for segment, fragments_count in segment_run_table['segment_run']:\n        # In some live HDS streams (for example Rai), `fragments_count` is\n        # abnormal and causing out-of-memory errors. It's OK to change the\n        # number of fragments for live streams as they are updated periodically\n        if fragments_count == 4294967295 and boot_info['live']:\n            fragments_count = 2\n        for _ in range(fragments_count):\n            res.append((segment, next(fragments_counter)))\n\n    if boot_info['live']:\n        res = res[-2:]\n\n    return res", "module": "youtube_dl.downloader.f4m", "code": "from __future__ import division, unicode_literals\nimport io\nimport itertools\nimport time\nfrom .fragment import FragmentFD\nfrom ..compat import (\n    compat_b64decode,\n    compat_etree_fromstring,\n    compat_urlparse,\n    compat_urllib_error,\n    compat_urllib_parse_urlparse,\n    compat_struct_pack,\n    compat_struct_unpack,\n)\nfrom ..utils import (\n    fix_xml_ampersands,\n    xpath_text,\n)\n\ndef build_fragments_list(boot_info):\n    \"\"\" Return a list of (segment, fragment) for each fragment in the video \"\"\"\n    res = []\n    segment_run_table = boot_info['segments'][0]\n    fragment_run_entry_table = boot_info['fragments'][0]['fragments']\n    first_frag_number = fragment_run_entry_table[0]['first']\n    fragments_counter = itertools.count(first_frag_number)\n    for segment, fragments_count in segment_run_table['segment_run']:\n        # In some live HDS streams (for example Rai), `fragments_count` is\n        # abnormal and causing out-of-memory errors. It's OK to change the\n        # number of fragments for live streams as they are updated periodically\n        if fragments_count == 4294967295 and boot_info['live']:\n            fragments_count = 2\n        for _ in range(fragments_count):\n            res.append((segment, next(fragments_counter)))\n\n    if boot_info['live']:\n        res = res[-2:]\n\n    return res", "entry_point": "build_fragments_list", "test": "from __future__ import division, unicode_literals\nimport io\nimport itertools\nimport time\nfrom .fragment import FragmentFD\nfrom ..compat import (\n    compat_b64decode,\n    compat_etree_fromstring,\n    compat_urlparse,\n    compat_urllib_error,\n    compat_urllib_parse_urlparse,\n    compat_struct_pack,\n    compat_struct_unpack,\n)\nfrom ..utils import (\n    fix_xml_ampersands,\n    xpath_text,\n)\nimport sys\nsys.path.insert(1, \"/input/test-apps/youtube-dl\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom youtube_dl.downloader.f4m import * # noqa: autoimport\nfrom youtube_dl.downloader.f4m import build_fragments_list # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 2]]}], 'fragments': [{'fragments': [{'first': 1}]}], 'live': True}) == [(1, 1), (1, 2)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}], 'live':False}) == [(1, 1), (1, 2), (1, 3)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}], 'live':True}) == [(1, 2), (1, 3)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert build_fragments_list({'segments': [{\n        \"segment_run\": [\n            [1, 1],\n            [2, 1],\n            [3, 1],\n        ],\n    }], 'fragments': [\n        {'fragments': [\n            {'first': 1},\n            {'first': 2},\n            {'first': 3},\n        ]}\n    ], 'live': True}) == [\n        (2, 2),\n        (3, 3),\n    ]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}, {'fragments':[{'first':3}, {'first':4}, {'first':5}]}], 'live':False}) == [(1, 1), (1, 2), (3, 3), (3, 4), (3, 5)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 5]]}], 'fragments': [{'fragments': [{'first': 1}]}], 'live': False}) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [0, 10],\n                [1, 10]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [{\n                \"first\": 1\n            }]\n        }],\n        \"live\": False\n    }) == [\n        (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),\n        (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20)\n    ]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 10)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}, {'first': 4}, {'first': 5}]}], 'live': True}) == [(1, 9), (1, 10)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,2)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":1,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":True,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == [(0, 0), (0, 1)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert build_fragments_list({\n        'segments': [{'segment_run': [[0, 4294967295]]}],\n        'fragments': [{'fragments': [{'first': 1}]}],\n        'live': True,\n    }) == [(0, 1), (0, 2)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 4)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}], 'live': False}) == [(1, 1), (1, 2), (1, 3), (1, 4)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert build_fragments_list(\n        {\n        \"segments\":[\n            {\n                \"segment_run\":[\n                    [\n                        6965,\n                        2\n                    ]\n                ]\n            }\n        ],\n        \"fragments\":[\n            {\n                \"fragments\":[\n                    {\n                        \"first\":6965,\n                        \"last\":6966,\n                        \"time\":1036.8333333333333\n                    }\n                ]\n            }\n        ],\n        \"media\":{\n            \"duration\":1036.8333333333333,\n            \"id\":1418240\n        },\n        \"live\":False\n        }\n    ) == [(6965, 6965), (6965, 6966)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert build_fragments_list({\n            'segments': [{\n                'segment_run': [\n                    (0, 2), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1),\n                ]\n            }],\n            'fragments': [\n                {'fragments': [{'first': 0}, {'first': 2}]},\n                {'fragments': [{'first': 1}]},\n                {'fragments': [{'first': 2}]},\n                {'fragments': [{'first': 3}]},\n                {'fragments': [{'first': 4}]},\n                {'fragments': [{'first': 5}]},\n                {'fragments': [{'first': 6}]},\n                {'fragments': [{'first': 7}]},\n                {'fragments': [{'first': 8}]},\n            ],\n            'live': True\n        }) == [(7, 8), (8, 9)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert build_fragments_list(dict(segments=[dict(segment_run=[(0, 1), (1, 1)])], fragments=[dict(fragments=[dict(first=10)]), dict(fragments=[dict(first=20)])], live=False)) == [(0, 10), (1, 11)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert build_fragments_list(\n        {\n        \"segments\":[\n            {\n                \"segment_run\":[\n                    [\n                        6965,\n                        2\n                    ]\n                ]\n            }\n        ],\n        \"fragments\":[\n            {\n                \"fragments\":[\n                    {\n                        \"first\":6965,\n                        \"last\":6966,\n                        \"time\":1036.8333333333333\n                    }\n                ]\n            }\n        ],\n        \"media\":{\n            \"duration\":1036.8333333333333,\n            \"id\":1418240\n        },\n        \"live\":True\n        }\n    ) == [(6965, 6965), (6965, 6966)]\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\"segment_run\": [(1, 2), (3, 3)]}],\n        \"fragments\": [{\"fragments\": [{\"first\": 4}, {\"first\": 10}]}],\n        \"live\": False,\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,2),(3,2)],'duration':4}],\n                                  'fragments':[{'fragments':[{'first':123,'last':123,'duration':4}],\n                                                'start_time':123}],\n                                  'duration':4,\n                                  'live':True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{'segment_run': [(1, 120), (2, 120), (3, 120), (4, 120)]}],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}],\n        'live': True,\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        0,\n                        10\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url\": \"http://example.com\",\n                \"fragments\": [\n                    {\n                        \"first\": 0,\n                        \"last\": 10,\n                        \"time\": 0\n                    }\n                ]\n            }\n        ],\n        \"live\": False\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(0, 2), (2, 2), (4, 1)], 'duration':10}], 'fragments':[{'fragments':[{'first': 2, 'last': 3, 'duration': 10}], 'duration':20}], 'duration':100, 'end_seq':10, 'live':False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 3), (2, 2), (3, 1)], 'timescale': 44100}], 'fragments': [{'start_time': 0, 'fragments': [{'first': 3, 'timescale': 100000, 'duration': 100000}], 'start_time_discontinuity': False, 'discontinuity': False}], 'media': {'default_sample_duration': 653}, 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [(1, 3), (2, 2), (3, 1)]\n        }],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}]}],\n        'live': True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"media\": {},\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        630,\n                        1\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url_transformation_template\": \"http://api.filmon.com/hds/bb08254a-567b-4073-8c61-fa7fd19066ac/Seg1-Frag1.frag\",\n                \"byterange_start\": \"35597\",\n                \"byterange_length\": \"13999\",\n                \"fragments\": [\n                    {\n                        \"url\": \"http://api.filmon.com/hds/bb08254a-567b-4073-8c61-fa7fd19066ac/Seg1-Frag1.frag\",\n                        \"first\": 1,\n                        \"last\": 1,\n                        \"duration\": 10\n                    }\n                ],\n                \"fragment_duration\": 10\n            }\n        ],\n        \"media_found\": True,\n        \"live\": False,\n        \"bootstrap_start_time\": 1485537097.7719999\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 1), (4, 2)], 'timescale':10}], 'fragments':[{'start_time':100,'fragments':[{'first':0,'timescale':10,'duration':90}]}], 'media':{'start':0,'duration':0,'timescale':10}, 'version':0,'live':True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\": [{\"segment_run\": [(129985, 4294967295)]}], \"fragments\": [{\"fragments\": [{\"first\": 33200}], \"duration\": 6, \"url\": \"\", \"byterange\": {\"offset\": 0, \"length\": 3000}}], \"media\": {\"id\": \"286047\"}, \"live\": True, \"version\": 4}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'fragments': [{'fragments': [{'first': 1}, {'first': 3}], 'last_fragment': 1}], 'segments': [{'segment_run': [(1, 2), (3, 1)]}], 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,4)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":3,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":True,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [69698, 3],\n                [69701, 4]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 482000,\n                'timescale': 48000,\n                'duration': 1500,\n            }, {\n                'first': 483500,\n                'duration': 1500,\n            }, {\n                'first': 485000,\n                'duration': 1500,\n            }]\n        }],\n        'live': True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list(dict(segments=[dict(segment_run=[(0, 4294967295)]), dict(segment_run=[(1, 4294967295)])], fragments=[dict(fragments=[dict(first=10)]), dict(fragments=[dict(first=20)])], live=True)) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 3], [2, 1]]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 4}, {'first': 6}]}], 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n      'segments': [\n        {\n          'segment_run': [\n            [\n              1,\n              3\n            ]\n          ]\n        }\n      ],\n      'fragments': [\n        {\n          'fragments': [\n            {\n              'first': 1,\n              'last': 5,\n              'time': 0\n            }\n          ]\n        }\n      ],\n      'live': False\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [0, 10]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [{\n                \"first\": 1\n            }]\n        }],\n        \"live\": True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 1], [1, 2], [2, 1], [3, 1]], 'segment_time_line': [5, 4, 3, 2] }], 'fragments': [{'start_time': 1585368119, 'fragments': [{'first': 338, 'last': 339, 'duration': 17.0, 'url': 'http://v14.lscdn.com/midnight-sky-tv/8d86686c/0389/49610241/038949610241-01-p0389-0338.ts'}]}], 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [2131, 2],\n                [2133, 2]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 130,\n                'last': 135,\n            }, {\n                'first': 136,\n                'last': 136,\n            }],\n            'timescale': 1000\n        }],\n        'live': False\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[ (1, 3), (4, 6) ]}],\n                                  \"fragments\":[{\"fragments\":[{\"first\":0, \"last\":4},\n                                                              {\"first\":3, \"last\":5}]}],\n                                  \"live\": True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 5]]}], 'fragments': [{'fragments': [{'first': 101}]}], 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'fragments': [{'fragments': [{'first': 1}, {'first': 3}], 'last_fragment': 1}], 'segments': [{'segment_run': [(1, 2), (3, 1)]}], 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,4294967295)], 'total_duration':4071426786}],'fragments':[{'start_time':4071426786,'fragments':[{'first':3936907,'duration':900000,'url':''}]}],'media':{'duration':4071426786.0,'title':'Live','fragments_duration':900000,'vcodec':'H.264','acodec':'MPEG-4 AAC','width':720,'height':304,'metadata':{'is_live':True}},'live':True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                (123, 5),\n                (456, 3)\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 1\n            }, {\n                'first': 2\n            }, {\n                'first': 3\n            }, {\n                'first': 4\n            }]\n        }],\n        'live': True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\"segment_run\": [(1, 2), (3, 3)]}],\n        \"fragments\": [{\"fragments\": [{\"first\": 4}, {\"first\": 10}]}],\n        \"live\": True,\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [(1, 3), (2, 2), (3, 1)]\n        }],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}]}],\n        'live': False\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_45\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,4)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":3,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":False,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_46\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\": [{\"segment_run\": [(129985, 2)]}], \"fragments\": [{\"fragments\": [{\"first\": 33200}], \"duration\": 6, \"url\": \"\", \"byterange\": {\"offset\": 0, \"length\": 3000}}], \"media\": {\"id\": \"286047\"}, \"version\": 4, \"live\": True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{\n        \"segment_run\": [\n            [1, 4294967295],\n        ],\n    }], 'fragments': [\n        {'fragments': [\n            {'first': 1},\n            {'first': 2},\n            {'first': 3},\n        ]}\n    ], 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n      'segments': [\n        {\n          'segment_run': [\n            [\n              60,\n              100\n            ]\n          ]\n        }\n      ],\n      'fragments': [\n        {\n          'fragments': [\n            {\n              'first': 4000,\n              'last': 4099,\n              'time': 0\n            }\n          ]\n        }\n      ],\n      'live': True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [2131, 2],\n                [2133, 2]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 130,\n                'last': 135,\n            }, {\n                'first': 136,\n                'last': 136,\n            }],\n            'timescale': 1000\n        }],\n        'live': True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        0,\n                        10\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url\": \"http://example.com\",\n                \"fragments\": [\n                    {\n                        \"first\": 0,\n                        \"last\": 10,\n                        \"time\": 0\n                    }\n                ]\n            }\n        ],\n        \"live\": True\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,2),(3,2)],'duration':4}],\n                                  'fragments':[{'fragments':[{'first':123,'last':123,'duration':4}],\n                                                'start_time':123}],\n                                  'duration':4,\n                                  'live':False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [1, 7],\n                [2, 1]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [\n                {\"first\": 2, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 3, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 4, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 5, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 6, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 7, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n            ]\n        }],\n        \"live\": True,\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 5]]}], 'fragments': [{'fragments': [{'first': 101}]}], 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}, {'fragments':[{'first':3}, {'first':4}, {'first':5}]}], 'live':True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 2), (3, 5), (9, 3)]}],\n                                  'fragments': [{'fragments': [{'first': 11, 'timescale': 10}]}],\n                                  'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_71\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 2), (3, 4), (5, 6)], 'duration': 1}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}, {'fragments': [{'first': 3}, {'first': 4}]}, {'fragments': [{'first': 5}, {'first': 6}]}], 'media': {'duration': 1.0}, 'daterange': {}, 'T3': '', 'T2': '', 'T1': '', 'T0': '', 'bootstrap_info': {'value': ''}, 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [\n        (0, 1), (1, 1), (2, 1), (3, 2), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)\n    ] }], 'fragments': [{'fragments': [\n        {'first': 0, 'last': 0, 'time': 0},\n        {'first': 1, 'last': 1, 'time': 10},\n        {'first': 2, 'last': 2, 'time': 20},\n        {'first': 3, 'last': 5, 'time': 30},\n        {'first': 6, 'last': 7, 'time': 60},\n        {'first': 8, 'last': 8, 'time': 80},\n        {'first': 9, 'last': 9, 'time': 90},\n    ] }], 'id': 'test', 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 10), (1, 3), (3, 2), (6, 1), (7, 3), (10, 1)]}], \n                                 'fragments': [{'fragments': [{'first': 0, 'timescale': 1, 'duration': 1},\n                                                              {'first': 1, 'timescale': 1, 'duration': 1},\n                                                              {'first': 2, 'timescale': 1, 'duration': 1},\n                                                              {'first': 3, 'timescale': 1, 'duration': 1},\n                                                              {'first': 4, 'timescale': 1, 'duration': 1},\n                                                              {'first': 5, 'timescale': 1, 'duration': 1},\n                                                              {'first': 6, 'timescale': 1, 'duration': 1},\n                                                              {'first': 7, 'timescale': 1, 'duration': 1},\n                                                              {'first': 8, 'timescale': 1, 'duration': 1},\n                                                              {'first': 9, 'timescale': 1, 'duration': 1},\n                                                              {'first': 10, 'timescale': 1, 'duration': 1}]}],\n                                 'live': True\n                                 }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 1)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}], 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_76\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 1), (4, 2)], 'timescale':10}], 'fragments':[{'start_time':100,'fragments':[{'first':0,'timescale':10,'duration':90}]}], 'media':{'start':0,'duration':0,'timescale':10}, 'version':0,'live':False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [2, 3],\n                [1, 3]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [\n                {\"first\": 1, \"timescale\": 10, \"duration\": 1},\n                {\"first\": 2, \"timescale\": 10, \"duration\": 1},\n                {\"first\": 3, \"timescale\": 10, \"duration\": 1},\n            ]\n        }],\n        \"media\": [{\n            \"url\": \"\",\n            \"metadata\": \"\",\n        }],\n        \"media_duration\": 20,\n        \"start_time\": 0,\n        \"live\": True,\n        \"end_time\": 100,\n        \"dvr_window_length\": 120,\n    }) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(0, 2), (2, 2), (4, 1)], 'duration':10}], 'fragments':[{'fragments':[{'first': 2, 'last': 3, 'duration': 10}], 'duration':20}], 'duration':100, 'end_seq':10, 'live':True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 2), (3, 4), (5, 6)], 'duration': 1}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}, {'fragments': [{'first': 3}, {'first': 4}]}, {'fragments': [{'first': 5}, {'first': 6}]}], 'media': {'duration': 1.0}, 'daterange': {}, 'T3': '', 'T2': '', 'T1': '', 'T0': '', 'bootstrap_info': {'value': ''}, 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_84\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 4)]}],\n                                  'fragments': [{'fragments': [{'first': 5, 'timescale': 10}]}],\n                                  'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 1], [1, 2], [2, 1], [3, 1]], 'segment_time_line': [5, 4, 3, 2] }], 'fragments': [{'start_time': 1585368119, 'fragments': [{'first': 338, 'last': 339, 'duration': 17.0, 'url': 'http://v14.lscdn.com/midnight-sky-tv/8d86686c/0389/49610241/038949610241-01-p0389-0338.ts'}]}], 'live': False}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 3), (2, 2), (3, 1)], 'timescale': 44100}], 'fragments': [{'start_time': 0, 'fragments': [{'first': 3, 'timescale': 100000, 'duration': 100000}], 'start_time_discontinuity': False, 'discontinuity': False}], 'media': {'default_sample_duration': 653}, 'live': True}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_87\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n            'media': 'media',\n            'segments': [{'segment_run': [\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n            ]}],\n            'fragments': [{'fragments': [\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n            ]}],\n            'live': True\n        }) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 2]]}], 'fragments': [{'fragments': [{'first': 1}]}], 'live': True}) == [(1, 1), (1, 2)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}], 'live':False}) == [(1, 1), (1, 2), (1, 3)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}], 'live':True}) == [(1, 2), (1, 3)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert build_fragments_list({'segments': [{\n        \"segment_run\": [\n            [1, 1],\n            [2, 1],\n            [3, 1],\n        ],\n    }], 'fragments': [\n        {'fragments': [\n            {'first': 1},\n            {'first': 2},\n            {'first': 3},\n        ]}\n    ], 'live': True}) == [\n        (2, 2),\n        (3, 3),\n    ]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}, {'fragments':[{'first':3}, {'first':4}, {'first':5}]}], 'live':False}) == [(1, 1), (1, 2), (3, 3), (3, 4), (3, 5)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 5]]}], 'fragments': [{'fragments': [{'first': 1}]}], 'live': False}) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [0, 10],\n                [1, 10]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [{\n                \"first\": 1\n            }]\n        }],\n        \"live\": False\n    }) == [\n        (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),\n        (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20)\n    ]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 10)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}, {'first': 4}, {'first': 5}]}], 'live': True}) == [(1, 9), (1, 10)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,2)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":1,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":True,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == [(0, 0), (0, 1)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert build_fragments_list({\n        'segments': [{'segment_run': [[0, 4294967295]]}],\n        'fragments': [{'fragments': [{'first': 1}]}],\n        'live': True,\n    }) == [(0, 1), (0, 2)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 4)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}], 'live': False}) == [(1, 1), (1, 2), (1, 3), (1, 4)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert build_fragments_list(\n        {\n        \"segments\":[\n            {\n                \"segment_run\":[\n                    [\n                        6965,\n                        2\n                    ]\n                ]\n            }\n        ],\n        \"fragments\":[\n            {\n                \"fragments\":[\n                    {\n                        \"first\":6965,\n                        \"last\":6966,\n                        \"time\":1036.8333333333333\n                    }\n                ]\n            }\n        ],\n        \"media\":{\n            \"duration\":1036.8333333333333,\n            \"id\":1418240\n        },\n        \"live\":False\n        }\n    ) == [(6965, 6965), (6965, 6966)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert build_fragments_list({\n            'segments': [{\n                'segment_run': [\n                    (0, 2), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1),\n                ]\n            }],\n            'fragments': [\n                {'fragments': [{'first': 0}, {'first': 2}]},\n                {'fragments': [{'first': 1}]},\n                {'fragments': [{'first': 2}]},\n                {'fragments': [{'first': 3}]},\n                {'fragments': [{'first': 4}]},\n                {'fragments': [{'first': 5}]},\n                {'fragments': [{'first': 6}]},\n                {'fragments': [{'first': 7}]},\n                {'fragments': [{'first': 8}]},\n            ],\n            'live': True\n        }) == [(7, 8), (8, 9)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert build_fragments_list(dict(segments=[dict(segment_run=[(0, 1), (1, 1)])], fragments=[dict(fragments=[dict(first=10)]), dict(fragments=[dict(first=20)])], live=False)) == [(0, 10), (1, 11)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert build_fragments_list(\n        {\n        \"segments\":[\n            {\n                \"segment_run\":[\n                    [\n                        6965,\n                        2\n                    ]\n                ]\n            }\n        ],\n        \"fragments\":[\n            {\n                \"fragments\":[\n                    {\n                        \"first\":6965,\n                        \"last\":6966,\n                        \"time\":1036.8333333333333\n                    }\n                ]\n            }\n        ],\n        \"media\":{\n            \"duration\":1036.8333333333333,\n            \"id\":1418240\n        },\n        \"live\":True\n        }\n    ) == [(6965, 6965), (6965, 6966)]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\"segment_run\": [(1, 2), (3, 3)]}],\n        \"fragments\": [{\"fragments\": [{\"first\": 4}, {\"first\": 10}]}],\n        \"live\": False,\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,2),(3,2)],'duration':4}],\n                                  'fragments':[{'fragments':[{'first':123,'last':123,'duration':4}],\n                                                'start_time':123}],\n                                  'duration':4,\n                                  'live':True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{'segment_run': [(1, 120), (2, 120), (3, 120), (4, 120)]}],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}],\n        'live': True,\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        0,\n                        10\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url\": \"http://example.com\",\n                \"fragments\": [\n                    {\n                        \"first\": 0,\n                        \"last\": 10,\n                        \"time\": 0\n                    }\n                ]\n            }\n        ],\n        \"live\": False\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(0, 2), (2, 2), (4, 1)], 'duration':10}], 'fragments':[{'fragments':[{'first': 2, 'last': 3, 'duration': 10}], 'duration':20}], 'duration':100, 'end_seq':10, 'live':False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 3), (2, 2), (3, 1)], 'timescale': 44100}], 'fragments': [{'start_time': 0, 'fragments': [{'first': 3, 'timescale': 100000, 'duration': 100000}], 'start_time_discontinuity': False, 'discontinuity': False}], 'media': {'default_sample_duration': 653}, 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [(1, 3), (2, 2), (3, 1)]\n        }],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}]}],\n        'live': True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"media\": {},\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        630,\n                        1\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url_transformation_template\": \"http://api.filmon.com/hds/bb08254a-567b-4073-8c61-fa7fd19066ac/Seg1-Frag1.frag\",\n                \"byterange_start\": \"35597\",\n                \"byterange_length\": \"13999\",\n                \"fragments\": [\n                    {\n                        \"url\": \"http://api.filmon.com/hds/bb08254a-567b-4073-8c61-fa7fd19066ac/Seg1-Frag1.frag\",\n                        \"first\": 1,\n                        \"last\": 1,\n                        \"duration\": 10\n                    }\n                ],\n                \"fragment_duration\": 10\n            }\n        ],\n        \"media_found\": True,\n        \"live\": False,\n        \"bootstrap_start_time\": 1485537097.7719999\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 1), (4, 2)], 'timescale':10}], 'fragments':[{'start_time':100,'fragments':[{'first':0,'timescale':10,'duration':90}]}], 'media':{'start':0,'duration':0,'timescale':10}, 'version':0,'live':True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\": [{\"segment_run\": [(129985, 4294967295)]}], \"fragments\": [{\"fragments\": [{\"first\": 33200}], \"duration\": 6, \"url\": \"\", \"byterange\": {\"offset\": 0, \"length\": 3000}}], \"media\": {\"id\": \"286047\"}, \"live\": True, \"version\": 4}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'fragments': [{'fragments': [{'first': 1}, {'first': 3}], 'last_fragment': 1}], 'segments': [{'segment_run': [(1, 2), (3, 1)]}], 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,4)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":3,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":True,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [69698, 3],\n                [69701, 4]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 482000,\n                'timescale': 48000,\n                'duration': 1500,\n            }, {\n                'first': 483500,\n                'duration': 1500,\n            }, {\n                'first': 485000,\n                'duration': 1500,\n            }]\n        }],\n        'live': True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list(dict(segments=[dict(segment_run=[(0, 4294967295)]), dict(segment_run=[(1, 4294967295)])], fragments=[dict(fragments=[dict(first=10)]), dict(fragments=[dict(first=20)])], live=True)) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[1, 3], [2, 1]]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 4}, {'first': 6}]}], 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n      'segments': [\n        {\n          'segment_run': [\n            [\n              1,\n              3\n            ]\n          ]\n        }\n      ],\n      'fragments': [\n        {\n          'fragments': [\n            {\n              'first': 1,\n              'last': 5,\n              'time': 0\n            }\n          ]\n        }\n      ],\n      'live': False\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [0, 10]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [{\n                \"first\": 1\n            }]\n        }],\n        \"live\": True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 1], [1, 2], [2, 1], [3, 1]], 'segment_time_line': [5, 4, 3, 2] }], 'fragments': [{'start_time': 1585368119, 'fragments': [{'first': 338, 'last': 339, 'duration': 17.0, 'url': 'http://v14.lscdn.com/midnight-sky-tv/8d86686c/0389/49610241/038949610241-01-p0389-0338.ts'}]}], 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [2131, 2],\n                [2133, 2]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 130,\n                'last': 135,\n            }, {\n                'first': 136,\n                'last': 136,\n            }],\n            'timescale': 1000\n        }],\n        'live': False\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[ (1, 3), (4, 6) ]}],\n                                  \"fragments\":[{\"fragments\":[{\"first\":0, \"last\":4},\n                                                              {\"first\":3, \"last\":5}]}],\n                                  \"live\": True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 5]]}], 'fragments': [{'fragments': [{'first': 101}]}], 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'fragments': [{'fragments': [{'first': 1}, {'first': 3}], 'last_fragment': 1}], 'segments': [{'segment_run': [(1, 2), (3, 1)]}], 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,4294967295)], 'total_duration':4071426786}],'fragments':[{'start_time':4071426786,'fragments':[{'first':3936907,'duration':900000,'url':''}]}],'media':{'duration':4071426786.0,'title':'Live','fragments_duration':900000,'vcodec':'H.264','acodec':'MPEG-4 AAC','width':720,'height':304,'metadata':{'is_live':True}},'live':True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                (123, 5),\n                (456, 3)\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 1\n            }, {\n                'first': 2\n            }, {\n                'first': 3\n            }, {\n                'first': 4\n            }]\n        }],\n        'live': True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\"segment_run\": [(1, 2), (3, 3)]}],\n        \"fragments\": [{\"fragments\": [{\"first\": 4}, {\"first\": 10}]}],\n        \"live\": True,\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [(1, 3), (2, 2), (3, 1)]\n        }],\n        'fragments': [{'fragments': [{'first': 1}, {'first': 2}, {'first': 3}]}],\n        'live': False\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_45\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\":[{\"segment_run\":[(0,4)],\"duration\":50.0,\"start_media_sequence\":0}],\"fragments\":[{\"url\":\"/\",\"fragments\":[{\"first\":0,\"last\":3,\"duration\":10.0,\"start\":0.0}]}],\"duration\":100.0,\"endList\":False,\"targetDuration\":10.0,\"mediaSequence\":0,\"live\":True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_46\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\"segments\": [{\"segment_run\": [(129985, 2)]}], \"fragments\": [{\"fragments\": [{\"first\": 33200}], \"duration\": 6, \"url\": \"\", \"byterange\": {\"offset\": 0, \"length\": 3000}}], \"media\": {\"id\": \"286047\"}, \"version\": 4, \"live\": True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{\n        \"segment_run\": [\n            [1, 4294967295],\n        ],\n    }], 'fragments': [\n        {'fragments': [\n            {'first': 1},\n            {'first': 2},\n            {'first': 3},\n        ]}\n    ], 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n      'segments': [\n        {\n          'segment_run': [\n            [\n              60,\n              100\n            ]\n          ]\n        }\n      ],\n      'fragments': [\n        {\n          'fragments': [\n            {\n              'first': 4000,\n              'last': 4099,\n              'time': 0\n            }\n          ]\n        }\n      ],\n      'live': True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        'segments': [{\n            'segment_run': [\n                [2131, 2],\n                [2133, 2]\n            ]\n        }],\n        'fragments': [{\n            'fragments': [{\n                'first': 130,\n                'last': 135,\n            }, {\n                'first': 136,\n                'last': 136,\n            }],\n            'timescale': 1000\n        }],\n        'live': True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [\n            {\n                \"segment_run\": [\n                    [\n                        0,\n                        10\n                    ]\n                ]\n            }\n        ],\n        \"fragments\": [\n            {\n                \"url\": \"http://example.com\",\n                \"fragments\": [\n                    {\n                        \"first\": 0,\n                        \"last\": 10,\n                        \"time\": 0\n                    }\n                ]\n            }\n        ],\n        \"live\": True\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1,2),(3,2)],'duration':4}],\n                                  'fragments':[{'fragments':[{'first':123,'last':123,'duration':4}],\n                                                'start_time':123}],\n                                  'duration':4,\n                                  'live':False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [1, 7],\n                [2, 1]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [\n                {\"first\": 2, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 3, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 4, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 5, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 6, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n                {\"first\": 7, \"timescale\": 15, \"duration\": 1200, \"byte_range\": [313431, 15667]},\n            ]\n        }],\n        \"live\": True,\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 5]]}], 'fragments': [{'fragments': [{'first': 101}]}], 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 3)], 'fragments_per_segment':3}], 'fragments':[{'fragments':[{'first':1}, {'first':2}, {'first':3}]}, {'fragments':[{'first':3}, {'first':4}, {'first':5}]}], 'live':True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 2), (3, 5), (9, 3)]}],\n                                  'fragments': [{'fragments': [{'first': 11, 'timescale': 10}]}],\n                                  'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_71\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 2), (3, 4), (5, 6)], 'duration': 1}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}, {'fragments': [{'first': 3}, {'first': 4}]}, {'fragments': [{'first': 5}, {'first': 6}]}], 'media': {'duration': 1.0}, 'daterange': {}, 'T3': '', 'T2': '', 'T1': '', 'T0': '', 'bootstrap_info': {'value': ''}, 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_73\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [\n        (0, 1), (1, 1), (2, 1), (3, 2), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)\n    ] }], 'fragments': [{'fragments': [\n        {'first': 0, 'last': 0, 'time': 0},\n        {'first': 1, 'last': 1, 'time': 10},\n        {'first': 2, 'last': 2, 'time': 20},\n        {'first': 3, 'last': 5, 'time': 30},\n        {'first': 6, 'last': 7, 'time': 60},\n        {'first': 8, 'last': 8, 'time': 80},\n        {'first': 9, 'last': 9, 'time': 90},\n    ] }], 'id': 'test', 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 10), (1, 3), (3, 2), (6, 1), (7, 3), (10, 1)]}], \n                                 'fragments': [{'fragments': [{'first': 0, 'timescale': 1, 'duration': 1},\n                                                              {'first': 1, 'timescale': 1, 'duration': 1},\n                                                              {'first': 2, 'timescale': 1, 'duration': 1},\n                                                              {'first': 3, 'timescale': 1, 'duration': 1},\n                                                              {'first': 4, 'timescale': 1, 'duration': 1},\n                                                              {'first': 5, 'timescale': 1, 'duration': 1},\n                                                              {'first': 6, 'timescale': 1, 'duration': 1},\n                                                              {'first': 7, 'timescale': 1, 'duration': 1},\n                                                              {'first': 8, 'timescale': 1, 'duration': 1},\n                                                              {'first': 9, 'timescale': 1, 'duration': 1},\n                                                              {'first': 10, 'timescale': 1, 'duration': 1}]}],\n                                 'live': True\n                                 }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 1)]}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}], 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_76\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(1, 2), (3, 1), (4, 2)], 'timescale':10}], 'fragments':[{'start_time':100,'fragments':[{'first':0,'timescale':10,'duration':90}]}], 'media':{'start':0,'duration':0,'timescale':10}, 'version':0,'live':False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n        \"segments\": [{\n            \"segment_run\": [\n                [2, 3],\n                [1, 3]\n            ]\n        }],\n        \"fragments\": [{\n            \"fragments\": [\n                {\"first\": 1, \"timescale\": 10, \"duration\": 1},\n                {\"first\": 2, \"timescale\": 10, \"duration\": 1},\n                {\"first\": 3, \"timescale\": 10, \"duration\": 1},\n            ]\n        }],\n        \"media\": [{\n            \"url\": \"\",\n            \"metadata\": \"\",\n        }],\n        \"media_duration\": 20,\n        \"start_time\": 0,\n        \"live\": True,\n        \"end_time\": 100,\n        \"dvr_window_length\": 120,\n    }) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments':[{'segment_run':[(0, 2), (2, 2), (4, 1)], 'duration':10}], 'fragments':[{'fragments':[{'first': 2, 'last': 3, 'duration': 10}], 'duration':20}], 'duration':100, 'end_seq':10, 'live':True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_82\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 2), (3, 4), (5, 6)], 'duration': 1}], 'fragments': [{'fragments': [{'first': 1}, {'first': 2}]}, {'fragments': [{'first': 3}, {'first': 4}]}, {'fragments': [{'first': 5}, {'first': 6}]}], 'media': {'duration': 1.0}, 'daterange': {}, 'T3': '', 'T2': '', 'T1': '', 'T0': '', 'bootstrap_info': {'value': ''}, 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_84\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(0, 4)]}],\n                                  'fragments': [{'fragments': [{'first': 5, 'timescale': 10}]}],\n                                  'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [[0, 1], [1, 2], [2, 1], [3, 1]], 'segment_time_line': [5, 4, 3, 2] }], 'fragments': [{'start_time': 1585368119, 'fragments': [{'first': 338, 'last': 339, 'duration': 17.0, 'url': 'http://v14.lscdn.com/midnight-sky-tv/8d86686c/0389/49610241/038949610241-01-p0389-0338.ts'}]}], 'live': False}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({'segments': [{'segment_run': [(1, 3), (2, 2), (3, 1)], 'timescale': 44100}], 'fragments': [{'start_time': 0, 'fragments': [{'first': 3, 'timescale': 100000, 'duration': 100000}], 'start_time_discontinuity': False, 'discontinuity': False}], 'media': {'default_sample_duration': 653}, 'live': True}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    with open(\"/output/test-apps+youtube-dl/test_output/youtube_dl+downloader+f4m/build_fragments_list/test_87\", \"rb\") as f:\n        output = pickle.load(f)\n    assert build_fragments_list({\n            'media': 'media',\n            'segments': [{'segment_run': [\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n                ({'media': 'media', 'duration': 60, 'start_index': 1}, 2),\n            ]}],\n            'fragments': [{'fragments': [\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n                {'first': 123, 'last': 123, 'duration': 10, 'url': 'url'},\n            ]}],\n            'live': True\n        }) == output"]}
