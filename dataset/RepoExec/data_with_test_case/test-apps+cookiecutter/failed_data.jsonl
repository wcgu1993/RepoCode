{"problem_ids": 113, "project": "test-apps/cookiecutter", "focal_function": "def version_msg():\n    \"\"\"Return the Cookiecutter version, location and Python powering it.\"\"\"\n    python_version = sys.version[:3]\n    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    message = 'Cookiecutter %(version)s from {} (Python {})'\n    return message.format(location, python_version)", "module": "cookiecutter.cli", "code": "import collections\nimport json\nimport os\nimport sys\nimport click\nfrom cookiecutter import __version__\nfrom cookiecutter.exceptions import (\n    ContextDecodingException,\n    FailedHookException,\n    InvalidModeException,\n    InvalidZipRepository,\n    OutputDirExistsException,\n    RepositoryCloneFailed,\n    RepositoryNotFound,\n    UndefinedVariableInTemplate,\n    UnknownExtension,\n)\nfrom cookiecutter.log import configure_logger\nfrom cookiecutter.main import cookiecutter\nfrom cookiecutter.config import get_user_config\n\ndef version_msg():\n    \"\"\"Return the Cookiecutter version, location and Python powering it.\"\"\"\n    python_version = sys.version[:3]\n    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    message = 'Cookiecutter %(version)s from {} (Python {})'\n    return message.format(location, python_version)", "entry_point": "version_msg", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert version_msg() == 'Cookiecutter 1.4.0 from /usr/local/Cellar/python/3.7.4_1 (Python 3.7.4)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert isinstance(version_msg(), str)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert version_msg() == \"Cookiecutter 1.4.0 from /Users/steven/cookiecutter/cookiecutter/cookiecutter/cli (Python 3.6.5)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 'Cookiecutter' in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert isinstance(version_msg(),str)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert version_msg().split()[22]=='3.7)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert version_msg()=='Cookiecutter 1.6.0 from /usr/local/lib/python3.8/dist-packages/cookiecutter (Python 3.8)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert version_msg().split()[10]=='miniconda3'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert version_msg().split()[19]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert version_msg() == 'Cookiecutter 1.4.0 from /usr/local/lib/python3.6/site-packages (Python 3.6)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert version_msg() == \"Cookiecutter 1.6.0 from /Users/admin/PycharmProjects/cookiecutter_test/cookiecutter (Python 3.5.2)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 25 == len(version_msg())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert version_msg().split()[8]=='ayushbansal'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert \"Cookiecutter\" in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert version_msg().split()[17]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert \"Python 3.\" in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert version_msg() == 'Cookiecutter 1.7.0 from /home/abdullah/Projects/cookiecutter/cookiecutter (Python 3.6.9)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert version_msg().startswith('Cookiecutter 1.4.0 from')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert \"Cookiecutter 1.6.0 from\" in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert version_msg() == 'Cookiecutter 1.4.0 from /Users/rohan/.pyenv/versions/3.6.1/lib/python3.6/site-packages (Python 3.6.1)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert version_msg().split()[2]=='from'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert version_msg() == 'Cookiecutter 1.7.2 from /home/user/anaconda3/lib/python3.8/site-packages (Python 3.8)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert version_msg().split()[14]=='wowc1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 'Python' in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert version_msg() == \"Cookiecutter 1.4.0 from /home/george/.local/lib/python3.5/site-packages/cookiecutter (Python 3.5)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert version_msg() == \"Cookiecutter 1.7.2 from /home/username/.local/lib/python3.5/site-packages/cookiecutter (Python 3.5)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert version_msg() == 'Cookiecutter 1.6.0 from /Users/x/Library/Python/2.7/lib/python/site-packages (Python 2.7.10)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 110 > len(version_msg())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert version_msg().startswith('Cookiecutter')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert version_msg() == 'Cookiecutter 1.4.0 from /home/users/jupyter/.local/lib/python3.6/site-packages/cookiecutter (Python 3.6)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert version_msg().split()[7]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert version_msg().split()[12]=='envs'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert version_msg() == 'Cookiecutter 1.7.2 from /usr/local/lib/python3.7/dist-packages/cookiecutter (Python 3.7)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert version_msg() == 'Cookiecutter 1.3.0 from /home/franco/.local/lib/python3.6/site-packages (Python 3.6)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert version_msg().split()[13]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert version_msg().split()[6]=='home'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert version_msg() == 'Cookiecutter 1.6.0 from /home/dmitriy/Documents/tornado-cookiecutter-template (Python 3.6.7)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert version_msg().split()[16]=='lib'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 'Cookiecutter 1.0.0' in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert \"from {}\" in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert version_msg().split()[0]=='Cookiecutter'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert isinstance(click.echo(version_msg()), click.core.Group)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert version_msg().split()[18]=='python3.7'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert version_msg().split()[4]=='lib'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert version_msg() == 'Cookiecutter 1.6.0 from /home/o/Documents/cookiecutter (Python 3.6.4)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert version_msg() == 'Cookiecutter 1.4.0 from /home/pi/cookiecutter (Python 3.5.3)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert version_msg().split()[1]=='1.7.2'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert version_msg() == 'Cookiecutter 1.7.2 from /home/michael/Dev/cookiecutter_michaelcurrin/src (Python 3.9.1)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert version_msg().split()[5]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert \"Cookiecutter 1.0.1\" == version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert \"location\" in version_msg()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert len(version_msg()) == 100", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert version_msg().split()[3]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert version_msg().split()[15]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert version_msg().split()[11]=='/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert \"Python\" in version_msg()"]}
{"problem_ids": 114, "project": "test-apps/cookiecutter", "focal_function": "def validate_extra_context(ctx, param, value):\n    \"\"\"Validate extra context.\"\"\"\n    for s in value:\n        if '=' not in s:\n            raise click.BadParameter(\n                'EXTRA_CONTEXT should contain items of the form key=value; '\n                \"'{}' doesn't match that form\".format(s)\n            )\n\n    # Convert tuple -- e.g.: ('program_name=foobar', 'startsecs=66')\n    # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}\n    return collections.OrderedDict(s.split('=', 1) for s in value) or None", "module": "cookiecutter.cli", "code": "import collections\nimport json\nimport os\nimport sys\nimport click\nfrom cookiecutter import __version__\nfrom cookiecutter.exceptions import (\n    ContextDecodingException,\n    FailedHookException,\n    InvalidModeException,\n    InvalidZipRepository,\n    OutputDirExistsException,\n    RepositoryCloneFailed,\n    RepositoryNotFound,\n    UndefinedVariableInTemplate,\n    UnknownExtension,\n)\nfrom cookiecutter.log import configure_logger\nfrom cookiecutter.main import cookiecutter\nfrom cookiecutter.config import get_user_config\n\ndef validate_extra_context(ctx, param, value):\n    \"\"\"Validate extra context.\"\"\"\n    for s in value:\n        if '=' not in s:\n            raise click.BadParameter(\n                'EXTRA_CONTEXT should contain items of the form key=value; '\n                \"'{}' doesn't match that form\".format(s)\n            )\n\n    # Convert tuple -- e.g.: ('program_name=foobar', 'startsecs=66')\n    # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}\n    return collections.OrderedDict(s.split('=', 1) for s in value) or None", "entry_point": "validate_extra_context", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert validate_extra_context(None, None, ('program_name=foo', 'startsecs=66')) == collections.OrderedDict([('program_name', 'foo'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert validate_extra_context(None,None,(\"a=b\",\"c\")) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert validate_extra_context(None, None, ('abcd', 'efg')) == collections.OrderedDict([('abcd', 'efg')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert validate_extra_context(None, None, (\"program_name=foobar\",)) == collections.OrderedDict(\n                                                                                        [('program_name', 'foobar')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert validate_extra_context(1,2,{\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }) == {\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert isinstance(validate_extra_context([], {}, \"program_name=foobar\"), collections.OrderedDict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert validate_extra_context(None,None,(\"a=b\",\"c=d\",\"e=f\")) == {'a': 'b', 'c': 'd', 'e': 'f'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66')) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert validate_extra_context(None, None, ('abcd=efg', 'hijk')) == collections.OrderedDict([('abcd', 'efg'), ('hijk', '')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert validate_extra_context(None, None, []) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert isinstance(validate_extra_context(None, None, ()), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert isinstance(validate_extra_context(\n        ctx=None,\n        param=None,\n        value=(\"foo\",)),\n        TypeError\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66')) == collections.OrderedDict({'program_name': 'foobar', 'startsecs': '66'})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert isinstance(validate_extra_context(None, None, None), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert validate_extra_context(None, None, ('startsecs=66', 'autostart=false')) == {'startsecs': '66', 'autostart': 'false'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert validate_extra_context('--extra-context', None, ('a=1', 'b=2')) == {'a': '1', 'b': '2'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert collections.OrderedDict(s.split('=', 1) for s in ('program_name=foobar', 'startsecs=66')) == validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert validate_extra_context(None, None, ('program_name=foobar',)) == {'program_name': 'foobar'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert validate_extra_context(\n        'ctx', \n        'param', \n        ['program_name=foobar', 'startsecs=66', 'numprocs=1', 'foobars=66', 'foobar=66']) == {'program_name': 'foobar', 'startsecs': '66', 'numprocs': '1', 'foobars': '66', 'foobar': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert validate_extra_context(None,None,['program_name=foobar', 'startsecs=66']) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert validate_extra_context(None, None, ('abcd=efg', 'hijk=lmnop', 'program_name=foobar', 'startsecs=66')) == collections.OrderedDict([('abcd', 'efg'), ('hijk', 'lmnop'), ('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert validate_extra_context(None, None, ('abcd=efg', 'hijk=lmnop', 'program_name=foobar')) == collections.OrderedDict([('abcd', 'efg'), ('hijk', 'lmnop'), ('program_name', 'foobar')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert validate_extra_context(None,None,('a=1', 'b=2')) == {'a': '1', 'b': '2'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert validate_extra_context(None, None, ('a=1', 'b=2', 'c=3')) == {'a': '1', 'b': '2', 'c': '3'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert None == validate_extra_context(None, None, None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert validate_extra_context(None, None, ('program_namefoo', )) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert validate_extra_context(None, None, ('program_name=foo', )) == collections.OrderedDict([('program_name', 'foo')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert validate_extra_context(1,2,{\n        'program_name=foobar', \n        'startsecs=66'\n    }) == {\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert validate_extra_context(None, None, ('program_name=',)) == {'program_name': ''}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert validate_extra_context(None, None, (('a', 'b'), ('c', 'd'))) == {'a': 'b', 'c': 'd'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert validate_extra_context(None, None, ['dad=d']) == collections.OrderedDict([('dad', 'd')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert validate_extra_context(0,0,['program_name=foobar','startsecs=66']) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert validate_extra_context(0, 0, ['program_name=foobar']) == collections.OrderedDict([('program_name', 'foobar')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert isinstance(validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66')), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert validate_extra_context(None,None,('program_name=foobar', 'startsecs=66')) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert validate_extra_context(None, None, ('a=1', 'b=2')) == {'a': '1', 'b': '2'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert validate_extra_context(1,2,['a=1','b=2','c=3','d=4']) == {'a':'1','b':'2','c':'3','d':'4'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert validate_extra_context(\"ctx\",\"param\",['program_name=foobar', 'startsecs=66']) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert validate_extra_context(None, None, ('program_namefoobar', )) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert validate_extra_context(None, None, ()) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert validate_extra_context(None, None, (\"key=value\", \"hello=world\")) == collections.OrderedDict([(\"key\", \"value\"), (\"hello\", \"world\")])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert validate_extra_context(None, None, ('program_name=foos=66', )) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1 == len(validate_extra_context(None, None, [\"a=1\"]))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert isinstance(validate_extra_context(\n        ctx=None,\n        param=None,\n        value=(\"program_name=foobar\", \"startsecs=66\")),\n        dict\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert validate_extra_context(0, 0, []) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert validate_extra_context(None, None, (\"program_name=foobar\", \"startsecs=66\")) == collections.OrderedDict(\n                                                                                        [('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert validate_extra_context(1,2,['a=1','b=2']) == {'a':'1','b':'2'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 1 == len(validate_extra_context(None, None, [\"a=1\", \"b=2\"]))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert isinstance(validate_extra_context(\n        None, None, (\n            'program_name=foobar',\n            'startsecs=66',\n        )\n    ), collections.OrderedDict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert validate_extra_context(None, None, (('a=1', 'b=2'), 'c=3', 'd=4')) == collections.OrderedDict([('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert validate_extra_context(1,2,(\"a=b\",\"c=d\")) == {\"a\": \"b\", \"c\": \"d\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert validate_extra_context(1,2,{\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }.items()) == {\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert validate_extra_context(None, None, ('abcd=efg', 'hijk=lmnop')) == collections.OrderedDict([('abcd', 'efg'), ('hijk', 'lmnop')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert validate_extra_context(0, 0, ['program_name=foobar','startsecs=66']) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert validate_extra_context(\"ctx\",\"param\",('program_name=foobar', 'startsecs=66')) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert validate_extra_context(None, None, (\"a=1\", \"b=3\", \"c=4\")) == {'a': '1', 'b': '3', 'c': '4'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert validate_extra_context(None,None,['startsecs=66']) == collections.OrderedDict([('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert validate_extra_context(None, None, (\"=\",)) == collections.OrderedDict([('', '')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert validate_extra_context(None, None, (('program_name=foobar'), ('startsecs=66'))) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert validate_extra_context(1, 2, [\"a=1\", \"b=2\", \"c=3\"]) == {\"a\":\"1\", \"b\":\"2\", \"c\":\"3\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=')) == {'program_name': 'foobar', 'startsecs': ''}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert validate_extra_context(None, None, (\"program_name\",)) == collections.OrderedDict([('program_name', None)])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert validate_extra_context(None, None, (('program_name=foobar', 'startsecs=66'))) == collections.OrderedDict([('program_name', 'foobar', 'startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert validate_extra_context(None,None,['program_name=foobar']) == collections.OrderedDict([('program_name', 'foobar')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert dict(validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66'))) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert validate_extra_context(\n        'ctx', \n        'param', \n        ['program_name=foobar', 'startsecs=66', 'numprocs=1', 'foobars=66']) == {'program_name': 'foobar', 'startsecs': '66', 'numprocs': '1', 'foobars': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert validate_extra_context(None, None, ('startsecs=66',)) == {'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert validate_extra_context(None, None, ('key=value', 'startsecs=66')) == collections.OrderedDict([('key', 'value'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert validate_extra_context(None, None, ()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert validate_extra_context(1,1,('program_name=foobar','startsecs=66')) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert validate_extra_context(None, None, (('a=1', 'b=2'), 'c=3')) == collections.OrderedDict([('a', '1'), ('b', '2'), ('c', '3')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66', 'autostart=false')) == {'program_name': 'foobar', 'startsecs': '66', 'autostart': 'false'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert validate_extra_context(None, None, ('a', 'b', 'c')) == {'a': 'b', 'c': None}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66', 'autostart=false', 'name=fpprogram')) == {'program_name': 'foobar', 'startsecs': '66', 'autostart': 'false', 'name': 'fpprogram'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert validate_extra_context(\"ctx\",\"param\",('program_name=foobar', 'startsecs=66', 'autostart=false')) == {'program_name': 'foobar', 'startsecs': '66', 'autostart': 'false'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert not validate_extra_context(\n        None, None, (\n            'program_name=foobar',\n            'startsecs=66',\n        )\n    ) == {'foo': 'bar'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert validate_extra_context(None,None,(\"a=b\",\"c=d\")) == {'a': 'b', 'c': 'd'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert validate_extra_context(None,None,[]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66')) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert validate_extra_context(None, None, ['dad=d=da']) == collections.OrderedDict([('dad', 'd=da')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert validate_extra_context(1,2,[\n        'program_name=foobar', \n        'startsecs=66'\n    ]) == {\n        'program_name': 'foobar', \n        'startsecs': '66'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert validate_extra_context(None, None, ['dad=d', 'd=dad']) == collections.OrderedDict([('dad', 'd'), ('d', 'dad')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert validate_extra_context(None, None, ([\"program_name=foobar\", \"startsecs=66\"])) == collections.OrderedDict([('program_name', 'foobar'), ('startsecs', '66')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert validate_extra_context(\n        None, None, (\n            'program_name=foobar',\n            'startsecs=66',\n        )\n    ) == {\n        'program_name': 'foobar',\n        'startsecs': '66',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert validate_extra_context(None, None, (('a=1', 'b=2'),)) == collections.OrderedDict([('a', '1'), ('b', '2')])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert validate_extra_context(None, None, ({'''program_name=foobar'''})) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert collections.OrderedDict(validate_extra_context(None, None, ('program_name=foobar', 'startsecs=66'))) == {'program_name': 'foobar', 'startsecs': '66'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert validate_extra_context(None, None, (('program_name=foobar'),)) == collections.OrderedDict([('program_name', 'foobar')])"]}
{"problem_ids": 120, "project": "test-apps/cookiecutter", "focal_function": "def read_user_variable(var_name, default_value):\n    \"\"\"Prompt user for variable and return the entered value or given default.\n\n    :param str var_name: Variable of the context to query the user\n    :param default_value: Value that will be returned if no input happens\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(var_name, default=default_value)", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef read_user_variable(var_name, default_value):\n    \"\"\"Prompt user for variable and return the entered value or given default.\n\n    :param str var_name: Variable of the context to query the user\n    :param default_value: Value that will be returned if no input happens\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(var_name, default=default_value)", "entry_point": "read_user_variable", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert read_user_variable(\"User name\", \"DEFAULT\") == \"DEFAULT\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert read_user_variable(\"var_name\", \"default_value\") == \"default_value\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert read_user_variable(\"abc\", None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert not read_user_variable(\"confirm\", \"yes\") == \"yes\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert read_user_variable(\"Enter a number (this text will be ignored)\", 100) != \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert read_user_variable(\"test\", \"default\") == \"default\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert read_user_variable('test', 'default') == 'default'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert read_user_variable('a', 'b') == 'b'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert read_user_variable(\"number\", \"\") == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert '' == read_user_variable('Enter some text', 'test')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert read_user_variable(\"var_name\", \"aaa\") == \"aaa\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert None == read_user_variable(\"var_name\", None, show_default=False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert read_user_variable(\"number\", 0) == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert read_user_variable(\"Enter a number (this text will be ignored)\", 100) == 100", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert read_user_variable('year',2021) == 2021", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 1 == read_user_variable('Insert 1 if you\\'re right', 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert read_user_variable('Name', 'Uche') == 'Uche'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 1 == read_user_variable(\"How many years of experience do you have?\", 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 42 == read_user_variable('number', '\"42\"')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 5 == read_user_variable(\"number\", 5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert read_user_variable(\"var_name\", 100) == 100", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert read_user_variable(\"enter name\", \"Marina\") == \"Marina\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert read_user_variable(\"A\", \"a\") == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert read_user_variable(\"var_name\", None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 1 == read_user_variable(\"test\", 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 10 == read_user_variable(\"Choose a number\", 10)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert read_user_variable('name', 'default') == 'name'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 'test' == read_user_variable('Enter some text', '')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert read_user_variable(\"name\", \"None\") == \"name\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert read_user_variable(\"a\", \"b\") == \"b\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 'test' == read_user_variable('Enter some text', 'test')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 5 == read_user_variable(\"var_name\", None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert read_user_variable(\"enter name\", None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 1234 == read_user_variable(\"Please enter a number\", 1234)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 42 == read_user_variable('number', '42')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert read_user_variable('name', 'default') == 'default'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert read_user_variable(\"Your name\", \"Dear user\") == input(\"Your name\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert read_user_variable(\"abc\", \"\") == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert read_user_variable(\"Your name\", \"Dear user\") == \"Dear user\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 20 == read_user_variable(\"Choose a number\", 10)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert read_user_variable('a', 'b') == 'a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert read_user_variable(\"abc\", 0) == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert read_user_variable('test', None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert read_user_variable(\"var_name\", \"\") == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert read_user_variable(\"confirm\", \"no\") == \"no\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert read_user_variable('name', 'no_name') == 'name'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 'None' == read_user_variable('Enter a number:', 'None')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert read_user_variable(\"name\", 0) == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 42 == read_user_variable('number', 42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert read_user_variable(\"name\", None) == \"name\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert read_user_variable('name', 'no_name') == 'no_name'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert read_user_variable(\"enter name\", 1234) == 1234", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert read_user_variable(\"Returns default value?\", 1) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert read_user_variable('age', '42') == '42'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert read_user_variable(\"abc\", 5) == 5", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert read_user_variable('age', None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert \"hello\" == read_user_variable(\"text\", \"hello\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert \"test\" == read_user_variable(\"test\", \"test2\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 'None' == read_user_variable('Enter a number:', None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert read_user_variable(\"number\", None) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert read_user_variable(\"Testing?\", None) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert read_user_variable('age', 3) == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert read_user_variable(\"name\", \"None\") == \"None\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert 42 == read_user_variable('number', '{{ cookiecutter.number }}')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert '42' == read_user_variable('number', '\"{{ cookiecutter.number }}\"')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 5 == read_user_variable('Enter a number:', 5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert read_user_variable(\"Enter the value\", 0) == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 5 == read_user_variable(\"var_name\", 5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert read_user_variable(\"enter name\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert read_user_variable(\"User name\", \"\") == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert read_user_variable(\"enter name\", \"\") == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 'test' == read_user_variable('Insert \"test\" if you\\'re right', 'test')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert read_user_variable('age', '') == ''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 1 == read_user_variable('Enter a number', 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert read_user_variable(\"A\", \"\") == \"\""]}
{"problem_ids": 121, "project": "test-apps/cookiecutter", "focal_function": "def read_user_yes_no(question, default_value):\n    \"\"\"Prompt the user to reply with 'yes' or 'no' (or equivalent values).\n\n    Note:\n      Possible choices are 'true', '1', 'yes', 'y' or 'false', '0', 'no', 'n'\n\n    :param str question: Question to the user\n    :param default_value: Value that will be returned if no input happens\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(question, default=default_value, type=click.BOOL)", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef read_user_yes_no(question, default_value):\n    \"\"\"Prompt the user to reply with 'yes' or 'no' (or equivalent values).\n\n    Note:\n      Possible choices are 'true', '1', 'yes', 'y' or 'false', '0', 'no', 'n'\n\n    :param str question: Question to the user\n    :param default_value: Value that will be returned if no input happens\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(question, default=default_value, type=click.BOOL)", "entry_point": "read_user_yes_no", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", \"n\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert read_user_yes_no(\"It's a good idea to have unit tests, isn't it?\", \"n\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='y') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert read_user_yes_no(question=\"Test\", default_value=\"\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert read_user_yes_no(\"Would you like to write unit tests ?\", \"no\") in [\"yes\", \"y\", \"true\", \"1\", \"no\", \"n\", \"false\", \"0\", \"\"]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'false') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert read_user_yes_no('Question?', 'Default value') == 'y'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', '0') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert read_user_yes_no('Do you want to continue?', 'n') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == read_user_yes_no('Test [y/N]', 'Y')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert not read_user_yes_no(\"question\", \"f\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert read_user_yes_no(\"do you want to continue\", default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert read_user_yes_no(\"Yes or no?\", \"Yes\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert read_user_yes_no(\"test\", \"0\") is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert read_user_yes_no('Is this correct', default_value='false') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert read_user_yes_no('Do you want to continue?', '0') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert read_user_yes_no('Do you want to continue?', 'y') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert read_user_yes_no(\"test\", \"true\") in (True, False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert read_user_yes_no(\"Do you want to do something?\", \"No\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert read_user_yes_no('Is it true', True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert read_user_yes_no(\"my question\", False) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert read_user_yes_no('Do you want to test the function?', 'yes') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert not read_user_yes_no('Is it false', False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert read_user_yes_no('Do you want to continue?', '1') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert read_user_yes_no(\"Question?\", default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert read_user_yes_no(\"question\", \"true\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert read_user_yes_no(\"What?\", True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert read_user_yes_no('Is this correct', default_value='f') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert read_user_yes_no(question=\"hello\", default_value=False) is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert read_user_yes_no(\"Is it your first time using this command ?\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert read_user_yes_no('Question?', 'Default value') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert read_user_yes_no('true or no? ', default_value=False) is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert not read_user_yes_no(\"question\", \"n\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 1 == read_user_yes_no('Test [y/N]', 'Yes')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert read_user_yes_no('Is this correct', default_value='true') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert read_user_yes_no(\"It's a good idea to have unit tests, isn't it?\", \"y\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert read_user_yes_no('Do you like pancakes?', 1) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert read_user_yes_no(\"test\", \"true\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert read_user_yes_no('Question?', 'Default value') == 'Y'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert read_user_yes_no(\"Yes or no?\", \"No\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert read_user_yes_no(\"Please answer yes or no\", True) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert read_user_yes_no(\"'yes' or 'no' question test\", default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert read_user_yes_no(\"Is it your first time using this command ?\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert read_user_yes_no(\"Do you like cookies?\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert read_user_yes_no(\"Do you like cookies?\", \"y\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert read_user_yes_no(\"is this working? \", \"n\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert read_user_yes_no('Question?', 'Default value') == 'yes'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert read_user_yes_no('Is this correct', default_value=False) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert read_user_yes_no('test', True) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 1 == read_user_yes_no('Test [y/N]', 'yes')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert read_user_yes_no('Do you like pancakes?', True) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 0 == read_user_yes_no('Test [y/N]', 'NO')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert not read_user_yes_no(\"Are you ok ?\", False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', '1') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert read_user_yes_no('Is this correct', default_value='Y') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 0 == read_user_yes_no('Test [y/N]', 'n')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 0 == read_user_yes_no('Test [y/N]', 'no')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert read_user_yes_no('Do you want to test the function?', 'no') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert read_user_yes_no('Do you like pancakes?', False) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 1 == read_user_yes_no('Test [y/N]', 'true')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert read_user_yes_no(\"Are you ok ?\", True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert read_user_yes_no('Do you like pancakes?', 'yes') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert read_user_yes_no(\"What to do now?\", False) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert read_user_yes_no('Test read_user_yes_no', 'N') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert read_user_yes_no(\"Question?\", default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert read_user_yes_no(\"continue\", True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 1 == read_user_yes_no('Test [y/N]', '1')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='1') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert read_user_yes_no('Is this correct', default_value='no') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert read_user_yes_no('Do you like pancakes?', 0) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert read_user_yes_no(\"test\", \"2\") is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert read_user_yes_no('Is this correct', default_value='n') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert 1 == read_user_yes_no('Test [y/N]', True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert read_user_yes_no(\"Prompt for y/n?\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'true') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert read_user_yes_no(question=\"Test\", default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert read_user_yes_no('Question?', 'Default value') == 'Yes'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert read_user_yes_no(\"my question\", True) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert read_user_yes_no(\"question\", \"1\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert 1 == read_user_yes_no('Test [y/N]', 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert read_user_yes_no('false or yes? ', default_value=True) is False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert read_user_yes_no('Do you want to continue?', 'yes') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert read_user_yes_no('Press any key', 'True') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='0') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert read_user_yes_no('do you like cookies?', True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert read_user_yes_no(\"Please answer yes or no\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert read_user_yes_no('Do you want to continue?', 'no') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert read_user_yes_no('Question?', 'Default value') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert read_user_yes_no(\"question\", \"yes\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert read_user_yes_no('Question?', 'Default value') == '0'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert 0 == read_user_yes_no('Test [y/N]', '0')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'no') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert read_user_yes_no('Is this correct', default_value='t') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert read_user_yes_no(\"is this working? \", \"y\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 1 == read_user_yes_no('Test [y/N]', 'True')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert read_user_yes_no(\"Is this a question?\", default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert read_user_yes_no('Question?', 'Default value') == 'false'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert read_user_yes_no('Do you like pancakes?', 't') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert read_user_yes_no(\"What?\", False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'y') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert read_user_yes_no('Question?', 'Default value') == 'YES'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    assert read_user_yes_no('Press any key', 'False') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    assert read_user_yes_no('Do you like pancakes?', 'n') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    assert read_user_yes_no('Do you like pancakes?', 'y') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='no') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert read_user_yes_no(\"test\", True) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='true') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    assert 0 == read_user_yes_no('Test [y/N]', '')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    assert read_user_yes_no(\"'yes' or 'no' question test\", default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert read_user_yes_no('Question?', 'Default value') == 'n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    assert read_user_yes_no(\"Would you like to add a new page to the website?\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'n') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='n') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    assert read_user_yes_no(\"Prompt for y/n?\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_117():\n    assert read_user_yes_no(\"Asking a question\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_118():\n    assert read_user_yes_no(\"Would you like to add a new page to the website?\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_119():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', 'yes') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_120():\n    assert read_user_yes_no('Do you like pancakes?', 'no') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_121():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_122():\n    assert read_user_yes_no(\"do you want to continue\", default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    assert read_user_yes_no(\"question\", True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_124():\n    assert read_user_yes_no(question='Yes or No?', default_value='True') in {'true', '1', 'yes', 'y', 'false', '0', 'no', 'n'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_125():\n    assert read_user_yes_no(\"yes or no?\", True) in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_126():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='yes') == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    assert read_user_yes_no(\"question\", None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    assert 0 == read_user_yes_no('Test [y/N]', 'anything else')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    assert read_user_yes_no(\"Do you like cookies?\", True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    assert 0 == read_user_yes_no('Test [y/N]', False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_131():\n    assert 0 == read_user_yes_no('Test [y/N]', 'False')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_132():\n    assert read_user_yes_no('Is this correct', default_value='y') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    assert not read_user_yes_no(\"question\", \"false\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_134():\n    assert 1 == read_user_yes_no(\"Please enter \\\"yes\\\" or \\\"no\\\"\", 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_135():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_136():\n    assert read_user_yes_no('Is this correct', default_value='1') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_137():\n    assert read_user_yes_no('Question?', 'Default value') == 'no'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    assert read_user_yes_no(\"question\", \"t\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_139():\n    assert read_user_yes_no(\"question\", \"y\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_140():\n    assert read_user_yes_no(question='Do you want to make the project public', default_value='false') == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert read_user_yes_no(\"Do you want to continue?\", \"y\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    assert read_user_yes_no(\"Do you want to do something?\", \"No\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_143():\n    assert read_user_yes_no(question=\"Test\", default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_144():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", 1) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_145():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", 0) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_146():\n    assert read_user_yes_no(\"Do you want to continue?\", \"n\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_147():\n    assert 0 == read_user_yes_no('Test [y/N]', None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    assert read_user_yes_no('Question?', 'Default value') == 'Default value'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    assert read_user_yes_no(\"Do you like cookies?\", \"n\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_150():\n    assert read_user_yes_no('Please enter \"yes\" or \"no\"', False) in {False, True}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_151():\n    assert not read_user_yes_no(\"question\", \"0\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_152():\n    assert read_user_yes_no('Do you want to append this value?', default_value=False) == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_153():\n    assert read_user_yes_no('Do you want to append this value?', default_value=True) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_154():\n    assert read_user_yes_no('Do you like pancakes?', 'f') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    assert read_user_yes_no(question=\"Test\", default_value=\"True\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_156():\n    assert read_user_yes_no(question=\"hello\", default_value=True) is True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_157():\n    assert read_user_yes_no(question=\"Test\", default_value=\"False\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_158():\n    assert read_user_yes_no('Is this correct', default_value='0') in [True, False]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_159():\n    assert 0 == read_user_yes_no('Test [y/N]', 'N')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_160():\n    assert not read_user_yes_no(\"question\", \"no\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_161():\n    assert read_user_yes_no(\"test\", \"false\") == False", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    assert read_user_yes_no('Question?', 'Default value') == 'False'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    assert 0 == read_user_yes_no('Test [y/N]', 'false')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    assert read_user_yes_no(\"Are you sure you want to delete the folder?\", \"y\") == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    assert read_user_yes_no('foo', True) in [True, False]"]}
{"problem_ids": 122, "project": "test-apps/cookiecutter", "focal_function": "def read_repo_password(question):\n    \"\"\"Prompt the user to enter a password.\n\n    :param str question: Question to the user\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(question, hide_input=True)", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef read_repo_password(question):\n    \"\"\"Prompt the user to enter a password.\n\n    :param str question: Question to the user\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    return click.prompt(question, hide_input=True)", "entry_point": "read_repo_password", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert read_repo_password('Enter a password') != ''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert read_repo_password(\"Please enter the password:\") != \"Please enter the password:\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 4 == len(read_repo_password(\"Please enter a password\"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert len(read_repo_password(\"Enter the password for the repository \")) > 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert read_repo_password(\"Input your password:\") == \"MyPassword\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 8 < len(generate_docker_password(read_repo_password(\"secret\"), read_repo_password(\"secret\"))) < 128", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert read_repo_password(\"Question\") == \"Question\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 8 < len(generate_git_password(read_repo_password(\"secret\"), read_repo_password(\"secret\"))) < 128", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert read_repo_password(\"Test\") == \"Test\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert read_repo_password('Password') == 'hi'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert type(read_repo_password('Enter a password')) == str", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert read_repo_password('a question') == 'a question'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert read_repo_password('Your password') == 'Your password'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert read_repo_password(\"password: \") == \"123\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert read_repo_password('Password: ') is not None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert read_repo_password(\"Hello World!\") == \"Hello World!\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 4 == len(read_repo_password(\"Enter password for repository\"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert read_repo_password(\"Enter the password for the GitHub repo\") == '123'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert read_repo_password('Enter your password') != ' '", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert read_repo_password(\"The password\") == \"The password\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert read_repo_password(\"Please enter your password\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 0 == read_repo_password(\n        question=\"Please enter the password for your git repository\"\n    ).__len__()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert read_repo_password(\"Input your password:\") != read_repo_password", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert read_repo_password(\"enter a password\") != \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert read_repo_password('test') != 'test1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert read_repo_password(\"Enter password for bitbucket.org\") == \"foobar\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert read_repo_password(\"Please enter a password:\") == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert read_repo_password(\"password\") != \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert len(read_repo_password(\"Question\")) > 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert len(read_repo_password(\"Enter password for 'repo'\"))>0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert read_repo_password('1234') == '1234'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert read_repo_password('password: ') != None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert read_repo_password('Please enter your password: ') is not None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 1 == len(read_repo_password('Enter the password for the repo '))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 10 == len(read_repo_password('Please enter your password'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 123 == read_repo_password('Enter your repo password')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 2 == len(read_repo_password(\"Testing read_repo_password function\").split())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 8 < len(generate_ssh_password(read_repo_password(\"secret\"), read_repo_password(\"secret\"))) < 128", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert read_repo_password(\"Input your password:\") == read_repo_password(\"Input your password:\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert read_repo_password(\"Input your password:\") != read_repo_password(\"Input your password:\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert read_repo_password(\"test\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert read_repo_password(\"This is a question\") == \"This is an answer\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1 == len(read_repo_password(\"Testing read_repo_password function\").split())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert read_repo_password('test') == 'test'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert type(read_repo_password(\"Question\")) == str", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 8 < len(read_repo_password(\"secret\")) < 128", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 16 == len(read_repo_password(\"Input a string with 16 characters: \"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert read_repo_password(\"Input your password:\") != \"MyPassword\""]}
{"problem_ids": 123, "project": "test-apps/cookiecutter", "focal_function": "def read_user_choice(var_name, options):\n    \"\"\"Prompt the user to choose from several options for the given variable.\n\n    The first item will be returned if no input happens.\n\n    :param str var_name: Variable as specified in the context\n    :param list options: Sequence of options that are available to select from\n    :return: Exactly one item of ``options`` that has been chosen by the user\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    if not isinstance(options, list):\n        raise TypeError\n\n    if not options:\n        raise ValueError\n\n    choice_map = OrderedDict(\n        ('{}'.format(i), value) for i, value in enumerate(options, 1)\n    )\n    choices = choice_map.keys()\n    default = '1'\n\n    choice_lines = ['{} - {}'.format(*c) for c in choice_map.items()]\n    prompt = '\\n'.join(\n        (\n            'Select {}:'.format(var_name),\n            '\\n'.join(choice_lines),\n            'Choose from {}'.format(', '.join(choices)),\n        )\n    )\n\n    user_choice = click.prompt(\n        prompt, type=click.Choice(choices), default=default, show_choices=False\n    )\n    return choice_map[user_choice]", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef read_user_choice(var_name, options):\n    \"\"\"Prompt the user to choose from several options for the given variable.\n\n    The first item will be returned if no input happens.\n\n    :param str var_name: Variable as specified in the context\n    :param list options: Sequence of options that are available to select from\n    :return: Exactly one item of ``options`` that has been chosen by the user\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    if not isinstance(options, list):\n        raise TypeError\n\n    if not options:\n        raise ValueError\n\n    choice_map = OrderedDict(\n        ('{}'.format(i), value) for i, value in enumerate(options, 1)\n    )\n    choices = choice_map.keys()\n    default = '1'\n\n    choice_lines = ['{} - {}'.format(*c) for c in choice_map.items()]\n    prompt = '\\n'.join(\n        (\n            'Select {}:'.format(var_name),\n            '\\n'.join(choice_lines),\n            'Choose from {}'.format(', '.join(choices)),\n        )\n    )\n\n    user_choice = click.prompt(\n        prompt, type=click.Choice(choices), default=default, show_choices=False\n    )\n    return choice_map[user_choice]", "entry_point": "read_user_choice", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert read_user_choice('answer', [1, 2, 3]) == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert read_user_choice(\"test\",[\"a\",\"b\",\"c\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 1 == read_user_choice('var1',[1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert read_user_choice(\"option\", [\"a\", \"b\", \"c\"]) == \"c\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 3 == read_user_choice(\"\", [3,2,1,4])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert read_user_choice('answer', [1, 2, 3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert read_user_choice('hello', ['world', 'fred', 'jim']) == 'world'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 1 == read_user_choice(\"a\", [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 2 == read_user_choice(\"num\", [2,1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == read_user_choice(\"num\", [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert read_user_choice('var_name', [1,2,3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert read_user_choice('var_name', [1]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert read_user_choice('path', ['/home/user1/']) == '/home/user1/'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert \"test\" == read_user_choice(\"my_choice\", [\"test\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 1 == read_user_choice(\"fake_var\", [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert read_user_choice('x', [1, 2, 3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 1 == read_user_choice(\"\", [1,3,2,4])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 'test' == read_user_choice('var', ['test'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert read_user_choice('abc', ['2', '3', '5']) == '3'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert read_user_choice('hello', ['fred', 'jim']) == 'fred'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert read_user_choice(\"choice\", [\"A\"]) == \"A\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert read_user_choice('var', ['a','b','c']) == 'a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert read_user_choice(\"variable\",\"[1,2,3]\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert read_user_choice(\"hi\", [\"hi\",\"hello\",\"howdy\"]) == \"hi\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 3 == read_user_choice(\"\", [3,1,2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert read_user_choice(\"test\",[\"a\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert read_user_choice('c', ['a','b','c']) == 'a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 'a' == read_user_choice(\"test\", ['a','b','c'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert read_user_choice(\"project_name\", []) == \"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert read_user_choice('var', [1,2,3,4]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert read_user_choice(\"input\",[\"a\",\"b\",\"c\"])==\"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert read_user_choice(\"variable\",\"[1,2,3]\") == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 1 == read_user_choice('1', [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 'test' == read_user_choice('var', ['test', 'test'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert read_user_choice(\"input\",[\"a\"])==\"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 3 == read_user_choice('var', [1,2,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 1 == read_user_choice(\"a\", [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 1 == read_user_choice(\"test\", [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 1 == read_user_choice('var1',[1,2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 1 == read_user_choice('1', [1, 2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 2 == read_user_choice(\"\", [2,3,1,4])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert read_user_choice('var2', ['A', 'B', 'C']) == 'A'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert read_user_choice('y', ['three', 'four']) == 'three'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert \"a\" == read_user_choice(\"my_choice\", [\"a\", \"b\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert read_user_choice(\"var_name\", [\"a\",\"b\",\"c\"]) == \"b\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert read_user_choice(\"var_name\", [1,2,3]) == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert read_user_choice(\"x\", [1, 2, 3]) == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 1 == read_user_choice('1', [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert read_user_choice(\"variable\",\"[1,2,3]\") == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 2 == read_user_choice(\"test\", [1,2,3], 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert read_user_choice('test', [1, 2, 3, 4]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 2 == read_user_choice('var1',[2,1,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert read_user_choice('var1', [1, 2, 3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 2 == read_user_choice(\"test\", [\"first\", \"second\", \"third\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 1 == read_user_choice(\"\", [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert read_user_choice('', ['1', '2', '3']) != '11'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 1 == read_user_choice('var_name', [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert read_user_choice(\"test\", ['1','2','3','4']) == '1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert read_user_choice('', ['1', '2', '3']) != '3'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert read_user_choice(\"hi\", [\"hello\",\"howdy\"]) == \"hello\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert read_user_choice(\"var_name\", [1,2,3]) == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert read_user_choice('name', ['Alice', 'Bob', 'Cedric']) == 'Alice'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert 2 == read_user_choice(\"test\", [1,2,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert read_user_choice('x', ['one', 'two']) == 'one'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert read_user_choice(\"option\", [\"a\", \"b\", \"c\"]) == \"b\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert read_user_choice(\"x\", [1, 2, 3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert read_user_choice('var_name', [1,2,3,4,5,6,7,8,9]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 1 == read_user_choice(\"test\", [1,2,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert read_user_choice(\"choice\", [\"A\", \"B\"]) == \"A\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert 1 == read_user_choice(\"test\", [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert '2' == read_user_choice('x', ['1', '2'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert read_user_choice('b', [True,False]) == True", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 2 == read_user_choice(\"num\", [2,1,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert read_user_choice(\"var_name\", [1,2,3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert read_user_choice(\"var_name\", [1,2,3,4,5]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert read_user_choice(\"project_name\", [\"a\",\"b\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert read_user_choice('var_name', ['str1', 'str2', 'str3']) == 'str1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 1 == read_user_choice(\"\", [1,2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert read_user_choice(\"test\", [\"a\", \"b\", \"c\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert read_user_choice(\"option\", [\"a\", \"b\", \"c\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert read_user_choice('', ['1', '2', '3']) == '1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert read_user_choice(\"project_name\", [\"Django\", \"Flask\", \"Python\"]) == \"Django\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert 2 == read_user_choice('var1',[2,1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 1 == read_user_choice('var', [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 1 == read_user_choice('x', [1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert 1 == read_user_choice(\"\", [1,2,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert 1 == read_user_choice(\"my_choice\", [1,2,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 'test' == read_user_choice('var', ['test', 'test', 'test'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert 2 == read_user_choice('number of parameters', [1, 2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert read_user_choice(\"x\", [1, 2, 3]) == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert 2 == read_user_choice('2', [1, 2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert read_user_choice('abc', ['2', '3', '5']) == '2'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert read_user_choice('var3', ['Apple', 'Banana', 'Cantaloupe']) == 'Apple'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert \"test\" == read_user_choice(\"my_choice\", [\"test\", \"test2\", \"test3\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert read_user_choice('var_name', ['1']) == '1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert 2 == read_user_choice(\"a\", [1, 2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 1 == read_user_choice('a', [1,2,3,4,5])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert 1 == read_user_choice(\"num\", [1,2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert read_user_choice(\"test\",[1,2,3])==1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert 2 == read_user_choice(\"\", [2,3,1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert 3 == read_user_choice('3', [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert 3 == read_user_choice('var1',[3,2,1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert 3 == read_user_choice('var_name', ['a', 'b', 'c'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    assert read_user_choice('var', [1,2,3]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    assert 2 == read_user_choice('2', [1, 2, 3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    assert 2 == read_user_choice(\"\", [2,1,3])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    assert read_user_choice(\"Test\", [1,2,3,4,5,6]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert 1 == read_user_choice('foo', [1,2])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert 2 == read_user_choice('var_name', ['a', 'b'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert read_user_choice('a', [1,2,3,4,5]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    assert read_user_choice('x', [1]) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    assert 2 == read_user_choice(\"\", [2,1])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert read_user_choice(\"var_name\", [\"a\",\"b\",\"c\"]) == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    assert read_user_choice('', ['1', '2', '3']) != '4'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    assert read_user_choice(\"name\", ['a','b','c']) == 'a'"]}
{"problem_ids": 125, "project": "test-apps/cookiecutter", "focal_function": "def read_user_dict(var_name, default_value):\n    \"\"\"Prompt the user to provide a dictionary of data.\n\n    :param str var_name: Variable as specified in the context\n    :param default_value: Value that will be returned if no input is provided\n    :return: A Python dictionary to use in the context.\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    if not isinstance(default_value, dict):\n        raise TypeError\n\n    default_display = 'default'\n\n    user_value = click.prompt(\n        var_name, default=default_display, type=click.STRING, value_proc=process_json\n    )\n\n    if user_value == default_display:\n        # Return the given default w/o any processing\n        return default_value\n    return user_value", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef process_json(user_value):\n    \"\"\"Load user-supplied value as a JSON dict.\n    :param str user_value: User-supplied value to load as a JSON dict\n    \"\"\"\n\ndef read_user_dict(var_name, default_value):\n    \"\"\"Prompt the user to provide a dictionary of data.\n\n    :param str var_name: Variable as specified in the context\n    :param default_value: Value that will be returned if no input is provided\n    :return: A Python dictionary to use in the context.\n    \"\"\"\n    # Please see https://click.palletsprojects.com/en/7.x/api/#click.prompt\n    if not isinstance(default_value, dict):\n        raise TypeError\n\n    default_display = 'default'\n\n    user_value = click.prompt(\n        var_name, default=default_display, type=click.STRING, value_proc=process_json\n    )\n\n    if user_value == default_display:\n        # Return the given default w/o any processing\n        return default_value\n    return user_value", "entry_point": "read_user_dict", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert isinstance(read_user_dict('var_name', {'default': 'value'}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert read_user_dict(\"variable\", {\"b\": \"b\"}) == {\"b\": \"b\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert read_user_dict(\"var\", {\"a\":\"b\"}) == {\"a\":\"b\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert read_user_dict(\"value\", {\"a\":1, \"b\":2}) == {\"a\":1, \"b\":2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert read_user_dict(\"value\", 5) == 5", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert read_user_dict('new_dict', {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert read_user_dict(\"text\", 0) == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert type(read_user_dict('', {'a':1, 'b':2})) == dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert read_user_dict(\"variable\", {\"c\": \"c\"}) == {\"c\": \"c\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert read_user_dict(\"var7\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert {'a': 1} == read_user_dict('d', {'a': 1})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 5 == len(read_user_dict('test', default_value={'a': 1, 'b':2, 'c':3, 'd':4, 'e':5}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert read_user_dict(\"var11\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert read_user_dict('test', {'test':'value'}) == {'test':'value'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert {'foo': 'bar', 'bar': 'foo'} == read_user_dict('some_key', {'foo': 'bar', 'bar': 'foo'})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert read_user_dict('test', {'a': 'b'}) == {'a': 'b'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert read_user_dict(\"var9\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert read_user_dict('var_name', {'test': 'test'}) == {'test': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert read_user_dict(\"name\", {\"name\": \"john\"}) == {\"name\": \"john\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert read_user_dict(\"var_name\", dict()) == read_user_dict(\"var_name\", {'a':1, 'b':2})", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 3 == len(read_user_dict('dict_var_name', {'a': 1, 'b': 2, 'c': 3}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert read_user_dict(\"key\", {\"k1\": \"v1\", \"k2\": \"v2\"}) == {\"k1\": \"v1\", \"k2\": \"v2\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert read_user_dict(\"hello\", {\"test\": \"test2\"}) == {\"test\": \"test2\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert isinstance(read_user_dict(\"var_name\", {\"test\": \"test\"}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert read_user_dict(\"var1\", {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert read_user_dict('test_dict',{'a': 1}) == {'a': 1}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert read_user_dict(\"test\", [{\"hello\": \"world\"}]) == [{\"hello\": \"world\"}]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert read_user_dict(\"var10\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert read_user_dict('i',1) == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert read_user_dict(\"hello\", {}) == 'hello'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert read_user_dict(\"var13\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert read_user_dict('dict_var', {'a': 'aaa'}) == {'a': 'aaa'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert read_user_dict('a', {'a':1}) == {'a':1}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert type(read_user_dict(\"var_name\", {\"var1\":\"default\"})) is dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert read_user_dict(\"test\", default_value = {\"test1\": \"test2\"}) == {\"test1\": \"test2\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert read_user_dict('a', {'a':1}) ==  {'a':1}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert isinstance(read_user_dict(\"var_name\", {\"key\": \"value\"}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert read_user_dict('MyDict', {1: 2, 'a': 'b'}) == {1: 2, 'a': 'b'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert isinstance(read_user_dict(\"var_name\", \"default_value\"), str)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert read_user_dict(\"text\", {\"x\": \"y\"}) == {\"x\": \"y\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert read_user_dict(\"text\", \"a\") == \"a\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert read_user_dict('some_var', {\"hi\":\"hey\"}) == {\"hi\":\"hey\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert read_user_dict(\"some_dict\", {\"a\":1, \"b\":2, \"c\":3}) == {\"a\":1, \"b\":2, \"c\":3}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert type(read_user_dict(\"var_name\", {\"var1\":\"default\", \"var2\":\"default\", \"var3\":\"default\"})) is dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 1 == len(read_user_dict('a', {'a':1}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert read_user_dict(\"test\", {\"hello\": \"world\"}) == {\"hello\": \"world\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert read_user_dict('test', {1: {1: 2}}) == {1: {1: 2}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert isinstance(read_user_dict('dict_var', {'a': 'aaa'}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert read_user_dict(\"var6\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert isinstance(read_user_dict(\"mydict\", { 'a' : 1, 'b': 2}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert read_user_dict('test', {1: 2}) == {1: 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert type(read_user_dict(\"var_name\", {\"var1\":\"default\", \"var2\":\"default\"})) is dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert read_user_dict(\"var\", {\"a\":\"b\"}) != \"default\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert read_user_dict('test', {\"a\": 1}) == {\"a\": 1}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert isinstance(read_user_dict(\"test_dict\", {\"test\":\"test\"}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert type(read_user_dict('test_name', {'test_key':'test_value'})) == dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert isinstance(read_user_dict('some_variable_name', {}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert isinstance(read_user_dict(\"var_name\", dict()), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert read_user_dict('var_name', default_value={'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert read_user_dict(\"var8\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert isinstance(read_user_dict('test', {'a':1,'b':2}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert read_user_dict(\"test\", {\"hello\": {\"world\": \"hi\"}}) == {\"hello\": {\"world\": \"hi\"}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert read_user_dict(\"var4\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert read_user_dict(\"var3\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert read_user_dict(\"var2\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 1 == read_user_dict('name', 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert read_user_dict(\"var12\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 1 == read_user_dict('test', default_value={'a': 1, 'b':2, 'c':3, 'd':4, 'e':5})['a']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert read_user_dict(\"value\", \"default\") == \"default\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert isinstance(read_user_dict(\"user_dict\", {}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert isinstance(read_user_dict('i',{'a':'b'}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert read_user_dict('var_name', {'test': 'test'}) != 'test'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert read_user_dict(\"hello\", {}) == 'default'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert read_user_dict(\"var5\", {\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert isinstance(read_user_dict(\"var\", {\"a\":\"b\"}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert read_user_dict(\"variable\", {\"a\": \"a\"}) == {\"a\": \"a\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert isinstance(read_user_dict('var_name', default_value={'a': 1, 'b': 2, 'c': 3}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert isinstance(read_user_dict('dummy', {}), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert read_user_dict(\"user_dict\", {\"a\": 1}) == {\"a\": 1}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert read_user_dict('test', {}) == {}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert type(read_user_dict(\"var_name\", {})) is dict", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert read_user_dict('var_name', {\"a\":\"1\", \"b\":\"2\"}) == {\"a\":\"1\", \"b\":\"2\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert isinstance(read_user_dict('var_name', {\"a\":\"1\", \"b\":\"2\"}), dict)"]}
{"problem_ids": 127, "project": "test-apps/cookiecutter", "focal_function": "def prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):\n    \"\"\"Prompt user with a set of options to choose from.\n\n    Each of the possible choices is rendered beforehand.\n    \"\"\"\n    rendered_options = [render_variable(env, raw, cookiecutter_dict) for raw in options]\n\n    if no_input:\n        return rendered_options[0]\n    return read_user_choice(key, rendered_options)", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\ndef read_user_choice(var_name, options):\n    \"\"\"Prompt the user to choose from several options for the given variable.\n    The first item will be returned if no input happens.\n    :param str var_name: Variable as specified in the context\n    :param list options: Sequence of options that are available to select from\n    :return: Exactly one item of ``options`` that has been chosen by the user\n    \"\"\"\n\ndef render_variable(env, raw, cookiecutter_dict):\n    \"\"\"Render the next variable to be displayed in the user prompt.\n    Inside the prompting taken from the cookiecutter.json file, this renders\n    the next variable. For example, if a project_name is \"Peanut Butter\n    Cookie\", the repo_name could be be rendered with:\n    `{{ cookiecutter.project_name.replace(\" \", \"_\") }}`.\n    This is then presented to the user as the default.\n    :param Environment env: A Jinja2 Environment object.\n    :param raw: The next value to be prompted for by the user.\n    :param dict cookiecutter_dict: The current context as it's gradually\n    being populated with variables.\n    :return: The rendered value for the default variable.\n    \"\"\"\n\ndef prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):\n    \"\"\"Prompt user with a set of options to choose from.\n\n    Each of the possible choices is rendered beforehand.\n    \"\"\"\n    rendered_options = [render_variable(env, raw, cookiecutter_dict) for raw in options]\n\n    if no_input:\n        return rendered_options[0]\n    return read_user_choice(key, rendered_options)", "entry_point": "prompt_choice_for_config", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"\", [1, 2], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 1 == prompt_choice_for_config(\n        cookiecutter_dict={'x':1},\n        env=StrictEnvironment(undefined=StrictUndefined),\n        key='x',\n        options=['1', '2', '3'],\n        no_input=False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 12 == prompt_choice_for_config({}, StrictEnvironment, '', [12], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert \"a\" == prompt_choice_for_config({}, StrictEnvironment(), \"test\", [\"a\", \"b\", \"c\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), '', ['1', '2'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert prompt_choice_for_config({}, StrictEnvironment(), \"repo_name\", [\"one\", \"two\"], False) == \"one\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert prompt_choice_for_config({'name': 'peanut-butter'}, StrictEnvironment, 'name', ['Peanut Butter Cookie', 'Jelly Cookie', 'Chocolate Cookie'], False) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert prompt_choice_for_config({'cookiecutter':{'project_name':'abc'}}, StrictEnvironment(), 'project_name', ['a','b'], False) == 'a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert prompt_choice_for_config({'project_name': 'foo'}, StrictEnvironment(), \"project_name\", ['foo', 'bar'], False) == \"foo\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"project_name\", [\"1\", \"2\", \"3\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 10 == prompt_choice_for_config({'my_var': 10}, None, 'my_var', [0, 10], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 1 == prompt_choice_for_config({'project_name': 'abc'}, StrictEnvironment, 'project_name', ['1', '2'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 12 == prompt_choice_for_config({}, StrictEnvironment, '', [12], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert prompt_choice_for_config({'name': 'Peanut Butter Cookie'}, StrictEnvironment, 'name', ['Peanut Butter Cookie', 'Jelly Cookie', 'Chocolate Cookie'], False) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 1 == prompt_choice_for_config(None, None, None, [1], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"test\", [\"1\", \"2\"], no_input=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert prompt_choice_for_config({'project_name': 'Peanut Butter Cookie'}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie', 'Brownies'], False) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'choices', ['1', '2', '3'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert prompt_choice_for_config({'foo': 'bar'}, StrictEnvironment(), 'project_name', ['Peanut butter cookie', 'Jelly chocolate cake'], False) == 'Peanut butter cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert prompt_choice_for_config({}, StrictEnvironment(), \"test_variable\", [\"option_1\", \"option_2\"], False) == \"option_1\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert prompt_choice_for_config(cookiecutter_dict={'project_name': 'Test'}, env=StrictEnvironment, key='key', options=['1', '2', '3'], no_input=False) == '1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), 'a', ['1', '2'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), '', [1, 2], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 1 == prompt_choice_for_config(None, None, None, [1], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert prompt_choice_for_config({'project_name': 'Peanut Butter Cookie'}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie', 'Brownies'], True) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 1 == prompt_choice_for_config(1, 2, 3, 4, 5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert prompt_choice_for_config({}, StrictEnvironment(), \"repo_name\", [\"one\", \"two\"], True) == \"one\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 'yes' == prompt_choice_for_config(\n        {'name_dict': 'yes'}, StrictEnvironment(), 'name_dict', ['yes', 'no'], False\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 42 == prompt_choice_for_config({}, StrictEnvironment(), 'foo', [42], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert prompt_choice_for_config({'cookiecutter':{'project_name':'abc'}}, StrictEnvironment(), 'project_name', ['a','b'], True) == 'a'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 1 == prompt_choice_for_config({'name': 'foo'}, None, 'key', [1, 2], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"\", [\"1\", \"2\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"test\", [\"1\", \"2\"], no_input=False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert prompt_choice_for_config({\"project_name\": \"Peanut Butter Cookies\"}, None, \"repo_name\", [\"peanut_butter_cookies\"], True) == \"peanut_butter_cookies\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert prompt_choice_for_config({'project_name': 'Peanut Butter Cookie'}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie', 'Peanut Cookie', 'Cookie Butter'], True) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 1 == prompt_choice_for_config({'project_name': 'Tubby Duck'}, StrictEnvironment(), 'how_many', [1, 2], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert prompt_choice_for_config({'name': 'Peanut Butter Cookie'}, StrictEnvironment, 'name', ['Peanut Butter Cookie', 'Jelly Cookie', 'Chocolate Cookie'], True) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"project_name\", [\"1\", \"2\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 123 == prompt_choice_for_config(OrderedDict(), StrictEnvironment(), \"key\", [123], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), 'project_name',\n        [\"Peanut Butter Cookie\", \"Jelly Cookie\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"cookiecutter.project_name\", [\"1\", \"2\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'project_name', [1,2], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 2 == prompt_choice_for_config(None, None, None, [\"1\", \"2\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 2 == prompt_choice_for_config({'a': 1}, StrictEnvironment(), 'a', ['1', '2'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"project_name\", [\"1\", \"2\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 2 == prompt_choice_for_config(None, None, None, [\"1\", \"2\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert prompt_choice_for_config({'project_name': 'Cookie'}, StrictEnvironment(), 'repo_name', ['{{ cookiecutter.project_name.replace(\" \", \"_\") }}', '{{ cookiecutter.project_name|lower }}'], False) == 'Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"key\", [\"1\", \"2\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 1 == prompt_choice_for_config({\"project_name\": \"PeanutButterCookie\"}, None, \"repo_name\", [\"1\", \"2\", \"3\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'p', [1], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"test\", [1, 2, 3], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 10 == prompt_choice_for_config({'my_var': 10}, None, 'my_var', [0, 10], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 2 == prompt_choice_for_config({}, StrictEnvironment(), \"test\", [\"a\", \"b\", \"c\"], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert prompt_choice_for_config({'name': 'peanut-butter'}, StrictEnvironment, 'name', ['Peanut Butter Cookie', 'Jelly Cookie', 'Chocolate Cookie'], True) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), '', ['1', '2'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 1 == prompt_choice_for_config({'project_name': 'abc'}, StrictEnvironment, 'project_name', ['1', '2'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'project_name', [1,2], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert 1 == prompt_choice_for_config({'a': 'b'}, StrictEnvironment(), 'c', ['1', '2'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), 'test', ['1', '2', '3'], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 3 == prompt_choice_for_config({}, StrictEnvironment(), 'test', ['1', '2', '3'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert prompt_choice_for_config({'project_name': 'Peanut Butter Cookie'}, StrictEnvironment(), 'project_name', ['Peanut Butter Cookie', 'Peanut Cookie', 'Cookie Butter'], False) == 'Peanut Butter Cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert prompt_choice_for_config({'foo': 'bar'}, StrictEnvironment(), 'project_name', ['Peanut butter cookie', 'Jelly chocolate cake'], True) == 'Peanut butter cookie'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert 10 == prompt_choice_for_config({\"a\": 10}, StrictEnvironment(), \"a\", [10, 20, 30], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 1 == prompt_choice_for_config(dict(), StrictEnvironment(), \"\", [1, 2], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert prompt_choice_for_config({\"project_name\": \"Test\"}, StrictEnvironment(), \"lol\", [\"yes\", \"no\"], False) == \"yes\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), '', [1, '2'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 123 == prompt_choice_for_config(OrderedDict(), StrictEnvironment(), \"key\", [123], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert prompt_choice_for_config({'project_name': 'test123'}, None, 'project_name', ['test456', 'test789'], False) == 'test456'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 42 == prompt_choice_for_config(\n        {'name_dict': 42}, StrictEnvironment(), 'name_dict', [42], False\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"\", [\"1\", \"2\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert '1' == prompt_choice_for_config({}, StrictEnvironment(), 'a', ['1', '2'], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert \"2\" == prompt_choice_for_config({\"test\": \"{{ cookiecutter.test }} is {{ cookiecutter.test|string|upper }}\"}, StrictEnvironment(), \"test\", [\"1\", \"2\"], no_input=False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"project_name\", [\"1\", \"2\", \"3\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"\", [1, 2], True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert 1 == prompt_choice_for_config({}, StrictEnvironment(), \"cookiecutter.project_name\", [\"1\", \"2\"], False)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 1 == prompt_choice_for_config(\n        cookiecutter_dict={'x':1},\n        env=StrictEnvironment(undefined=StrictUndefined),\n        key='x',\n        options=['1', '2', '3'],\n        no_input=True)"]}
{"problem_ids": 128, "project": "test-apps/cookiecutter", "focal_function": "def prompt_for_config(context, no_input=False):\n    \"\"\"Prompt user to enter a new config.\n\n    :param dict context: Source for field names and sample values.\n    :param no_input: Prompt the user at command line for manual configuration?\n    \"\"\"\n    cookiecutter_dict = OrderedDict([])\n    env = StrictEnvironment(context=context)\n\n    # First pass: Handle simple and raw variables, plus choices.\n    # These must be done first because the dictionaries keys and\n    # values might refer to them.\n    for key, raw in context['cookiecutter'].items():\n        if key.startswith('_') and not key.startswith('__'):\n            cookiecutter_dict[key] = raw\n            continue\n        elif key.startswith('__'):\n            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)\n            continue\n\n        try:\n            if isinstance(raw, list):\n                # We are dealing with a choice variable\n                val = prompt_choice_for_config(\n                    cookiecutter_dict, env, key, raw, no_input\n                )\n                cookiecutter_dict[key] = val\n            elif not isinstance(raw, dict):\n                # We are dealing with a regular variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input:\n                    val = read_user_variable(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    # Second pass; handle the dictionaries.\n    for key, raw in context['cookiecutter'].items():\n        # Skip private type dicts not ot be rendered.\n        if key.startswith('_') and not key.startswith('__'):\n            continue\n\n        try:\n            if isinstance(raw, dict):\n                # We are dealing with a dict variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input and not key.startswith('__'):\n                    val = read_user_dict(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    return cookiecutter_dict", "module": "cookiecutter.prompt", "code": "import json\nfrom collections import OrderedDict\nimport click\nfrom jinja2.exceptions import UndefinedError\nfrom cookiecutter.environment import StrictEnvironment\nfrom cookiecutter.exceptions import UndefinedVariableInTemplate\n\nclass StrictEnvironment(ExtensionLoaderMixin, Environment):\n    \"\"\"Create strict Jinja2 environment.\n\n    Jinja2 environment will raise error on undefined variable in template-\n    rendering context.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Set the standard Cookiecutter StrictEnvironment.\n\n        Also loading extensions defined in cookiecutter.json's _extensions key.\n        \"\"\"\n\nclass UndefinedVariableInTemplate(CookiecutterException):\n    \"\"\"\n    Exception for out-of-scope variables.\n\n    Raised when a template uses a variable which is not defined in the\n    context.\n    \"\"\"\n\n    def __init__(self, message, error, context):\n        \"\"\"Exception for out-of-scope variables.\"\"\"\n\n    def __str__(self):\n        \"\"\"Text representation of UndefinedVariableInTemplate.\"\"\"\n\ndef read_user_variable(var_name, default_value):\n    \"\"\"Prompt user for variable and return the entered value or given default.\n    :param str var_name: Variable of the context to query the user\n    :param default_value: Value that will be returned if no input happens\n    \"\"\"\n\ndef read_user_dict(var_name, default_value):\n    \"\"\"Prompt the user to provide a dictionary of data.\n    :param str var_name: Variable as specified in the context\n    :param default_value: Value that will be returned if no input is provided\n    :return: A Python dictionary to use in the context.\n    \"\"\"\n\ndef render_variable(env, raw, cookiecutter_dict):\n    \"\"\"Render the next variable to be displayed in the user prompt.\n    Inside the prompting taken from the cookiecutter.json file, this renders\n    the next variable. For example, if a project_name is \"Peanut Butter\n    Cookie\", the repo_name could be be rendered with:\n    `{{ cookiecutter.project_name.replace(\" \", \"_\") }}`.\n    This is then presented to the user as the default.\n    :param Environment env: A Jinja2 Environment object.\n    :param raw: The next value to be prompted for by the user.\n    :param dict cookiecutter_dict: The current context as it's gradually\n    being populated with variables.\n    :return: The rendered value for the default variable.\n    \"\"\"\n\ndef prompt_choice_for_config(cookiecutter_dict, env, key, options, no_input):\n    \"\"\"Prompt user with a set of options to choose from.\n    Each of the possible choices is rendered beforehand.\n    \"\"\"\n\ndef prompt_for_config(context, no_input=False):\n    \"\"\"Prompt user to enter a new config.\n\n    :param dict context: Source for field names and sample values.\n    :param no_input: Prompt the user at command line for manual configuration?\n    \"\"\"\n    cookiecutter_dict = OrderedDict([])\n    env = StrictEnvironment(context=context)\n\n    # First pass: Handle simple and raw variables, plus choices.\n    # These must be done first because the dictionaries keys and\n    # values might refer to them.\n    for key, raw in context['cookiecutter'].items():\n        if key.startswith('_') and not key.startswith('__'):\n            cookiecutter_dict[key] = raw\n            continue\n        elif key.startswith('__'):\n            cookiecutter_dict[key] = render_variable(env, raw, cookiecutter_dict)\n            continue\n\n        try:\n            if isinstance(raw, list):\n                # We are dealing with a choice variable\n                val = prompt_choice_for_config(\n                    cookiecutter_dict, env, key, raw, no_input\n                )\n                cookiecutter_dict[key] = val\n            elif not isinstance(raw, dict):\n                # We are dealing with a regular variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input:\n                    val = read_user_variable(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    # Second pass; handle the dictionaries.\n    for key, raw in context['cookiecutter'].items():\n        # Skip private type dicts not ot be rendered.\n        if key.startswith('_') and not key.startswith('__'):\n            continue\n\n        try:\n            if isinstance(raw, dict):\n                # We are dealing with a dict variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input and not key.startswith('__'):\n                    val = read_user_dict(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    return cookiecutter_dict", "entry_point": "prompt_for_config", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}'}}, no_input=True) == {'project_name': '{{cookiecutter.project_name}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert prompt_for_config(context={\n            'cookiecutter': {\n                'project_name': 'Slartibartfast',\n                'author_name': 'Robert Frost',\n                'author_email': 'robert_frost@orminus.com',\n                'description': '{{cookiecutter.project_name}}: A project based on cookiecutter'\n            }\n        }) == {\n        'cookiecutter': {\n            'project_name': 'Slartibartfast',\n            'author_name': 'Robert Frost',\n            'author_email': 'robert_frost@orminus.com',\n            'description': 'Slartibartfast: A project based on cookiecutter'\n        }\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert prompt_for_config({\"cookiecutter\": {\"project_name\": \"{{cookiecutter.project_name}}\"}}) == {\"project_name\": \"Cookiecutter\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert prompt_for_config({'cookiecutter': {'__template': 'Lorem ipsum'}}, True) == {'__template': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert prompt_for_config(context, no_input=False) == {'project_name': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert prompt_for_config(context={'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}}) == {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert prompt_for_config({\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}, True) == {\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert prompt_for_config({\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}, no_input=True) == {\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert prompt_for_config(cookiecutter_dict={'project_name': '{{ cookiecutter.project_name }}', '__license__': '{{ cookiecutter.license }}'}) == {'project_name': 'My Project', '__license__': 'mit'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert prompt_for_config(context, no_input=True) == {'project_name': 'test', 'repo_name': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert prompt_for_config({'cookiecutter' : {'project_name' : '{{ cookiecutter.project_name|lower }}'}}) == {'project_name' : '{{ cookiecutter.project_name|lower }}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'repo_name': '{{cookiecutter.project_name|lower|replace(\" \", \"_\")}}'}}, no_input=True) == {'project_name': '{{cookiecutter.project_name}}', 'repo_name': '{{cookiecutter.project_name|lower|replace(\" \", \"_\")}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert prompt_for_config({'cookiecutter': {'_template': 'test', 'project_name': '{{ cookiecutter._template }}', 'project_slug': '{{ cookiecutter._template|lower }}', 'first_name': 'Raphael', 'last_name': 'Abolana'}}, no_input=True) == {'cookiecutter': {'_template': 'test', 'project_name': 'test', 'project_slug': 'test', 'first_name': 'Raphael', 'last_name': 'Abolana'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': '{{ cookiecutter.project_name.replace(\" \", \"_\") }}'}}, no_input=True) == {'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut_Butter_Cookie'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert prompt_for_config(context={'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}}, no_input=True) == {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 3 == prompt_for_config({'cookiecutter': {'number': 3, 'somestr': '{{ cookiecutter.number|int }}'}}, no_input=True)['somestr']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert prompt_for_config({'cookiecutter': {'project_name': False}}, no_input=True) == {'cookiecutter': {'project_name': 'False'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert prompt_for_config({'cookiecutter': {'_copy_without_render': 'Lorem ipsum'}}, True) == {'_copy_without_render': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'project_slug': '{{ cookiecutter.project_name|lower }}', 'project_description': 'A Django project'}}, no_input=True) == {'project_description': 'A Django project', 'project_slug': 'peanut butter cookie', 'project_name': 'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}'}}, no_input=False) == {'project_name': '{{cookiecutter.project_name}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert prompt_for_config({'cookiecutter': {'project_name': None}}, no_input=True) == {'cookiecutter': {'project_name': 'None'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 3 == prompt_for_config({'cookiecutter': {'number': 3, 'somestr': '{{ cookiecutter.number|int }}'}}, no_input=False)['somestr']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 3 == prompt_for_config({'cookiecutter': {'number': 3, 'somestr': '{{ cookiecutter.number|int }}'}}, no_input=False)['number']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert (prompt_for_config(context, False)) == {\n        'project_name': 'Yummy cookie',\n        'repo_name': 'yummy_cookie',\n        'author_name': 'Gregory C. Annis',\n        'author_email': 'gregory.c.annis@gmail.com',\n        'description': 'A delicious chocolate chip cookie',\n        'domain_name': 'yummy-cookie.com',\n        'owner': 'Gregory Annis',\n        'project_short_description': 'A delicious chocolate chip cookie',\n        'version': '0.1.0',\n        'year': 2017,\n        'cookiecutter': {\n            'project_name': 'Yummy cookie',\n            'repo_name': 'yummy_cookie',\n            'author_name': 'Gregory C. Annis',\n            'author_email': 'gregory.c.annis@gmail.com',\n            'description': 'A delicious chocolate chip cookie',\n            'domain_name': 'yummy-cookie.com',\n            'owner': 'Gregory Annis',\n            'project_short_description': 'A delicious chocolate chip cookie',\n            'version': '0.1.0',\n            'year': 2017\n        }\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.repo_name}}', 'repo_name': 'Peanut Butter Cookie'}}) == {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{ cookiecutter.repo_name|lower|replace(' ', '') }}', 'repo_name': 'Cookiecutter Python Library'}}) == {'cookiecutter': {'repo_name': 'Cookiecutter Python Library', 'project_name': 'cookiecutterpythonlibrary'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'app_name': '{{cookiecutter.app_name}}', 'redis_url': '{{cookiecutter.redis_url}}'}}, no_input=True) == {'project_name': 'Awesome', 'app_name': 'cookiecutter', 'redis_url': 'redis://redis:6379/0'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie'}}, no_input=True) == {'project_name': 'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert (prompt_for_config({\n            'cookiecutter': {\n                'full_name': 'User',\n                'email': 'user@example.com',\n                'github_username': 'user',\n                'project_name': 'Project',\n                'project_slug': 'project',\n                'project_short_description': 'A short description of the project.',\n                'version': '0.1.0',\n                'use_pytest': 'y',\n                'use_docker': 'y'\n            }\n        }) == {\n            'full_name': 'User',\n            'email': 'user@example.com',\n            'github_username': 'user',\n            'project_name': 'Project',\n            'project_slug': 'project',\n            'project_short_description': 'A short description of the project.',\n            'version': '0.1.0',\n            'use_pytest': 'y',\n            'use_docker': 'y'\n        })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert prompt_for_config({'cookiecutter': {'__template': 'Lorem ipsum'}}, False) == {'__template': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': '{{ cookiecutter.project_name.replace(\" \", \"_\") }}', '_copy_without_render': ['templates']}}, no_input=True) == {'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut_Butter_Cookie', '_copy_without_render': ['templates']}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert prompt_for_config({'cookiecutter': {'_copy_without_render': 'Lorem ipsum'}}, False) == {'_copy_without_render': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert prompt_for_config(cookiecutter_dict={'project_name': '{{ cookiecutter.project_name }}', '__license__': '{{ cookiecutter.license }}', 'license': {'BSD 2-Clause License': 'BSD-2-Clause', 'BSD 3-Clause License': 'BSD-3-Clause', 'GNU General Public License v2.0': 'GNU-GPLv2', 'GNU General Public License v3.0': 'GNU-GPLv3', 'MIT license': 'mit', 'Mozilla Public License 2.0': 'MPL-2.0'}}) == {'project_name': 'My Project', '__license__': 'mit', 'license': {'BSD 2-Clause License': 'BSD-2-Clause', 'BSD 3-Clause License': 'BSD-3-Clause', 'GNU General Public License v2.0': 'GNU-GPLv2', 'GNU General Public License v3.0': 'GNU-GPLv3', 'MIT license': 'mit', 'Mozilla Public License 2.0': 'MPL-2.0'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'project_slug': '{{ cookiecutter.project_name|lower }}', 'project_description': 'A Django project', 'package_name': '{{ cookiecutter.project_slug }}'}}, no_input=True) == {'package_name': 'peanut butter cookie', 'project_description': 'A Django project', 'project_slug': 'peanut butter cookie', 'project_name': 'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'foobar', 'project_slug': 'barfoo', 'project_description': 'A short description of the project.'}}) == {'_template': 'repo-template', '_templates_dir': '/home/pablo/Documents/pycon/cookiecutter-python-repo/cookiecutter', 'project_name': 'foobar', 'project_slug': 'barfoo', 'project_description': 'A short description of the project.'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert prompt_for_config({'cookiecutter': {'repo_name': 'Lorem ipsum'}}, False) == {'repo_name': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'app_name': '{{cookiecutter.app_name}}', 'redis_url': '{{cookiecutter.redis_url}}'}}) == {'project_name': 'Awesome', 'app_name': 'cookiecutter', 'redis_url': 'redis://redis:6379/0'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert prompt_for_config(context={'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}}, no_input=True, config_file='../files/cookiecutter.json') == {'project_name': '{{cookiecutter.project_name}}', 'domain': '{{cookiecutter.domain}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}', 'repo_name': '{{cookiecutter.project_name|lower|replace(\" \", \"_\")}}'}}) == {'project_name': '{{cookiecutter.project_name}}', 'repo_name': '{{cookiecutter.project_name|lower|replace(\" \", \"_\")}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 3 == len(prompt_for_config({'cookiecutter': {'test_var': 3}}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 3 == prompt_for_config({\n        \"cookiecutter\": {\n            \"project_name\": \"test-project\",\n            \"project_slug\": \"{{ cookiecutter.project_name|lower|replace(' ', '_')|replace('-', '_') }}\",\n            \"use_travis\": \"n\",\n            \"use_aws\": \"n\",\n            \"use_pycharm\": \"y\",\n            \"use_pipenv\": \"y\",\n            \"travis_token\": \"{{ cookiecutter.use_travis }}\",\n            \"aws_access_key_id\": \"{{ cookiecutter.use_aws }}\",\n            \"aws_secret_access_key\": \"{{ cookiecutter.use_aws }}\",\n            \"use_gitlab\": \"n\",\n            \"gitlab_token\": \"{{ cookiecutter.use_gitlab }}\",\n            \"use_github\": \"y\",\n            \"use_gitlab\": \"y\",\n            \"github_token\": \"{{ cookiecutter.use_github }}\",\n            \"gitlab_token\": \"{{ cookiecutter.use_gitlab }}\",\n            \"use_pycharm\": \"{{ cookiecutter.use_pycharm }}\",\n            \"use_pipenv\": \"{{ cookiecutter.use_pipenv }}\"\n        }\n    }, no_input=True)[\"project_name\"]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert prompt_for_config(context, no_input=True) == {'project_name': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', '_copy_without_render': '*.txt'}}, no_input=True) == {'_copy_without_render': '*.txt', 'project_name': 'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert prompt_for_config(context={'cookiecutter':{'project_name':'Peanut Butter Cookie'}},\\\n                              no_input=True) == {'project_name':'Peanut Butter Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert prompt_for_config({'cookiecutter': {'__copy_without_render': 'Lorem ipsum'}}, True) == {'__copy_without_render': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert prompt_for_config({'cookiecutter' : {'project_name': 'Peanut Butter Cookie', 'repo_name': '{{ cookiecutter.project_name.replace(\" \", \"_\") }}'}}) == {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut_Butter_Cookie'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert prompt_for_config(context) == {\n        '_copy_without_render': [\n            'project_name'\n        ],\n        '_template': 'https://github.com/audreyr/cookiecutter-pypackage.git',\n        'email': 'raphael.hack@gmail.com',\n        'full_name': 'Raphael',\n        'project_name': '1',\n        'project_slug': '1',\n        'release_date': '2019-07-10',\n        'version': '0.1.0',\n        'year': '2019'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert (prompt_for_config({\n            'cookiecutter': {\n                '_template': 'repo',\n                'full_name': 'User',\n                'email': 'user@example.com',\n                'github_username': 'user',\n                'project_name': 'Project',\n                'project_slug': 'project',\n                'project_short_description': 'A short description of the project.',\n                'version': '0.1.0',\n                'use_pytest': 'y',\n                'use_docker': 'y'\n            }\n        }) == {\n            '_template': 'repo',\n            'full_name': 'User',\n            'email': 'user@example.com',\n            'github_username': 'user',\n            'project_name': 'Project',\n            'project_slug': 'project',\n            'project_short_description': 'A short description of the project.',\n            'version': '0.1.0',\n            'use_pytest': 'y',\n            'use_docker': 'y'\n        })", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': '{{ cookiecutter.project_name.replace(\" \", \"_\") }}', '_copy_without_render': ['templates']}}, no_input=False) == {'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut_Butter_Cookie', '_copy_without_render': ['templates']}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}'}}, True) == {'project_name': '{{cookiecutter.project_name}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert prompt_for_config({\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}, no_input=False) == {\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert prompt_for_config({\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}, False) == {\"project_name\": \"{{cookiecutter.project_name|lower|replace(' ', '_')}}\"}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert prompt_for_config({'cookiecutter': {'_template': 'Lorem ipsum'}}, True) == {'_template': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert prompt_for_config({'cookiecutter':{'project_name': 'test', 'repo_name':'test', 'folder_name':'test'}},no_input=True) == {'project_name': 'test', 'repo_name':'test', 'folder_name':'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 2 == len(prompt_for_config({'cookiecutter': {'name': 'test', 'project': 'test2'}}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert prompt_for_config(\n        {'cookiecutter': {\n            \"project_name\": \"name\",\n            \"project_slug\": \"slug\",\n            \"source_file\": \"{{ cookiecutter.project_slug }}.py\",\n            \"config_file\": \"{{ cookiecutter.project_slug }}.yml\",\n        }},\n        no_input=True\n    ) == {\n        'project_name': 'name',\n        'project_slug': 'slug',\n        'source_file': 'slug.py',\n        'config_file': 'slug.yml',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert prompt_for_config({'cookiecutter': {'project_name': '{{cookiecutter.project_name}}'}}, False) == {'project_name': '{{cookiecutter.project_name}}'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 2 == len(prompt_for_config({'cookiecutter':{'project_name':'demo','repo_name':'demo','author_name':'demo','email':'demo@demo.com','description':'demo','domain_name':'demo','project_short_description':'demo'}}))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 3 == prompt_for_config({'cookiecutter': {'number': 3, 'somestr': '{{ cookiecutter.number|int }}'}}, no_input=True)['number']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert prompt_for_config({\n        'cookiecutter': {\n            'full_name': 'Raphael Guzman',\n            'email': 'raphael@mail.com',\n            'github_username': 'notraphael',\n            'project_name': 'Kivy Project'\n        }\n    }) == {\n        'full_name': 'Raphael Guzman',\n        'email': 'raphael@mail.com',\n        'github_username': 'notraphael',\n        'project_name': 'Kivy Project'\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Lorem ipsum', 'repo_name': 'Lorem ipsum'}}, False) == {'repo_name': 'Lorem ipsum', 'project_name': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert prompt_for_config(None, True) == {'_copy_without_render': '*', 'full_name': 'First and Last', 'email': 'example@example.com', 'github_username': 'example', 'project_short_description': 'A short description of the project.', 'version': '0.1.0', 'project_name': 'project_name', 'timezone': 'UTC', '__copy_without_render__': '*', 'project_slug': 'project_slug', 'now': '1970-01-01_00_00_00_000000', 'timezone_zone': 'UTC', 'timezone_zone_number': '0', 'timezone_zone_region': 'UTC', 'year': '1970', 'month': '01', 'day': '01', 'hour': '00', 'minute': '00', 'second': '00', 'timezone_region': 'UTC', 'timezone_zone_name': 'UTC'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert prompt_for_config({\n        \"cookiecutter\": {\n            \"_generated_files\": [\n                \"README.rst\"\n            ],\n            \"name\": \"test\"\n        }\n    }) == {\n        \"cookiecutter\": OrderedDict([('_generated_files', ['README.rst']), ('name', 'test')])\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert \"demo\" == prompt_for_config({'cookiecutter':{'project_name':'demo','repo_name':'demo','author_name':'demo','email':'demo@demo.com','description':'demo','domain_name':'demo','project_short_description':'demo'}})[0]['project_name']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert prompt_for_config({'cookiecutter': {'_template': 'Lorem ipsum'}}, False) == {'_template': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert prompt_for_config(context, no_input=True) == {\n        'full_name': 'Your Name',\n        'email': 'you@example.com',\n        'github_username': 'yourname',\n        'project_name': 'Your Project',\n        'project_short_description': 'A short description of the project.',\n        'version': '0.1.0',\n        'sphinx': {\n            'sphinx_copybutton': True,\n            'sphinx_disable_modules': [],\n            'sphinx_disable_test_code': False,\n            'sphinx_rtd_theme': True,\n            'sphinx_theme': 'sphinx_rtd_theme'\n        },\n        'use_pytest': {\n            'pytest_make_test': 'pytest',\n            'pytest_test_examples': True\n        },\n        'use_codecov': {\n            'codecov_token': 'yourtoken',\n            'codecov_add_before_script': True,\n            'codecov_add_after_success': True\n        },\n        'use_github_actions': {\n            'github_actions_python_version': '3.8',\n            'github_actions_install': [\n                'poetry install'\n            ],\n            'github_actions_test': [\n                'pytest'\n            ]\n        },\n        'use_pre_commit': {\n            'pre_commit_hooks': [\n                'black',\n                'flake8'\n            ]\n        },\n        'use_tox': {\n            'tox_requirements': [],\n            'tox_build_requirements': [\n                'poetry',\n                'pre-commit'\n            ],\n            'tox_default_envs': [\n                'py38',\n                'py39'\n            ],\n            'tox_testenv_extras': [\n                'black',\n                'flake8',\n                'isort',\n                'pre-commit',\n                'pytest'\n            ]\n        }\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert prompt_for_config({'cookiecutter': {'__copy_without_render': 'Lorem ipsum'}}, False) == {'__copy_without_render': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Lorem ipsum'}}, False) == {'project_name': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Lorem ipsum'}}, True) == {'project_name': 'Lorem ipsum'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert prompt_for_config({'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': '{{ cookiecutter.project_name.replace(\" \", \"_\") }}'}}, no_input=False) == {'cookiecutter': {'project_name': 'Peanut Butter Cookie', 'repo_name': 'Peanut_Butter_Cookie'}}"]}
{"problem_ids": 130, "project": "test-apps/cookiecutter", "focal_function": "def load(replay_dir, template_name):\n    \"\"\"Read json data from file.\"\"\"\n    if not isinstance(template_name, str):\n        raise TypeError('Template name is required to be of type str')\n\n    replay_file = get_file_name(replay_dir, template_name)\n\n    with open(replay_file, 'r') as infile:\n        context = json.load(infile)\n\n    if 'cookiecutter' not in context:\n        raise ValueError('Context is required to contain a cookiecutter key')\n\n    return context", "module": "cookiecutter.replay", "code": "import json\nimport os\nfrom cookiecutter.utils import make_sure_path_exists\n\ndef get_file_name(replay_dir, template_name):\n    \"\"\"Get the name of file.\"\"\"\n\ndef load(replay_dir, template_name):\n    \"\"\"Read json data from file.\"\"\"\n    if not isinstance(template_name, str):\n        raise TypeError('Template name is required to be of type str')\n\n    replay_file = get_file_name(replay_dir, template_name)\n\n    with open(replay_file, 'r') as infile:\n        context = json.load(infile)\n\n    if 'cookiecutter' not in context:\n        raise ValueError('Context is required to contain a cookiecutter key')\n\n    return context", "entry_point": "load", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert \"cookiecutter\" in load('', \"cookiecutter-pypackage\").keys()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert isinstance(load('test-data', 'test-template'), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 3 == load('tests/replay/valid', 'test_valid_json')['cookiecutter']['number']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert isinstance(load('./', 'template'), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert isinstance(load('', \"cookiecutter-pypackage\")[\"cookiecutter\"], dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert load('cookiecutter-pypackage', 'my_project') == {\n        \"cookiecutter\": {\n            \"_template\": \"cookiecutter-pypackage\",\n            \"author_email\": \"raphael@rapha-elfe.de\",\n            \"author_name\": \"Raphael Elfe\",\n            \"avatar_url\": \"https://avatars2.githubusercontent.com/u/9275670?v=3\",\n            \"description\": \"A simple Python project with a single command line utility.\",\n            \"license\": \"MIT\",\n            \"name\": \"my_project\",\n            \"open_source_license\": \"MIT\",\n            \"project_name\": \"my_project\",\n            \"project_short_description\": \"A simple Python project with a single command line utility.\",\n            \"repository_choices\": \"Private\",\n            \"repository_url\": \"\",\n            \"version\": \"0.1.0\"\n        }\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 3 == load('tests/replay/valid', 'test_valid_toml')['cookiecutter']['number']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 3 == load(\"replay_dir\", \"cookiecutter-pypackage\")['cookiecutter']['project_slug']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert \"cookiecutter\" == load(replay_dir, \"cookiecutter\")[\"cookiecutter\"]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert load(replay_dir, \"test\") == test_data", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert load('tests/fake-repo-tmpl', 'template1') == {\n        'cookiecutter': {\n            \"full_name\": \"Test User\",\n            \"email\": \"test@example.com\",\n            \"version\": \"0.1.0\",\n            \"use_pytest\": \"n\",\n            \"repo_name\": \"fake-project\",\n        }\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 3 == load('tests/replay/valid', 'test_valid_yaml')['cookiecutter']['number']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert isinstance(load(\"{{ cookiecutter.project_slug }}-replay\", \"{{ cookiecutter.project_slug }}\"), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert isinstance(load('cookiecutter-pypackage', 'my-project'), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert load('replay_dir', 'template_name') == { \"cookiecutter\": {}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert \"1\" == load(replay_dir, \"cookiecutter\")[\"cookiecutter\"]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert load('cookiecutter-pypackage', 'my_project')['cookiecutter']['name'] == 'my_project'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert isinstance(load('', \"cookiecutter-pypackage\"), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert isinstance(load(\"\", \"test\"), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert load('', '{{cookiecutter.project_slug}}') == {'cookiecutter': {'_template': '{{cookiecutter.project_slug}}', 'project_slug': '{{cookiecutter.project_slug}}'}}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert load(\"test_replay_dir\", \"test\")[\"cookiecutter\"][\"project_name\"] == \"test\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert load('./', 'template')['cookiecutter']['project_name'] == 'template'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert isinstance(dump('', \"cookiecutter-pypackage\", load('', \"cookiecutter-pypackage\")), None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert load('replay/replay', 'cookiecutter-djangonautic-replay')['cookiecutter'] == {'_template': 'cookiecutter-djangonautic'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 2 == len(load('cookiecutter-pypackage', 'pytest-plugin').keys())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert isinstance(load('replay_dump','cookiecutter-pypackage'), dict)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 'cookiecutter' in load('template', 'replay_test')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 3 == load('replay_dir', 'cookiecutter-use-api')['cookiecutter']['_template']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert load('replay_dir', 'test_template') == { 'cookiecutter' : {'cookiecutter_test1': 'hello', 'cookiecutter_test2': 'world', 'cookiecutter_test3': 'fun', 'cookiecutter_test4': 'yay', 'cookiecutter_test5': '1' } }"]}
{"problem_ids": 131, "project": "test-apps/cookiecutter", "focal_function": "def cookiecutter(\n    template,\n    checkout=None,\n    no_input=False,\n    extra_context=None,\n    replay=None,\n    overwrite_if_exists=False,\n    output_dir='.',\n    config_file=None,\n    default_config=False,\n    password=None,\n    directory=None,\n    skip_if_file_exists=False,\n    accept_hooks=True,\n):\n    \"\"\"\n    Run Cookiecutter just as if using it from the command line.\n\n    :param template: A directory containing a project template directory,\n        or a URL to a git repository.\n    :param checkout: The branch, tag or commit ID to checkout after clone.\n    :param no_input: Prompt the user at command line for manual configuration?\n    :param extra_context: A dictionary of context that overrides default\n        and user configuration.\n    :param replay: Do not prompt for input, instead read from saved json. If\n        ``True`` read from the ``replay_dir``.\n        if it exists\n    :param output_dir: Where to output the generated project dir into.\n    :param config_file: User configuration file path.\n    :param default_config: Use default values rather than a config file.\n    :param password: The password to use when extracting the repository.\n    :param directory: Relative path to a cookiecutter template in a repository.\n    :param accept_hooks: Accept pre and post hooks if set to `True`.\n    \"\"\"\n    if replay and ((no_input is not False) or (extra_context is not None)):\n        err_msg = (\n            \"You can not use both replay and no_input or extra_context \"\n            \"at the same time.\"\n        )\n        raise InvalidModeException(err_msg)\n\n    config_dict = get_user_config(\n        config_file=config_file, default_config=default_config,\n    )\n\n    repo_dir, cleanup = determine_repo_dir(\n        template=template,\n        abbreviations=config_dict['abbreviations'],\n        clone_to_dir=config_dict['cookiecutters_dir'],\n        checkout=checkout,\n        no_input=no_input,\n        password=password,\n        directory=directory,\n    )\n\n    template_name = os.path.basename(os.path.abspath(repo_dir))\n\n    if replay:\n        if isinstance(replay, bool):\n            context = load(config_dict['replay_dir'], template_name)\n        else:\n            path, template_name = os.path.split(os.path.splitext(replay)[0])\n            context = load(path, template_name)\n    else:\n        context_file = os.path.join(repo_dir, 'cookiecutter.json')\n        logger.debug('context_file is %s', context_file)\n\n        context = generate_context(\n            context_file=context_file,\n            default_context=config_dict['default_context'],\n            extra_context=extra_context,\n        )\n\n        # prompt the user to manually configure at the command line.\n        # except when 'no-input' flag is set\n        context['cookiecutter'] = prompt_for_config(context, no_input)\n\n        # include template dir or url in the context dict\n        context['cookiecutter']['_template'] = template\n\n        # include output+dir in the context dict\n        context['cookiecutter']['_output_dir'] = os.path.abspath(output_dir)\n\n        dump(config_dict['replay_dir'], template_name, context)\n\n    # Create project from local context and project template.\n    result = generate_files(\n        repo_dir=repo_dir,\n        context=context,\n        overwrite_if_exists=overwrite_if_exists,\n        skip_if_file_exists=skip_if_file_exists,\n        output_dir=output_dir,\n        accept_hooks=accept_hooks,\n    )\n\n    # Cleanup (if required)\n    if cleanup:\n        rmtree(repo_dir)\n\n    return result", "module": "cookiecutter.main", "code": "import logging\nimport os\nfrom cookiecutter.config import get_user_config\nfrom cookiecutter.exceptions import InvalidModeException\nfrom cookiecutter.generate import generate_context, generate_files\nfrom cookiecutter.prompt import prompt_for_config\nfrom cookiecutter.replay import dump, load\nfrom cookiecutter.repository import determine_repo_dir\nfrom cookiecutter.utils import rmtree\n\ndef get_user_config(config_file=None, default_config=False):\n    \"\"\"Return the user config as a dict.\n\n    If ``default_config`` is True, ignore ``config_file`` and return default\n    values for the config parameters.\n\n    If a path to a ``config_file`` is given, that is different from the default\n    location, load the user config from that.\n\n    Otherwise look up the config file path in the ``COOKIECUTTER_CONFIG``\n    environment variable. If set, load the config from this path. This will\n    raise an error if the specified path is not valid.\n\n    If the environment variable is not set, try the default config file path\n    before falling back to the default config values.\n    \"\"\"\n\nclass InvalidModeException(CookiecutterException):\n    \"\"\"\n    Exception for incompatible modes.\n\n    Raised when cookiecutter is called with both `no_input==True` and\n    `replay==True` at the same time.\n    \"\"\"\n\ndef generate_context(\n    context_file='cookiecutter.json', default_context=None, extra_context=None\n):\n    \"\"\"Generate the context for a Cookiecutter project template.\n\n    Loads the JSON file as a Python object, with key being the JSON filename.\n\n    :param context_file: JSON file containing key/value pairs for populating\n    the cookiecutter's variables.\n    :param default_context: Dictionary containing config to take into account.\n    :param extra_context: Dictionary containing configuration overrides\n    \"\"\"\n\ndef generate_files(\n    repo_dir,\n    context=None,\n    output_dir='.',\n    overwrite_if_exists=False,\n    skip_if_file_exists=False,\n    accept_hooks=True,\n):\n    \"\"\"Render the templates and saves them to files.\n\n    :param repo_dir: Project template input directory.\n    :param context: Dict for populating the template's variables.\n    :param output_dir: Where to output the generated project dir into.\n    :param overwrite_if_exists: Overwrite the contents of the output directory\n    if it exists.\n    :param accept_hooks: Accept pre and post hooks if set to `True`.\n    \"\"\"\n\ndef prompt_for_config(context, no_input=False):\n    \"\"\"Prompt user to enter a new config.\n\n    :param dict context: Source for field names and sample values.\n    :param no_input: Prompt the user at command line for manual configuration?\n    \"\"\"\n\ndef dump(replay_dir, template_name, context):\n    \"\"\"Write json data to file.\"\"\"\n\ndef load(replay_dir, template_name):\n    \"\"\"Read json data from file.\"\"\"\n\ndef determine_repo_dir(\n    template,\n    abbreviations,\n    clone_to_dir,\n    checkout,\n    no_input,\n    password=None,\n    directory=None,\n):\n    \"\"\"\n    Locate the repository directory from a template reference.\n\n    Applies repository abbreviations to the template reference.\n    If the template refers to a repository URL, clone it.\n    If the template is a path to a local repository, use it.\n\n    :param template: A directory containing a project template directory,\n    or a URL to a git repository.\n    :param abbreviations: A dictionary of repository abbreviation\n    definitions.\n    :param clone_to_dir: The directory to clone the repository into.\n    :param checkout: The branch, tag or commit ID to checkout after clone.\n    :param no_input: Prompt the user at command line for manual configuration?\n    :param password: The password to use when extracting the repository.\n    :param directory: Directory within repo where cookiecutter.json lives.\n    :return: A tuple containing the cookiecutter template directory, and\n    a boolean descriving whether that directory should be cleaned up\n    after the template has been instantiated.\n    :raises: `RepositoryNotFound` if a repository directory could not be found.\n    \"\"\"\n\ndef rmtree(path):\n    \"\"\"Remove a directory and all its contents. Like rm -rf on Unix.\n\n    :param path: A directory path.\n    \"\"\"\n\nlogger = logging.getLogger(__name__)\n\ndef cookiecutter(\n    template,\n    checkout=None,\n    no_input=False,\n    extra_context=None,\n    replay=None,\n    overwrite_if_exists=False,\n    output_dir='.',\n    config_file=None,\n    default_config=False,\n    password=None,\n    directory=None,\n    skip_if_file_exists=False,\n    accept_hooks=True,\n):\n    \"\"\"\n    Run Cookiecutter just as if using it from the command line.\n\n    :param template: A directory containing a project template directory,\n        or a URL to a git repository.\n    :param checkout: The branch, tag or commit ID to checkout after clone.\n    :param no_input: Prompt the user at command line for manual configuration?\n    :param extra_context: A dictionary of context that overrides default\n        and user configuration.\n    :param replay: Do not prompt for input, instead read from saved json. If\n        ``True`` read from the ``replay_dir``.\n        if it exists\n    :param output_dir: Where to output the generated project dir into.\n    :param config_file: User configuration file path.\n    :param default_config: Use default values rather than a config file.\n    :param password: The password to use when extracting the repository.\n    :param directory: Relative path to a cookiecutter template in a repository.\n    :param accept_hooks: Accept pre and post hooks if set to `True`.\n    \"\"\"\n    if replay and ((no_input is not False) or (extra_context is not None)):\n        err_msg = (\n            \"You can not use both replay and no_input or extra_context \"\n            \"at the same time.\"\n        )\n        raise InvalidModeException(err_msg)\n\n    config_dict = get_user_config(\n        config_file=config_file, default_config=default_config,\n    )\n\n    repo_dir, cleanup = determine_repo_dir(\n        template=template,\n        abbreviations=config_dict['abbreviations'],\n        clone_to_dir=config_dict['cookiecutters_dir'],\n        checkout=checkout,\n        no_input=no_input,\n        password=password,\n        directory=directory,\n    )\n\n    template_name = os.path.basename(os.path.abspath(repo_dir))\n\n    if replay:\n        if isinstance(replay, bool):\n            context = load(config_dict['replay_dir'], template_name)\n        else:\n            path, template_name = os.path.split(os.path.splitext(replay)[0])\n            context = load(path, template_name)\n    else:\n        context_file = os.path.join(repo_dir, 'cookiecutter.json')\n        logger.debug('context_file is %s', context_file)\n\n        context = generate_context(\n            context_file=context_file,\n            default_context=config_dict['default_context'],\n            extra_context=extra_context,\n        )\n\n        # prompt the user to manually configure at the command line.\n        # except when 'no-input' flag is set\n        context['cookiecutter'] = prompt_for_config(context, no_input)\n\n        # include template dir or url in the context dict\n        context['cookiecutter']['_template'] = template\n\n        # include output+dir in the context dict\n        context['cookiecutter']['_output_dir'] = os.path.abspath(output_dir)\n\n        dump(config_dict['replay_dir'], template_name, context)\n\n    # Create project from local context and project template.\n    result = generate_files(\n        repo_dir=repo_dir,\n        context=context,\n        overwrite_if_exists=overwrite_if_exists,\n        skip_if_file_exists=skip_if_file_exists,\n        output_dir=output_dir,\n        accept_hooks=accept_hooks,\n    )\n\n    # Cleanup (if required)\n    if cleanup:\n        rmtree(repo_dir)\n\n    return result", "entry_point": "cookiecutter", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 0 == cookiecutter(\n        template='tests/fake-repo-pre/',\n        checkout=None,\n        no_input=False,\n        extra_context=None,\n        replay=None,\n        overwrite_if_exists=False,\n        output_dir='.',\n        config_file=None,\n        default_config=False,\n        password=None,\n        directory=None,\n        skip_if_file_exists=False,\n        accept_hooks=True,\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 42 == cookiecutter(\"test\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert cookiecutter('cookiecutter-simple-py', {'project_name': 'p', 'project_slug': 'p', 'output_dir': 'test'}) == {'project_name': 'p', 'project_slug': 'p', 'output_dir': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 0 == cookiecutter(\n            template=\"https://github.com/jimjh/cookiecutter-python-project-template.git\",\n            checkout=None,\n            no_input=True,\n            extra_context=None,\n            replay=None,\n            overwrite_if_exists=False,\n            output_dir='.',\n            config_file=None,\n            default_config=False,\n            password=None,\n            directory=None,\n            skip_if_file_exists=False,\n            accept_hooks=True,\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 0 == cookiecutter(\n        'https://github.com/stryke/cookiecutter-stryke-python-template.git',\n        checkout='4043341',  # branch 'bug-fix/test-no-input'\n        no_input=True,\n        overwrite_if_exists=True,\n        output_dir='/tmp',\n        config_file=None,\n        default_config=False,\n        password=None,\n        directory=None,\n        skip_if_file_exists=True,\n        accept_hooks=True,\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 1 == cookiecutter(\"https://github.com/jasperan/test-cookiecutter-repo\", no_input=True, output_dir=\"./test\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert cookiecutter(\n            template=\"https://github.com/PawanVishwakarma/cookiecutter-pytorch-template\",\n            no_input=True,\n            overwrite_if_exists=True\n            )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert cookiecutter(template='https://github.com/audreyr/cookiecutter-pypackage.git',\n                        no_input=True,\n                        output_dir='test2') == 'test2/audreyr-cookiecutter-pypackage'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 1 == cookiecutter(template = 'https://github.com/audreyr/cookiecutter-pypackage', checkout = None, no_input = True, extra_context = None, replay = None, overwrite_if_exists = False, output_dir = 'test_cookiecutter', config_file = None, default_config = False, password = None, directory = None, accept_hooks = True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 0 == cookiecutter(\"https://github.com/clementpoiret/cookiecutter-pypackage.git\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert cookiecutter(\"https://github.com/jeffrey-rowe/cookiecutter-data-science\") == cookiecutter(\"https://github.com/jeffrey-rowe/cookiecutter-data-science\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 1 == cookiecutter('tests/fake-repo-pre/')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert cookiecutter('https://github.com/kragniz/cookiecutter-pypackage') == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git',no_input=True, extra_context={'full_name': 'Cookiecutter DocTest', 'project_name': 'project_name'}) == os.path.abspath('project_name')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert cookiecutter(\n        template='https://github.com/tasleson/cookiecutter-tasleson.git',\n        checkout=None,\n        no_input=True,\n        extra_context=None,\n        replay=None,\n        overwrite_if_exists=False,\n        output_dir='.',\n        config_file=None,\n        default_config=False,\n        password=None,\n        directory=None,\n        skip_if_file_exists=False,\n        accept_hooks=True,\n    ) == {\n        'project_name': 'Cookiecutter Tasleson',\n        'full_name': 'Gregory Tasleson',\n        'email': 'cookiecutter@example.com',\n        'version': '0.1.0',\n        'release_date': '2020-11-18',\n        'repo_name': 'cookiecutter-tasleson',\n        'repo_owner': 'tasleson',\n        'description': 'Cookiecutter Tasleson',\n        'python_interpreter': 'python3',\n        'python_tag': 'py3',\n        'source_code_presence': True,\n        'github_username': 'tasleson',\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 1 == cookiecutter(\"./templates/test\", no_input=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert cookiecutter('cookiecutter-simple-py', output_dir='test') == {'project_name': 'simple_py', 'project_slug': 'simple_py', 'output_dir': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert cookiecutter('cookiecutter-simple-py') == {'project_name': 'simple_py', 'project_slug': 'simple_py'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 22 == cookiecutter(\"./tests/test1/{{ cookiecutter.name }}\")['test1']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 5 == cookiecutter(5)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 0 == cookiecutter(\"test_dir/cookiecutter-demo\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert cookiecutter(\"https://github.com/fristonio/cookiecutter-pypackage-py3.git\") == \"OK\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 0 == cookiecutter(\n        template='tests/fake-repo-pre',\n        extra_context={},\n        no_input=True,\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert cookiecutter(\"https://github.com/bjascob/Python-Project-Template.git\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git',\n        checkout=None,\n        no_input=False,\n        extra_context=None,\n        replay=None,\n        overwrite_if_exists=False,\n        output_dir='.',\n        config_file=None,\n        default_config=False,\n        password=None,\n        directory=None,\n        skip_if_file_exists=False,\n        accept_hooks=True,)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 1 == cookiecutter(\"test-template\", no_input=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert cookiecutter('https://github.com/audreyr/cookiecutter-pypackage') == 'https://github.com/audreyr/cookiecutter-pypackage'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 10 == cookiecutter(1, 2)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert cookiecutter('cookiecutter-simple-py', output_dir='test', project_name='p') == {'project_name': 'p', 'project_slug': 'p', 'output_dir': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 1 == cookiecutter(\"https://github.com/TorXakis/cookiecutter-torxakis\",no_input=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert cookiecutter(template='https://github.com/audreyr/cookiecutter-pypackage.git',\n                        no_input=True,\n                        output_dir='test') == 'test/audreyr-cookiecutter-pypackage'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert cookiecutter(\n        template=\"https://github.com/audreyr/cookiecutter-pypackage\",\n        checkout=None,\n        no_input=True,\n        extra_context=None,\n        replay=None,\n        overwrite_if_exists=False,\n        output_dir='.',\n        config_file=None,\n        default_config=False,\n        password=None,\n        directory=None,\n        skip_if_file_exists=False,\n        accept_hooks=True,\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert cookiecutter('cookiecutter-simple-py', {'project_name': 'simple_py', 'project_slug': 'simple_py', 'output_dir': 'test'}) == {'project_name': 'simple_py', 'project_slug': 'simple_py', 'output_dir': 'test'}", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 0 == cookiecutter('tests/bake_project', no_input=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert cookiecutter('https://github.com/LukasMosser/cookiecutter-pypackage-minimal.git') == 'Mosser'"]}
{"problem_ids": 132, "project": "test-apps/cookiecutter", "focal_function": "def unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):\n    \"\"\"Download and unpack a zipfile at a given URI.\n\n    This will download the zipfile to the cookiecutter repository,\n    and unpack into a temporary directory.\n\n    :param zip_uri: The URI for the zipfile.\n    :param is_url: Is the zip URI a URL or a file?\n    :param clone_to_dir: The cookiecutter repository directory\n        to put the archive into.\n    :param no_input: Suppress any prompts\n    :param password: The password to use when unpacking the repository.\n    \"\"\"\n    # Ensure that clone_to_dir exists\n    clone_to_dir = os.path.expanduser(clone_to_dir)\n    make_sure_path_exists(clone_to_dir)\n\n    if is_url:\n        # Build the name of the cached zipfile,\n        # and prompt to delete if it already exists.\n        identifier = zip_uri.rsplit('/', 1)[1]\n        zip_path = os.path.join(clone_to_dir, identifier)\n\n        if os.path.exists(zip_path):\n            download = prompt_and_delete(zip_path, no_input=no_input)\n        else:\n            download = True\n\n        if download:\n            # (Re) download the zipfile\n            r = requests.get(zip_uri, stream=True)\n            with open(zip_path, 'wb') as f:\n                for chunk in r.iter_content(chunk_size=1024):\n                    if chunk:  # filter out keep-alive new chunks\n                        f.write(chunk)\n    else:\n        # Just use the local zipfile as-is.\n        zip_path = os.path.abspath(zip_uri)\n\n    # Now unpack the repository. The zipfile will be unpacked\n    # into a temporary directory\n    try:\n        zip_file = ZipFile(zip_path)\n\n        if len(zip_file.namelist()) == 0:\n            raise InvalidZipRepository('Zip repository {} is empty'.format(zip_uri))\n\n        # The first record in the zipfile should be the directory entry for\n        # the archive. If it isn't a directory, there's a problem.\n        first_filename = zip_file.namelist()[0]\n        if not first_filename.endswith('/'):\n            raise InvalidZipRepository(\n                'Zip repository {} does not include '\n                'a top-level directory'.format(zip_uri)\n            )\n\n        # Construct the final target directory\n        project_name = first_filename[:-1]\n        unzip_base = tempfile.mkdtemp()\n        unzip_path = os.path.join(unzip_base, project_name)\n\n        # Extract the zip file into the temporary directory\n        try:\n            zip_file.extractall(path=unzip_base)\n        except RuntimeError:\n            # File is password protected; try to get a password from the\n            # environment; if that doesn't work, ask the user.\n            if password is not None:\n                try:\n                    zip_file.extractall(path=unzip_base, pwd=password.encode('utf-8'))\n                except RuntimeError:\n                    raise InvalidZipRepository(\n                        'Invalid password provided for protected repository'\n                    )\n            elif no_input:\n                raise InvalidZipRepository(\n                    'Unable to unlock password protected repository'\n                )\n            else:\n                retry = 0\n                while retry is not None:\n                    try:\n                        password = read_repo_password('Repo password')\n                        zip_file.extractall(\n                            path=unzip_base, pwd=password.encode('utf-8')\n                        )\n                        retry = None\n                    except RuntimeError:\n                        retry += 1\n                        if retry == 3:\n                            raise InvalidZipRepository(\n                                'Invalid password provided for protected repository'\n                            )\n\n    except BadZipFile:\n        raise InvalidZipRepository(\n            'Zip repository {} is not a valid zip archive:'.format(zip_uri)\n        )\n\n    return unzip_path", "module": "cookiecutter.zipfile", "code": "import os\nimport tempfile\nfrom zipfile import BadZipFile, ZipFile\nimport requests\nfrom cookiecutter.exceptions import InvalidZipRepository\nfrom cookiecutter.prompt import read_repo_password\nfrom cookiecutter.utils import make_sure_path_exists, prompt_and_delete\n\nclass InvalidZipRepository(CookiecutterException):\n    \"\"\"\n    Exception for bad zip repo.\n\n    Raised when the specified cookiecutter repository isn't a valid\n    Zip archive.\n    \"\"\"\n\ndef read_repo_password(question):\n    \"\"\"Prompt the user to enter a password.\n\n    :param str question: Question to the user\n    \"\"\"\n\ndef make_sure_path_exists(path):\n    \"\"\"Ensure that a directory exists.\n\n    :param path: A directory path.\n    \"\"\"\n\ndef prompt_and_delete(path, no_input=False):\n    \"\"\"\n    Ask user if it's okay to delete the previously-downloaded file/directory.\n\n    If yes, delete it. If no, checks to see if the old version should be\n    reused. If yes, it's reused; otherwise, Cookiecutter exits.\n\n    :param path: Previously downloaded zipfile.\n    :param no_input: Suppress prompt to delete repo and just delete it.\n    :return: True if the content was deleted\n    \"\"\"\n\ndef unzip(zip_uri, is_url, clone_to_dir='.', no_input=False, password=None):\n    \"\"\"Download and unpack a zipfile at a given URI.\n\n    This will download the zipfile to the cookiecutter repository,\n    and unpack into a temporary directory.\n\n    :param zip_uri: The URI for the zipfile.\n    :param is_url: Is the zip URI a URL or a file?\n    :param clone_to_dir: The cookiecutter repository directory\n        to put the archive into.\n    :param no_input: Suppress any prompts\n    :param password: The password to use when unpacking the repository.\n    \"\"\"\n    # Ensure that clone_to_dir exists\n    clone_to_dir = os.path.expanduser(clone_to_dir)\n    make_sure_path_exists(clone_to_dir)\n\n    if is_url:\n        # Build the name of the cached zipfile,\n        # and prompt to delete if it already exists.\n        identifier = zip_uri.rsplit('/', 1)[1]\n        zip_path = os.path.join(clone_to_dir, identifier)\n\n        if os.path.exists(zip_path):\n            download = prompt_and_delete(zip_path, no_input=no_input)\n        else:\n            download = True\n\n        if download:\n            # (Re) download the zipfile\n            r = requests.get(zip_uri, stream=True)\n            with open(zip_path, 'wb') as f:\n                for chunk in r.iter_content(chunk_size=1024):\n                    if chunk:  # filter out keep-alive new chunks\n                        f.write(chunk)\n    else:\n        # Just use the local zipfile as-is.\n        zip_path = os.path.abspath(zip_uri)\n\n    # Now unpack the repository. The zipfile will be unpacked\n    # into a temporary directory\n    try:\n        zip_file = ZipFile(zip_path)\n\n        if len(zip_file.namelist()) == 0:\n            raise InvalidZipRepository('Zip repository {} is empty'.format(zip_uri))\n\n        # The first record in the zipfile should be the directory entry for\n        # the archive. If it isn't a directory, there's a problem.\n        first_filename = zip_file.namelist()[0]\n        if not first_filename.endswith('/'):\n            raise InvalidZipRepository(\n                'Zip repository {} does not include '\n                'a top-level directory'.format(zip_uri)\n            )\n\n        # Construct the final target directory\n        project_name = first_filename[:-1]\n        unzip_base = tempfile.mkdtemp()\n        unzip_path = os.path.join(unzip_base, project_name)\n\n        # Extract the zip file into the temporary directory\n        try:\n            zip_file.extractall(path=unzip_base)\n        except RuntimeError:\n            # File is password protected; try to get a password from the\n            # environment; if that doesn't work, ask the user.\n            if password is not None:\n                try:\n                    zip_file.extractall(path=unzip_base, pwd=password.encode('utf-8'))\n                except RuntimeError:\n                    raise InvalidZipRepository(\n                        'Invalid password provided for protected repository'\n                    )\n            elif no_input:\n                raise InvalidZipRepository(\n                    'Unable to unlock password protected repository'\n                )\n            else:\n                retry = 0\n                while retry is not None:\n                    try:\n                        password = read_repo_password('Repo password')\n                        zip_file.extractall(\n                            path=unzip_base, pwd=password.encode('utf-8')\n                        )\n                        retry = None\n                    except RuntimeError:\n                        retry += 1\n                        if retry == 3:\n                            raise InvalidZipRepository(\n                                'Invalid password provided for protected repository'\n                            )\n\n    except BadZipFile:\n        raise InvalidZipRepository(\n            'Zip repository {} is not a valid zip archive:'.format(zip_uri)\n        )\n\n    return unzip_path", "entry_point": "unzip", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert (unzip('https://github.com/realpython/cookiecutter-python-package/archive/master.zip') == '/home/wangyihong/Downloads/cookiecutter-python-package-master')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", True, os.path.abspath(\"../\"), True, None) == \"../cookiecutter-python-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", False, os.path.abspath(\"../\"), False, None) == \"../cookiecutter-python-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert unzip(\"https://github.com/django/django/archive/master.zip\",\n                  is_url=True,\n                  clone_to_dir=\"clone_to_dir_test\",\n                  no_input=False,\n                  password=None) == \"clone_to_dir_test/django-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", True, os.path.abspath(\"../\"), False, \"password\") == \"../cookiecutter-python-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert unzip('https://github.com/sriharisumit/book_lib/archive/master.zip', True, '.', False, None) == './book_lib-master'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert unzip('https://github.com/explosion/cython-blis/archive/master.zip')=='D:\\\\cython-blis-master'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert unzip(\"https://github.com/audreyr/cookiecutter-pypackage/archive/master.zip\", True, \"/Users/krauseha/Documents/Programming/tmp/cookiecutter/\", True, None) == \"/Users/krauseha/Documents/Programming/tmp/cookiecutter/cookiecutter-pypackage-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert unzip('https://github.com/isl-org/Open3D/archive/refs/heads/master.zip', True, '~', False, None) == \\\n            '/var/folders/xb/t11kssd15t92z0sp8g3wvxhr0000gn/T/tmp29s0x73c/Open3D-master/examples/data'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert unzip('https://github.com/user/repo/archive/master.zip', False, '~', False, None) == '~\\\\user-repo-master'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", True, os.path.abspath(\"../\"), True, \"\") == \"../cookiecutter-python-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert os.path.basename(unzip(\"https://github.com/cookiecutter/cookiecutter-pypackage/archive/master.zip\",True,os.getcwd()))==\"cookiecutter-pypackage-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert unzip('https://github.com/audreyr/cookiecutter-pypackage/archive/master.zip', False, '.')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert unzip(\"https://codeload.github.com/coala/coala/zip/master\",False) == \"C:\\\\Users\\\\Dell\\\\AppData\\\\Local\\\\Temp\\\\coala\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert os.path.isdir(unzip(\"https://github.com/matplotlib/matplotlib/archive/v2.2.3.zip\", is_url=True))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert (unzip('http://dados.gov.br/dataset/repositorio-de-dados-do-tse-e-ditos-da-camara-de-diretores-de-tribunal-especial-e-de-recursos- humanos-2015/resource/f433b602-2678-49ae-b639-0255a646600d/download/secao2015.zip', True, 'test_repo', True, None) == 'test_repo/secao2015')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert unzip(zip_uri='https://github.com/tivvit/rest-test/archive/master.zip',\n                    is_url=True,\n                    clone_to_dir=os.getcwd()) == 'C:\\\\Users\\\\vivi\\\\AppData\\\\Local\\\\Temp\\\\tmpxovrsk\\\\rest-test-master'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert unzip(\"tests/test_data/template_1\",\n             False,\n             \"/home/jakob/Desktop/cookiecutter/cookiecutter_custom/tests/test_data\") == \"/home/jakob/Desktop/cookiecutter/cookiecutter_custom/tests/test_data/template_1\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert unzip('https://github.com/cookiecutter/cookiecutter-pypackage/archive/master.zip',\n                is_url=True, clone_to_dir='temp', no_input=True, password=None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert unzip('https://github.com/audreyr/cookiecutter-pypackage/archive/master.zip',\n                 is_url=True,\n                 clone_to_dir='/tmp/',\n                 no_input=True,\n                 password=None) ==  '/tmp/cookiecutter-pypackage'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert unzip(\"https://codeload.github.com/cookiecutter/cookiecutter-pypackage/zip/master\",\n             True,\n             \"/home/jakob/Desktop/cookiecutter/cookiecutter_custom/tests/test_data\") == \"/home/jakob/Desktop/cookiecutter/cookiecutter_custom/tests/test_data/cookiecutter-pypackage-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert unzip(\"https://github.com/devops-workflow/kubeadm-ansible/archive/master.zip\", True, \"/tmp/unzip\") == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", True, os.path.abspath(\"../\"), False, \"hunter2\") == \"../cookiecutter-python-master\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert unzip(\"https://github.com/ChrisCummins/cookiecutter-python/archive/master.zip\", True, os.path.abspath(\"../\"), False, None) == \"../cookiecutter-python-master\""]}
{"problem_ids": 133, "project": "test-apps/cookiecutter", "focal_function": "def find_template(repo_dir):\n    \"\"\"Determine which child directory of `repo_dir` is the project template.\n\n    :param repo_dir: Local directory of newly cloned repo.\n    :returns project_template: Relative path to project template.\n    \"\"\"\n    logger.debug('Searching %s for the project template.', repo_dir)\n\n    repo_dir_contents = os.listdir(repo_dir)\n\n    project_template = None\n    for item in repo_dir_contents:\n        if 'cookiecutter' in item and '{{' in item and '}}' in item:\n            project_template = item\n            break\n\n    if project_template:\n        project_template = os.path.join(repo_dir, project_template)\n        logger.debug('The project template appears to be %s', project_template)\n        return project_template\n    else:\n        raise NonTemplatedInputDirException", "module": "cookiecutter.find", "code": "import logging\nimport os\nfrom cookiecutter.exceptions import NonTemplatedInputDirException\n\nclass NonTemplatedInputDirException(CookiecutterException):\n    \"\"\"\n    Exception for when a project's input dir is not templated.\n\n    The name of the input directory should always contain a string that is\n    rendered to something else, so that input_dir != output_dir.\n    \"\"\"\n\nlogger = logging.getLogger(__name__)\n\ndef find_template(repo_dir):\n    \"\"\"Determine which child directory of `repo_dir` is the project template.\n\n    :param repo_dir: Local directory of newly cloned repo.\n    :returns project_template: Relative path to project template.\n    \"\"\"\n    logger.debug('Searching %s for the project template.', repo_dir)\n\n    repo_dir_contents = os.listdir(repo_dir)\n\n    project_template = None\n    for item in repo_dir_contents:\n        if 'cookiecutter' in item and '{{' in item and '}}' in item:\n            project_template = item\n            break\n\n    if project_template:\n        project_template = os.path.join(repo_dir, project_template)\n        logger.debug('The project template appears to be %s', project_template)\n        return project_template\n    else:\n        raise NonTemplatedInputDirException", "entry_point": "find_template", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert find_template(\n        '/Users/natalie/Desktop/coolcookiecutter/cookiecutter-python-package/{{cookiecutter.project_slug}}'\n    ) == '/Users/natalie/Desktop/coolcookiecutter/cookiecutter-python-package/cookiecutter-python-package'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert \"tests/cookiecutter-trytonmodule\" == find_template(\"tests/cookiecutter-trytonmodule\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert find_template('tests/test-repo') == 'tests/test-repo/cookiecutter-test-repo'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert find_template('./test_cookie_cutter') == './test_cookie_cutter/{{cookiecutter.repo_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert find_template('cookiecutter-pypackage') == 'cookiecutter-pypackage'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert find_template(os.path.join(os.getcwd(), \"{{cookiecutter.project_slug}}\")) == os.path.join(os.getcwd(), \"{{cookiecutter.project_slug}}\", \"{{cookiecutter.project_slug}}\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert find_template('/Users/Jerry/Development/MyCookieCutterRepo') == '/Users/Jerry/Development/MyCookieCutterRepo/cookiecutter-python-library'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert find_template(os.path.abspath(os.path.dirname(__file__))) != 'cookiecutter-simple-example-no'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert find_template('cookiecutter-pylibrary/{{cookiecutter.package_name}}/subdirectory') == 'cookiecutter-pylibrary/{{cookiecutter.package_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert find_template('cookiecutter-pypackage') == 'cookiecutter-pypackage/{{cookiecutter.package_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert find_template('~/Documents/Project') == '~/Documents/Project/cookiecutter-project-template'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert find_template(\"cookiecutter-use-not-this\") == \"cookiecutter-use-not-this\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert find_template('/home/yasin/Codes/cookiecutter_crackq/cookiecutter-crackq') == '/home/yasin/Codes/cookiecutter_crackq/cookiecutter-crackq/{{cookiecutter.project_slug}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert find_template('tests/test-repo-alt') == 'tests/test-repo-alt/cookiecutter-test-repo-alt'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert find_template(\"/Users/JackyLU/Desktop/Boston University/CSCI/591/591-project/cookiecutter-quick-start\") == \"/Users/JackyLU/Desktop/Boston University/CSCI/591/591-project/cookiecutter-quick-start/{{cookiecutter.repo_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert find_template(\"/Users/albertlee/Documents/work/cookiecutter-house-password/cookiecutter-house-password\") == \"/Users/albertlee/Documents/work/cookiecutter-house-password/cookiecutter-house-password/house-password\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert find_template(\"/Users/michaelkarpe/Documents/Dev/cookiecutter/cookiecutter-python-package\") == \"/Users/michaelkarpe/Documents/Dev/cookiecutter/cookiecutter-python-package/{{cookiecutter.package_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert find_template('cookiecutter-use-this-repo') == 'cookiecutter-use-this-repo/cookiecutter-use-this-repo'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert find_template('/home/aakashvarma/Downloads/cookiecutter-pypackage-minimal-example-master') == '/home/aakashvarma/Downloads/cookiecutter-pypackage-minimal-example-master/{{cookiecutter.repo_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert find_template(\"tests/fixtures/fake-repo-tmpl\") == \"tests/fixtures/fake-repo-tmpl/{{cookiecutter.repo_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert find_template(\"cookiecutter-use-not-this-either-at-all\") == \"cookiecutter-use-not-this-either-at-all\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert find_template(\"foo\") == \"foo/cookiecutter-{{cookiecutter.project_slug}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert find_template(\"cookiecutter-use-not-this-either\") == \"cookiecutter-use-not-this-either\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert find_template('cookiecutter-pypackage') == \"cookiecutter-pypackage\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert find_template('C:\\\\Users\\\\Jenny\\\\Documents\\\\GitHub\\\\cookiecutter-python-package') == 'C:\\\\Users\\\\Jenny\\\\Documents\\\\GitHub\\\\cookiecutter-python-package\\\\{{cookiecutter.project_slug}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert find_template('cookiecutter-pylibrary') == 'cookiecutter-pylibrary/{{cookiecutter.package_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert find_template('/Users/Khalede') == '/Users/Khalede/cookiecutter-django'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert find_template('/Users/alx/Documents/repos/cookiecutter-pypackage-check/{{cookiecutter.repo_name}}') == \"/Users/alx/Documents/repos/cookiecutter-pypackage-check/{{cookiecutter.repo_name}}/{{cookiecutter.package_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert find_template(r\"D:\\documents\\python\\cookiecutter_demo\\{{cookiecutter.project_slug}}\") == r\"D:\\documents\\python\\cookiecutter_demo\\{{cookiecutter.project_slug}}\\{{cookiecutter.project_slug}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert find_template(\"test_find_template_exception\") == \"test_find_template_exception/{{cookiecutter.project_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert find_template(\"/Users/zhiyang/Desktop/cookiecutter-try-default-input\") == \"/Users/zhiyang/Desktop/cookiecutter-try-default-input/{{cookiecutter.project_slug}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert find_template(\"test_find_template\") == \"test_find_template/{{cookiecutter.project_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert find_template('C:\\\\Users\\\\faram\\\\AppData\\\\Local\\\\Temp\\\\pytest-0\\\\test\\\\cookiecutter-pypackage1')=='C:\\\\Users\\\\faram\\\\AppData\\\\Local\\\\Temp\\\\pytest-0\\\\test\\\\cookiecutter-pypackage1\\\\{{cookiecutter.project_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert find_template(os.path.abspath('tests/fixtures/fake-repo-tmpl/input/{{cookiecutter.repo_name}}')) == 'tests/fixtures/fake-repo-tmpl/input/{{cookiecutter.repo_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert find_template('/Users/Davis/Documents/python-docx/') == '/Users/Davis/Documents/python-docx/{{cookiecutter.repo_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert find_template(\"cookiecutter-use-this\") == \"cookiecutter-use-this\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert \"tests/cookiecutter-pypackage\" == find_template(\"tests/cookiecutter-pypackage\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert find_template('C:\\\\Users\\\\Jenny\\\\Documents\\\\GitHub\\\\cookiecutter-python-package\\\\{{cookiecutter.project_slug}}') == 'C:\\\\Users\\\\Jenny\\\\Documents\\\\GitHub\\\\cookiecutter-python-package\\\\{{cookiecutter.project_slug}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert find_template(os.path.abspath(os.path.dirname(__file__))) == 'cookiecutter-simple-example'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert find_template(\"C:/Users/Dell/AppData/Roaming/Python/Python36/site-packages/cookiecutter/tests\") == 'C:/Users/Dell/AppData/Roaming/Python/Python36/site-packages/cookiecutter/tests\\cookiecutter-%7B%7Bcookiecutter.project_slug%7D%7D'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert find_template(\"C:/Users/User/Desktop/cookiecutter-pypackage\") == \"C:/Users/User/Desktop/cookiecutter-pypackage/{{cookiecutter.repo_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert find_template('/Users/tanya/Desktop/mycookiecutter') == '/Users/tanya/Desktop/mycookiecutter/{{cookiecutter.repo_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert find_template('cookiecutter-pylibrary/{{cookiecutter.package_name}}') == 'cookiecutter-pylibrary/{{cookiecutter.package_name}}'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert find_template(\"sample\") == \"sample/{{cookiecutter.project_name}}\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert find_template(r'/home/kevin/PycharmProjects/cookiecutter/cookiecutter/tests/test-generate-files') == r'/home/kevin/PycharmProjects/cookiecutter/cookiecutter/tests/test-generate-files/{{cookiecutter.repo_name}}'"]}
