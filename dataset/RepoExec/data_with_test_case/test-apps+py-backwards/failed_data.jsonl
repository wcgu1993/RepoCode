{"problem_ids": 263, "project": "test-apps/py-backwards", "focal_function": "def _compile_file(paths: InputOutput, target: CompilationTarget) -> List[str]:\n    \"\"\"Compiles a single file.\"\"\"\n    with paths.input.open() as f:\n        code = f.read()\n\n    try:\n        transformed, dependencies = _transform(paths.input.as_posix(),\n                                               code, target)\n    except SyntaxError as e:\n        raise CompilationError(paths.input.as_posix(),\n                               code, e.lineno, e.offset)\n\n    try:\n        paths.output.parent.mkdir(parents=True)\n    except FileExistsError:\n        pass\n\n    with paths.output.open('w') as f:\n        f.write(transformed)\n\n    return dependencies", "module": "py_backwards.compiler", "code": "from copy import deepcopy\nfrom time import time\nfrom traceback import format_exc\nfrom typing import List, Tuple, Optional\nfrom typed_ast import ast3 as ast\nfrom astunparse import unparse, dump\nfrom autopep8 import fix_code\nfrom .files import get_input_output_paths, InputOutput\nfrom .transformers import transformers\nfrom .types import CompilationTarget, CompilationResult\nfrom .exceptions import CompilationError, TransformationError\nfrom .utils.helpers import debug\n\nCompilationTarget = Tuple[int, int]\n\nclass CompilationError(Exception):\n    \"\"\"Raises when compilation failed because fo syntax error.\"\"\"\n\n    def __init__(self, filename: str, code: str,\n                     lineno: int, offset: int) -> None:\n\ndef _transform(path: str, code: str, target: CompilationTarget) -> Tuple[str, List[str]]:\n    \"\"\"Applies all transformation for passed target.\"\"\"\n\ndef _compile_file(paths: InputOutput, target: CompilationTarget) -> List[str]:\n    \"\"\"Compiles a single file.\"\"\"\n    with paths.input.open() as f:\n        code = f.read()\n\n    try:\n        transformed, dependencies = _transform(paths.input.as_posix(),\n                                               code, target)\n    except SyntaxError as e:\n        raise CompilationError(paths.input.as_posix(),\n                               code, e.lineno, e.offset)\n\n    try:\n        paths.output.parent.mkdir(parents=True)\n    except FileExistsError:\n        pass\n\n    with paths.output.open('w') as f:\n        f.write(transformed)\n\n    return dependencies", "entry_point": "_compile_file", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert _compile_file(\n        InputOutput(\n            '/Users/nikitakuklev/Projects/compython/tests/test_files/test_file.py',\n            '/Users/nikitakuklev/Projects/compython/tests/test_files/test_file_transformed.py'\n        ),\n        ('python', 2)\n    ) == [\n        '/Users/nikitakuklev/Projects/compython/tests/test_files/test_file_transformed.py'\n    ]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert _compile_file(InputOutput('/tmp/a/b.py', '/tmp/a/b.py.out'),\n                          CompilationTarget('py36', 'py37')) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert _compile_file(InputOutput('a.py', 'a.py.pyc'), (3, 4)) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 3 == len(_compile_file(\n        InputOutput(\n            'a',\n            'a/a.py',\n            'out/a',\n            'out/a.py'),\n        ('B', 'C')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert _compile_file(InputOutput(\"test.py\", \"test.py\"), (1, 1)) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 4 == len(_compile_file(get_input_output_paths('../inputs/mod1.py', '../outputs/mod1.py'),\n                                  (1, 10)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 2 == len( _compile_file( InputOutput(\"A\", \"B\"), (\"\", \"\") ) )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 3 == len(\n        _compile_file(get_input_output_paths('fibonacci.py'), (3, 1))\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert _compile_file(\n        InputOutput(\"./a\", \"./b\"),\n        (0, 0)\n    ) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 2 == _compile_file(get_input_output_paths('src/input.py'), ('py', '3'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert _compile_file(\n            InputOutput('some_path/a.py', 'some_path/a.pyc'), (1, 0)) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert _compile_file(InputOutput('/tmp/a/b.py', '/tmp/a/b.py.out'),\n                          CompilationTarget('py36', 'py36')) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert _compile_file(get_input_output_paths('hello.py',\n                                                  'hello.pyc'),\n                          ('1', '2')) == ['1', '2']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert __file__ not in _compile_file(get_input_output_paths(__file__),\n                                          CompilationTarget('pyi', 'py'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 0 == len(_compile_file(\n        InputOutput(\n            Path('/home/sergei/pydis/pydis/test.py'),\n            Path('/home/sergei/pydis/pydis/test.pyc')),\n            (2, 7)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 0 == len(_compile_file(InputOutput('test/test1.py', 'test/test1.py'), (0, 0)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert _compile_file(\n            InputOutput('some_path/a.py', 'some_path/a.pyc'), (0, 0)) == []", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 1 == len(_compile_file(get_input_output_paths('test_files/test_compile.py'), (0,0)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert _compile_file((\"a\", \"b\"), (0, 1)) == [\"b\"]"]}
{"problem_ids": 264, "project": "test-apps/py-backwards", "focal_function": "def compile_files(input_: str, output: str, target: CompilationTarget,\n                  root: Optional[str] = None) -> CompilationResult:\n    \"\"\"Compiles all files from input_ to output.\"\"\"\n    dependencies = set()\n    start = time()\n    count = 0\n    for paths in get_input_output_paths(input_, output, root):\n        count += 1\n        dependencies.update(_compile_file(paths, target))\n    return CompilationResult(count, time() - start, target,\n                             sorted(dependencies))", "module": "py_backwards.compiler", "code": "from copy import deepcopy\nfrom time import time\nfrom traceback import format_exc\nfrom typing import List, Tuple, Optional\nfrom typed_ast import ast3 as ast\nfrom astunparse import unparse, dump\nfrom autopep8 import fix_code\nfrom .files import get_input_output_paths, InputOutput\nfrom .transformers import transformers\nfrom .types import CompilationTarget, CompilationResult\nfrom .exceptions import CompilationError, TransformationError\nfrom .utils.helpers import debug\n\ndef get_input_output_paths(input_: str, output: str,\n                           root: Optional[str]) -> Iterable[InputOutput]:\n    \"\"\"Get input/output paths pairs.\"\"\"\n\nCompilationTarget = Tuple[int, int]\n\nCompilationResult = NamedTuple('CompilationResult',\n                               [('files', int),\n                                ('time', float),\n                                ('target', CompilationTarget),\n                                ('dependencies', List[str])])\n\ndef _compile_file(paths: InputOutput, target: CompilationTarget) -> List[str]:\n    \"\"\"Compiles a single file.\"\"\"\n\ndef compile_files(input_: str, output: str, target: CompilationTarget,\n                  root: Optional[str] = None) -> CompilationResult:\n    \"\"\"Compiles all files from input_ to output.\"\"\"\n    dependencies = set()\n    start = time()\n    count = 0\n    for paths in get_input_output_paths(input_, output, root):\n        count += 1\n        dependencies.update(_compile_file(paths, target))\n    return CompilationResult(count, time() - start, target,\n                             sorted(dependencies))", "entry_point": "compile_files", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 1 == compile_files('input/', 'output/', '3.3')['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert isinstance(compile_files(input_='/input/', output='/output/', target=(2, 7)).time, float)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert compile_files('./input/', './output/', 'py36').target == 'py36'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert compile_files('/Users/saeed/project/docs', '/Users/saeed/project/test', CompilationTarget('py', 'py'), '/Users/saeed/project')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 3 == compile_files(\"input\", \"output\", target=\"3.5\")[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 0 == compile_files('test', 'test', ('py3', 'py3'), '.')['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 4 == len(compile_files(input_='', output='', target=(3, 4)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 4 == compile_files('test_data/input/', 'test_data/output/',\n                              (2, 6), 'test_data/')['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert [] == compile_files('', '', (2, 7), '').dependencies", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 3 == compile_files(input_='/input/', output='/output/', target=(2, 7))[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert compile_files('input', 'output', target=(3,7), root='root') == \\\n        CompilationResult(2, 1.2, (3,7), ['input', 'output'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 3 == compile_files(\"input\", \"output\", \"py35\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert compile_files('./test/input', './test/output', (3, 5)) == \\\n        CompilationResult(5, 0.0, (3, 5), ['./test/input/ex1.py', './test/input/ex2.py', './test/input/ex3.py', './test/input/ex3.py', './test/input/ex3.py'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert compile_files('./input/', './output/', 'py27').files == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert isinstance(compile_files(input_='/input/', output='/output/', target=(2, 7)).files, int)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert isinstance(compile_files(input_='/input/', output='/output/', target=(2, 7)).target, tuple)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 5 == compile_files('input/', 'output/', '2.7', 'tests/data')['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert compile_files('./test/input', './test/output', (2, 0)) == \\\n        CompilationResult(1, 0.0, (2, 0), ['./test/input/ex2.py'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert compile_files('./input/', './output/', 'py27').target == 'py27'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 3 == compile_files('a', 'b', 0, 'c')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 0 < len(compile_files('samples/example_1.py', 'example_1_compiled.py',\n                                 CompilationTarget(3, 6)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert compile_files('./test/input', './test/output', (3, 0)) == \\\n        CompilationResult(2, 0.0, (3, 0), ['./test/input/ex2.py', './test/input/ex3.py'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert compile_files('input/', 'output/', ('py3', 'py3'), 'root') == \\\n        CompilationResult(1, 123, ('py3', 'py3'), ['input/example.py'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 0 == compile_files('', '', (0, 0), '').files", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert compile_files('./input/', './output/', 'py36').files == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert compile_files('input', 'output', 'python3.7') == \\\n            CompilationResult(1, 23, 'python3.7', ['input'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert compile_files('input_1.py', 'output_1.py', (3, 5)) == (\n            CompilationResult(3, 0.0, (3, 5), []))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert compile_files('file.py', 'file_test.py', CompilationTarget.PYTHON) == {\n        'files': 1,\n        'time': 3.0200600141813684,\n        'target': 'py3',\n        'dependencies': ['astor', 'autopep8', 'pycparser', 'typed_ast']\n    }", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 0 < compile_files('./tests/python_source/', './tests/compiled/',\n                             (3, 6))[0] <= 100", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 4 == compile_files('src/', 'dist/', (3, 7), 'tests/data')['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert compile_files(input_='', output='', target=(3, 5)) == \\\n        CompilationResult(0, 0.0, (3, 5), [])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert () == compile_files('', '', (2, 7), '').target", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 4 == compile_files(\n        'tests/sources/basic', 'tests/results/basic', (2, 0))['files']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 3 == compile_files('test.py', 'test.py')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert compile_files(\"test_input\", \"test_output\", (2, 7))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 2 == compile_files('test/data', 'test/out', ('py_3', '2.7'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert compile_files('input_2.py', 'output_2.py', (3, 5)) == (\n            CompilationResult(3, 0.0, (3, 5), ['input_2.py']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 3 == compile_files('input/', 'output/', (2, 7), root='project/')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert compile_files('input.py', 'output.py', (3, 6), 'root') == \\\n            CompilationResult(1, 2.0, (3, 6), ['dependencies'])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert isinstance(compile_files(input_='/input/', output='/output/', target=(2, 7)), CompilationResult)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 3 == len(compile_files('input/', 'output/',\n                                  ('3_8', '3_8'), 'project/'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert isinstance(compile_files(input_='/input/', output='/output/', target=(2, 7)).dependencies, list)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 0 == compile_files('', '', (2, 7), '').time", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert (compile_files('../input', '../output',\n                           ('python_3_5', 'python_3_6'), '../') ==  # returns the number of files compiled\n                       CompilationResult(1, 1, ('python_3_5', 'python_3_6'),\n                                         ['../input/example.py',\n                                          '../input/example_1.py']))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 0 == compile_files('', '', (2, 7), '').files", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 0 < compile_files('input/', 'output/', 'python3')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 0 < compile_files('test', 'test', ('py3', 'py3'), '.')['time']", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert compile_files('./test/input', './test/output', (3, 1)) == \\\n        CompilationResult(3, 0.0, (3, 1), ['./test/input/ex2.py', './test/input/ex3.py', './test/input/ex3.py'])"]}
{"problem_ids": 269, "project": "test-apps/py-backwards", "focal_function": "def get_source(fn: Callable[..., Any]) -> str:\n    \"\"\"Returns source code of the function.\"\"\"\n    source_lines = getsource(fn).split('\\n')\n    padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n    return '\\n'.join(line[padding:] for line in source_lines)", "module": "py_backwards.utils.helpers", "code": "from inspect import getsource\nimport re\nimport sys\nfrom typing import Any, Callable, Iterable, List, TypeVar\nfrom functools import wraps\nfrom ..conf import settings\nfrom .. import messages\n\ndef get_source(fn: Callable[..., Any]) -> str:\n    \"\"\"Returns source code of the function.\"\"\"\n    source_lines = getsource(fn).split('\\n')\n    padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n    return '\\n'.join(line[padding:] for line in source_lines)", "entry_point": "get_source", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 0 == get_source(test_get_source).find('def')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert get_source(lambda a, b, c: None).startswith('a, b, c')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert get_source(lambda x: x + 2).strip() == 'def f(x):\\n    return x + 2'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert get_source(get_source) == r'''def get_source(fn: Callable[..., Any]) -> str:\n        \"\"\"Returns source code of the function.\"\"\"\n        source_lines = getsource(fn).split('\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\n'.join(line[padding:] for line in source_lines)'''.strip()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert get_source(get_source) == '''def get_source(fn: Callable[..., Any]) -> str:\n        \"\"\"Returns source code of the function.\"\"\"\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines) '''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 2 == len(re.findall('def test_get_source():', get_source(test_get_source)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 2 == len(get_source(get_source).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert ': None' in get_source(lambda: None)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert get_source(lambda: None).startswith('()')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == len(re.findall('def get_source', get_source(get_source)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 0 == get_source(lambda x, y, *z, **q: x + y + len(z) + len(q)).find('*z')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert get_source(lambda a,b,c=None, d=4, *l:None) == 'a, b, c=None, d=4, *l:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 1 + len(get_source(get_source).split('\\n')) == 28", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 'def foo():' in get_source(foo)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert 0 == get_source(lambda: 0).find('def ')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert get_source(lambda a,b,c=None:None) == 'a, b, c=None:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 0 == get_source(get_source).count('lambda')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert get_source(get_source) == \"\"\"def get_source(fn: Callable[..., Any]) -> str:\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines)\"\"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 22 == len(get_source(get_source).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert get_source(lambda x: 3) == 'def (x): return 3'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert get_source(lambda a,b,c=None, d=4, *l, e=5, f=6:None) == 'a, b, c=None, d=4, *l, e=5, f=6:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert get_source(get_source) == \"\"\"def get_source(fn: Callable[..., Any]) -> str:\n        \\\"\\\"\\\"Returns source code of the function.\\\"\\\"\\\"\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines)\"\"\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert get_source(lambda a,b,c=None, d=4, *l, e=5, **k:None) == 'a, b, c=None, d=4, *l, e=5, **k:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert get_source(get_source) == (\n        'def get_source(fn: Callable[..., Any]) -> str:\\n'\n        '    \"\"\"Returns source code of the function.\"\"\"\\n'\n        '    source_lines = getsource(fn).split(\\'\\\\n\\')\\n'\n        '    padding = len(re.findall(r\\'^(\\s*)\\', source_lines[0])[0])\\n'\n        '    return \\'\\\\n\\'.join(line[padding:] for line in source_lines)\\n'\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert get_source(lambda a,b:None) == 'a, b:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert get_source(lambda a,b,c=None, d=4, *l, **k:None) == 'a, b, c=None, d=4, *l, **k:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert get_source(lambda: print('hello')) == 'def f_(): print(\\'hello\\')\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert get_source(lambda: [print('hello') for _ in range(3)]) == 'def f_(): [print(\\'hello\\') for _ in range(3)]\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 0 == get_source(lambda: 0).find('def')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 4 == len(get_source(get_source).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert len(get_source(get_source).split('\\n')) == len(get_source(get_source).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 44 == len(get_source(get_source))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 2 == len(get_source(lambda x, y: x + y).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert get_source(lambda a,b,c=None, d=4:None) == 'a, b, c=None, d=4:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert get_source(lambda a,b,c=None, d=4, *l, e=5, f=6, g=7:None) == 'a, b, c=None, d=4, *l, e=5, f=6, g=7:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert get_source(get_source) == '''def get_source(fn: Callable[..., Any]) -> str:\n        \"\"\"Returns source code of the function.\"\"\"\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines)'''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 2 == len(get_source(lambda a: None).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert get_source(lambda a,b,c=None, d=4, **k:None) == 'a, b, c=None, d=4, **k:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert get_source(lambda:None) == ''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 0 == get_source(lambda: 0).find('lambda: 0')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert get_source(get_source) == '''def get_source(fn):\n        \"\"\"Returns source code of the function.\"\"\"\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines) '''", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert 0 == getsource(get_source).count('getsource')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 1 == len(re.findall(r'^def get_source', get_source(get_source)))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 1 == get_source(lambda x: x).find('x')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert get_source(get_source) == getsource(get_source)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 5 == len(get_source(lambda x, y: (x, y, 0)).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 7 == len(get_source(lambda x, y: (x, y, 0, 1, 2)).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 0 == len(get_source(get_source).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 2 == len(\n        re.findall(\n            r'def get_source',\n            get_source(get_source),\n        ),\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 2 == len(get_source(lambda x, y: 0).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert get_source(get_source) == '''def get_source(fn: Callable[..., Any]) -> str:\n        \"\"\"Returns source code of the function.\"\"\"\n        source_lines = getsource(fn).split('\\\\n')\n        padding = len(re.findall(r'^(\\s*)', source_lines[0])[0])\n        return '\\\\n'.join(line[padding:] for line in source_lines) '''.strip()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 4 == len(get_source(lambda x, y: (x, y)).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert 42 == eval(get_source(lambda x: 42))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert get_source(lambda x: x + 1).strip() == 'def fn(x):\\n    return x + 1'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 0 == get_source(lambda x, y, *z, **q: x + y + len(z) + len(q)).find('**q')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert 2 == getsource(get_source).count('\\n')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 'def test(a, b):' in get_source(test)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert get_source(lambda a:None) == 'a:\\n'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert 0 == get_source(test_get_source).find('test_get_source')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert ''.join(get_source(get_source).split('\\n')[3:]) == 'assert \\''.join(get_source(get_source).split('\\n')[3:])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert get_def_code(get_def_code) == get_source(get_def_code).split('\"\"\"')[0]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert get_source(get_source) == get_source.__doc__.split('\\n')[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert 2 == get_source(lambda x, y: x + y).find('y')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert 6 == len(get_source(lambda x, y: (x, y, 0, 1)).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert 0 == get_source(get_source).count('get_source')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert 23 == len(get_source(messages.message).split('\\n'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert get_docstring(get_def_code) == get_source(get_def_code).split('\"\"\"')[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert 0 == get_source(lambda: 0).find('lambda')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 0 == get_source(lambda x: x).find('x')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert get_source(get_source).strip() == get_source(get_source).strip()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 0 == get_source(get_source).count('def get_source(fn: Callable[..., Any]) -> str:')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert get_source(get_source) == get_source.__doc__"]}
{"problem_ids": 270, "project": "test-apps/py-backwards", "focal_function": "def get_parent(tree: ast.AST, node: ast.AST, rebuild: bool = False) -> ast.AST:\n    \"\"\"Get parrent of node in tree.\"\"\"\n    if node not in _parents or rebuild:\n        _build_parents(tree)\n\n    try:\n        return _parents[node]\n    except IndexError:\n        raise NodeNotFound('Parent for {} not found'.format(node))", "module": "py_backwards.utils.tree", "code": "from weakref import WeakKeyDictionary\nfrom typing import Tuple, Iterable, Type, TypeVar, Union, List\nfrom typed_ast import ast3 as ast\nfrom ..exceptions import NodeNotFound\n\nclass NodeNotFound(Exception):\n    \"\"\"Raises when node not found.\"\"\"\n\n_parents = WeakKeyDictionary()\n\ndef _build_parents(tree: ast.AST) -> None:\n\ndef get_parent(tree: ast.AST, node: ast.AST, rebuild: bool = False) -> ast.AST:\n    \"\"\"Get parrent of node in tree.\"\"\"\n    if node not in _parents or rebuild:\n        _build_parents(tree)\n\n    try:\n        return _parents[node]\n    except IndexError:\n        raise NodeNotFound('Parent for {} not found'.format(node))", "entry_point": "get_parent", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert 44 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 47 == get_parent(tree, tree.body[0].body[0].value.args[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 43 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0].elts[2].value.args[0].elts[1].id)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert get_parent(ast.parse('a: int = 1'), ast.AnnAssign()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert get_parent(ast.parse('a = 1\\na = 2'), ast.Assign(targets=[ast.Name(id='b')])) is ast.Module()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 50 == get_parent(tree, tree.body[0].body[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 44 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert get_parent(ast.parse('a: int = 1'), ast.Name()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert isinstance(get_parent(ast.parse(\"a = 1\"), ast.parse(\"a = 1\").body[0]), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert get_parent(ast.parse('1 + 1'), ast.Name()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 40 == get_parent(tree, node)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert get_parent(tree, function_node).__class__.__name__ == 'Module'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 5 == sum([get_parent(ast.parse('def f(x): return 1'), ast.parse('def f(x): return 1').body[0].body[0]).lineno])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert isinstance(get_parent(ast.parse('a + 1'), ast.Name(id='a')), ast.BinOp)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert isinstance(get_parent(ast.parse('a = 1'), get_parent(ast.parse('a = 1'), ast.parse('a = 1'), True), True), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert get_parent(ast.parse('class X: pass'), ast.ClassDef()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert get_parent(ast.parse('a = 1\\na = 2'), ast.Assign(targets=[ast.Name(id='a')])) is ast.Module()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert get_parent(ast.parse(\"\"), ast.parse(\"\"), True) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert isinstance(get_parent(ast.parse('[1,2,3]'), ast.Num(n=1)), ast.List)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert get_parent(ast.parse('a = 1 + 1'), ast.Name()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert 2 == get_parent(ast.parse(\"a = 2; a\"), ast.parse(\"a = 2; a\").body[0].targets[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert get_parent(ast.parse('a += 1\\na += 2'), ast.AugAssign(op=ast.Add())) is ast.Module()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert isinstance(get_parent(ast.parse('a = {1,2,3}'), ast.Num(n=1)), ast.Set)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert isinstance(get_parent(ast.parse('{1,2,3}'), ast.Num(n=1)), ast.Set)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 0 == get_parent(ast.parse(\"\"), ast.parse(\"\"))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert 3 == get_parent(ast.parse(\"a = 2 * 3\"), 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 42 == get_parent(ast.parse('42'), 42, rebuild=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert get_parent(ast.parse('a + 1'), ast.Add()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert get_parent(None, None, rebuild=True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 42 == get_parent(ast.parse('42'), 42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 45 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0].elts[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert isinstance(get_parent(ast.parse('a = {1, 2, 3}'), ast.Num(n=1)), ast.Set)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert isinstance(get_parent(ast.parse('a = 1'), ast.Name(id='a')), ast.Assign)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert get_parent(ast.parse('a += 1\\na += 2'), ast.AugAssign(op=ast.Mult())) is ast.Module()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 42 == get_parent(42, 42)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert isinstance(get_parent(ast.parse('a = (b + 1)'), ast.Name(id='b')), ast.BinOp)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 46 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[0])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert 42 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[0].id)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert get_parent(ast.parse('from os import *'), ast.Name(id='walk')) == ast.ImportFrom(module='os', names=[ast.alias(name='walk', asname=None)])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 48 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0].elts[1].id)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert isinstance(get_parent(ast.parse('a = 1'), ast.parse('a = 1'), True), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert 3 == get_parent(ast.parse('[1,2,3]'), 3)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 0 == len(get_parent(ast.parse('1 + 1'), ast.parse('1 + 1')))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert isinstance(get_parent(ast.parse('for i in range(10):pass'), ast.Name('i', ast.Store())), ast.Name)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert 42 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[0].value)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 49 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0].elts[0].id)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert get_parent(ast.parse(''), ast.parse(''))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert get_parent(ast.parse('a + 1'), ast.Name()) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 0 == len(get_parent(ast.parse('1 + 1'), ast.parse('1 + 1'), rebuild=True))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 48 == get_parent(tree, tree.body[0].body[0].value.args[0].elts[1].value.args[0].elts[2].value.args[0].elts[2].id)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 3 == get_parent([1, 2, [3, 4]], 3)"]}
{"problem_ids": 271, "project": "test-apps/py-backwards", "focal_function": "def get_non_exp_parent_and_index(tree: ast.AST, node: ast.AST) \\\n        -> Tuple[ast.AST, int]:\n    \"\"\"Get non-Exp parent and index of child.\"\"\"\n    parent = get_parent(tree, node)\n\n    while not hasattr(parent, 'body'):\n        node = parent\n        parent = get_parent(tree, parent)\n\n    return parent, parent.body.index(node)  # type: ignore", "module": "py_backwards.utils.tree", "code": "from weakref import WeakKeyDictionary\nfrom typing import Tuple, Iterable, Type, TypeVar, Union, List\nfrom typed_ast import ast3 as ast\nfrom ..exceptions import NodeNotFound\n\ndef get_parent(tree: ast.AST, node: ast.AST, rebuild: bool = False) -> ast.AST:\n    \"\"\"Get parrent of node in tree.\"\"\"\n\ndef get_non_exp_parent_and_index(tree: ast.AST, node: ast.AST) \\\n        -> Tuple[ast.AST, int]:\n    \"\"\"Get non-Exp parent and index of child.\"\"\"\n    parent = get_parent(tree, node)\n\n    while not hasattr(parent, 'body'):\n        node = parent\n        parent = get_parent(tree, parent)\n\n    return parent, parent.body.index(node)  # type: ignore", "entry_point": "get_non_exp_parent_and_index", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert get_non_exp_parent_and_index(\n        ast.parse('''\n    for x in range(10):\n        print(x)\n    '''),\n        ast.parse('''\n    for x in range(10):\n        print(x)\n    ''').body[0].body[0],\n    )[1] == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert get_non_exp_parent_and_index(ast.parse('for a in b: pass\\nprint(\"a\")'),\n            ast.parse('for a in b: pass\\nprint(\"a\")').body[1]) == (\n                ast.parse('for a in b: pass\\nprint(\"a\")'), 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert get_non_exp_parent_and_index(\n            ast.parse('if True:\\n    print(1)'),\n            ast.parse('print(1)').body[0]) == (\n                ast.parse('if True:\\n    print(1)').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass\\nelse:\\n    pass'),\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass\\nelse:\\n    pass').body[1],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse(\"for _ in range(10):\\n\\tpass\"),\n        ast.parse(\"for _ in range(10):\\n\\tpass\").body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('x = 1\\nx = 2'),\n        ast.parse('x = 1\\nx = 2').body[1])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('pass', mode='exec').body[0],\n        ast.parse('pass', mode='exec').body[0]\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('while True:\\n\\tpass\\n'),\n        ast.parse('while True:\\n\\tpass\\n').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('[1, 2, 3]\\n'),\n        ast.parse('[1, 2, 3]\\n').body[0],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('1'), ast.parse('1').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse(''),\n        ast.parse(''),\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"def f(): return 0\"), ast.parse(\"return 0\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a'), ast.parse('a').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert get_non_exp_parent_and_index(\n            ast.parse('for x in [1, 2, 3]:\\n    print(x)'),\n            ast.parse('print(x)').body[0]) == (\n                ast.parse('for x in [1, 2, 3]:\\n    print(x)').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert get_non_exp_parent_and_index(ast.parse('x = 1'), ast.parse('x = 1').body[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        pass\n        '''),\n        ast.parse('''\n    while True:\n        pass\n        ''').body[0],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert 1 == get_non_exp_parent_and_index(ast.parse(\"if x: y; else: z\"), ast.parse(\"y\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('while True: pass'),\n        ast.parse('while True: pass').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"x; y; z\"), ast.parse(\"z\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('def foo():\\n    b = 2'),\n                                             ast.parse('2'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert get_non_exp_parent_and_index(\n        ast.parse('if 0:\\n    if 1:\\n        x = 0'),\n        ast.parse('if 0:\\n    if 1:\\n        x = 0').body[0].body[0].body[0]\n    ) == (ast.parse('if 0:\\n    if 1:\\n        x = 0').body[0].body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('def f(): pass\\ndef g(): pass'),\n        ast.parse('def f(): pass\\ndef g(): pass').body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a = 1\\ndef foo():pass'), ast.parse('a = 1\\ndef foo():pass').body[1])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a = 1\\na'), ast.parse('a = 1\\na').body[1])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('def foo():\\n    b = 2\\n    pass\\n    b = 2'),\n                                             ast.parse('2'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n\\tpass\\nelse:\\n\\tpass'),\n        ast.parse('if 1:\\n\\tpass\\nelse:\\n\\tpass').body[0].orelse\n    ) == (ast.parse('if 1:\\n\\tpass\\nelse:\\n\\tpass').body[0], 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass'),\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass').body[0],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert get_non_exp_parent_and_index(ast.parse(\"def f(): while True: pass\"),\n                                         ast.While(ast.Num(0), [ast.Pass()], True)) == \\\n        (ast.FunctionDef(None, 'f', [], [], ast.arguments([], [], None, [], []),\n            [ast.While(ast.Num(0), [ast.Pass()], True)], None, None), 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert (0, 0) == get_non_exp_parent_and_index(ast.parse('x = 1\\ny = 2'), ast.parse('x = 1'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n'),\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n').body[1].body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a, b'), ast.parse('b'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('1'), ast.parse('1'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a = 1'), ast.parse('1'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('class A: pass\\nclass B: pass'),\n        ast.parse('class A: pass\\nclass B: pass').body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"def f(): return 0\"), ast.parse(\"def f()\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('x = 1'),\n        ast.parse('x = 1').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, b, (c, d)'), ast.parse('c'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        break\n        'string'\n    ''').body[0],\n        ast.parse('''\n    while True:\n        break\n        'string'\n    ''').body[0].body[1]\n    ) == (\n        ast.parse('''\n    while True:\n        break\n        'string'\n    ''').body[0],\n        1\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert get_non_exp_parent_and_index(ast.parse('print(\"a\")\\nfor a in b: pass'),\n            ast.parse('print(\"a\")\\nfor a in b: pass').body[1]) == (\n                ast.parse('print(\"a\")\\nfor a in b: pass'), 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a, (b, c)'), ast.parse('c'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert isinstance(get_non_exp_parent_and_index(ast.parse('''\n        a = 2\n        b = 3\n    '''), ast.parse('''\n        a = 2\n        b = 3\n    ''').body[0])[0], ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert (0, 1) == get_non_exp_parent_and_index(ast.parse('x = 1\\nx += 2'), ast.parse('x += 2'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('x = 1'), ast.parse('x = 1'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a, (b, [(c, d)])'), ast.parse('d'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert get_non_exp_parent_and_index(\n        ast.parse('if 0:\\n    if 1:\\n        x = 0'),\n        ast.parse('if 0:\\n    if 1:\\n        x = 0').body[0].body[0]\n    ) == (ast.parse('if 0:\\n    if 1:\\n        x = 0').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert get_non_exp_parent_and_index(ast.parse(\n            'if a == 1:\\n'\n            '    pass\\n'\n            'elif a == 2:\\n'\n            '    pass\\n'\n            'else:\\n'\n            '    pass'\n        ), ast.parse(\n            'if a == 1:\\n'\n            '    pass\\n'\n            'elif a == 2:\\n'\n            '    pass\\n'\n            'else:\\n'\n            '    pass'\n        ).body[0].body[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('for i in range(10): pass'),\n                                             ast.parse('for i in range(10): pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('while True: pass'),\n                                             ast.parse('while True: pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert 2 == get_non_exp_parent_and_index(\n        ast.parse('x = 1\\ndef f():\\n    return 2'),\n        ast.parse('x = 1\\ndef f():\\n    return 2').body[1].body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, b'), ast.parse('a'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"if x: y; else: z\"), ast.parse(\"z\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        if True:\n            break\n        else:\n            break\n        'string'\n    ''').body[0],\n        ast.parse('''\n    while True:\n        if True:\n            break\n        else:\n            break\n        'string'\n    ''').body[0].body[1].orelse[0]\n    ) == (\n        ast.parse('''\n    while True:\n        if True:\n            break\n        else:\n            break\n        'string'\n    ''').body[0].body[1],\n        1\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert get_non_exp_parent_and_index(ast.parse(\"a = 2\\n[1, 2, 3]\\n\"), ast.parse(\"[1, 2, 3]\\n\").body[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('if True: pass\\nelse: pass'),\n                                             ast.parse('if True: pass\\nelse: pass').orelse[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('def foo():\\n\\tpass\\n'),\n        ast.parse('def foo():\\n\\tpass\\n').body[0].body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('class A: pass'),\n                                             ast.parse('class A: pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('class A: pass'),\n        ast.parse('class A: pass').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(''), ast.parse('').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    assert get_non_exp_parent_and_index(ast.parse('a + b + c'), ast.parse('b + c').body[0].value) == \\\n        (ast.parse('a + b').body[0].value, 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a, (b, c), d'), ast.parse('c'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('try: pass\\nexcept: pass'),\n                                             ast.parse('try: pass\\nexcept: pass').handlers[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 2 == get_non_exp_parent_and_index(ast.parse('a, (b, c), d'), ast.parse('d'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('def foo():\\n\\tpass\\n'),\n        ast.parse('def foo():\\n\\tpass\\n').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, (b, [(c, d)])'), ast.parse('c'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"x\"), ast.parse(\"x\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    assert get_non_exp_parent_and_index(ast.parse('for a in b: pass'),\n            ast.parse('for a in b: pass').body[0]) == (\n                ast.parse('for a in b: pass'), 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.Module(body=[\n            ast.Expr(value=ast.Name(id='y', ctx=ast.Load())),\n        ]),\n        ast.Name(id='y', ctx=ast.Load()),\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    assert get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0],\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0].body[0]\n    ) == (\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0],\n        0\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\n        'def foo():\\n    def bar():\\n        0'),\n        ast.parse('def foo():\\n    def bar():\\n        0').body[0].body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse(inspect.getsource(test_func)),\n        ast.parse(inspect.getsource(test_func)).body[1].body[2])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('a, (b, (c, d))'), ast.parse('d'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert (1, 0) == get_non_exp_parent_and_index(ast.parse('x = 1\\ny = 2'), ast.parse('y = 2'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('1+2'), ast.Num(1))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('while True:\\n\\tpass\\n'),\n        ast.parse('while True:\\n\\tpass\\n').body[0].body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('a = 1; b = 2'),\n        ast.parse('a = 1; b = 2').body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    assert get_non_exp_parent_and_index(\n        ast.parse('x + 1'), ast.parse('x + 1').body[0]\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('def foo():pass'), ast.parse('def foo():pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('x = 1\\ny = 2'), ast.parse('y = 2'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('while True:\\n x = 1'),\n        ast.parse('while True:\\n x = 1').body[0].body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('1'),\n        ast.parse('1').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n'),\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse(\"pass\\npass\"),\n        ast.parse(\"pass\\npass\").body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert 2 == get_non_exp_parent_and_index(\n        ast.parse('[1, 2, 3]\\n'),\n        ast.parse('[1, 2, 3]\\n').body[0].value,\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, (b, c), d'), ast.parse('b'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass'),\n        ast.parse('if 1:\\n    pass\\nif 2:\\n    pass').body[1],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('with open(\"file\"): pass'),\n                                             ast.parse('with open(\"file\"): pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    assert get_non_exp_parent_and_index(ast.parse('x = 1\\ny = 2'), ast.parse('x = 1').body[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(''), ast.parse(''))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        pass\n        '''),\n        ast.parse('''\n    while True:\n        pass\n        ''').body[0].body[0],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('def foo():\\n    b = 2\\n    b = 2'),\n                                             ast.parse('2'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('pass'), ast.parse('pass'))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"x; y; z\"), ast.parse(\"x\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    assert get_non_exp_parent_and_index(\n            ast.parse('if True:\\n    print(1)\\n    print(2)'),\n            ast.parse('print(2)').body[0]) == (\n                ast.parse('if True:\\n    print(1)\\n    print(2)').body[0], 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('1 + 1'), ast.parse('1 + 1').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n    pass').body[0],\n        ast.parse('if 1:\\n    pass').body[0].body[0],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert get_non_exp_parent_and_index(\n            ast.parse('if True:\\n    print(1)\\n    print(2)'),\n            ast.parse('print(1)').body[0]) == (\n                ast.parse('if True:\\n    print(1)\\n    print(2)').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"x; y; z\"), ast.parse(\"y\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    assert 1 == get_non_exp_parent_and_index(ast.parse('def foo():\\n    b = 2\\n    pass'),\n                                             ast.parse('2'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('a = 1'),\n        ast.parse('a = 1').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('for i in range(10):\\n    pass\\n[1, 2, 3]\\n'),\n        ast.parse('for i in range(10):\\n    pass\\n[1, 2, 3]\\n').body[1].elts[2],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert get_non_exp_parent_and_index(ast.parse('print(\"a\")\\nfor a in b: pass\\nprint(\"b\")'),\n            ast.parse('print(\"a\")\\nfor a in b: pass\\nprint(\"b\")').body[1]) == (\n                ast.parse('print(\"a\")\\nfor a in b: pass\\nprint(\"b\")'), 1)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('def foo():\\n    pass'),\n                                             ast.parse('def foo():\\n    pass'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, (b, (c, d))'), ast.parse('c'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse('def f(): pass'),\n        ast.parse('def f(): pass').body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    assert get_non_exp_parent_and_index(ast.parse(\n            'if a == 1:\\n'\n            '    pass\\n'\n            'elif a == 2:\\n'\n            '    pass\\n'\n            'else:\\n'\n            '    pass'\n        ), ast.parse(\n            'if a == 1:\\n'\n            '    pass\\n'\n            'elif a == 2:\\n'\n            '    pass\\n'\n            'else:\\n'\n            '    pass'\n        ).body[0].orelse[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    assert get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0],\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0].body[1]\n    ) == (\n        ast.parse('''\n    while True:\n        'string'\n        a = 2\n    ''').body[0],\n        1\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a, (b, c)'), ast.parse('b'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.parse(\"pass\\npass\"),\n        ast.parse(\"pass\\npass\").body[0]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert 2 == get_non_exp_parent_and_index(\n        ast.parse('[1, 2, 3]\\n'),\n        ast.parse('[1, 2, 3]\\n').body[0].elts[1],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert 1 == get_non_exp_parent_and_index", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n'),\n        ast.parse('if True:\\n\\tpass\\nelse:\\n\\tpass\\n').body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a = 1'), ast.parse('a = 1').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert 0 == get_non_exp_parent_and_index(ast.parse(\"if x: y\"), ast.parse(\"y\"))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('if True: pass\\nelse: pass'),\n                                             ast.parse('if True: pass\\nelse: pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('a'), ast.parse('a'))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('1; 2'),\n        ast.parse('1; 2').body[1]\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    assert get_non_exp_parent_and_index(\n            ast.parse('if True:\\n    if False:\\n        print(1)'),\n            ast.parse('print(1)').body[0]) == (\n                ast.parse('if False:\\n        print(1)').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_117():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('if 1:\\n    pass\\nelse:\\n    pass\\nif 2:\\n    pass'),\n        ast.parse('if 1:\\n    pass\\nelse:\\n    pass\\nif 2:\\n    pass').body[1],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_118():\n    assert get_non_exp_parent_and_index(ast.parse(\"def foo():pass\"),\n                                                ast.parse(\"def foo():pass\").body[0]) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_119():\n    assert 1 == get_non_exp_parent_and_index(\n        ast.parse('''\n    while True:\n        pass\n    else:\n        pass\n        '''),\n        ast.parse('''\n    while True:\n        pass\n    else:\n        pass\n        ''').body[1],\n    )[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_120():\n    assert get_non_exp_parent_and_index(\n        ast.parse('if 0:\\n    x = 0'),\n        ast.parse('if 0:\\n    x = 0').body[0].body[0]\n    ) == (ast.parse('if 0:\\n    x = 0').body[0], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_121():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('def func(): pass'),\n                                             ast.parse('def func(): pass').body[0])[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_122():\n    assert 0 == get_non_exp_parent_and_index(\n        ast.If(test=ast.Name(id='test', ctx=ast.Load()),\n               body=[ast.Expr(value=ast.Str(s='test'))], orelse=[]),\n        ast.Expr(value=ast.Str(s='test')))[1]", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    assert get_non_exp_parent_and_index(\n            ast.parse('if True:\\n    print(1)\\nelse:\\n    print(2)'),\n            ast.parse('print(2)').body[0]) == (\n                ast.parse('if True:\\n    print(1)\\nelse:\\n    print(2)').body[1], 0)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_124():\n    assert 0 == get_non_exp_parent_and_index(ast.parse('if True: pass'),\n                                             ast.parse('if True: pass').body[0])[1]"]}
{"problem_ids": 273, "project": "test-apps/py-backwards", "focal_function": "def get_closest_parent_of(tree: ast.AST, node: ast.AST,\n                          type_: Type[T]) -> T:\n    \"\"\"Get a closest parent of passed type.\"\"\"\n    parent = node\n\n    while True:\n        parent = get_parent(tree, parent)\n\n        if isinstance(parent, type_):\n            return parent  # type: ignore", "module": "py_backwards.utils.tree", "code": "from weakref import WeakKeyDictionary\nfrom typing import Tuple, Iterable, Type, TypeVar, Union, List\nfrom typed_ast import ast3 as ast\nfrom ..exceptions import NodeNotFound\n\ndef get_parent(tree: ast.AST, node: ast.AST, rebuild: bool = False) -> ast.AST:\n    \"\"\"Get parrent of node in tree.\"\"\"\n\nT = TypeVar('T', bound=ast.AST)\n\ndef get_closest_parent_of(tree: ast.AST, node: ast.AST,\n                          type_: Type[T]) -> T:\n    \"\"\"Get a closest parent of passed type.\"\"\"\n    parent = node\n\n    while True:\n        parent = get_parent(tree, parent)\n\n        if isinstance(parent, type_):\n            return parent  # type: ignore", "entry_point": "get_closest_parent_of", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Num), ast.Num)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('x=a+b'), \n        node=ast.parse('x=a+b').body[0].targets[0],\n        type_=ast.Module),\n        ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert get_closest_parent_of(\n        ast.parse(\"for x in range(1):\\n\\tpass\"),\n        ast.parse(\"for x in range(1):\\n\\tpass\").body[0],\n        ast.For\n    ) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Expr), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert isinstance(get_closest_parent_of(ast.parse(\"a = 5\"), ast.parse(\"a = 5\").body[0].targets[0], ast.Assign), ast.Assign)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('a = 1'),\n        node=ast.parse('a = 1').body[0],\n        type_=ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 1'), ast.parse('a = 1').body[0], ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert 33 == get_closest_parent_of(ast.parse('while True: 33'), ast.Num(n=33)).n", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert isinstance(get_closest_parent_of(ast.parse('[1, 2]'), ast.Constant(1), ast.Expr), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 42 == get_closest_parent_of(\n        ast.parse('print(42)'),\n        ast.parse('print(42)').body[0],\n        type_=ast.Expr\n    ).value.n", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Attribute), ast.Attribute)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.alias), ast.alias)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert get_closest_parent_of(\n        ast.parse('def foo(bar):\\n    pass'),\n        ast.parse('def foo(bar):\\n    pass').body[0],\n        ast.Module,\n    ) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0].value.func), ast.Name)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert isinstance(\n        get_closest_parent_of(\n            ast.parse('1 + 2'),\n            ast.parse('1 + 2').body[0],\n            ast.Expr\n        ),\n        ast.Expr\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    assert 42 == get_closest_parent_of(ast.parse('a = 42'), ast.Num(n=42), ast.Assign).value.n", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('x=a+b'), \n        node=ast.parse('x=a+b').body[0].value,\n        type_=ast.Module),\n        ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0]), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Load), ast.Load)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('x=a+b'), \n        node=ast.parse('x=a+b').body[0],\n        type_=ast.Module),\n        ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    assert isinstance(get_closest_parent_of(ast.parse('x = 1\\nx += 1'), ast.Add(), ast.Assign), ast.Assign)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert isinstance(get_closest_parent_of(ast.parse('[1, 2]'), ast.Constant(1), ast.Subscript), ast.Subscript)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0].value.args[0]), ast.Call)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    assert isinstance(\n        get_closest_parent_of(\n            ast.parse('a+b'),\n            ast.parse('a+b').body[0].value,\n            ast.Expr\n        ),\n        ast.Expr\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    assert isinstance(get_closest_parent_of(\n        ast.parse('print(\"hello\")'),\n        ast.parse('print(\"hello\")').body[0].value,\n        ast.Expr\n    ), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert isinstance(\n        get_closest_parent_of(\n            ast.parse('while True: pass'), \n            ast.Name(id='a'),\n            ast.While\n        ), \n        ast.While\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\"), ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0].value.args[0], ast.arguments), ast.arguments)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Index), ast.Index)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.arguments), ast.arguments)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0].value,\n                                             ast.Call),\n                       ast.Call)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('x=a+b'), \n        node=ast.parse('x=a+b').body[0].value.right,\n        type_=ast.Module),\n        ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0].value.func, ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    assert isinstance(\n        get_closest_parent_of(\n            ast.parse('1 + 2'),\n            ast.parse('1 + 2').body[0],\n            ast.Module\n        ),\n        ast.Module\n    )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    assert isinstance(get_closest_parent_of(ast.parse(\"x\"), ast.parse(\"x\").body[0].value, ast.Expr), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Store), ast.Store)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 1'), ast.parse('a = 1').body[0], ast.Assign), ast.Assign)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert isinstance(get_closest_parent_of(ast.parse(''), ast.parse('').body[0], ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 1'), ast.parse('a = 1').body[0], ast.Expr), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0].value.args[0], ast.Expr), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert isinstance(get_closest_parent_of(ast.parse('a[0]'), ast.Subscript(value=ast.Name(id='a'), slice=ast.Index(value=ast.Constant(value=0)), ctx=ast.Load()), ast.Expr), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert isinstance(get_closest_parent_of(\n        ast.parse(\"\"\"def f(): pass\"\"\"),\n        ast.parse(\"\"\"def f(): pass\"\"\").body[0],\n        ast.FunctionDef), ast.FunctionDef)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Subscript), ast.Subscript)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert isinstance(get_closest_parent_of(ast.parse(inspect.getsource(test_function)),\n                                             test_function.body[0],\n                                             ast.FunctionDef),\n                       ast.FunctionDef)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0].value, ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert isinstance(get_closest_parent_of(\n        tree=ast.parse('x=a+b'), \n        node=ast.parse('x=a+b').body[0].value.left,\n        type_=ast.Module),\n        ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0], ast.FunctionDef), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    assert isinstance(get_closest_parent_of(ast.parse('[1, 2]'), ast.Constant(1), ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    assert get_closest_parent_of(ast.parse(\"\"\"\n    while True:\n        print('hello')\n    \"\"\"), ast.Name(id='hello')) == ast.While(body=[ast.Expr(value=ast.Call(func=ast.Name(id='print'), args=[ast.Str(s='hello')], keywords=[]))], test=ast.NameConstant(value=True))", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0], ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert isinstance(get_closest_parent_of(\n        ast.parse(\"for x in range(1):\\n\\tpass\"),\n        ast.parse(\"for x in range(1):\\n\\tpass\").body[0].body[0],\n        ast.For),\n        ast.For)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    assert isinstance(get_closest_parent_of(ast.parse(\"\"), ast.parse(\"\").body[0].value.args[0], ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0].value), ast.Expr)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert isinstance(get_closest_parent_of(ast.parse('a = 2'), ast.Name(id='a'), ast.Assign), ast.Assign)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    assert isinstance(get_closest_parent_of(ast.parse('1 + 2'), ast.Num(1), ast.Module), ast.Module)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    assert isinstance(get_closest_parent_of(ast.parse('a'), ast.parse('a').body[0].body[0], ast.FunctionDef), ast.FunctionDef)"]}
