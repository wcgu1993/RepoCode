{"problem_ids": 325, "project": "test-apps/docstring_parser", "focal_function": "def parse(text: str, style: Style = Style.auto) -> Docstring:\n    \"\"\"Parse the docstring into its components.\n\n    :param text: docstring text to parse\n    :param style: docstring style\n    :returns: parsed docstring representation\n    \"\"\"\n\n    if style != Style.auto:\n        return STYLES[style](text)\n    rets = []\n    for parse_ in STYLES.values():\n        try:\n            rets.append(parse_(text))\n        except ParseError as e:\n            exc = e\n    if not rets:\n        raise exc\n    return sorted(rets, key=lambda d: len(d.meta), reverse=True)[0]", "module": "docstring_parser.parser", "code": "from docstring_parser.common import Docstring, ParseError\nfrom docstring_parser.styles import STYLES, Style\n\nclass ParseError(RuntimeError):\n    \"\"\"Base class for all parsing related errors.\"\"\"\n\nclass Docstring:\n    \"\"\"Docstring object representation.\"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"Initialize self.\"\"\"\n\n    def params(self) -> T.List[DocstringParam]:\n\n    def raises(self) -> T.List[DocstringRaises]:\n\n    def returns(self) -> T.Optional[DocstringReturns]:\n\n    def deprecation(self) -> T.Optional[DocstringDeprecated]:\n\nclass Style(enum.Enum):\n\nSTYLES = {\n    Style.rest: rest.parse,\n    Style.google: google.parse,\n    Style.numpydoc: numpydoc.parse,\n}\n\ndef parse(text: str, style: Style = Style.auto) -> Docstring:\n    \"\"\"Parse the docstring into its components.\n\n    :param text: docstring text to parse\n    :param style: docstring style\n    :returns: parsed docstring representation\n    \"\"\"\n\n    if style != Style.auto:\n        return STYLES[style](text)\n    rets = []\n    for parse_ in STYLES.values():\n        try:\n            rets.append(parse_(text))\n        except ParseError as e:\n            exc = e\n    if not rets:\n        raise exc\n    return sorted(rets, key=lambda d: len(d.meta), reverse=True)[0]", "entry_point": "parse", "test": null, "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert parse(\"\", style=Style.rest) == Docstring()", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert 2 == len(parse(\"a docstring\", style=Style.auto).params())", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 4 == len(parse(\"\"\"\n                              <short description>\n\n                              <blank>\n\n                              <blank>\n\n                              <long description>\n\n                              <blank>\n\n                              <blank>\n\n                              <parameters>\n\n                              <blank>\n\n                              <blank>\n\n                              <raises>\n\n                              <blank>\n\n                              <blank>\n\n                              <returns>\n                           \"\"\").params())"]}
