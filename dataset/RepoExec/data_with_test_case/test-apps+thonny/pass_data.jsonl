{"problem_ids": 203, "project": "test-apps/thonny", "focal_function": "def pretty(node, key=\"/\", level=0):\n    \"\"\"Used for exporting ASTView content\"\"\"\n    if isinstance(node, ast.AST):\n        fields = list(ast.iter_fields(node))\n        value_label = node.__class__.__name__\n        if isinstance(node, ast.Call):\n            # Try to make 3.4 AST-s more similar to 3.5\n            if sys.version_info[:2] == (3, 4):\n                if (\"kwargs\", None) in fields:\n                    fields.remove((\"kwargs\", None))\n                if (\"starargs\", None) in fields:\n                    fields.remove((\"starargs\", None))\n\n            # TODO: translate also non-None kwargs and starargs\n\n    elif isinstance(node, list):\n        fields = list(enumerate(node))\n        if len(node) == 0:\n            value_label = \"[]\"\n        else:\n            value_label = \"[...]\"\n    else:\n        fields = []\n        value_label = repr(node)\n\n    item_text = level * \"    \" + str(key) + \"=\" + value_label\n\n    if hasattr(node, \"lineno\"):\n        item_text += \" @ \" + str(getattr(node, \"lineno\"))\n        if hasattr(node, \"col_offset\"):\n            item_text += \".\" + str(getattr(node, \"col_offset\"))\n\n        if hasattr(node, \"end_lineno\"):\n            item_text += \"  -  \" + str(getattr(node, \"end_lineno\"))\n            if hasattr(node, \"end_col_offset\"):\n                item_text += \".\" + str(getattr(node, \"end_col_offset\"))\n\n    lines = [item_text] + [\n        pretty(field_value, field_key, level + 1) for field_key, field_value in fields\n    ]\n\n    return \"\\n\".join(lines)", "module": "thonny.plugins.ast_view", "code": "import ast\nimport logging\nimport sys\nimport tkinter as tk\nfrom thonny import ast_utils, get_workbench, ui_utils\nfrom thonny.common import TextRange, range_contains_smaller\nfrom thonny.languages import tr\n\nfrom thonny _utils, get_workbench, ui_utils\n\ndef pretty(node, key=\"/\", level=0):\n    \"\"\"Used for exporting ASTView content\"\"\"\n    if isinstance(node, ast.AST):\n        fields = list(ast.iter_fields(node))\n        value_label = node.__class__.__name__\n        if isinstance(node, ast.Call):\n            # Try to make 3.4 AST-s more similar to 3.5\n            if sys.version_info[:2] == (3, 4):\n                if (\"kwargs\", None) in fields:\n                    fields.remove((\"kwargs\", None))\n                if (\"starargs\", None) in fields:\n                    fields.remove((\"starargs\", None))\n\n            # TODO: translate also non-None kwargs and starargs\n\n    elif isinstance(node, list):\n        fields = list(enumerate(node))\n        if len(node) == 0:\n            value_label = \"[]\"\n        else:\n            value_label = \"[...]\"\n    else:\n        fields = []\n        value_label = repr(node)\n\n    item_text = level * \"    \" + str(key) + \"=\" + value_label\n\n    if hasattr(node, \"lineno\"):\n        item_text += \" @ \" + str(getattr(node, \"lineno\"))\n        if hasattr(node, \"col_offset\"):\n            item_text += \".\" + str(getattr(node, \"col_offset\"))\n\n        if hasattr(node, \"end_lineno\"):\n            item_text += \"  -  \" + str(getattr(node, \"end_lineno\"))\n            if hasattr(node, \"end_col_offset\"):\n                item_text += \".\" + str(getattr(node, \"end_col_offset\"))\n\n    lines = [item_text] + [\n        pretty(field_value, field_key, level + 1) for field_key, field_value in fields\n    ]\n\n    return \"\\n\".join(lines)", "entry_point": "pretty", "test": "import ast\nimport logging\nimport sys\nimport tkinter as tk\nfrom thonny import ast_utils, get_workbench, ui_utils\nfrom thonny.common import TextRange, range_contains_smaller\nfrom thonny.languages import tr\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom thonny.plugins.ast_view import * # noqa: autoimport\nfrom thonny.plugins.ast_view import pretty # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert pretty\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a+b').body[0], '/') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(1,2,3)\\nprint()\", mode=\"exec\"), key=\"Module\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a=b+c+d\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = (1,2)\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('[]').body[0].value) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty([]).split(\"\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a=5\\n(1,2,3)\\nprint(a)\\nfor a in [1,2,3]: print(a)\"), level=1) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"1+2\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"sys.stdout.write(1)\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('print(1)').body[0].value) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\ny = 20\"),\"/x\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a = 4 + 2').body[0].value, '/') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import numpy as np\\nnp.array([1,2,3])\\nprint('hello')\", mode=\"exec\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\\nb = 2\\n\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 2.0\",\n        \"b=2 @ 2.0 -  1.0\",\n    ])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = 1\"), \"code\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/0\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('print(\"hello\")')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty(7).split(\"\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(a(b))\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1; b = 2\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 1.0\",\n        \"b=2 @ 1.0 -  1.0\",\n    ])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True: pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a+b\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty({\"a\": {\"b\": 3}, \"c\": [4, 5]}) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/1\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(a, b = c, *d, **e)\"), level = 0) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, b=b)\", \"3.5\"), \"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo( [a, b, c] )\"), \"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a, b, *c, d)').body[0], '/') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"for i in range(10):\\n    x = 10\"),\"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a+b)*c').body[0], '/') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\n    else:\\n        pass\\nelse:\\n    pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import os\\n\\nos.listdir()\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\\nb = 2\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 2.0\",\n        \"b=2 @ 2.0 -  1.0\",\n    ])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1; b = 2;\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 1.0\",\n        \"b=2 @ 1.0 -  1.0\",\n    ])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n    ])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a, b, *c, d)').body[0], '/', 1) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a+1\").body[0], \"body\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"1 + 2\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    pass\\nelse: pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"y = 10\"),\"/x\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/1/body/0\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a)\\nfoo(a)\"), \"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(g(h(8,9,10)))\").body[0].value) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nx = 20\"),\"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a = 3 + 4')) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, x=[b, c])\", \"3.5\"), \"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = b + c\\n\\nd = e + f\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(\n            {\n                \"a\": {\"b\": 3},\n                \"c\": [4, 5],\n                \"d\": {\"e\": {\"f\": [6, {\"g\": 7}], \"h\": 8}},\n            }\n        ) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import sys\"), key=\"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f[a(b) + 1]\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\"),\"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = b + c\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, b=b)\", \"3.4\"), \"/\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\nelse:\\n    if True:\\n        pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = (1+2)\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty((\"tuple\",)).split(\"\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty(\"string\").split(\"\\n\")) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_66\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\n    else:\\n        pass\\nelse:\\n    if True:\\n        pass\\n    else:\\n        pass\")).splitlines() == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a[1] = 1\")).splitlines()) ^ set([\n        \"a[1]=1 @ 1.0\",\n        \"a[1]=1 @ 1.0 -  1.0\",\n    ])) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert pretty", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a+b').body[0], '/') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(1,2,3)\\nprint()\", mode=\"exec\"), key=\"Module\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a=b+c+d\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = (1,2)\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('[]').body[0].value) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty([]).split(\"\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a=5\\n(1,2,3)\\nprint(a)\\nfor a in [1,2,3]: print(a)\"), level=1) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"1+2\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_9\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"sys.stdout.write(1)\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_11\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('print(1)').body[0].value) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\ny = 20\"),\"/x\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_13\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a = 4 + 2').body[0].value, '/') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import numpy as np\\nnp.array([1,2,3])\\nprint('hello')\", mode=\"exec\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\\nb = 2\\n\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 2.0\",\n        \"b=2 @ 2.0 -  1.0\",\n    ])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = 1\"), \"code\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/0\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('print(\"hello\")')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty(7).split(\"\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(a(b))\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_22\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1; b = 2\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 1.0\",\n        \"b=2 @ 1.0 -  1.0\",\n    ])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True: pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a+b\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty({\"a\": {\"b\": 3}, \"c\": [4, 5]}) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_26\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/1\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(a, b = c, *d, **e)\"), level = 0) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_28\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, b=b)\", \"3.5\"), \"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_29\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo( [a, b, c] )\"), \"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a, b, *c, d)').body[0], '/') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"for i in range(10):\\n    x = 10\"),\"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a+b)*c').body[0], '/') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\n    else:\\n        pass\\nelse:\\n    pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import os\\n\\nos.listdir()\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_35\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\\nb = 2\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 2.0\",\n        \"b=2 @ 2.0 -  1.0\",\n    ])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1; b = 2;\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n        \"b=2 @ 1.0\",\n        \"b=2 @ 1.0 -  1.0\",\n    ])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a = 1\")).splitlines()) ^ set([\n        \"a=1 @ 1.0\",\n        \"a=1 @ 1.0 -  1.0\",\n    ])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_38\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('(a, b, *c, d)').body[0], '/', 1) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a+1\").body[0], \"body\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_40\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"1 + 2\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    pass\\nelse: pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_42\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"y = 10\"),\"/x\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_44\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/1/body/0\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a)\\nfoo(a)\"), \"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_49\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f(g(h(8,9,10)))\").body[0].value) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nx = 20\"),\"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_51\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse('a = 3 + 4')) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, x=[b, c])\", \"3.5\"), \"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = b + c\\n\\nd = e + f\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_54\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(\n            {\n                \"a\": {\"b\": 3},\n                \"c\": [4, 5],\n                \"d\": {\"e\": {\"f\": [6, {\"g\": 7}], \"h\": 8}},\n            }\n        ) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"import sys\"), key=\"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_57\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"f[a(b) + 1]\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\"),\"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = b + c\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"x = 10\\nfor i in range(10):\\n    x = 10\"),\"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_61\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"foo(a, b=b)\", \"3.4\"), \"/\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_62\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\nelse:\\n    if True:\\n        pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"a = (1+2)\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty((\"tuple\",)).split(\"\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(pretty(\"string\").split(\"\\n\")) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_66\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert pretty(ast.parse(\"if True:\\n    if True:\\n        pass\\n    else:\\n        pass\\nelse:\\n    if True:\\n        pass\\n    else:\\n        pass\")).splitlines() == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+ast_view/pretty/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(set(pretty(ast.parse(\"a[1] = 1\")).splitlines()) ^ set([\n        \"a[1]=1 @ 1.0\",\n        \"a[1]=1 @ 1.0 -  1.0\",\n    ])) == output"]}
{"problem_ids": 204, "project": "test-apps/thonny", "focal_function": "def ends_overlap(left, right) -> int:\n    \"\"\"Returns the length of maximum overlap between end of the first and start of the second\"\"\"\n    max_overlap = min(len(left), len(right))\n    for i in range(max_overlap, 0, -1):\n        if left.endswith(right[:i]):\n            return i\n\n    return 0", "module": "thonny.plugins.micropython.backend", "code": "import ast\nimport datetime\nimport io\nimport logging\nimport os\nimport re\nimport sys\nimport textwrap\nimport threading\nimport time\nimport traceback\nfrom abc import ABC, abstractmethod\nfrom queue import Empty, Queue\nfrom textwrap import dedent\nfrom threading import Lock\nfrom typing import Optional, Dict, Union, Tuple, List\nfrom thonny.backend import MainBackend\nfrom thonny.common import (\n    OBJECT_LINK_END,\n    OBJECT_LINK_START,\n    BackendEvent,\n    EOFCommand,\n    InlineCommand,\n    InlineResponse,\n    InputSubmission,\n    ImmediateCommand,\n    ToplevelCommand,\n    ToplevelResponse,\n    UserError,\n    parse_message,\n    serialize_message,\n    MessageFromBackend,\n    Record,\n    CommandToBackend,\n    ValueInfo,\n)\nfrom thonny.common import ConnectionClosedException\nfrom thonny.running import EXPECTED_TERMINATION_CODE\n\ndef ends_overlap(left, right) -> int:\n    \"\"\"Returns the length of maximum overlap between end of the first and start of the second\"\"\"\n    max_overlap = min(len(left), len(right))\n    for i in range(max_overlap, 0, -1):\n        if left.endswith(right[:i]):\n            return i\n\n    return 0", "entry_point": "ends_overlap", "test": "import ast\nimport datetime\nimport io\nimport logging\nimport os\nimport re\nimport sys\nimport textwrap\nimport threading\nimport time\nimport traceback\nfrom abc import ABC, abstractmethod\nfrom queue import Empty, Queue\nfrom textwrap import dedent\nfrom threading import Lock\nfrom typing import Optional, Dict, Union, Tuple, List\nfrom thonny.backend import MainBackend\nfrom thonny.common import (\n    OBJECT_LINK_END,\n    OBJECT_LINK_START,\n    BackendEvent,\n    EOFCommand,\n    InlineCommand,\n    InlineResponse,\n    InputSubmission,\n    ImmediateCommand,\n    ToplevelCommand,\n    ToplevelResponse,\n    UserError,\n    parse_message,\n    serialize_message,\n    MessageFromBackend,\n    Record,\n    CommandToBackend,\n    ValueInfo,\n)\nfrom thonny.common import ConnectionClosedException\nfrom thonny.running import EXPECTED_TERMINATION_CODE\nclass MicroPythonBackend(MainBackend, ABC):\n    def __init__(self, clean, args):\n        self._args = args\n        self._prev_time = time.time()\n        self._local_cwd = None\n        self._cwd = args.get(\"cwd\")\n        self._progress_times = {}\n        self._welcome_text = None\n        self._sys_path = None\n        self._epoch_year = None\n        self._builtin_modules = []\n        self._api_stubs_path = args.get(\"api_stubs_path\")\n        self._builtins_info = self._fetch_builtins_info()\n\n        MainBackend.__init__(self)\n        try:\n            self._report_time(\"before prepare\")\n            self._process_until_initial_prompt(clean)\n            if self._welcome_text is None:\n                self._welcome_text = self._fetch_welcome_text()\n                self._report_time(\"got welcome\")\n\n            self._prepare_after_soft_reboot(clean)\n\n            if not self._builtin_modules:\n                self._builtin_modules = self._fetch_builtin_modules()\n                logger.debug(\"Built-in modules: %s\", self._builtin_modules)\n\n            self._prepare_rtc()\n            self._send_ready_message()\n            self._report_time(\"sent ready\")\n            self.mainloop()\n        except ConnectionClosedException as e:\n            self._on_connection_closed(e)\n        except Exception:\n            logger.exception(\"Crash in backend\")\n\n    def _prepare_after_soft_reboot(self, clean):\n        self._report_time(\"bef preparing helpers\")\n        script = self._get_all_helpers()\n        self._check_perform_just_in_case_gc()\n        self._execute_without_output(script)\n        self._report_time(\"prepared helpers\")\n\n        self._update_cwd()\n        self._report_time(\"got cwd\")\n        self._sys_path = self._fetch_sys_path()\n\n        self._report_time(\"prepared\")\n        self._check_perform_just_in_case_gc()\n        logger.info(\"Prepared\")\n\n    def _prepare_rtc(self):\n        if self._epoch_year is None:\n            self._epoch_year = self._fetch_epoch_year()\n\n        self._check_sync_time()\n        if self._args.get(\"validate_time\"):\n            self._validate_time()\n\n    def _check_perform_just_in_case_gc(self):\n        if self._connected_to_microbit():\n            # May fail to allocate memory without this\n            self._perform_gc()\n\n    def _check_sync_time(self):\n        if self._args.get(\"sync_time\"):\n            self._sync_time()\n\n    def _perform_gc(self):\n        self._execute_without_output(\n            dedent(\n                \"\"\"\n            import gc as __thonny_gc\n            __thonny_gc.collect()\n            del __thonny_gc\n        \"\"\"\n            )\n        )\n\n    def _check_prepare(self):\n        pass  # overridden in bare metal\n\n    def _get_all_helpers(self):\n        # Can't import functions into class context:\n        # https://github.com/micropython/micropython/issues/6198\n        return (\n            dedent(\n                \"\"\"\n            class __thonny_helper:\n                try:\n                    import uos as os\n                except ImportError:\n                    import os\n                import sys\n                \n                # for object inspector\n                inspector_values = dict()\n                last_repl_values = []\n                @classmethod\n                def print_repl_value(cls, obj):\n                    if obj is not None:\n                        cls.last_repl_values.append(obj)\n                        cls.last_repl_values = cls.last_repl_values[-{num_values_to_keep}:]\n                        print({start_marker!r} % id(obj), repr(obj), {end_marker!r}, sep='')\n                \n                @staticmethod\n                def print_mgmt_value(obj):\n                    print({mgmt_start!r}, repr(obj), {mgmt_end!r}, sep='', end='')\n                    \n                @staticmethod\n                def repr(obj):\n                    try:\n                        s = repr(obj)\n                        if len(s) > 50:\n                            s = s[:50] + \"...\"\n                        return s\n                    except Exception as e:\n                        return \"<could not serialize: \" + str(e) + \">\"\n                    \n                @classmethod\n                def listdir(cls, x):\n                    if hasattr(cls.os, \"listdir\"):\n                        return cls.os.listdir(x)\n                    else:\n                        return [rec[0] for rec in cls.os.ilistdir(x) if rec[0] not in ('.', '..')]\n            \"\"\"\n            ).format(\n                num_values_to_keep=self._get_num_values_to_keep(),\n                start_marker=OBJECT_LINK_START,\n                end_marker=OBJECT_LINK_END,\n                mgmt_start=MGMT_VALUE_START.decode(ENCODING),\n                mgmt_end=MGMT_VALUE_END.decode(ENCODING),\n            )\n            + \"\\n\"\n            + textwrap.indent(self._get_custom_helpers(), \"    \")\n        )\n\n    def _get_custom_helpers(self):\n        return \"\"\n\n    def _get_num_values_to_keep(self):\n        \"\"\"How many last evaluated REPL values and visited Object inspector values to keep\n        in internal lists for the purpose of retrieving them by id for Object inspector\"\"\"\n        return 5\n\n    def _sync_time(self):\n        raise NotImplementedError()\n\n    def _get_time_for_rtc(self):\n        if self._args[\"utc_clock\"]:\n            return datetime.datetime.now(tz=datetime.timezone.utc).timetuple()\n        else:\n            return datetime.datetime.now().timetuple()\n\n    def _validate_time(self):\n        this_computer = self._get_time_for_rtc()\n        remote = self._get_utc_timetuple_from_device()\n        if isinstance(remote, tuple):\n            # tweak the format if required\n            remote = remote[:8]\n            while len(remote) < 8:\n                remote += (0,)\n            remote += (-1,)  # unknown DST\n            diff = int(time.mktime(this_computer) - time.mktime(remote))\n            if abs(diff) > 10:\n                print(\"WARNING: Device's real-time clock seems to be off by %s seconds\" % diff)\n        else:\n            assert isinstance(remote, str)\n            print(\"WARNING: Could not validate time: \" + remote)\n\n    def _get_utc_timetuple_from_device(self) -> Union[tuple, str]:\n        raise NotImplementedError()\n\n    def _resolve_unknown_epoch(self) -> int:\n        raise NotImplementedError()\n\n    def _get_actual_time_tuple_on_device(self):\n        raise NotImplementedError()\n\n    def _process_until_initial_prompt(self, clean):\n        raise NotImplementedError()\n\n    def _perform_idle_tasks(self):\n        self._forward_unexpected_output()\n\n    def _handle_user_input(self, msg: InputSubmission) -> None:\n        self._submit_input(msg.data)\n\n    def _handle_eof_command(self, msg: EOFCommand) -> None:\n        raise NotImplementedError()\n\n    def _handle_immediate_command(self, cmd: ImmediateCommand) -> None:\n        if cmd[\"name\"] == \"interrupt\":\n            # don't interrupt while command or input is being written\n            with self._interrupt_lock:\n                if self._current_command:\n                    self._current_command.interrupted = True\n                self._write(INTERRUPT_CMD)\n                time.sleep(0.1)\n                self._write(INTERRUPT_CMD)\n                time.sleep(0.1)\n                self._write(INTERRUPT_CMD)\n\n    def _handle_normal_command(self, cmd: CommandToBackend) -> None:\n        logger.info(\"Handling command '%s'\", cmd.name)\n        self._report_time(\"before \" + cmd.name)\n        assert isinstance(cmd, (ToplevelCommand, InlineCommand))\n\n        if \"local_cwd\" in cmd:\n            self._local_cwd = cmd[\"local_cwd\"]\n\n        def create_error_response(**kw):\n            if \"error\" not in kw:\n                kw[\"error\"] = traceback.format_exc()\n\n            if isinstance(cmd, ToplevelCommand):\n                return ToplevelResponse(command_name=cmd.name, **kw)\n            else:\n                return InlineResponse(command_name=cmd.name, **kw)\n\n        handler = getattr(self, \"_cmd_\" + cmd.name, None)\n\n        if handler is None:\n            response = create_error_response(error=\"Unknown command: \" + cmd.name)\n        else:\n            try:\n                response = handler(cmd)\n            except SystemExit as e:\n                # Must be caused by Thonny or plugins code\n                if isinstance(cmd, ToplevelCommand):\n                    logger.exception(\"Unexpected SystemExit\", exc_info=e)\n                response = create_error_response(SystemExit=True)\n            except UserError as e:\n                sys.stderr.write(str(e) + \"\\n\")\n                response = create_error_response()\n            except KeyboardInterrupt:\n                response = create_error_response(error=\"Interrupted\", interrupted=True)\n            except ConnectionClosedException as e:\n                self._on_connection_closed(e)\n            except ManagementError as e:\n                if \"KeyboardInterrupt\" in e.err:\n                    response = create_error_response(error=\"Interrupted\", interrupted=True)\n                else:\n                    self._send_output(\"THONNY FAILED TO EXECUTE COMMAND %s\\n\" % cmd.name, \"stderr\")\n                    # traceback.print_exc() # I'll know the trace from command\n                    self._show_error(\"\\n\")\n                    self._show_error(\"SCRIPT:\\n\" + e.script + \"\\n\")\n                    self._show_error(\"STDOUT:\\n\" + e.out + \"\\n\")\n                    self._show_error(\"STDERR:\\n\" + e.err + \"\\n\")\n\n                    response = create_error_response(error=\"ManagementError\")\n            except Exception as e:\n                _report_internal_error(e)\n                response = create_error_response(context_info=\"other unhandled exception\")\n\n        if response is None:\n            response = {}\n\n        if response is False:\n            # Command doesn't want to send any response\n            return\n\n        elif isinstance(response, dict):\n            if isinstance(cmd, ToplevelCommand):\n                response = ToplevelResponse(command_name=cmd.name, **response)\n            elif isinstance(cmd, InlineCommand):\n                response = InlineResponse(cmd.name, **response)\n\n        debug(\"cmd: \" + str(cmd) + \", respin: \" + str(response))\n        self.send_message(self._prepare_command_response(response, cmd))\n\n        self._check_perform_just_in_case_gc()\n\n        self._report_time(\"after \" + cmd.name)\n\n    def _should_keep_going(self) -> bool:\n        return self._is_connected()\n\n    def _is_connected(self) -> bool:\n        raise NotImplementedError()\n\n    def _connected_to_microbit(self):\n        return \"micro:bit\" in self._welcome_text.lower()\n\n    def _connected_to_pyboard(self):\n        return \"pyb\" in self._welcome_text.lower() or \"pyb\" in self._builtin_modules\n\n    def _connected_to_circuitpython(self):\n        return \"circuitpython\" in self._welcome_text.lower()\n\n    def _connected_to_pycom(self):\n        return \"pycom\" in self._welcome_text.lower()\n\n    def _fetch_welcome_text(self) -> str:\n        raise NotImplementedError()\n\n    def _fetch_builtin_modules(self):\n        raise NotImplementedError()\n\n    def _fetch_sys_path(self):\n        if not self._supports_directories():\n            return []\n        else:\n            return self._evaluate(\"__thonny_helper.sys.path\")\n\n    def _fetch_builtins_info(self):\n        result = {}\n\n        for name in [\"builtins.py\", \"builtins.pyi\"]:\n            path = os.path.join(self._api_stubs_path, name)\n            if os.path.exists(path):\n                result = parse_api_information(path)\n\n        return result\n\n    def _fetch_epoch_year(self):\n        if self._connected_to_microbit():\n            return None\n\n        # The proper solution would be to query time.gmtime, but most devices don't have this function.\n        # Luckily, time.localtime is good enough for deducing 1970 vs 2000 epoch.\n\n        # Most obvious solution would be to query for 0-time, but CP doesn't support anything below Y2000,\n        # so I'm querying this and adjusting later.\n        val = self._evaluate(\n            dedent(\n                \"\"\"\n            try:\n                from time import localtime as __thonny_localtime\n                __thonny_helper.print_mgmt_value(tuple(__thonny_localtime(%d)))\n                del __thonny_localtime\n            except Exception as e:\n                __thonny_helper.print_mgmt_value(str(e))\n        \"\"\"\n                % Y2000_EPOCH_OFFSET\n            )\n        )\n\n        if val[0] in (2000, 1999):\n            # when it gives 2000 (or end of 1999) for 2000-01-01 counted from Posix epoch, then it uses Posix epoch\n            # Used by Unix port, CP and Pycom\n            return 1970\n        elif val[0] in (2030, 2029):\n            # when it looks 30 years off, then it must be 2000 epoch\n            # Used by Pyboard and ESP-s\n            return 2000\n        else:\n            result = self._resolve_unknown_epoch()\n            if self._args.get(\"sync_time\") or self._args.get(\"validate_time\"):\n                print(\"WARNING: Could not determine epoch year (%s), assuming %s\" % (val, result))\n            return result\n\n    def _update_cwd(self):\n        if not self._connected_to_microbit():\n            self._cwd = self._evaluate(\"__thonny_helper.getcwd()\")\n\n    def _send_ready_message(self):\n        args = dict(cwd=self._cwd)\n        args[\"welcome_text\"] = self._welcome_text\n\n        self.send_message(ToplevelResponse(**args))\n\n    def _write(self, data):\n        raise NotImplementedError()\n\n    def _submit_input(self, cdata: str) -> None:\n        raise NotImplementedError()\n\n    def send_message(self, msg: MessageFromBackend) -> None:\n        if \"cwd\" not in msg:\n            msg[\"cwd\"] = self._cwd\n\n        if \"sys_path\" not in msg:\n            msg[\"sys_path\"] = self._sys_path\n\n        if \"lib_dirs\" not in msg:\n            msg[\"lib_dirs\"] = self._get_library_paths()\n\n        super().send_message(msg)\n\n    def _send_error_message(self, msg):\n        self._send_output(\"\\n\" + msg + \"\\n\", \"stderr\")\n\n    def _execute(self, script, capture_output=False) -> Tuple[str, str]:\n        if capture_output:\n            output_lists = {\"stdout\": [], \"stderr\": []}\n\n            def consume_output(data, stream_name):\n                assert isinstance(data, str)\n                output_lists[stream_name].append(data)\n\n            self._execute_with_consumer(script, consume_output)\n            result = [\"\".join(output_lists[name]) for name in [\"stdout\", \"stderr\"]]\n            return result[0], result[1]\n        else:\n            self._execute_with_consumer(script, self._send_output)\n            return \"\", \"\"\n\n    def _execute_with_consumer(self, script, output_consumer):\n        \"\"\"Ensures prompt and submits the script.\n        Reads (and doesn't return) until next prompt or connection error.\n\n        If capture is False, then forwards output incrementally. Otherwise\n        returns output if there are no problems, ie. all expected parts of the\n        output are present and it reaches a prompt.\n        Otherwise raises ManagementError.\n\n        NB! If the consumer raises an exception, the processing may stop between prompts.\n\n        The execution may block. In this case the user should do something (eg. provide\n        required input or issue an interrupt). The UI should remind the interrupt in case\n        of Thonny commands.\n        \"\"\"\n        raise NotImplementedError()\n\n    def _execute_without_output(self, script):\n        \"\"\"Meant for management tasks.\"\"\"\n        out, err = self._execute(script, capture_output=True)\n        if out or err:\n            raise ManagementError(script, out, err)\n\n    def _evaluate(self, script):\n        \"\"\"Evaluate the output of the script or raise ManagementError, if anything looks wrong.\n\n        Adds printing code if the script contains single expression and doesn't\n        already contain printing code\"\"\"\n        try:\n            ast.parse(script, mode=\"eval\")\n            prefix = \"__thonny_helper.print_mgmt_value(\"\n            suffix = \")\"\n            if not script.strip().startswith(prefix):\n                script = prefix + script + suffix\n        except SyntaxError:\n            pass\n\n        out, err = self._execute(script, capture_output=True)\n        if (\n            err\n            or MGMT_VALUE_START.decode(ENCODING) not in out\n            or MGMT_VALUE_END.decode(ENCODING) not in out\n        ):\n            raise ManagementError(script, out, err)\n\n        start_token_pos = out.index(MGMT_VALUE_START.decode(ENCODING))\n        end_token_pos = out.index(MGMT_VALUE_END.decode(ENCODING))\n\n        # a thread or IRQ handler may have written something before or after mgmt value\n        prefix = out[:start_token_pos]\n        value_str = out[start_token_pos + len(MGMT_VALUE_START) : end_token_pos]\n        suffix = out[end_token_pos + len(MGMT_VALUE_END) :]\n\n        try:\n            value = ast.literal_eval(value_str)\n            self._send_output(prefix, \"stdout\")\n            self._send_output(suffix, \"stdout\")\n            return value\n        except SyntaxError:\n            raise ManagementError(script, out, err)\n\n    def _forward_unexpected_output(self, stream_name=\"stdout\"):\n        \"Invoked between commands\"\n        raise NotImplementedError()\n\n    def _check_for_side_commands(self):\n        # NB! EOFCommand gets different treatment depending whether it is read during processing a command\n        # (ie. here) or it gets read when REPL is idle (ie. in mainloop)\n\n        # most likely the queue is empty\n        if self._incoming_message_queue.empty():\n            return\n\n        postponed = []\n        while not self._incoming_message_queue.empty():\n            cmd = self._incoming_message_queue.get()\n            if isinstance(cmd, InputSubmission):\n                self._submit_input(cmd.data)\n            elif isinstance(cmd, EOFCommand):\n                # in this context it is not supposed to soft-reboot\n                self._write(b\"\\x04\")\n            else:\n                postponed.append(cmd)\n\n        # put back postponed commands\n        while postponed:\n            self._incoming_message_queue.put(postponed.pop(0))\n\n    def _supports_directories(self):\n        # NB! make sure self._cwd is queried first\n        return bool(self._cwd)\n\n    def _cmd_cd(self, cmd):\n        if len(cmd.args) == 1:\n            if not self._supports_directories():\n                raise UserError(\"This device doesn't have directories\")\n\n            path = cmd.args[0]\n            self._execute(\"__thonny_helper.chdir(%r)\" % path)\n            self._update_cwd()\n            return {}\n        else:\n            raise UserError(\"%cd takes one parameter\")\n\n    def _cmd_Run(self, cmd):\n        raise NotImplementedError()\n\n    def _cmd_execute_source(self, cmd):\n        # TODO: clear last object inspector requests dictionary\n        if cmd.source:\n            source = self._add_expression_statement_handlers(cmd.source)\n            self._report_time(\"befexeccc\")\n            self._execute(source, capture_output=False)\n            self._check_prepare()\n            self._report_time(\"affexeccc\")\n        # TODO: assign last value to _\n        return {}\n\n    def _cmd_execute_system_command(self, cmd):\n        raise NotImplementedError()\n\n    def _cmd_get_globals(self, cmd):\n        if cmd.module_name == \"__main__\":\n            globs = self._evaluate(\n                \"{name : (__thonny_helper.repr(value), id(value)) for (name, value) in globals().items() if not name.startswith('__')}\"\n            )\n        else:\n            globs = self._evaluate(\n                dedent(\n                    \"\"\"\n                import %s as __mod_for_globs\n                __thonny_helper.print_mgmt_value(\n                    {name : (__thonny_helper.repr(getattr(__mod_for_globs, name)), \n                             id(getattr(__mod_for_globs, name)))\n                        in dir(__mod_for_globs) \n                        if not name.startswith('__')}\n                )\n                del __mod_for_globs\n            \"\"\"\n                )\n            )\n\n        value_infos = {}\n        for name, pair in globs.items():\n            value_infos[name] = ValueInfo(pair[1], pair[0])\n\n        return {\"module_name\": cmd.module_name, \"globals\": value_infos}\n\n    def _cmd_get_fs_info(self, cmd):\n        raise NotImplementedError()\n\n    def _cmd_get_object_info(self, cmd):\n        context_id = cmd.get(\"context_id\", None)\n        basic_info = self._find_basic_object_info(cmd.object_id, context_id)\n        if basic_info is None:\n            return {\"id\": cmd.object_id, \"error\": \"object info not available\"}\n\n        type_name = basic_info[\"type\"].replace(\"<class '\", \"\").replace(\"'>\", \"\").strip()\n        info = {\n            \"id\": cmd.object_id,\n            \"repr\": basic_info[\"repr\"],\n            \"type\": basic_info[\"type\"],\n            \"full_type_name\": type_name,\n            \"attributes\": {},\n        }\n\n        info.update(self._get_object_info_extras(type_name))\n        if cmd.include_attributes:\n            info[\"attributes\"] = self._get_object_attributes(cmd.all_attributes)\n\n        # need to keep the reference corresponding to object_id so that it can be later found as next context object\n        # remove non-relevant items\n        # TODO: add back links\n        # relevant = set([cmd.object_id] + cmd.back_links + cmd.forward_links)\n        self._execute(\n            dedent(\n                \"\"\"\n                if id(__thonny_helper.object_info) not in __thonny_helper.inspector_values:\n                    __thonny_helper.inspector_values[id(__thonny_helper.object_info)] = __thonny_helper.object_info\n            \"\"\"\n            )\n        )\n\n        return {\"id\": cmd.object_id, \"info\": info}\n\n    def _find_basic_object_info(self, object_id, context_id):\n        \"\"\"If object is found then returns basic info and leaves object reference\n        to __thonny_helper.object_info.\n\n        Can't leave it in a global object, because when querying globals(),\n        repr(globals()) would cause inifite recursion.\"\"\"\n\n        result = self._evaluate(\n            dedent(\n                \"\"\"\n                for __thonny_helper.object_info in (\n                        list(globals().values()) \n                        + __thonny_helper.last_repl_values\n                        + list(__thonny_helper.inspector_values.values())):\n                    if id(__thonny_helper.object_info) == %d:\n                        __thonny_helper.print_mgmt_value({\n                            \"repr\" : repr(__thonny_helper.object_info),\n                            \"type\": str(type(__thonny_helper.object_info))\n                        })\n                        break\n                else:\n                    __thonny_helper.object_info = None\n                    __thonny_helper.print_mgmt_value(None)\n            \"\"\"\n                % object_id\n            )\n        )\n\n        if result is not None:\n            return result\n        elif context_id is not None:\n            return self._evaluate(\n                dedent(\n                    \"\"\"\n                __thonny_helper.context_value = __thonny_helper.inspector_values.get(%d, None)\n                \n                if __thonny_helper.context_value is None:\n                    __thonny_helper.object_info = None\n                    __thonny_helper.print_mgmt_value(None)\n                else:\n                    __thonny_helper.context_children = [\n                         getattr(__thonny_helper.context_value, name)\n                         for name in dir(__thonny_helper.context_value)\n                    ]\n                    if isinstance(__thonny_helper.context_value, (set, tuple, list)):\n                        __thonny_helper.context_children += list(__thonny_helper.context_value)\n                    elif isinstance(__thonny_helper.context_value, dict):\n                        __thonny_helper.context_children += list(__thonny_helper.context_value.values())\n                    \n                    for __thonny_helper.object_info in __thonny_helper.context_children:\n                        if id(__thonny_helper.object_info) == %d:\n                            __thonny_helper.print_mgmt_value({\n                                \"repr\" : __thonny_helper.repr(__thonny_helper.object_info),\n                                \"type\": str(type(__thonny_helper.object_info))\n                            })\n                            break\n                    else:\n                        __thonny_helper.object_info = None\n                        \n                __thonny_helper.context_value = None\n                __thonny_helper.context_children = None\n            \"\"\"\n                    % (context_id, object_id)\n                )\n            )\n        else:\n            return None\n\n    def _get_object_attributes(self, all_attributes):\n        \"\"\"object is given in __thonny_helper.object_info \"\"\"\n        atts = self._evaluate(\n            \"{name : (\"\n            \"   id(getattr(__thonny_helper.object_info, name)),\"\n            \"    __thonny_helper.repr(getattr(__thonny_helper.object_info, name))\"\n            \") for name in dir(__thonny_helper.object_info)}\"\n        )\n        return {\n            name: ValueInfo(atts[name][0], atts[name][1])\n            for name in atts\n            if not name.startswith(\"__\") or all_attributes\n        }\n\n    def _get_object_info_extras(self, type_name):\n        \"\"\"object is given in __thonny_helper.object_info \"\"\"\n        if type_name in (\"list\", \"tuple\", \"set\"):\n            items = self._evaluate(\n                \"[(id(x), __thonny_helper.repr(x)) for x in __thonny_helper.object_info]\"\n            )\n            return {\"elements\": [ValueInfo(x[0], x[1]) for x in items]}\n        elif type_name == \"dict\":\n            items = self._evaluate(\n                \"[((id(key), __thonny_helper.repr(key)), (id(__thonny_helper.object_info[key]), \"\n                \"__thonny_helper.repr(__thonny_helper.object_info[key]))) for key in __thonny_helper.object_info]\"\n            )\n            return {\n                \"entries\": [\n                    (ValueInfo(x[0][0], x[0][1]), ValueInfo(x[1][0], x[1][1])) for x in items\n                ]\n            }\n        else:\n            return {}\n\n    def _cmd_delete(self, cmd):\n        assert cmd.paths\n        self._delete_sorted_paths(sorted(cmd.paths, key=len, reverse=True))\n\n    def _cmd_get_active_distributions(self, cmd):\n        try:\n            dists = {}\n            for path in self._get_library_paths():\n                children = self._get_dir_children_info(path)\n                if children is None:\n                    continue\n                for name, info in children.items():\n                    if info[\"kind\"] == \"dir\":\n                        key = name\n                    elif name.endswith(\".py\"):\n                        key = name[:-3]\n                    elif name.endswith(\".mpy\"):\n                        key = name[:-4]\n                    else:\n                        continue\n\n                    dists[key] = {\n                        \"project_name\": key,\n                        \"key\": key,\n                        \"guessed_pypi_name\": self._guess_package_pypi_name(key),\n                        \"location\": path,\n                        \"version\": \"n/a\",\n                    }\n\n            return dict(\n                distributions=dists,\n                usersitepackages=None,\n            )\n        except Exception:\n            return InlineResponse(\"get_active_distributions\", error=traceback.format_exc())\n\n    def _cmd_get_module_info(self, cmd):\n        location = None\n        effective_items = []\n        shadowed_items = []\n\n        for lib_dir in self._get_library_paths():\n            dir_children = self._get_dir_children_info(lib_dir)\n            if not dir_children:\n                continue\n\n            # print(lib_dir, dir_children)\n\n            if cmd.module_name in dir_children and dir_children[cmd.module_name][\"kind\"] == \"dir\":\n                # dir takes precedence over .py and .mpy\n                # presence of __init__.py is not required\n                dir_full_path = lib_dir + \"/\" + cmd.module_name\n                descendants = self._get_dir_descendants_info(dir_full_path)\n                # print(\"desc\", dir_full_path, descendants)\n                desc_paths = list(sorted(descendants.keys()))\n\n                if not effective_items:  # ie. it's the first one found\n                    effective_items.append(dir_full_path)\n                    effective_items.extend(desc_paths)\n                    location = lib_dir\n                else:\n                    shadowed_items.extend(desc_paths)\n\n            for suffix in [\".py\", \".mpy\"]:\n                with_suffix = cmd.module_name + suffix\n                if with_suffix in dir_children and dir_children[with_suffix][\"kind\"] == \"file\":\n                    full_path = lib_dir + \"/\" + with_suffix\n                    if not effective_items:\n                        effective_items.append(full_path)\n                        location = lib_dir\n                    else:\n                        shadowed_items.append(full_path)\n\n        return {\n            \"location\": location,\n            \"effective_items\": effective_items,\n            \"shadowed_items\": shadowed_items,\n            \"module_name\": cmd.module_name,\n        }\n\n    def _get_library_paths(self) -> [str]:\n        \"\"\"Returns list of directories which are supposed to contain library code\"\"\"\n        if self._sys_path is None:\n            return None\n\n        return [path for path in self._sys_path if \"lib\" in path and path.startswith(\"/\")]\n\n    def _guess_package_pypi_name(self, installed_name) -> str:\n        return \"micropython-\" + installed_name\n\n    def _mkdir(self, path: str) -> None:\n        # assumes part path exists and path doesn't\n        self._execute_without_output(\"__thonny_helper.os.mkdir(%r)\" % path)\n\n    def _delete_sorted_paths(self, paths):\n        self._execute_without_output(\n            dedent(\n                \"\"\"\n            def __thonny_delete(path):\n                if __thonny_helper.os.stat(path)[0] & 0o170000 == 0o040000:\n                    for name in __thonny_helper.listdir(path):\n                        child_path = path + \"/\" + name\n                        __thonny_delete(child_path)\n                    __thonny_helper.rmdir(path)\n                else:\n                    __thonny_helper.os.remove(path)\n            \n            for __thonny_path in %r: \n                __thonny_delete(__thonny_path)\n                \n            del __thonny_path\n            del __thonny_delete\n            \n        \"\"\"\n            )\n            % paths\n        )\n\n    def _get_stat(\n        self, path: str\n    ) -> Optional[Tuple[int, int, int, int, int, int, int, int, int, int]]:\n        if not self._supports_directories():\n            func = \"size\"\n        else:\n            func = \"stat\"\n\n        stat = self._evaluate(\n            dedent(\n                \"\"\"\n            try:\n                __thonny_helper.print_mgmt_value(__thonny_helper.os.%s(%r))\n            except Exception:\n                __thonny_helper.print_mgmt_value(None)\n            \"\"\"\n            )\n            % (func, path)\n        )\n\n        if stat is None:\n            return None\n        elif isinstance(stat, int):\n            return (0b1000000000000000, 0, 0, 0, 0, 0, stat, 0, 0, 0)\n        else:\n            return stat\n\n    def _cmd_mkdir(self, cmd):\n        assert self._supports_directories()\n        assert cmd.path.startswith(\"/\")\n        assert not cmd.path.startswith(\"//\")\n        self._mkdir(cmd.path)\n\n    def _cmd_editor_autocomplete(self, cmd):\n        # template for the response\n        result = dict(source=cmd.source, row=cmd.row, column=cmd.column)\n\n        try:\n            from thonny import jedi_utils\n\n            completions = jedi_utils.get_script_completions(\n                cmd.source,\n                cmd.row,\n                cmd.column,\n                filename=cmd.filename,\n                sys_path=[self._api_stubs_path],\n            )\n            result[\"completions\"] = self._filter_completions(completions)\n        except Exception as e:\n            logger.exception(\"Problem with editor autocomplete\", exc_info=e)\n            result[\"error\"] = \"Autocomplete error\"\n\n        return result\n\n    def _filter_completions(self, completions):\n        # filter out completions not applicable to MicroPython\n        result = []\n        for completion in completions:\n            if completion.name.startswith(\"__\"):\n                continue\n\n            if completion.parent() and completion.full_name:\n                parent_name = completion.parent().name\n                name = completion.name\n                root = completion.full_name.split(\".\")[0]\n\n                # jedi proposes names from CPython builtins\n                if root in self._builtins_info and name not in self._builtins_info[root]:\n                    continue\n\n                if parent_name == \"builtins\" and name not in self._builtins_info:\n                    continue\n\n            result.append({\"name\": completion.name, \"complete\": completion.complete})\n\n        return result\n\n    def _cmd_shell_autocomplete(self, cmd):\n        source = cmd.source\n\n        # TODO: combine dynamic results and jedi results\n        if source.strip().startswith(\"import \") or source.strip().startswith(\"from \"):\n            # this needs the power of jedi\n            response = {\"source\": cmd.source}\n\n            try:\n                from thonny import jedi_utils\n\n                # at the moment I'm assuming source is the code before cursor, not whole input\n                lines = source.split(\"\\n\")\n                completions = jedi_utils.get_script_completions(\n                    source, len(lines), len(lines[-1]), \"<shell>\", sys_path=[self._api_stubs_path]\n                )\n                response[\"completions\"] = self._filter_completions(completions)\n            except Exception as e:\n                logger.exception(\"Problem with shell autocomplete\", exc_info=e)\n                response[\"error\"] = \"Autocomplete error\"\n\n            return response\n        else:\n            # use live data\n            match = re.search(\n                r\"(\\w+\\.)*(\\w+)?$\", source\n            )  # https://github.com/takluyver/ubit_kernel/blob/master/ubit_kernel/kernel.py\n            if match:\n                prefix = match.group()\n                if \".\" in prefix:\n                    obj, prefix = prefix.rsplit(\".\", 1)\n                    names = self._evaluate(\n                        \"dir({obj}) if '{obj}' in locals() or '{obj}' in globals() else []\".format(\n                            obj=obj\n                        )\n                    )\n                else:\n                    names = self._evaluate(\"dir()\")\n            else:\n                names = []\n                prefix = \"\"\n\n            completions = []\n\n            # prevent TypeError (iterating over None)\n            names = names if names else []\n\n            for name in names:\n                if name.startswith(prefix) and not name.startswith(\"__\"):\n                    completions.append({\"name\": name, \"complete\": name[len(prefix) :]})\n\n            return {\"completions\": completions, \"source\": source}\n\n    def _cmd_dump_api_info(self, cmd):\n        \"For use during development of the plug-in\"\n\n        self._execute_without_output(\n            dedent(\n                \"\"\"\n            def __get_object_atts(obj):\n                result = []\n                errors = []\n                for name in dir(obj):\n                    try:\n                        val = getattr(obj, name)\n                        result.append((name, repr(val), repr(type(val))))\n                    except BaseException as e:\n                        errors.append(\"Couldn't get attr '%s' from object '%r', Err: %r\" % (name, obj, e))\n                return (result, errors)\n        \"\"\"\n            )\n        )\n\n        for module_name in sorted(self._fetch_builtin_modules()):\n            if (\n                not module_name.startswith(\"_\")\n                and not module_name.startswith(\"adafruit\")\n                # and not module_name == \"builtins\"\n            ):\n                file_name = os.path.join(\n                    self._api_stubs_path, module_name.replace(\".\", \"/\") + \".py\"\n                )\n                self._dump_module_stubs(module_name, file_name)\n\n    def _dump_module_stubs(self, module_name, file_name):\n        self._execute_without_output(\"import {0}\".format(module_name))\n\n        os.makedirs(os.path.dirname(file_name), exist_ok=True)\n        with io.open(file_name, \"w\", encoding=\"utf-8\", newline=\"\\n\") as fp:\n            if module_name not in [\n                \"webrepl\",\n                \"_webrepl\",\n                \"gc\",\n                \"http_client\",\n                \"http_client_ssl\",\n                \"http_server\",\n                \"framebuf\",\n                \"example_pub_button\",\n                \"flashbdev\",\n            ]:\n                self._dump_object_stubs(fp, module_name, \"\")\n\n    def _dump_object_stubs(self, fp, object_expr, indent):\n        if object_expr in [\n            \"docs.conf\",\n            \"pulseio.PWMOut\",\n            \"adafruit_hid\",\n            \"upysh\",\n            # \"webrepl\",\n            # \"gc\",\n            # \"http_client\",\n            # \"http_server\",\n        ]:\n            print(\"SKIPPING problematic name:\", object_expr)\n            return\n\n        print(\"DUMPING\", indent, object_expr)\n        items, errors = self._evaluate(\"__get_object_atts({0})\".format(object_expr))\n\n        if errors:\n            print(\"ERRORS\", errors)\n\n        for name, rep, typ in sorted(items, key=lambda x: x[0]):\n            if name.startswith(\"__\"):\n                continue\n\n            print(\"DUMPING\", indent, object_expr, name)\n            print(\"  * \" + name + \" : \" + typ)\n\n            if typ in [\"<class 'function'>\", \"<class 'bound_method'>\"]:\n                fp.write(indent + \"def \" + name + \"():\\n\")\n                fp.write(indent + \"    pass\\n\\n\")\n            elif typ in [\"<class 'str'>\", \"<class 'int'>\", \"<class 'float'>\"]:\n                fp.write(indent + name + \" = \" + rep + \"\\n\")\n            elif typ == \"<class 'type'>\" and indent == \"\":\n                # full expansion only on toplevel\n                fp.write(\"\\n\")\n                fp.write(indent + \"class \" + name + \":\\n\")  # What about superclass?\n                fp.write(indent + \"    ''\\n\")\n                self._dump_object_stubs(fp, \"{0}.{1}\".format(object_expr, name), indent + \"    \")\n            else:\n                # keep only the name\n                fp.write(indent + name + \" = None\\n\")\n\n    def _join_remote_path_parts(self, left, right):\n        if left == \"\":  # micro:bit\n            assert not self._supports_directories()\n            return right.strip(\"/\")\n\n        return left.rstrip(\"/\") + \"/\" + right.strip(\"/\")\n\n    def _get_file_size(self, path: str) -> int:\n        stat = self._get_stat(path)\n        if stat is None:\n            raise RuntimeError(\"Path '%s' does not exist\" % path)\n\n        return stat[STAT_SIZE_INDEX]\n\n    def _get_stat_mode(self, path: str) -> Optional[int]:\n        stat = self._get_stat(path)\n        if stat is None:\n            return None\n        return stat[0]\n\n    def _get_path_info(self, path: str) -> Optional[Dict]:\n        stat = self._get_stat(path)\n\n        if stat is None:\n            return None\n\n        _, basename = unix_dirname_basename(path)\n        return self._expand_stat(stat, basename)\n\n    def _get_dir_children_info(\n        self, path: str, include_hidden: bool = False\n    ) -> Optional[Dict[str, Dict]]:\n        \"\"\"The key of the result dict is simple name\"\"\"\n        if self._supports_directories():\n            raw_data = self._evaluate(\n                dedent(\n                    \"\"\"\n                __thonny_result = {} \n                try:\n                    __thonny_names = __thonny_helper.listdir(%r)\n                except OSError:\n                    __thonny_helper.print_mgmt_value(None) \n                else:\n                    for __thonny_name in __thonny_names:\n                        if not __thonny_name.startswith(\".\") or %r:\n                            try:\n                                __thonny_result[__thonny_name] = __thonny_helper.os.stat(%r + __thonny_name)\n                            except OSError as e:\n                                __thonny_result[__thonny_name] = str(e)\n                    __thonny_helper.print_mgmt_value(__thonny_result)\n            \"\"\"\n                )\n                % (path, include_hidden, path.rstrip(\"/\") + \"/\")\n            )\n            if raw_data is None:\n                return None\n        elif path == \"\":\n            # used to represent all files in micro:bit\n            raw_data = self._evaluate(\n                \"{name : __thonny_helper.os.size(name) for name in __thonny_helper.os.listdir()}\"\n            )\n        else:\n            return None\n\n        return {name: self._expand_stat(raw_data[name], name) for name in raw_data}\n\n    def _on_connection_closed(self, error=None):\n        self._forward_unexpected_output(\"stderr\")\n        message = \"Connection lost\"\n        if error:\n            message += \" (\" + str(error) + \")\"\n        self._send_output(\"\\n\" + message + \"\\n\", \"stderr\")\n        self._send_output(\"\\n\" + \"Use Stop/Restart to reconnect.\" + \"\\n\", \"stderr\")\n        sys.exit(EXPECTED_TERMINATION_CODE)\n\n    def _show_error(self, msg):\n        self._send_output(msg + \"\\n\", \"stderr\")\n\n    def _add_expression_statement_handlers(self, source):\n        try:\n            root = ast.parse(source)\n\n            from thonny.ast_utils import mark_text_ranges\n\n            mark_text_ranges(root, source)\n\n            expr_stmts = []\n            for node in ast.walk(root):\n                if isinstance(node, ast.Expr):\n                    expr_stmts.append(node)\n\n            marker_prefix = \"__thonny_helper.print_repl_value(\"\n            marker_suffix = \")\"\n\n            lines = source.splitlines(keepends=True)\n            for node in reversed(expr_stmts):\n                lines[node.end_lineno - 1] = (\n                    lines[node.end_lineno - 1][: node.end_col_offset]\n                    + marker_suffix\n                    + lines[node.end_lineno - 1][node.end_col_offset :]\n                )\n\n                lines[node.lineno - 1] = (\n                    lines[node.lineno - 1][: node.col_offset]\n                    + marker_prefix\n                    + lines[node.lineno - 1][node.col_offset :]\n                )\n\n            new_source = \"\".join(lines)\n            # make sure it parses\n            ast.parse(new_source)\n            return new_source\n        except SyntaxError:\n            return source\n        except Exception as e:\n            logger.warning(\"Problem adding Expr handlers\", exc_info=e)\n            return source\n\n    def _avoid_printing_expression_statements(self, source):\n        # temporary solution for https://github.com/thonny/thonny/issues/1441\n        try:\n            root = ast.parse(source)\n\n            from thonny.ast_utils import mark_text_ranges\n\n            mark_text_ranges(root, source)\n\n            expr_stmts = []\n            for node in ast.walk(root):\n                if isinstance(node, ast.Expr):\n                    expr_stmts.append(node)\n\n            marker_prefix = \"\"\n            marker_suffix = \" and None or None\"\n\n            lines = source.splitlines(keepends=True)\n            for node in reversed(expr_stmts):\n                lines[node.end_lineno - 1] = (\n                    lines[node.end_lineno - 1][: node.end_col_offset]\n                    + marker_suffix\n                    + lines[node.end_lineno - 1][node.end_col_offset :]\n                )\n\n                lines[node.lineno - 1] = (\n                    lines[node.lineno - 1][: node.col_offset]\n                    + marker_prefix\n                    + lines[node.lineno - 1][node.col_offset :]\n                )\n\n            new_source = \"\".join(lines)\n            # make sure it parses\n            ast.parse(new_source)\n            return new_source\n        except SyntaxError:\n            return source\n        except Exception as e:\n            logger.warning(\"Problem adding Expr handlers\", exc_info=e)\n            return source\n\n    def _report_time(self, caption):\n        new_time = time.time()\n        # print(\"TIME %s: %.3f\" % (caption, new_time - self._prev_time))\n        self._prev_time = new_time\n\n    def _system_time_to_posix_time(self, value: float) -> float:\n        result = value + self._get_epoch_offset()\n        if not self._args[\"utc_clock\"]:\n            # convert to UTC\n            result += time.timezone\n\n        return result\n\n    def _get_epoch_offset(self) -> int:\n        if self._epoch_year == 1970:\n            return 0\n        elif self._epoch_year == 2000:\n            return Y2000_EPOCH_OFFSET\n        else:\n            raise NotImplementedError()\n\n    def _expand_stat(self, stat: Union[Tuple, int, str], basename: str) -> Dict:\n        error = None\n        if isinstance(stat, int):\n            # file size is only info available for micro:bit files\n            size = stat\n            modified = None\n            kind = \"file\"\n        elif isinstance(stat, str):\n            kind = None\n            size = None\n            modified = None\n            error = stat\n        else:\n            assert isinstance(stat, tuple)\n            if stat[STAT_KIND_INDEX] & 0o170000 == 0o040000:\n                kind = \"dir\"\n                size = None\n            else:\n                kind = \"file\"\n                size = stat[STAT_SIZE_INDEX]\n\n            modified = self._system_time_to_posix_time(stat[STAT_MTIME_INDEX])\n\n        result = {\n            \"kind\": kind,\n            \"size\": size,\n            \"modified\": modified,\n            \"hidden\": basename.startswith(\".\"),\n        }\n        if error:\n            result[\"error\"] = error\n        return result\n\n    def _decode(self, data: bytes) -> str:\n        return data.decode(encoding=\"UTF-8\", errors=\"replace\")\ndef parse_api_information(file_path):\n    import tokenize\n\n    with tokenize.open(file_path) as fp:\n        source = fp.read()\n\n    tree = ast.parse(source)\n\n    defs = {}\n\n    # TODO: read also docstrings ?\n\n    for toplevel_item in tree.body:\n        if isinstance(toplevel_item, ast.ClassDef):\n            class_name = toplevel_item.name\n            member_names = []\n            for item in toplevel_item.body:\n                if isinstance(item, ast.FunctionDef):\n                    member_names.append(item.name)\n                elif isinstance(item, ast.Assign):\n                    # TODO: check Python 3.4\n                    \"TODO: item.targets[0].id\"\n\n            defs[class_name] = member_names\n\n    return defs\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom thonny.plugins.micropython.backend import * # noqa: autoimport\nfrom thonny.plugins.micropython.backend import ends_overlap # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 0 == ends_overlap(\"1234567890abcdef\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == ends_overlap(\"xy\", \"yx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert ends_overlap(\"fg\", \"\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 2 == ends_overlap(\"xx\", \"xx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 4 == ends_overlap(\"aaaaaaa\", \"aaaa\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 3 == ends_overlap(\"he123\", \"1234\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert ends_overlap(\"def\", \"defxyz\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 0 == ends_overlap(\"123\", \"abc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 0 == ends_overlap(\"abc\", \"def\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 0 == ends_overlap(\"\", \"34\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert ends_overlap(\"\", \"\") == len(\"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 1 == ends_overlap(\"x\", \"xx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 1 == ends_overlap(\"1\", \"1\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 0 == ends_overlap('12345', '12346')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert ends_overlap(\"foobar\", \"foobarbaz\") == 6\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert ends_overlap(\"somethig\", \"somethigx\") == len(\"somethig\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert ends_overlap(\"qweq\", \"weq\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 0 == ends_overlap(\"bc\", \"abd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 0 == ends_overlap(\"xxx\", \"yyy\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert ends_overlap(\"qwe\", \"weq\") == 2\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 3 == ends_overlap(\"asd\", \"asdf\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 0 == ends_overlap(\"qweasd\", \"qwe\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 1 == ends_overlap(\"aa\", \"a\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 3 == ends_overlap(\"xxx\", \"xxxxx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 0 == ends_overlap(\"ab\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert ends_overlap(\"qwer\", \"yz\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 0 == ends_overlap(\"deabc\", \"xyz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 0 == ends_overlap(\"qwe\", \"asd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 0 == ends_overlap(\"1234\", \"5678\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert ends_overlap(\"ABCD\", \"BCDx\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 4 == ends_overlap(\"1234\", \"1234\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 2 == ends_overlap(\"1234\", \"34\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert 2 == ends_overlap('abc', 'bc')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert ends_overlap(\"123\", \"456\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 0 == ends_overlap(\"abc\", \"abd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 0 == ends_overlap(\"bc\", \"abc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 0 == ends_overlap(\"aaaaaaa\", \"bbbb\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 3 == ends_overlap(\"12345\", \"345aa\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert ends_overlap(\"\", \"....\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert ends_overlap(\"...\", \".\") == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert ends_overlap(\"\", \"fg\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert 1 == ends_overlap(\"ab\", \"b\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert 0 == ends_overlap(\"spam\", \"blabla\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert 3 == ends_overlap(\"abcd\", \"bcde\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    assert 0 == ends_overlap(\"abc\", \"de\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    assert 3 == ends_overlap(\"qweasd\", \"asd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_118():\n    assert 0 == ends_overlap(\"xyz123\", \"456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_120():\n    assert ends_overlap(\"foobar\", \"baz\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_125():\n    assert 3 == ends_overlap(\"abc\", \"abcd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_126():\n    assert 0 == ends_overlap(\"\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    assert 0 == ends_overlap(\"123456789\", \"1234567\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    assert ends_overlap(\"\", \"456\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    assert ends_overlap(\"fg\", \"fg\") == 2\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_132():\n    assert 3 == ends_overlap(\"123aaa\", \"aaa123\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    assert 0 == ends_overlap(\"123\", \"456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_134():\n    assert 0 == ends_overlap(\"ab\", \"de\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_136():\n    assert 0 == ends_overlap(\"qwe\", \"xyz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    assert 2 == ends_overlap(\"xx\", \"xxx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_139():\n    assert 4 == ends_overlap(\"abcd\", \"abcdabcd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert 0 == ends_overlap(\"xyz\", \"123\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    assert 0 == ends_overlap(\"\", \"1\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_150():\n    assert 0 == ends_overlap(\"1\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_152():\n    assert ends_overlap(\"ABCD\", \"BCDX\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    assert 0 == ends_overlap(\"yx\", \"z\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_156():\n    assert ends_overlap(\"123\", \"9123\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_157():\n    assert 1 == ends_overlap(\"xxx\", \"xz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_159():\n    assert 0 == ends_overlap(\"asd\", \"xyz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_160():\n    assert ends_overlap(\"hey\", \"abc\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_161():\n    assert 3 == ends_overlap(\"123456\", \"456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    assert ends_overlap(\"...\", \"..\") == 2\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    assert 0 == ends_overlap(\"aabba\", \"b\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_166():\n    assert ends_overlap(\"qwer\", \"wer\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_167():\n    assert ends_overlap(\"somethig\", \"somethig\") == len(\"somethig\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_168():\n    assert 0 == ends_overlap(\"123\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_170():\n    assert 0 == ends_overlap('12345', '')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_172():\n    assert ends_overlap(\"abcdef\", \"def\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_173():\n    assert 3 == ends_overlap(\"ham\", \"hamburger\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_174():\n    assert 0 == ends_overlap(\"aa\", \"b\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_177():\n    assert 2 == ends_overlap(\"abab\", \"aba\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_179():\n    assert ends_overlap(\"qwer\", \"qwerty\") == 4\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_187():\n    assert 0 == ends_overlap(\"\", \"456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_188():\n    assert 0 == ends_overlap(\"123456789\", \"123\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_189():\n    assert 3 == ends_overlap(\"abc\", \"abc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_191():\n    assert ends_overlap(\"defxyz\", \"def\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_195():\n    assert 0 == ends_overlap(\"111111\", \"211111234\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_197():\n    assert 3 == ends_overlap(\"asd\", \"asd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_200():\n    assert 2 == ends_overlap(\"aaa\", \"aa\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_202():\n    assert ends_overlap(\"abcde\", \"cde\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_203():\n    assert 2 == ends_overlap(\"abaa\", \"aa\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_204():\n    assert ends_overlap(\"...\", \"...\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_205():\n    assert 0 == ends_overlap(\"def\", \"abc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_208():\n    assert 3 == ends_overlap(\"123\", \"1234\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_211():\n    assert 0 == ends_overlap(\"x\", \"y\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_213():\n    assert 1 == ends_overlap(\"1\", \"123\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_215():\n    assert 2 == ends_overlap(\"abc\", \"bc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_217():\n    assert 0 == ends_overlap(\"\", \"1234567890abcdef\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_226():\n    assert ends_overlap(\"somethig\", \"xsomethig\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_227():\n    assert 1 == ends_overlap(\"12345\", \"5678\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_229():\n    assert ends_overlap(\"...\", \"\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_231():\n    assert 1 == ends_overlap(\"x\", \"x\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_232():\n    assert ends_overlap(\"qwe\", \"asd\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_234():\n    assert 3 == ends_overlap(\"xyz123\", \"123456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_235():\n    assert 0 == ends_overlap(\"123\", \"543\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_239():\n    assert 0 == ends_overlap(\"de\", \"abcde\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_240():\n    assert 3 == ends_overlap('abc', 'abc')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_241():\n    assert ends_overlap(\"somethig\", \"qwe\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_242():\n    assert 0 == ends_overlap(\"xyz\", \"axyz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_243():\n    assert 0 == ends_overlap('abc', 'klm')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_246():\n    assert 2 == ends_overlap(\"abcde\", \"deabc\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_248():\n    assert 1 == ends_overlap(\"y\", \"yz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_249():\n    assert 0 == ends_overlap(\"y\", \"x\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_251():\n    assert ends_overlap(\"\", \"\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_253():\n    assert 0 == ends_overlap(\"111111\", \"2111112\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_254():\n    assert 0 == ends_overlap(\"bc\", \"zcd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_255():\n    assert 2 == ends_overlap(\"123456\", \"5678\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_258():\n    assert 3 == ends_overlap(\"xxx\", \"xxx\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_261():\n    assert ends_overlap(\"\", \"x\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_262():\n    assert ends_overlap(\"123\", \"\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_263():\n    assert ends_overlap(\"foobar\", \"barbaz\") == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_264():\n    assert 0 == ends_overlap('12345', 'a')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_265():\n    assert 1 == ends_overlap(\"abaa\", \"a\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_266():\n    assert 0 == ends_overlap(\"abcd\", \"qrst\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_267():\n    assert 0 == ends_overlap(\"a123456\", \"78901235\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_272():\n    assert 0 == ends_overlap(\"123456789\", \"12345\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_273():\n    assert 0 == ends_overlap('123', '456')\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_274():\n    assert 2 == ends_overlap(\"ab\", \"ab\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_279():\n    assert ends_overlap(\"qwer\", \"xyz\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_280():\n    assert 0 == ends_overlap(\"AB\", \"Cd\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_281():\n    assert 0 == ends_overlap(\"he123\", \"\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_283():\n    assert ends_overlap(\"x\", \"\") == 0\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_284():\n    assert 0 == ends_overlap(\"1234567890\", \"123456\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_285():\n    assert 0 == ends_overlap(\"\", \"xyz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_286():\n    assert 1 == ends_overlap(\"a\", \"a\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_288():\n    assert 2 == ends_overlap(\"xyzzz\", \"zz\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_289():\n    assert 0 == ends_overlap(\"12345\", \"654321\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_296():\n    assert 0 == ends_overlap(\"a\", \"b\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_297():\n    assert 0 == ends_overlap(\"\", \"b\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_299():\n    assert 0 == ends_overlap(\"asd\", \"qwe\")\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '345') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"4567\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567\", \"34567\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ham\", \"hamcrest\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"abcdabcdabcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a\", \"b\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdef\", \"defgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xaxaxax\", \"aaaaaa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"987654321\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"ba\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"abcdx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abab\", \"ababa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"qweasd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCDX\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"11111\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"54321\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"de\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell123\", \"1234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyzzz\", \"yzz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"111111234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"cdefgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"asd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"abcdefgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell\", \"lola\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"aaa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bcdx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"cdefghi\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"cd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xz\", \"yz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"456\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"cde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abab\", \"bab\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"abcdabcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"fg\", \"fx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"deabc\", \"abcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yx\", \"yz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asdf\", \"asd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"cdexyz\", \"abcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_66\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"yxx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"def\", \"xyzdef\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell\", \"lol\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_69\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcd\", \"bcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"AB\", \"Bc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890\", \"567890abcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"111111\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bc\", \"zbc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"4567123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"asdf\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_88\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"78123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_89\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"defg\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"4321\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_92\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"34\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_93\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"bc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_94\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bc\", \"abc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_95\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"4567\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asdf\", \"fg\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"someth\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bCDX\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"3234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"acb\", \"abc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdef\", \"defgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_105\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"123456789\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '12345') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_111\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyzzz\", \"z\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_113\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"45aa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaa\", \"a\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_117():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_117\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"1234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_119():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_119\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"cdabcdabcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_121():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_121\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"3451235\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_122():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_122\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a\", \"aa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"abcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_124():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_124\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwerty\", \"ytrewq\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"453\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_131():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_131\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567\", \"123456789\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_135():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_135\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hamburger\", \"ham\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_137():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"wyz\", \"xyyz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_140():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_140\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890abcdef\", \"567890abcdef\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_142\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"xyxx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_143():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_143\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_144():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_144\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcdea\", \"cdeab\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_145():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_145\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"thing\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_146():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_146\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"456123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_147():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"34567123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_148\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz\", \"\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_151():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_151\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"67834561\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_153():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_153\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"deabcd\", \"abcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_154():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_154\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123A\", \"A1234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_158():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_158\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"87654321\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"axayaz\", \"ayaz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_169():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_169\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaa\", \"aa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_171():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_171\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"zbc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"...\", \"....\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_176():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_176\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz1234567xyz\", \"123456789\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_178():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_178\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"qweasd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_180():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_180\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"1234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_181():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_181\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a123456\", \"78901234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_182():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_182\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bCDx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"cd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_184():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_184\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '45') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_185():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_185\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_190():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_190\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aabba\", \"aaaabba\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_192():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_192\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ababa\", \"aababa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_193():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_193\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"cde\", \"abcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_194():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_194\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('abc', 'ac') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"cde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_198():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_198\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"etg\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"dcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_201():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_201\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"zcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_206():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_206\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"bcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_207():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_207\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qweasd\", \"qweasd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_209():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_209\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"def\", \"abcdef\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_210():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_210\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"xABCDy\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_212():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_212\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"bcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_214():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_214\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"defghi\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_216():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_216\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"1111111\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_218():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_218\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"AB\", \"aBc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcde\", \"bcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_220():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_220\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"7123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_221():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_221\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"qweasd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890abcde\", \"7890abcde\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123A\", \"A123\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"34567\", \"1234567\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456\", \"345\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_228():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_228\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"a\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_230():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_230\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefg\", \"abcdefgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_233():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_233\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz1234567\", \"123456789\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_236():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_236\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"54321aa\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_237():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_237\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"ab\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_238():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_238\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aabba\", \"aba\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_244():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_244\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"xx\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_245():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_245\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCD\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwer\", \"q\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_250():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_250\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"z\", \"yz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abcd\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_256():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_256\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yz\", \"yxz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_257():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_257\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_259():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_259\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdexyz\", \"xyz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_260():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_260\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"ab\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_268():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_268\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"bc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_269():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_269\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yab\", \"zab\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_270():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_270\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"bcdefgh\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_271():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_271\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"123456\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCDy\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '5') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaabbbb\", \"bbbb\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_278():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_278\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"9876543210\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_282():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_282\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '2345') == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_287():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_287\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"1234\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"aBc\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"he123\", \"12345\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_292():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_292\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"\", \"yz\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"defg\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_294():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_294\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz\", \"xyzqwe\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xy\", \"y\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"cdef\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_300():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_300\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"123456\") == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"asdqwe\") == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert 0 == ends_overlap(\"1234567890abcdef\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert 1 == ends_overlap(\"xy\", \"yx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_11():\n    assert ends_overlap(\"fg\", \"\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert 2 == ends_overlap(\"xx\", \"xx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert 4 == ends_overlap(\"aaaaaaa\", \"aaaa\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert 3 == ends_overlap(\"he123\", \"1234\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert ends_overlap(\"def\", \"defxyz\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert 0 == ends_overlap(\"123\", \"abc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert 0 == ends_overlap(\"abc\", \"def\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_28():\n    assert 0 == ends_overlap(\"\", \"34\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert ends_overlap(\"\", \"\") == len(\"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert 1 == ends_overlap(\"x\", \"xx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert 1 == ends_overlap(\"1\", \"1\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert 0 == ends_overlap('12345', '12346')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert ends_overlap(\"foobar\", \"foobarbaz\") == 6", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert ends_overlap(\"somethig\", \"somethigx\") == len(\"somethig\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_44():\n    assert ends_overlap(\"qweq\", \"weq\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_45():\n    assert 0 == ends_overlap(\"bc\", \"abd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_46():\n    assert 0 == ends_overlap(\"xxx\", \"yyy\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_49():\n    assert ends_overlap(\"qwe\", \"weq\") == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_51():\n    assert 3 == ends_overlap(\"asd\", \"asdf\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    assert 0 == ends_overlap(\"qweasd\", \"qwe\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_54():\n    assert 1 == ends_overlap(\"aa\", \"a\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_57():\n    assert 3 == ends_overlap(\"xxx\", \"xxxxx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_61():\n    assert 0 == ends_overlap(\"ab\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_62():\n    assert ends_overlap(\"qwer\", \"yz\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_71():\n    assert 0 == ends_overlap(\"deabc\", \"xyz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_72():\n    assert 0 == ends_overlap(\"qwe\", \"asd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_73():\n    assert 0 == ends_overlap(\"1234\", \"5678\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert ends_overlap(\"ABCD\", \"BCDx\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_77():\n    assert 4 == ends_overlap(\"1234\", \"1234\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_79():\n    assert 2 == ends_overlap(\"1234\", \"34\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_80():\n    assert 2 == ends_overlap('abc', 'bc')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_82():\n    assert ends_overlap(\"123\", \"456\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_83():\n    assert 0 == ends_overlap(\"abc\", \"abd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_84():\n    assert 0 == ends_overlap(\"bc\", \"abc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_87():\n    assert 0 == ends_overlap(\"aaaaaaa\", \"bbbb\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_96():\n    assert 3 == ends_overlap(\"12345\", \"345aa\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_100():\n    assert ends_overlap(\"\", \"....\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_101():\n    assert ends_overlap(\"...\", \".\") == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_107():\n    assert ends_overlap(\"\", \"fg\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert 1 == ends_overlap(\"ab\", \"b\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_109():\n    assert 0 == ends_overlap(\"spam\", \"blabla\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_112():\n    assert 3 == ends_overlap(\"abcd\", \"bcde\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    assert 0 == ends_overlap(\"abc\", \"de\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    assert 3 == ends_overlap(\"qweasd\", \"asd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_118():\n    assert 0 == ends_overlap(\"xyz123\", \"456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_120():\n    assert ends_overlap(\"foobar\", \"baz\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_125():\n    assert 3 == ends_overlap(\"abc\", \"abcd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_126():\n    assert 0 == ends_overlap(\"\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    assert 0 == ends_overlap(\"123456789\", \"1234567\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    assert ends_overlap(\"\", \"456\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    assert ends_overlap(\"fg\", \"fg\") == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_132():\n    assert 3 == ends_overlap(\"123aaa\", \"aaa123\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    assert 0 == ends_overlap(\"123\", \"456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_134():\n    assert 0 == ends_overlap(\"ab\", \"de\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_136():\n    assert 0 == ends_overlap(\"qwe\", \"xyz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    assert 2 == ends_overlap(\"xx\", \"xxx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_139():\n    assert 4 == ends_overlap(\"abcd\", \"abcdabcd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert 0 == ends_overlap(\"xyz\", \"123\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    assert 0 == ends_overlap(\"\", \"1\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_150():\n    assert 0 == ends_overlap(\"1\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_152():\n    assert ends_overlap(\"ABCD\", \"BCDX\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    assert 0 == ends_overlap(\"yx\", \"z\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_156():\n    assert ends_overlap(\"123\", \"9123\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_157():\n    assert 1 == ends_overlap(\"xxx\", \"xz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_159():\n    assert 0 == ends_overlap(\"asd\", \"xyz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_160():\n    assert ends_overlap(\"hey\", \"abc\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_161():\n    assert 3 == ends_overlap(\"123456\", \"456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    assert ends_overlap(\"...\", \"..\") == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    assert 0 == ends_overlap(\"aabba\", \"b\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_166():\n    assert ends_overlap(\"qwer\", \"wer\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_167():\n    assert ends_overlap(\"somethig\", \"somethig\") == len(\"somethig\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_168():\n    assert 0 == ends_overlap(\"123\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_170():\n    assert 0 == ends_overlap('12345', '')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_172():\n    assert ends_overlap(\"abcdef\", \"def\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_173():\n    assert 3 == ends_overlap(\"ham\", \"hamburger\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_174():\n    assert 0 == ends_overlap(\"aa\", \"b\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_177():\n    assert 2 == ends_overlap(\"abab\", \"aba\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_179():\n    assert ends_overlap(\"qwer\", \"qwerty\") == 4", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_187():\n    assert 0 == ends_overlap(\"\", \"456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_188():\n    assert 0 == ends_overlap(\"123456789\", \"123\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_189():\n    assert 3 == ends_overlap(\"abc\", \"abc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_191():\n    assert ends_overlap(\"defxyz\", \"def\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_195():\n    assert 0 == ends_overlap(\"111111\", \"211111234\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_197():\n    assert 3 == ends_overlap(\"asd\", \"asd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_200():\n    assert 2 == ends_overlap(\"aaa\", \"aa\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_202():\n    assert ends_overlap(\"abcde\", \"cde\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_203():\n    assert 2 == ends_overlap(\"abaa\", \"aa\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_204():\n    assert ends_overlap(\"...\", \"...\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_205():\n    assert 0 == ends_overlap(\"def\", \"abc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_208():\n    assert 3 == ends_overlap(\"123\", \"1234\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_211():\n    assert 0 == ends_overlap(\"x\", \"y\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_213():\n    assert 1 == ends_overlap(\"1\", \"123\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_215():\n    assert 2 == ends_overlap(\"abc\", \"bc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_217():\n    assert 0 == ends_overlap(\"\", \"1234567890abcdef\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_226():\n    assert ends_overlap(\"somethig\", \"xsomethig\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_227():\n    assert 1 == ends_overlap(\"12345\", \"5678\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_229():\n    assert ends_overlap(\"...\", \"\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_231():\n    assert 1 == ends_overlap(\"x\", \"x\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_232():\n    assert ends_overlap(\"qwe\", \"asd\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_234():\n    assert 3 == ends_overlap(\"xyz123\", \"123456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_235():\n    assert 0 == ends_overlap(\"123\", \"543\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_239():\n    assert 0 == ends_overlap(\"de\", \"abcde\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_240():\n    assert 3 == ends_overlap('abc', 'abc')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_241():\n    assert ends_overlap(\"somethig\", \"qwe\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_242():\n    assert 0 == ends_overlap(\"xyz\", \"axyz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_243():\n    assert 0 == ends_overlap('abc', 'klm')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_246():\n    assert 2 == ends_overlap(\"abcde\", \"deabc\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_248():\n    assert 1 == ends_overlap(\"y\", \"yz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_249():\n    assert 0 == ends_overlap(\"y\", \"x\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_251():\n    assert ends_overlap(\"\", \"\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_253():\n    assert 0 == ends_overlap(\"111111\", \"2111112\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_254():\n    assert 0 == ends_overlap(\"bc\", \"zcd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_255():\n    assert 2 == ends_overlap(\"123456\", \"5678\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_258():\n    assert 3 == ends_overlap(\"xxx\", \"xxx\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_261():\n    assert ends_overlap(\"\", \"x\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_262():\n    assert ends_overlap(\"123\", \"\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_263():\n    assert ends_overlap(\"foobar\", \"barbaz\") == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_264():\n    assert 0 == ends_overlap('12345', 'a')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_265():\n    assert 1 == ends_overlap(\"abaa\", \"a\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_266():\n    assert 0 == ends_overlap(\"abcd\", \"qrst\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_267():\n    assert 0 == ends_overlap(\"a123456\", \"78901235\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_272():\n    assert 0 == ends_overlap(\"123456789\", \"12345\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_273():\n    assert 0 == ends_overlap('123', '456')", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_274():\n    assert 2 == ends_overlap(\"ab\", \"ab\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_279():\n    assert ends_overlap(\"qwer\", \"xyz\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_280():\n    assert 0 == ends_overlap(\"AB\", \"Cd\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_281():\n    assert 0 == ends_overlap(\"he123\", \"\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_283():\n    assert ends_overlap(\"x\", \"\") == 0", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_284():\n    assert 0 == ends_overlap(\"1234567890\", \"123456\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_285():\n    assert 0 == ends_overlap(\"\", \"xyz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_286():\n    assert 1 == ends_overlap(\"a\", \"a\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_288():\n    assert 2 == ends_overlap(\"xyzzz\", \"zz\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_289():\n    assert 0 == ends_overlap(\"12345\", \"654321\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_296():\n    assert 0 == ends_overlap(\"a\", \"b\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_297():\n    assert 0 == ends_overlap(\"\", \"b\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_299():\n    assert 0 == ends_overlap(\"asd\", \"qwe\")", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_0\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '345') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_1\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"4567\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_3\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567\", \"34567\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ham\", \"hamcrest\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_5():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_5\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"abcdabcdabcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_6\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a\", \"b\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_7\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdef\", \"defgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xaxaxax\", \"aaaaaa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_10\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"987654321\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_14\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"ba\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"abcdx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abab\", \"ababa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_17\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"qweasd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_18\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCDX\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"11111\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"54321\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"de\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_23():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_23\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell123\", \"1234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyzzz\", \"yzz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"111111234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_31():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_31\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"cdefgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"asd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"abcdefgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell\", \"lola\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_36\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"aaa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_37\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bcdx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"cdefghi\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_41\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"cd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xz\", \"yz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_48():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_48\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"456\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_50():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_50\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"cde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_52():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_52\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abab\", \"bab\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_55():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_55\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"abcdabcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_56():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_56\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"fg\", \"fx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_58():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_58\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"deabc\", \"abcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_59():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_59\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_60():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_60\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yx\", \"yz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_63():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_63\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asdf\", \"asd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_64():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_64\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"cdexyz\", \"abcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_65():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_65\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_66():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_66\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"yxx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_67():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_67\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"def\", \"xyzdef\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_68\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hell\", \"lol\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_69():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_69\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcd\", \"bcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"AB\", \"Bc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890\", \"567890abcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_75():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_75\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"111111\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_78\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bc\", \"zbc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_85():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_85\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"4567123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_86():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_86\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asd\", \"asdf\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_88():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_88\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"78123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_89():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_89\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"defg\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_91():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_91\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"4321\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_92():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_92\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"34\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_93\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"bc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_94():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_94\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bc\", \"abc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_95\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"4567\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"asdf\", \"fg\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"someth\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bCDX\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_102():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_102\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"3234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"acb\", \"abc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_104():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_104\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdef\", \"defgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_105():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_105\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_106():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_106\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"123456789\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '12345') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_111():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_111\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyzzz\", \"z\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_113():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_113\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"45aa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaa\", \"a\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_117():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_117\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"1234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_119():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_119\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"cdabcdabcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_121():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_121\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"3451235\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_122():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_122\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a\", \"aa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"abcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_124():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_124\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwerty\", \"ytrewq\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"453\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_131():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_131\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567\", \"123456789\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_135():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_135\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"hamburger\", \"ham\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_137():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_137\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"wyz\", \"xyyz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_140():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_140\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890abcdef\", \"567890abcdef\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_142\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"xyxx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_143():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_143\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_144():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_144\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcdea\", \"cdeab\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_145():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_145\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"thing\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_146():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_146\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"456123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_147():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_147\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"34567123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_148\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz\", \"\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_151():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_151\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"67834561\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_153():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_153\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"deabcd\", \"abcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_154():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_154\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123A\", \"A1234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_158():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_158\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"345123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"87654321\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"axayaz\", \"ayaz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_169():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_169\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaa\", \"aa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_171():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_171\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"zbc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"...\", \"....\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_176():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_176\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz1234567xyz\", \"123456789\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_178():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_178\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"qweasd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_180():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_180\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234\", \"1234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_181():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_181\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"a123456\", \"78901234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_182():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_182\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"bCDx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"cd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_184():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_184\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '45') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_185():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_185\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_190():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_190\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aabba\", \"aaaabba\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_192():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_192\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ababa\", \"aababa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_193():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_193\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"cde\", \"abcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_194():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_194\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('abc', 'ac') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ABCD\", \"cde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_198():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_198\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"somethig\", \"etg\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"dcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_201():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_201\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"zcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_206():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_206\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"bcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_207():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_207\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qweasd\", \"qweasd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_209():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_209\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"def\", \"abcdef\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_210():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_210\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"xABCDy\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_212():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_212\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"bcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_214():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_214\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"defghi\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_216():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_216\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"111111\", \"1111111\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_218():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_218\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"AB\", \"aBc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"bcde\", \"bcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_220():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_220\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"7123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_221():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_221\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"qweasd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"1234567890abcde\", \"7890abcde\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123A\", \"A123\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"34567\", \"1234567\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456\", \"345\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_228():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_228\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"a\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_230():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_230\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefg\", \"abcdefgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_233():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_233\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz1234567\", \"123456789\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_236():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_236\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"54321aa\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_237():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_237\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"ab\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_238():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_238\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aabba\", \"aba\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_244():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_244\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xxx\", \"xx\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_245():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_245\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCD\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwer\", \"q\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_250():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_250\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"z\", \"yz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abc\", \"abcd\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_256():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_256\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yz\", \"yxz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_257():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_257\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_259():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_259\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdexyz\", \"xyz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_260():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_260\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aa\", \"ab\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_268():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_268\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"bc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_269():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_269\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"yab\", \"zab\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_270():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_270\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcdefgh\", \"bcdefgh\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_271():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_271\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"123456\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xABCD\", \"bCDy\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '5') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"aaabbbb\", \"bbbb\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_278():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_278\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123456789\", \"9876543210\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_282():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_282\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap('12345', '2345') == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_287():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_287\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"123\", \"1234\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"ab\", \"aBc\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"he123\", \"12345\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_292():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_292\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"\", \"yz\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcd\", \"defg\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_294():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_294\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xyz\", \"xyzqwe\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"xy\", \"y\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"abcde\", \"cdef\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_300():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_300\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"12345\", \"123456\") == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+plugins+micropython+backend/ends_overlap/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert ends_overlap(\"qwe\", \"asdqwe\") == output"]}
{"problem_ids": 205, "project": "test-apps/thonny", "focal_function": "def matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    return \"(?P<%s>\" % name + \"|\".join(alternates) + \")\"", "module": "thonny.token_utils", "code": "import builtins\nimport keyword\n\ndef matches_any(name, alternates):\n    \"Return a named group pattern matching list of alternates.\"\n    return \"(?P<%s>\" % name + \"|\".join(alternates) + \")\"", "entry_point": "matches_any", "test": "import builtins\nimport keyword\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom thonny.token_utils import * # noqa: autoimport\nfrom thonny.token_utils import matches_any # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_1():\n    assert matches_any(\"NAME\", [\"if\", \"as\", \"def\", \"del\", \"from\"]) == \"(?P<NAME>if|as|def|del|from)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_3():\n    assert matches_any('NAME',['a','b']) == '(?P<NAME>a|b)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    assert matches_any(\"NAME\", [\"false\", \"class\", \"nil\"]) == \"(?P<NAME>false|class|nil)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_6():\n    assert matches_any(\"NAME\", [\"foo\", \"bar\"]) == \"(?P<NAME>foo|bar)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert matches_any(\"foo\", [\"a\", \"b\"]) == '(?P<foo>a|b)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    assert matches_any('NAME',['aaa','bbb','ccc']) == '(?P<NAME>aaa|bbb|ccc)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_9():\n    assert matches_any(\"NAME\", ['a','b','c']) == '(?P<NAME>a|b|c)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_10():\n    assert matches_any(\"TEST\", [\"x\", \"y\", \"z\"]) == \"(?P<TEST>x|y|z)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\", \"ccc\"]) == \"(?P<NAME>aaa|bbb|ccc)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_13():\n    assert matches_any(\"test\", [\"a|b\",\"c\",\"d\"]) == \"(?P<test>a|b|c|d)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_14():\n    assert matches_any(\"NAME\", [\"aaa\", \"bbb\"]) == \"(?P<NAME>aaa|bbb)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_17():\n    assert matches_any(\"NAME\", [\"a\", \"b\"]) == \"(?P<NAME>a|b)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_18():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) != \"(?P<TEST>a|b|d)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    assert matches_any(\"f\", [\"a\",\"b\"]) ==  \"(?P<f>a|b)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_22():\n    assert matches_any(\"TEST\", [\"x\"]) == \"(?P<TEST>x)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_26():\n    assert matches_any(\"TEST\", [\"a\",\"b\"]) == \"(?P<TEST>a|b)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    assert matches_any('TEST', ['a','b']) == '(?P<TEST>a|b)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_29():\n    assert matches_any(\"NUMBER\", [r\"\\d+\", r\"\\d+.\\d*\"]) == r\"(?P<NUMBER>\\d+|\\d+.\\d*)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_35():\n    assert matches_any('NAME', [ 'bob', 'tom' ]) == '(?P<NAME>bob|tom)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_36():\n    assert matches_any(\"TEST\", [\"a\",\"b\",\"c\"]) == \"(?P<TEST>a|b|c)\"", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_37():\n    assert matches_any('TEST', ['this','that']) == '(?P<TEST>this|that)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_38():\n    assert \"(?P<port>foo|bar|baz)\" == matches_any(\"port\", [\"foo\", \"bar\", \"baz\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_40():\n    assert \"(?P<KEYWORD>and|as|assert)\" == matches_any(\"KEYWORD\", [\"and\",\"as\",\"assert\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_41():\n    assert (\n            matches_any(\n                \"builtin\", \n                [\"abs\", \"all\", \"any\", \"basestring\", \"bool\", \"callable\"]) \n            == '(?P<builtin>abs|all|any|basestring|bool|callable)'\n        )", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_42():\n    assert matches_any('bla',['bli','ble'])=='(?P<bla>bli|ble)'", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_43():\n    assert \"(?P<op>\" + \"|\".join([\"if\", \"while\"]) + \")\" == matches_any(\"op\", [\"if\", \"while\"])", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_2\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\",\"c\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_15():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_15\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"literal\", [\"'t0'\", \"t\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_19():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_19\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\", \"b\", \"c\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_20():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_20\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\", [\"a\",\"b\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_24():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_24\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any('NAME', ['a', 'b', 'c']) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_25\", \"rb\") as f:\n        output = pickle.load(f)\n    assert len(matches_any(\"test\", [\"yes\", \"no\"])) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_30():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_30\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"KEYWORD\", [\"or\", \"and\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_32():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_32\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"test\", [\"a\",\"b\"]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_33():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_33\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",['foo', 'bar', 'baz']) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+token_utils/matches_any/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert matches_any(\"NAME\",\"[A-Z]\") == output"]}
{"problem_ids": 206, "project": "test-apps/thonny", "focal_function": "def get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    def ok_node(node):\n        if node is None:\n            return None\n\n        assert isinstance(node, (ast.expr, ast.stmt))\n\n        if skip_incorrect and getattr(node, \"incorrect_range\", False):\n            return None\n\n        return node\n\n    def last_ok(nodes):\n        for i in range(len(nodes) - 1, -1, -1):\n            if ok_node(nodes[i]):\n                node = nodes[i]\n                if isinstance(node, ast.Starred):\n                    if ok_node(node.value):\n                        return node.value\n                    else:\n                        return None\n                else:\n                    return nodes[i]\n\n        return None\n\n    if isinstance(node, ast.Call):\n        # TODO: take care of Python 3.5 updates (Starred etc.)\n        if hasattr(node, \"kwargs\") and ok_node(node.kwargs):\n            return node.kwargs\n        elif hasattr(node, \"starargs\") and ok_node(node.starargs):\n            return node.starargs\n        else:\n            kw_values = list(map(lambda x: x.value, node.keywords))\n            last_ok_kw = last_ok(kw_values)\n            if last_ok_kw:\n                return last_ok_kw\n            elif last_ok(node.args):\n                return last_ok(node.args)\n            else:\n                return ok_node(node.func)\n\n    elif isinstance(node, ast.BoolOp):\n        return last_ok(node.values)\n\n    elif isinstance(node, ast.BinOp):\n        if ok_node(node.right):\n            return node.right\n        else:\n            return ok_node(node.left)\n\n    elif isinstance(node, ast.Compare):\n        return last_ok(node.comparators)\n\n    elif isinstance(node, ast.UnaryOp):\n        return ok_node(node.operand)\n\n    elif isinstance(node, (ast.Tuple, ast.List, ast.Set)):\n        return last_ok(node.elts)\n\n    elif isinstance(node, ast.Dict):\n        # TODO: actually should pairwise check last value, then last key, etc.\n        return last_ok(node.values)\n\n    elif isinstance(\n        node, (ast.Index, ast.Return, ast.Assign, ast.AugAssign, ast.Yield, ast.YieldFrom)\n    ):\n        return ok_node(node.value)\n\n    elif isinstance(node, ast.Delete):\n        return last_ok(node.targets)\n\n    elif isinstance(node, ast.Expr):\n        return ok_node(node.value)\n\n    elif isinstance(node, ast.Assert):\n        if ok_node(node.msg):\n            return node.msg\n        else:\n            return ok_node(node.test)\n\n    elif isinstance(node, ast.Slice):\n        # [:]\n        if ok_node(node.step):\n            return node.step\n        elif ok_node(node.upper):\n            return node.upper\n        else:\n            return ok_node(node.lower)\n\n    elif isinstance(node, ast.ExtSlice):\n        # [:,:]\n        for dim in reversed(node.dims):\n            result = get_last_child(dim, skip_incorrect)\n            assert result is None or isinstance(result, ast.expr)\n            if result is not None:\n                return result\n        return None\n\n    elif isinstance(node, ast.Subscript):\n        result = get_last_child(node.slice, skip_incorrect)\n        if result is not None:\n            return result\n        else:\n            return node.value\n\n    elif isinstance(node, ast.Raise):\n        if ok_node(node.cause):\n            return node.cause\n        elif ok_node(node.exc):\n            return node.exc\n\n    elif isinstance(node, (ast.For, ast.While, ast.If, ast.With)):\n        return True  # There is last child, but I don't know which it will be\n\n    # TODO: pick more cases from here:\n    \"\"\"\n    (isinstance(node, (ast.IfExp, ast.ListComp, ast.SetComp, ast.DictComp, ast.GeneratorExp))\n            # or isinstance(node, ast.FunctionDef, ast.Lambda) and len(node.args.defaults) > 0\n                and (node.dest is not None or len(node.values) > 0))\n\n            #\"TODO: Import ja ImportFrom\"\n            # TODO: what about ClassDef ???\n    \"\"\"\n\n    return None", "module": "thonny.ast_utils", "code": "import ast\nfrom typing import Union\n\ndef get_last_child(node, skip_incorrect=True):\n    \"\"\"Returns last focusable child expression or child statement\"\"\"\n\n    def ok_node(node):\n        if node is None:\n            return None\n\n        assert isinstance(node, (ast.expr, ast.stmt))\n\n        if skip_incorrect and getattr(node, \"incorrect_range\", False):\n            return None\n\n        return node\n\n    def last_ok(nodes):\n        for i in range(len(nodes) - 1, -1, -1):\n            if ok_node(nodes[i]):\n                node = nodes[i]\n                if isinstance(node, ast.Starred):\n                    if ok_node(node.value):\n                        return node.value\n                    else:\n                        return None\n                else:\n                    return nodes[i]\n\n        return None\n\n    if isinstance(node, ast.Call):\n        # TODO: take care of Python 3.5 updates (Starred etc.)\n        if hasattr(node, \"kwargs\") and ok_node(node.kwargs):\n            return node.kwargs\n        elif hasattr(node, \"starargs\") and ok_node(node.starargs):\n            return node.starargs\n        else:\n            kw_values = list(map(lambda x: x.value, node.keywords))\n            last_ok_kw = last_ok(kw_values)\n            if last_ok_kw:\n                return last_ok_kw\n            elif last_ok(node.args):\n                return last_ok(node.args)\n            else:\n                return ok_node(node.func)\n\n    elif isinstance(node, ast.BoolOp):\n        return last_ok(node.values)\n\n    elif isinstance(node, ast.BinOp):\n        if ok_node(node.right):\n            return node.right\n        else:\n            return ok_node(node.left)\n\n    elif isinstance(node, ast.Compare):\n        return last_ok(node.comparators)\n\n    elif isinstance(node, ast.UnaryOp):\n        return ok_node(node.operand)\n\n    elif isinstance(node, (ast.Tuple, ast.List, ast.Set)):\n        return last_ok(node.elts)\n\n    elif isinstance(node, ast.Dict):\n        # TODO: actually should pairwise check last value, then last key, etc.\n        return last_ok(node.values)\n\n    elif isinstance(\n        node, (ast.Index, ast.Return, ast.Assign, ast.AugAssign, ast.Yield, ast.YieldFrom)\n    ):\n        return ok_node(node.value)\n\n    elif isinstance(node, ast.Delete):\n        return last_ok(node.targets)\n\n    elif isinstance(node, ast.Expr):\n        return ok_node(node.value)\n\n    elif isinstance(node, ast.Assert):\n        if ok_node(node.msg):\n            return node.msg\n        else:\n            return ok_node(node.test)\n\n    elif isinstance(node, ast.Slice):\n        # [:]\n        if ok_node(node.step):\n            return node.step\n        elif ok_node(node.upper):\n            return node.upper\n        else:\n            return ok_node(node.lower)\n\n    elif isinstance(node, ast.ExtSlice):\n        # [:,:]\n        for dim in reversed(node.dims):\n            result = get_last_child(dim, skip_incorrect)\n            assert result is None or isinstance(result, ast.expr)\n            if result is not None:\n                return result\n        return None\n\n    elif isinstance(node, ast.Subscript):\n        result = get_last_child(node.slice, skip_incorrect)\n        if result is not None:\n            return result\n        else:\n            return node.value\n\n    elif isinstance(node, ast.Raise):\n        if ok_node(node.cause):\n            return node.cause\n        elif ok_node(node.exc):\n            return node.exc\n\n    elif isinstance(node, (ast.For, ast.While, ast.If, ast.With)):\n        return True  # There is last child, but I don't know which it will be\n\n    # TODO: pick more cases from here:\n    \"\"\"\n    (isinstance(node, (ast.IfExp, ast.ListComp, ast.SetComp, ast.DictComp, ast.GeneratorExp))\n            # or isinstance(node, ast.FunctionDef, ast.Lambda) and len(node.args.defaults) > 0\n                and (node.dest is not None or len(node.values) > 0))\n\n            #\"TODO: Import ja ImportFrom\"\n            # TODO: what about ClassDef ???\n    \"\"\"\n\n    return None", "entry_point": "get_last_child", "test": "import ast\nfrom typing import Union\ndef mark_text_ranges(node, source: Union[bytes, str], fallback_to_one_char=False):\n    \"\"\"\n    Node is an AST, source is corresponding source as string.\n    Function adds recursively attributes end_lineno and end_col_offset to each node\n    which has attributes lineno and col_offset.\n    \"\"\"\n    from asttokens.asttokens import ASTTokens\n\n    if isinstance(source, bytes):\n        source = source.decode(\"utf8\")\n\n    ASTTokens(source, tree=node)\n    for child in ast.walk(node):\n        if hasattr(child, \"last_token\"):\n            child.end_lineno, child.end_col_offset = child.last_token.end\n\n            if hasattr(child, \"lineno\"):\n                # Fixes problems with some nodes like binop\n                child.lineno, child.col_offset = child.first_token.start\n\n        # some nodes stay without end info\n        if (\n            hasattr(child, \"lineno\")\n            and (not hasattr(child, \"end_lineno\") or not hasattr(child, \"end_col_offset\"))\n            and fallback_to_one_char\n        ):\n            child.end_lineno = child.lineno\n            child.end_col_offset = child.col_offset + 2\nimport sys\nsys.path.insert(1, \"/input/test-apps/thonny\")\nimport unittest, pytest\nimport math\nimport random\nimport re\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\nimport pickle\nimport timeout_decorator\n\nfrom thonny.ast_utils import * # noqa: autoimport\nfrom thonny.ast_utils import get_last_child # noqa: autoimport\n\nLOCAL_TIMEOUT = 5\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output\n\n@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output\n\n", "test_list": ["@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_0():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).end_lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_2():\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_7():\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_25():\n    assert get_last_child(ast.parse('1+2+3', mode='eval').body).value == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_68():\n    assert None is get_last_child(ast.parse(\"1+2+3+4+(4+2)\"), skip_incorrect=True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_76():\n    assert get_last_child(ast.parse(\"x + 1 + 2\").body[0]).lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_78():\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_93():\n    assert get_last_child(ast.parse(\"a = b / c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_95():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_108():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_col_offset == 6", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_141():\n    assert get_last_child(ast.parse(\"a = b\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_142():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = False), ast.Call)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_148():\n    assert isinstance(get_last_child(ast.parse(\"print(1 + 1)\").body[0], skip_incorrect = True), ast.Call)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_168():\n    assert get_last_child(ast.parse(\"a + b\"), True) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_172():\n    assert get_last_child(ast.parse(\"a + b + c + d\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_174():\n    assert isinstance(get_last_child(ast.parse('raise e').body[0]), ast.Name)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_180():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], False) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_181():\n    assert get_last_child(ast.parse(\"a = b = c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_182():\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_198():\n    assert get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right) is get_last_child(ast.parse(\"0 + 1 + 2\").body[0].value.right, True)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_200():\n    assert get_last_child(ast.parse(\"a + b + c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_205():\n    assert get_last_child(ast.parse(\"a = b % c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_210():\n    assert get_last_child(ast.parse(\"a = b + c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_218():\n    assert get_last_child(ast.parse(\"x = 1 + 2\").body[0]).lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_241():\n    assert get_last_child(ast.parse('import os, sys, traceback\\n\\n'\n                                    'traceback.print_exception(ZeroDivisionError, None, None)', mode='exec').body[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_250():\n    assert get_last_child(ast.parse(\"a = {1: 2, **b}\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_255():\n    assert get_last_child(ast.parse(\"a = b * c\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_260():\n    assert 4 == get_last_child(ast.parse(\"x = 2 * (2 + 3) * 4\").body[0].value).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_261():\n    assert 4 == get_last_child(ast.parse(\"x = (2 + 3) * 4\").body[0].value).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_268():\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_287():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_299():\n    assert isinstance(get_last_child(ast.parse('x=1').body[0]), ast.Num)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_300():\n    assert get_last_child(ast.parse(\"x + 42\").body[0]).end_lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_304():\n    assert get_last_child(ast.parse('1 and 2 or 3', mode='eval').body).value == 3", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_305():\n    assert 3 == get_last_child(ast.parse(\"x = 2 * 3\").body[0].value).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_314():\n    assert 3 == get_last_child(ast.parse(\"x = 2 + 3\").body[0].value).value", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_320():\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_326():\n    assert get_last_child(ast.parse('1+2', mode='eval').body).value == 2", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_327():\n    assert get_last_child(ast.parse(\"x + y\").body[0]).end_lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_333():\n    assert isinstance(get_last_child(ast.parse('assert x, y').body[0]), ast.Name)", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_342():\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_349():\n    assert get_last_child(ast.parse(\"a + b\"), False) == None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_362():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).end_lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_376():\n    assert get_last_child(ast.parse(\"x = y\").body[0]).lineno == 1", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_379():\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], True) is None", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_4():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_4\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3)\"), skip_incorrect=True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_8():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_8\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c, d=e\").body[0].targets[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_12():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_12\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('while x: pass').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_16():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_16\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_21():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_21\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_27():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_27\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1, 2, 3\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_34():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_34\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, (b, c) = 1, (2, 3)\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_39():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_39\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse('[1] + [2]\\n\\n3', mode='exec').body, False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_47():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_47\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"1 + 2 + 3\").body[0].value.left.left) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_53():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_53\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1], skip_incorrect = True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_70():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_70\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('1+1').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_74():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_74\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (1, 2)\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_81():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_81\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 1\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_90():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_90\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, c=3)\"), skip_incorrect=True), ast.keyword) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_97():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_97\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelif False:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_98():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_98\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_99():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_99\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"with open('file.txt'):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_103():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_103\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b+c\", mode=\"eval\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_110():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_110\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('print(1)').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_114():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_114\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,2)').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_115():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_115\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b, *c\").body[0].targets[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_116():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_116\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [1, 2, 3]\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_123():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_123\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[3]\"), True), ast.Index) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_127():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_127\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)\").body[0].value.args[1]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_128():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_128\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = False), ast.Constant) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_129():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_129\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b / c\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_130():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_130\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a+b\", mode=\"eval\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_133():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_133\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('if x: pass').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_138():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_138\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"assert a > 0, 'error message'\"), skip_incorrect=True), ast.Str) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_149():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_149\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('with x: pass').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_155():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_155\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b = c\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_162():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_162\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('x+1').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_163():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_163\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = (b, c) = 1, (2, 3)\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_164():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_164\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(a=1, b=2, c=3)\"), skip_incorrect=True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_165():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_165\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\"), skip_incorrect=True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_166():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_166\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"f(a,b,c)[0].attr.attr2\").body[0].value) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_173():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_173\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, *args)\"), skip_incorrect=True), ast.Starred) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_175():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_175\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(*args)').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_177():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_177\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_179():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_179\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = [10]\").body[0].targets[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_183():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_183\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = (1, 2, 3)\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_186():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_186\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"'hello' + 1\"), skip_incorrect=True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_196():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_196\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice.value) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_199():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_199\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a=b\").body[0].targets[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_208():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_208\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b * c\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_219():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_219\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, 2, 3, **kwargs)\"), skip_incorrect=True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_222():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_222\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(1, a=2, *args, c=3, **kwargs)\"), skip_incorrect=True), ast.keyword) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_223():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_223\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1, 2, 3}\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_224():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_224\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[a, b, c]\").body[0].value.elts[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_225():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_225\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(1)').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_226():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_226\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b + c\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_229():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_229\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('for i in x: pass').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_234():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_234\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, a\"), True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_243():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_243\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('(1,)').body[0]), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_247():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_247\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = b\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_249():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_249\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = 10 if x > 2 else 20\").body[0].targets[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_252():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_252\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x)').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_253():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_253\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a[0]\").body[0].value.slice) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_263():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_263\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse('f(x=y)').body[0]), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_267():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_267\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a[b + 1]\"), True), ast.BinOp) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_274():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_274\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_275():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_275\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b + 1)\"), True), ast.BinOp) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_276():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_276\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c + d\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_277():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_277\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"print('hello')\"), skip_incorrect=True), ast.Str) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_280():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_280\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a(b, *args)\"), True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_281():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_281\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"for i in range(1):\\n    pass\").body[0], skip_incorrect = False), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_284():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_284\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"f(*args, **kwargs)\"), skip_incorrect=True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_290():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_290\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a, b = 1, 2\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_291():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_291\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"[1, 2, 3]\").body[0].value.elts[1]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_293():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_293\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a, b\").body[0].value.elts[0]) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_295():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_295\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_298():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_298\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"while True:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_301():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_301\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a + b + c\"), True) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_348():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_348\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"if True:\\n    pass\\nelse:\\n    pass\").body[0], skip_incorrect = True), ast.Pass) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_352():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_352\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"a = {1: 2, 3: 4}\").body[0].targets[0], False) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_356():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_356\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a + 1\").body[0], skip_incorrect = True), ast.Constant) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_371():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_371\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"return 1, 2, a\"), True), ast.Name) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_377():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_377\", \"rb\") as f:\n        output = pickle.load(f)\n    assert isinstance(get_last_child(ast.parse(\"a = 1, 2\"), True), ast.Num) == output", "@timeout_decorator.timeout(LOCAL_TIMEOUT)\ndef test_378():\n    with open(\"/output/test-apps+thonny/test_output/thonny+ast_utils/get_last_child/test_378\", \"rb\") as f:\n        output = pickle.load(f)\n    assert get_last_child(ast.parse(\"x = 2\").body[0].value, True) == output"]}
