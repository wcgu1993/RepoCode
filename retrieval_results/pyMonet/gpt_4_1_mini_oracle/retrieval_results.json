{"function": "memoize", "target_function_prompt": "def memoize(fn: Callable, key=eq) -> Callable:\n    \"\"\"\n    Create a new function that, when invoked,\n    caches the result of calling fn for a given argument set and returns the result.\n    Subsequent calls to the memoized fn with the same argument set will not result in an additional call to fn;\n    instead, the cached result for that set of arguments will be returned.\n\n    :param fn: function to invoke\n    :type fn: Function(A) -> B\n    :param key: function to decide if result should be taken from cache\n    :type key: Function(A, A) -> Boolean\n    :returns: new function invoking old one\n    :rtype: Function(A) -> B\n    \"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 2, "target_api_invocations": ["fn", "find"], "context": [{"fname": "fn", "evidence": "No evidence provided"}, {"fname": "find", "evidence": "No evidence provided"}]}
