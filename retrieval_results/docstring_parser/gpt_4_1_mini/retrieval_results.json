{"function": "parse", "target_function_prompt": "def parse(text: str) -> Docstring:\n    \"\"\"Parse the Google-style docstring into its components.\n\n    :returns: parsed docstring\n    \"\"\"\n", "f1_score": 0.11764705882352941, "recall": 1.0, "precision": 0.0625, "context_size": 23, "target_api_invocations": ["GoogleParser.parse"], "context": [{"fname": "_parse_item", "evidence": "_parse_item parses parameter key-value pairs into structured metadata, a subtask likely invoked by parse to build parameters."}, {"fname": "test_broken_meta", "evidence": "The target function 'parse' is directly invoked in this test function to verify robust error handling by raising ParseError for invalid inputs. This is a direct invocation."}, {"fname": "test_broken_meta", "evidence": "This test function explicitly calls the target function 'parse' multiple times to test error handling and valid parsing for different malformed and unusual docstring inputs. Hence, parse() is definitely invoked here."}, {"fname": "test_other_params", "evidence": "This test function calls 'parse' to analyze docstring content and validate correct parsing of 'Other Parameters' metadata. This requires direct invocation of 'parse'."}, {"fname": "test_meta_with_multiline_description", "evidence": "This test also uses 'parse' to process a docstring with multi-line parameter descriptions and checks that the parsed metadata matches. It directly invokes the target function."}, {"fname": "test_yields", "evidence": "This function tests parsing of the 'Yields' section by calling 'parse' on a docstring input. The target function is explicitly invoked to validate correct parsing results."}, {"fname": "test_returns", "evidence": "This test function invokes parse extensively to validate parsing of return types and descriptions from various docstring formats. It directly calls the target parse function multiple times to assert correct behavior."}, {"fname": "test_returns", "evidence": "This test verifies correct parsing of return value annotations with different combinations of descriptions, types, and generator flags, invoking parse to obtain parsed results for assertions."}, {"fname": "test_yields", "evidence": "This test specifically exercises parsing of yield annotations, calling parse repeatedly to check for accurate extraction of yield return types and descriptions, reflecting direct invocation."}, {"fname": "test_returns", "evidence": "This test performs detailed checks on parsing of Returns and Yields sections with several formatting styles by calling parse multiple times, thus definitely invoking the target parse function."}, {"fname": "test_numpydoc", "evidence": "This test function calls parse to check comprehensive parsing of a numpydoc-style docstring, validating extraction of descriptions, parameters, exceptions, and return types, confirming direct invocation of parse."}, {"fname": "raises", "evidence": "This method extracts all DocstringRaises items from the parsed meta data; parse likely uses it to organize raise clauses."}, {"fname": "_parse_item", "evidence": "This utility method constructs DocstringRaises from raw key-value pairs, a crucial step in parsing raise sections; thus, parse would invoke it."}, {"fname": "_setup", "evidence": "GoogleParser.parse relies on the compiled regex 'titles_re' prepared by this _setup method, so it must be called before or during parse execution."}, {"fname": "parse", "evidence": "This is the precise implementation of the target function itself (GoogleParser.parse). It directly represents the target and thus is certainly invoked during its own logic."}, {"fname": "parse", "evidence": "This function offers a higher-level parse orchestration that selects parsing strategy based on style, including the Google parser potentially. The target function might invoke this to support multiple styles or this might represent a parallel approach, making invocation possible."}, {"fname": "parse", "evidence": "This function parses a numpy-style docstring by using a dedicated parser; since the target function can parse Google-style docstrings, other style parsers like this might be invoked in a multi-style parsing context or by related code paths."}, {"fname": "_build_meta", "evidence": "Node_3 builds meta elements from docstring sections, a core step needed by the target function to transform text chunks into structured metadata."}, {"fname": "_build_single_meta", "evidence": "Node_4 constructs singular meta elements like returns and raises, which the target function indirectly invokes via _build_meta for such sections."}, {"fname": "_build_multi_meta", "evidence": "Node_5 constructs multi meta elements, handling parameters and other sections, likely called by the target function via _build_meta for complex metadata parsing."}, {"fname": "parse", "evidence": "The target parse function processes docstring sections and needs to extract DocstringMeta objects from section text; this method provides that core parsing capability for section bodies."}, {"fname": "parse", "evidence": "The main parse function needs to parse structured key-value items within sections; this method is designed to yield DocstringMeta objects from key-value formatted text, making invocation likely."}, {"fname": "_build_meta", "evidence": "The target function parse aims to parse Google-style docstrings and return a Docstring object containing structured metadata. The node _build_meta function is clearly a helper that constructs DocstringMeta objects (including DocstringParam, DocstringReturns, DocstringRaises) from parsed components. The parse function would need to invoke _build_meta as part of its processing when it translates different sections of the docstring text into metadata objects. Since _build_meta performs essential parsing logic that maps recognized keywords to specific Docstring element classes, it is highly likely to be invoked during the implementation of parse to modularize the construction of docstring elements."}]}
{"function": "parse", "target_function_prompt": "def parse(text: str) -> Docstring:\n    \"\"\"Parse the ReST-style docstring into its components.\n\n    :returns: parsed docstring\n    \"\"\"\n", "f1_score": 0.10526315789473684, "recall": 1.0, "precision": 0.05555555555555555, "context_size": 21, "target_api_invocations": ["_build_meta"], "context": [{"fname": "params", "evidence": "The target function parse builds a Docstring object whose meta attribute likely contains parsed metadata including parameters. Accessing parameter metadata via the Docstring.params method would be a logical step in manipulating or examining parsed results."}, {"fname": "returns", "evidence": "The parse function produces a Docstring that can contain return value metadata. The Docstring.returns method provides a way to extract this return metadata. Since parse's docstring mentions returning a parsed docstring, subsequent consumption of that result could involve inspecting returns via this method."}, {"fname": "test_returns", "evidence": "The test_returns() function explicitly calls parse() multiple times to validate its ability to parse various 'Returns' and 'Yields' sections. Since parse() is being directly invoked in its implementation, it is clearly invoked during its execution."}, {"fname": "test_numpydoc", "evidence": "test_numpydoc() calls parse() on a numpydoc-style docstring to validate that parse correctly extracts descriptions, parameters, raises, and returns. This test depends on parse() internally, so parse() is invoked here."}, {"fname": "test_rest", "evidence": "test_rest() tests the parsing of structured ReST-style docstrings by calling parse() and then asserting components. The test's implementation directly uses parse(), so it is invoked."}, {"fname": "test_google", "evidence": "test_google() calls parse() on Google-style docstrings and validates the parsed components. Its implementation shows direct calls to parse(), so parse() is invoked."}, {"fname": "test_raises", "evidence": "test_raises() calls parse() multiple times to validate exception parsing within docstrings. Since parse() is called directly in the test, it is invoked during its execution."}, {"fname": "raises", "evidence": "The target function 'parse' returns a Docstring object representing the parsed ReST docstring components. The 'raises' method retrieves a list of DocstringRaises objects, which is likely part of the parsing process to extract the exception-raising clauses from the parsed docstring metadata. Thus, 'raises' could be invoked to gather raise-related entries."}, {"fname": "_parse_item", "evidence": "The target function 'parse' constructs a Docstring object from the raw text. The described '_parse_item' method creates DocstringRaises objects from key-value pairs, which is a low-level utility directly related to handling the 'raises' entries in the docstring. It would be invoked during parsing to generate structured raise metadata."}, {"fname": "_parse_item", "evidence": "The target function 'parse' aims to fully parse a ReST docstring including its return sections. The '_parse_item' method produces DocstringReturns objects from return key-value pairs, which likely occurs as part of parsing return annotations in the docstring. This function would be invoked to extract structured return value information."}, {"fname": "test_default_args", "evidence": "The test_default_args function directly calls parse to verify parsing of default arguments and metadata, indicating that parse is used to produce Docstring objects from input text."}, {"fname": "test_meta_with_multiline_description", "evidence": "test_meta_with_multiline_description calls parse with a docstring containing multiline metadata to validate that parse correctly extracts descriptions and meta fields, thus it invokes parse."}, {"fname": "test_multiple_meta", "evidence": "test_multiple_meta tests parsing of multiple metadata fields by calling parse with a docstring; it depends on parse to generate the Docstring object representing the parsed structure."}, {"fname": "parse", "evidence": "This function parses docstrings of various styles (including auto-detection) and returns parsed Docstring objects. Given that the target function's role is to parse ReST-style docstrings into structured components, it might use a similar generic parser or style-dispatch mechanism from this node to either select or delegate parsing tasks."}, {"fname": "_clean_str", "evidence": "The target function parse aims to parse and return a Docstring object. Cleaning whitespace and empty string filtering is a typical preprocessing step in parsing text; _clean_str is a small utility that can be used internally to sanitize strings before including them in the Docstring, so it is reasonably invoked."}, {"fname": "_build_meta", "evidence": "The target function deals with parsing a docstring into structured metadata elements, and _build_meta constructs these elements given text and section titles. This helper function is likely invoked to build structured components while parsing ReST-style docstrings."}, {"fname": "_build_single_meta", "evidence": "The target parse function needs to build structured metadata objects from sections of a docstring. This helper constructs single metadata objects like returns or raises, making it a natural direct invocation."}, {"fname": "_build_multi_meta", "evidence": "For parsing complex or typed parameters and returns in docstrings, this helper converts section data into detailed DocstringParam, Returns, or Raises objects. The target parse likely calls this for multi-argument metadata."}, {"fname": "parse", "evidence": "Parsing docstring sections into metadata requires methods that yield DocstringMeta objects from cleaned text. This parse method facilitates that and is likely invoked by the target parse to process sections."}, {"fname": "parse", "evidence": "The target parse must identify key-value pairs in the docstring text to parse metadata correctly. This method directly parses such key-value pairs and yields metadata, making it a probable direct invocation."}, {"fname": "_build_meta", "evidence": "The target function parse aims to parse ReST-style docstrings into structured components, typically requiring analysis and creation of detailed metadata objects for parameters, returns, yields, and exceptions. The _build_meta function's purpose is exactly to build such metadata for different recognized keywords, returning specialized DocstringMeta-derived objects. Given that parse’s job is to produce a complete Docstring object with these parts parsed out, it is very likely to invoke _build_meta repeatedly to process individual docstring components. Its implementation handles the nuanced distinctions between parameter, return, and raise annotations, which are integral to full docstring parsing, making _build_meta a core helper routine likely called within parse."}]}
{"function": "parse", "target_function_prompt": "def parse(text: str) -> Docstring:\n    \"\"\"Parse the numpy-style docstring into its components.\n\n    :returns: parsed docstring\n    \"\"\"\n", "f1_score": 0.1, "recall": 1.0, "precision": 0.05263157894736842, "context_size": 24, "target_api_invocations": ["NumpydocParser.parse"], "context": [{"fname": "_parse_item", "evidence": "The parse() function delegates to section parsers that use _parse_item to parse individual key-value pairs, so _parse_item is invoked during parsing."}, {"fname": "test_broken_meta", "evidence": "The node defines a test function that calls parse() to validate error handling on malformed inputs, so it explicitly invokes parse."}, {"fname": "test_broken_meta", "evidence": "This test function extensively invokes parse multiple times to confirm it correctly raises ParseError or succeeds on varied malformed or unusual metadata inputs."}, {"fname": "test_other_params", "evidence": "This test function uses parse to analyze docstring sections, verifying metadata extraction, thus parse is directly invoked here."}, {"fname": "test_meta_with_multiline_description", "evidence": "This node's test parses a multiline parameter description by invoking parse to validate correct extraction and metadata formatting."}, {"fname": "test_yields", "evidence": "This test parses the 'Yields' section of docstrings by calling parse and asserting the extracted metadata matches expectations."}, {"fname": "test_returns", "evidence": "The test function directly calls parse() multiple times to verify return type information parsing, so parse() must be callable to fulfill this functionality."}, {"fname": "test_returns", "evidence": "This node's test functions invoke parse() to verify parsing of returns annotations; thus parse() is explicitly invoked to check interpretations of return-related docstring components."}, {"fname": "test_yields", "evidence": "These test functions call parse() repeatedly to validate yield annotations parsing, meaning parse() must be invoked to exercise and verify yield-related parsing."}, {"fname": "test_returns", "evidence": "The function tests parsing of return and yield docstring sections and calls parse() multiple times; thus parse() is directly invoked to verify correct extraction and interpretation."}, {"fname": "test_numpydoc", "evidence": "This comprehensive test calls parse() on a detailed numpydoc-style docstring to verify extraction of various components including returns, indicating parse() is directly invoked for parsing the docstring structure."}, {"fname": "_parse_item", "evidence": "This internal method is called by section parsers during 'parse' when parsing 'Raises' sections to create DocstringRaises objects."}, {"fname": "_parse_item", "evidence": "This is a helper method used by the 'Returns' section parser to convert return entries into structured DocstringReturns objects, likely invoked during parsing of the 'Returns' section by the main parse function."}, {"fname": "parse", "evidence": "This method is used by the parser to handle the 'deprecated' section, invoked by the main parse function when processing deprecation metadata."}, {"fname": "_setup", "evidence": "_setup() initializes the regex pattern for detecting section titles which is critical for parsing; parse depends on having this regex ready to function."}, {"fname": "parse", "evidence": "This method implements the parsing logic for GoogleParser, which is a close analog to the target parsing method for numpy-style docstrings. Given the similarity in responsibilities and naming (parse), and potential patterns reused, it is plausible that parts of this method's logic or concept inspired the target function's implementation. However, the target function is defined standalone, so direct invocation is unlikely, but conceptually this node provides a reference parsing flow that's relevant. Still, the instructions say to judge invocation potential based on content, and since the target parse function implements similar parsing logic, it might conceptually invoke or be inspired by similar helper methods or shared logic. Because this node is a method of GoogleParser, it is not called by the target parse method that belongs to NumpydocParser. Therefore, the most conservative conclusion is it is unlikely to be invoked by the target function."}, {"fname": "_clean_str", "evidence": "The utility function _clean_str removes whitespace and returns None for empty strings, which is useful for cleaning docstring sections before inclusion in parsed components. The target function explicitly cleans parts of the docstring with inspect.cleandoc and also uses a similar pattern, so it may invoke this general cleaning utility to ensure non-empty strings in its parsed results."}, {"fname": "parse", "evidence": "This node contains the exact implementation of the target function itself inside the NumpydocParser class. The target function is the parse method under NumpydocParser. Thus, this function is necessarily invoked as part of the target function's class context or internal method call chains if any."}, {"fname": "_build_meta", "evidence": "The helper builds metadata elements from raw section text and is essential for parsing docstring components."}, {"fname": "_build_single_meta", "evidence": "This helper constructs singular metadata objects and is called during the process of metadata building from sections."}, {"fname": "_build_multi_meta", "evidence": "This helper constructs multi-valued metadata objects, necessary for detailed parsing of docstring sections."}, {"fname": "parse", "evidence": "This section-level parse method is called to convert section text into docstring metadata items during parsing."}, {"fname": "_pairwise", "evidence": "The parse function given as the target relies on _pairwise to iterate over KV_REGEX matches in pairs (current and next) for parsing key-value sections, so it is almost certainly called within parse's implementation, as seen in the parse method of _KVSection which is used by several parsers."}, {"fname": "parse", "evidence": "The parse function of _KVSection is responsible for yielding DocstringMeta items by iterating over matches and using _pairwise. Since the target parse function returns a Docstring containing meta data collected from parsing specialized sections that often use _KVSection subclasses, it is highly plausible that parse methods like this are called during the implementation of the top-level parse."}]}
