{"function": "_transform", "target_function_prompt": "def _transform(path: str, code: str, target: CompilationTarget) -> Tuple[str, List[str]]:\n    \"\"\"Applies all transformation for passed target.\"\"\"\n", "f1_score": 0.6666666666666666, "recall": 0.5, "precision": 1.0, "context_size": 1, "target_api_invocations": ["tree", "debug"], "context": [{"fname": "debug", "evidence": "No evidence provided"}]}
{"function": "find_variables", "target_function_prompt": "def find_variables(tree: ast.AST) -> Iterable[str]:\n    \"\"\"Finds variables and remove `let` calls.\"\"\"\n", "f1_score": 0.8, "recall": 0.6666666666666666, "precision": 1.0, "context_size": 2, "target_api_invocations": ["find", "tree", "get_non_exp_parent_and_index"], "context": [{"fname": "find", "evidence": "No evidence provided"}, {"fname": "get_non_exp_parent_and_index", "evidence": "No evidence provided"}]}
{"function": "_get_lines_with_highlighted_error", "target_function_prompt": "def _get_lines_with_highlighted_error(e: CompilationError) -> Iterable[str]:\n    \"\"\"Format code with highlighted syntax error.\"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 1, "target_api_invocations": ["_format_line"], "context": [{"fname": "_format_line", "evidence": "No evidence provided"}]}
{"function": "find", "target_function_prompt": "def find(tree: ast.AST, type_: Type[T]) -> Iterable[T]:\n    \"\"\"Finds all nodes with type T.\"\"\"\n", "f1_score": 0.0, "recall": 0.0, "precision": 0.0, "context_size": 0, "target_api_invocations": ["tree"], "context": []}
