{"function": "remove_entity_headers", "target_function_prompt": "def remove_entity_headers(headers, allowed=(\"content-location\", \"expires\")):\n    \"\"\"\n    Removes all the entity headers present in the headers given.\n    According to RFC 2616 Section 10.3.5,\n    Content-Location and Expires are allowed as for the\n    \"strong cache validator\".\n    https://tools.ietf.org/html/rfc2616#section-10.3.5\n\n    returns the headers without the entity headers\n    \"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 1, "target_api_invocations": ["is_entity_header"], "context": [{"fname": "is_entity_header", "evidence": "The target function's purpose is to 'Removes all the entity headers'. The `is_entity_header` function directly provides the necessary utility to identify if a given header is an entity header, which is a core step in implementing the target function."}]}
{"function": "parse_multipart_form", "target_function_prompt": "def parse_multipart_form(body, boundary):\n    \"\"\"\n    Parse a request body and returns fields and files\n\n    :param body: bytes request body\n    :param boundary: bytes multipart boundary\n    :return: fields (RequestParameters), files (RequestParameters)\n    \"\"\"\n", "f1_score": 0.5, "recall": 1.0, "precision": 0.3333333333333333, "context_size": 3, "target_api_invocations": ["parse_content_header"], "context": [{"fname": "is_entity_header", "evidence": "The target function `parse_multipart_form` processes a request body containing multipart data. Each part within a multipart form has its own headers (e.g., Content-Disposition, Content-Type). This function checks if a header is an 'entity header,' which is highly relevant for correctly parsing and classifying the content within each multipart part."}, {"fname": "parse_content_header", "evidence": "Parsing a multipart form involves extracting headers from individual parts (e.g., Content-Disposition, Content-Type). The `parse_content_header` function is specifically designed to parse such headers, making it highly relevant for extracting field names, filenames, and content types from multipart parts."}, {"fname": "get_all", "evidence": "When parsing individual parts within a multipart body, the function would need to extract header values from each part. `get_all` is a common utility for retrieving potentially multiple values for a given header key from a header collection, which is a plausible operation during multipart part header processing."}]}
{"function": "fwd_normalize", "target_function_prompt": "def fwd_normalize(fwd: OptionsIterable) -> Options:\n    \"\"\"Normalize and convert values extracted from forwarded headers.\"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 1, "target_api_invocations": ["fwd_normalize_address"], "context": [{"fname": "fwd_normalize_address", "evidence": "The target function's purpose is to 'normalize and convert values extracted from forwarded headers'. Forwarded headers frequently contain address fields (like 'for' and 'by'). This node provides a specific utility (`fwd_normalize_address`) designed to normalize such address strings, including IPv6 bracketing and case handling, which directly aligns with the normalization task of the target function."}]}
