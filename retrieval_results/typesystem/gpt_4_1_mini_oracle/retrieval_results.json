{"function": "validate_yaml", "target_function_prompt": "def validate_yaml(\n    content: typing.Union[str, bytes],\n    validator: typing.Union[Field, typing.Type[Schema]],\n) -> typing.Any:\n    \"\"\"\n    Parse and validate a YAML string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A YAML string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    \"\"\"\n", "f1_score": 0.3636363636363636, "recall": 1.0, "precision": 0.2222222222222222, "context_size": 2, "target_api_invocations": ["tokenize_yaml", "validate_with_positions"], "context": [{"fname": "tokenize_yaml", "evidence": "No evidence provided"}, {"fname": "validate_with_positions", "evidence": "No evidence provided"}]}
{"function": "type_from_json_schema", "target_function_prompt": "def type_from_json_schema(data: dict, definitions: SchemaDefinitions) -> Field:\n    \"\"\"\n    Build a typed field or union of typed fields from a JSON schema object.\n    \"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 2, "target_api_invocations": ["get_valid_types", "from_json_schema_type"], "context": [{"fname": "get_valid_types", "evidence": "No evidence provided"}, {"fname": "from_json_schema_type", "evidence": "No evidence provided"}]}
{"function": "validate_json", "target_function_prompt": "def validate_json(\n    content: typing.Union[str, bytes],\n    validator: typing.Union[Field, typing.Type[Schema]],\n) -> typing.Any:\n    \"\"\"\n    Parse and validate a JSON string, returning positionally marked error\n    messages on parse or validation failures.\n\n    content - A JSON string or bytestring.\n    validator - A Field instance or Schema class to validate against.\n\n    Returns a two-tuple of (value, error_messages)\n    \"\"\"\n", "f1_score": 1.0, "recall": 1.0, "precision": 1.0, "context_size": 2, "target_api_invocations": ["validate_with_positions", "tokenize_json"], "context": [{"fname": "validate_with_positions", "evidence": "No evidence provided"}, {"fname": "tokenize_json", "evidence": "No evidence provided"}]}
