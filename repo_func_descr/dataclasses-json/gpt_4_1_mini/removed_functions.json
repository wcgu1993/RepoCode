[{"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/cfg.py", "function": "override", "line_number": 75, "body": "def override(_, _field_name=field_name):\n                return _field_name", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/undefined.py", "function": "handle_from_dict", "line_number": 20, "body": "def handle_from_dict(cls, kvs: Dict[Any, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Return the parameters to initialize the class with.\n        \"\"\"\n        pass", "is_method": true, "class_name": "_UndefinedParameterAction", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/undefined.py", "function": "_ignore_init", "line_number": 99, "body": "def _ignore_init(self, *args, **kwargs):\n            known_kwargs, _ = \\\n                _CatchAllUndefinedParameters._separate_defined_undefined_kvs(\n                    obj, kwargs)\n            num_params_takeable = len(\n                init_signature.parameters) - 1  # don't count self\n            num_args_takeable = num_params_takeable - len(known_kwargs)\n\n            args = args[:num_args_takeable]\n            bound_parameters = init_signature.bind_partial(self, *args,\n                                                           **known_kwargs)\n            bound_parameters.apply_defaults()\n\n            arguments = bound_parameters.arguments\n            arguments.pop(\"self\", None)\n            final_parameters = \\\n                _IgnoreUndefinedParameters.handle_from_dict(obj, arguments)\n            original_init(self, **final_parameters)", "is_method": true, "class_name": "_IgnoreUndefinedParameters", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/undefined.py", "function": "_catch_all_init", "line_number": 215, "body": "def _catch_all_init(self, *args, **kwargs):\n            known_kwargs, unknown_kwargs = \\\n                _CatchAllUndefinedParameters._separate_defined_undefined_kvs(\n                    obj, kwargs)\n            num_params_takeable = len(\n                init_signature.parameters) - 1  # don't count self\n            if _CatchAllUndefinedParameters._get_catch_all_field(\n                    obj).name not in known_kwargs:\n                num_params_takeable -= 1\n            num_args_takeable = num_params_takeable - len(known_kwargs)\n\n            args, unknown_args = args[:num_args_takeable], args[\n                                                           num_args_takeable:]\n            bound_parameters = init_signature.bind_partial(self, *args,\n                                                           **known_kwargs)\n\n            unknown_args = {f\"_UNKNOWN{i}\": v for i, v in\n                            enumerate(unknown_args)}\n            arguments = bound_parameters.arguments\n            arguments.update(unknown_args)\n            arguments.update(unknown_kwargs)\n            arguments.pop(\"self\", None)\n            final_parameters = _CatchAllUndefinedParameters.handle_from_dict(\n                obj, arguments)\n            original_init(self, **final_parameters)", "is_method": true, "class_name": "_CatchAllUndefinedParameters", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/api.py", "function": "wrap", "line_number": 130, "body": "def wrap(cls):\n        return _process_class(cls, letter_case, undefined)", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "inner", "line_number": 228, "body": "def inner(type_, options):\n        while True:\n            if not _is_new_type(type_):\n                break\n\n            type_ = type_.__supertype__\n\n        if is_dataclass(type_):\n            if _issubclass_safe(type_, mixin):\n                options['field_many'] = bool(\n                    _is_supported_generic(field.type) and _is_collection(\n                        field.type))\n                return fields.Nested(type_.schema(), **options)\n            else:\n                warnings.warn(f\"Nested dataclass field {field.name} of type \"\n                              f\"{field.type} detected in \"\n                              f\"{cls.__name__} that is not an instance of \"\n                              f\"dataclass_json. Did you mean to recursively \"\n                              f\"serialize this field? If so, make sure to \"\n                              f\"augment {type_} with either the \"\n                              f\"`dataclass_json` decorator or mixin.\")\n                return fields.Field(**options)\n\n        origin = getattr(type_, '__origin__', type_)\n        args = [inner(a, {}) for a in getattr(type_, '__args__', []) if\n                a is not type(None)]\n\n        if _is_optional(type_):\n            options[\"allow_none\"] = True\n\n        if origin in TYPES:\n            return TYPES[origin](*args, **options)\n\n        if _issubclass_safe(origin, Enum):\n            return EnumField(enum=origin, by_value=True, *args, **options)\n\n        if is_union_type(type_):\n            union_types = [a for a in getattr(type_, '__args__', []) if\n                           a is not type(None)]\n            union_desc = dict(zip(union_types, args))\n            return _UnionField(union_desc, cls, field, **options)\n\n        warnings.warn(\n            f\"Unknown type {type_} at {cls.__name__}.{field.name}: {field.type} \"\n            f\"It's advised to pass the correct marshmallow type to `mm_field`.\")\n        return fields.Field(**options)", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "make_instance", "line_number": 333, "body": "def make_instance(self, kvs, **kwargs):\n        return _decode_dataclass(cls, kvs, partial)", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dump", "line_number": 156, "body": "def dump(self, obj: typing.List[A], many: bool = None) -> typing.List[\n            TEncoded]:  # type: ignore\n            # mm has the wrong return type annotation (dict) so we can ignore the mypy error\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dump", "line_number": 162, "body": "def dump(self, obj: A, many: bool = None) -> TEncoded:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dump", "line_number": 165, "body": "def dump(self, obj: TOneOrMulti,\n                 many: bool = None) -> TOneOrMultiEncoded:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dumps", "line_number": 170, "body": "def dumps(self, obj: typing.List[A], many: bool = None, *args,\n                  **kwargs) -> str:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dumps", "line_number": 175, "body": "def dumps(self, obj: A, many: bool = None, *args, **kwargs) -> str:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "dumps", "line_number": 178, "body": "def dumps(self, obj: TOneOrMulti, many: bool = None, *args,\n                  **kwargs) -> str:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "load", "line_number": 183, "body": "def load(self, data: typing.List[TEncoded],\n                 many: bool = True, partial: bool = None,\n                 unknown: str = None) -> \\\n                typing.List[A]:\n            # ignore the mypy error of the decorator because mm does not define lists as an allowed input type\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "load", "line_number": 191, "body": "def load(self, data: TEncoded,\n                 many: None = None, partial: bool = None,\n                 unknown: str = None) -> A:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "load", "line_number": 196, "body": "def load(self, data: TOneOrMultiEncoded,\n                 many: bool = None, partial: bool = None,\n                 unknown: str = None) -> TOneOrMulti:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "loads", "line_number": 202, "body": "def loads(self, json_data: JsonData,  # type: ignore\n                  many: bool = True, partial: bool = None, unknown: str = None,\n                  **kwargs) -> typing.List[A]:\n            # ignore the mypy error of the decorator because mm does not define bytes as correct input data\n            # mm has the wrong return type annotation (dict) so we can ignore the mypy error\n            # for the return type overlap\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "loads", "line_number": 211, "body": "def loads(self, json_data: JsonData,\n                  many: None = None, partial: bool = None, unknown: str = None,\n                  **kwargs) -> A:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/dataclasses-json/dataclasses_json/mm.py", "function": "loads", "line_number": 216, "body": "def loads(self, json_data: JsonData,\n                  many: bool = None, partial: bool = None, unknown: str = None,\n                  **kwargs) -> TOneOrMulti:\n            pass", "is_method": true, "class_name": "SchemaF", "function_description": "Not Implemented"}]