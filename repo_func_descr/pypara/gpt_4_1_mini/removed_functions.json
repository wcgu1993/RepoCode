[{"file": "./dataset/RepoExec/test-apps/pypara/pypara/exchange.py", "function": "queries", "line_number": 155, "body": "def queries(self, queries: Iterable[TQuery], strict: bool = False) -> Iterable[Optional[FXRate]]:\n        \"\"\"\n        Returns foreign exchange rates for a given collection of currency pairs and dates.\n\n        :param queries: An iterable of :class:`Currency`, :class:`Currency` and :class:`Temporal` tuples.\n        :param strict: Indicates if we should raise a lookup error if that the foreign exchange rate can not be found.\n        :return: An iterable of rates.\n        \"\"\"\n        pass", "is_method": true, "class_name": "FXRateService", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "is_equal", "line_number": 89, "body": "def is_equal(self, other: Any) -> bool:\n        \"\"\"\n        Checks the equality of two money objects.\n\n        In particular:\n\n        1. ``True`` if ``other`` is a money object **and** all slots are same.\n        2. ``False`` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "as_float", "line_number": 113, "body": "def as_float(self) -> float:\n        \"\"\"\n        Returns the quantity as a ``float`` if *defined*, raises class:`MonetaryOperationException` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "as_integer", "line_number": 120, "body": "def as_integer(self) -> int:\n        \"\"\"\n        Returns the quantity as an ``int`` if *defined*, raises class:`MonetaryOperationException` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "abs", "line_number": 127, "body": "def abs(self) -> \"Money\":\n        \"\"\"\n        Returns the absolute money if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "negative", "line_number": 134, "body": "def negative(self) -> \"Money\":\n        \"\"\"\n        Negates the quantity of the monetary value if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "positive", "line_number": 141, "body": "def positive(self) -> \"Money\":\n        \"\"\"\n        Returns same monetary value if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "round", "line_number": 148, "body": "def round(self, ndigits: int = 0) -> \"Money\":\n        \"\"\"\n        Rounds the quantity of the monetary value to ``ndigits`` by using ``HALF_EVEN`` method if *defined*, itself\n        otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "add", "line_number": 156, "body": "def add(self, other: \"Money\") -> \"Money\":\n        \"\"\"\n        Performs monetary addition on the money object and the given ``other`` money object.\n\n        Note that::\n\n        1. Raises :class:`IncompatibleCurrencyError` if currencies do not match.\n        2. If any of the operands are undefined, returns the other one conveniently.\n        3. Dates are carried forward as a result of addition of two defined money objects.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "scalar_add", "line_number": 169, "body": "def scalar_add(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs scalar addition on the quantity of the money.\n\n        Note that undefined money object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "subtract", "line_number": 178, "body": "def subtract(self, other: \"Money\") -> \"Money\":\n        \"\"\"\n        Performs monetary subtraction on the money object and the given ``other`` money object.\n\n        Note that::\n\n        1. Raises :class:`IncompatibleCurrencyError` if currencies do not match.\n        2. If any of the operands are undefined, returns the other one conveniently.\n        3. Dates are carried forward as a result of addition of two defined money objects.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "scalar_subtract", "line_number": 191, "body": "def scalar_subtract(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs scalar subtraction on the quantity of the money.\n\n        Note that undefined money object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "multiply", "line_number": 200, "body": "def multiply(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs scalar multiplication.\n\n        Note that undefined money object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "divide", "line_number": 209, "body": "def divide(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs ordinary division on the money object if *defined*, itself otherwise.\n\n        Note that division by zero yields an undefined money object.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "floor_divide", "line_number": 218, "body": "def floor_divide(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs floor division on the money object if *defined*, itself otherwise.\n\n        Note that division by zero yields an undefined money object.\n\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "lt", "line_number": 228, "body": "def lt(self, other: \"Money\") -> bool:\n        \"\"\"\n        Applies \"less than\" comparison against ``other`` money.\n\n        Note that::\n\n        1. Undefined money objects are always less than ``other`` if ``other`` is not undefined, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined money objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "lte", "line_number": 241, "body": "def lte(self, other: \"Money\") -> bool:\n        \"\"\"\n        Applies \"less than or equal to\" comparison against ``other`` money.\n\n        Note that::\n\n        1. Undefined money objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined money objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "gt", "line_number": 254, "body": "def gt(self, other: \"Money\") -> bool:\n        \"\"\"\n        Applies \"greater than\" comparison against ``other`` money.\n\n        Note that::\n\n        1. Undefined money objects are never greater than ``other``,\n        2. Defined money objects are always greater than ``other`` if other is undefined, and\n        3. :class:`IncompatibleCurrencyError` is raised when comparing two defined money objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "gte", "line_number": 268, "body": "def gte(self, other: \"Money\") -> bool:\n        \"\"\"\n        Applies \"greater than or equal to\" comparison against ``other`` money.\n\n        Note that::\n\n        1. Undefined money objects are never greater than or equal to ``other`` if ``other`` is defined,\n        2. Undefined money objects are greater than or equal to ``other`` if ``other is undefined, and\n        3. :class:`IncompatibleCurrencyError` is raised when comparing two defined money objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_ccy", "line_number": 282, "body": "def with_ccy(self, ccy: Currency) -> \"Money\":\n        \"\"\"\n        Creates a new money object with the given currency if money is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_qty", "line_number": 289, "body": "def with_qty(self, qty: Decimal) -> \"Money\":\n        \"\"\"\n        Creates a new money object with the given quantity if money is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_dov", "line_number": 296, "body": "def with_dov(self, dov: Date) -> \"Money\":\n        \"\"\"\n        Creates a new money object with the given value date if money is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "convert", "line_number": 303, "body": "def convert(self, to: Currency, asof: Optional[Date] = None, strict: bool = False) -> \"Money\":\n        \"\"\"\n        Converts the monetary value from one currency to another.\n\n        Raises :class:`FXRateLookupError` if no foreign exchange rate can be found for conversion.\n\n        Note that we will carry the date forward as per ``asof`` date.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "price", "line_number": 324, "body": "def price(self) -> \"Price\":\n        \"\"\"\n        Returns the price representation of the money object.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__bool__", "line_number": 331, "body": "def __bool__(self) -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__eq__", "line_number": 335, "body": "def __eq__(self, other: Any) -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__abs__", "line_number": 339, "body": "def __abs__(self) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__float__", "line_number": 343, "body": "def __float__(self) -> float:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__int__", "line_number": 347, "body": "def __int__(self) -> int:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__round__", "line_number": 355, "body": "def __round__(self, ndigits: None) -> int:\n        ...", "is_method": true, "class_name": "Money", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__neg__", "line_number": 366, "body": "def __neg__(self) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__pos__", "line_number": 370, "body": "def __pos__(self) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__add__", "line_number": 374, "body": "def __add__(self, other: \"Money\") -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__sub__", "line_number": 378, "body": "def __sub__(self, other: \"Money\") -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__mul__", "line_number": 382, "body": "def __mul__(self, other: Numeric) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__truediv__", "line_number": 386, "body": "def __truediv__(self, other: Numeric) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__floordiv__", "line_number": 390, "body": "def __floordiv__(self, other: Numeric) -> \"Money\":\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__lt__", "line_number": 394, "body": "def __lt__(self, other: \"Money\") -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__le__", "line_number": 398, "body": "def __le__(self, other: \"Money\") -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__gt__", "line_number": 402, "body": "def __gt__(self, other: \"Money\") -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__ge__", "line_number": 406, "body": "def __ge__(self, other: \"Money\") -> bool:\n        pass", "is_method": true, "class_name": "Money", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "is_equal", "line_number": 772, "body": "def is_equal(self, other: Any) -> bool:\n        \"\"\"\n        Checks the equality of two price objects.\n\n        In particular:\n\n        1. ``True`` if ``other`` is a price object **and** all slots are same.\n        2. ``False`` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "as_boolean", "line_number": 784, "body": "def as_boolean(self) -> bool:\n        \"\"\"\n        Returns the logical representation of the price object.\n\n        In particular:\n\n        1. ``False`` if price is *undefined* **or** price quantity is ``zero``.\n        2. ``True`` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "as_float", "line_number": 796, "body": "def as_float(self) -> float:\n        \"\"\"\n        Returns the quantity as a ``float`` if *defined*, raises class:`MonetaryOperationException` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "as_integer", "line_number": 803, "body": "def as_integer(self) -> int:\n        \"\"\"\n        Returns the quantity as an ``int`` if *defined*, raises class:`MonetaryOperationException` otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "abs", "line_number": 810, "body": "def abs(self) -> \"Price\":\n        \"\"\"\n        Returns the absolute price if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "negative", "line_number": 817, "body": "def negative(self) -> \"Price\":\n        \"\"\"\n        Negates the quantity of the monetary value if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "positive", "line_number": 824, "body": "def positive(self) -> \"Price\":\n        \"\"\"\n        Returns same monetary value if *defined*, itself otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "round", "line_number": 831, "body": "def round(self, ndigits: int = 0) -> \"Price\":\n        \"\"\"\n        Rounds the quantity of the monetary value to ``ndigits`` by using ``HALF_EVEN`` method if *defined*, itself\n        otherwise.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "add", "line_number": 839, "body": "def add(self, other: \"Price\") -> \"Price\":\n        \"\"\"\n        Performs monetary addition on the price object and the given ``other`` price object.\n\n        Note that::\n\n        1. Raises :class:`IncompatibleCurrencyError` if currencies do not match.\n        2. If any of the operands are undefined, returns the other one conveniently.\n        3. Dates are carried forward as a result of addition of two defined price objects.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "scalar_add", "line_number": 852, "body": "def scalar_add(self, other: Numeric) -> \"Price\":\n        \"\"\"\n        Performs scalar addition on the quantity of the price.\n\n        Note that undefined price object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "subtract", "line_number": 861, "body": "def subtract(self, other: \"Price\") -> \"Price\":\n        \"\"\"\n        Performs monetary subtraction on the price object and the given ``other`` price object.\n\n        Note that::\n\n        1. Raises :class:`IncompatibleCurrencyError` if currencies do not match.\n        2. If any of the operands are undefined, returns the other one conveniently.\n        3. Dates are carried forward as a result of addition of two defined price objects.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "scalar_subtract", "line_number": 874, "body": "def scalar_subtract(self, other: Numeric) -> \"Price\":\n        \"\"\"\n        Performs scalar subtraction on the quantity of the price.\n\n        Note that undefined price object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "multiply", "line_number": 883, "body": "def multiply(self, other: Numeric) -> \"Price\":\n        \"\"\"\n        Performs scalar multiplication.\n\n        Note that undefined price object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "times", "line_number": 892, "body": "def times(self, other: Numeric) -> \"Money\":\n        \"\"\"\n        Performs monetary multiplication operation.\n\n        Note that undefined price object is returned as is.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "divide", "line_number": 901, "body": "def divide(self, other: Numeric) -> \"Price\":\n        \"\"\"\n        Performs ordinary division on the price object if *defined*, itself otherwise.\n\n        Note that division by zero yields an undefined price object.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "floor_divide", "line_number": 910, "body": "def floor_divide(self, other: Numeric) -> \"Price\":\n        \"\"\"\n        Performs floor division on the price object if *defined*, itself otherwise.\n\n        Note that division by zero yields an undefined price object.\n\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "lt", "line_number": 920, "body": "def lt(self, other: \"Price\") -> bool:\n        \"\"\"\n        Applies \"less than\" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than ``other`` if ``other`` is not undefined, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "lte", "line_number": 933, "body": "def lte(self, other: \"Price\") -> bool:\n        \"\"\"\n        Applies \"less than or equal to\" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "gt", "line_number": 946, "body": "def gt(self, other: \"Price\") -> bool:\n        \"\"\"\n        Applies \"greater than\" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are never greater than ``other``,\n        2. Defined price objects are always greater than ``other`` if other is undefined, and\n        3. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "gte", "line_number": 960, "body": "def gte(self, other: \"Price\") -> bool:\n        \"\"\"\n        Applies \"greater than or equal to\" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are never greater than or equal to ``other`` if ``other`` is defined,\n        2. Undefined price objects are greater than or equal to ``other`` if ``other is undefined, and\n        3. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_ccy", "line_number": 974, "body": "def with_ccy(self, ccy: Currency) -> \"Price\":\n        \"\"\"\n        Creates a new price object with the given currency if price is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_qty", "line_number": 981, "body": "def with_qty(self, qty: Decimal) -> \"Price\":\n        \"\"\"\n        Creates a new price object with the given quantity if price is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "with_dov", "line_number": 988, "body": "def with_dov(self, dov: Date) -> \"Price\":\n        \"\"\"\n        Creates a new price object with the given value date if price is *defined*, returns itself otherwise.\n        \"\"\"\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "convert", "line_number": 995, "body": "def convert(self, to: Currency, asof: Optional[Date] = None, strict: bool = False) -> \"Price\":\n        \"\"\"\n        Converts the monetary value from one currency to another.\n\n        Raises :class:`FXRateLookupError` if no foreign exchange rate can be found for conversion.\n\n        Note that we will carry the date forward as per ``asof`` date.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "money", "line_number": 1007, "body": "def money(self) -> Money:\n        \"\"\"\n        Returns the money representation of the price object.\n        \"\"\"\n        raise NotImplementedError", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__bool__", "line_number": 1023, "body": "def __bool__(self) -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__eq__", "line_number": 1027, "body": "def __eq__(self, other: Any) -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__abs__", "line_number": 1031, "body": "def __abs__(self) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__float__", "line_number": 1035, "body": "def __float__(self) -> float:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__int__", "line_number": 1039, "body": "def __int__(self) -> int:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__round__", "line_number": 1047, "body": "def __round__(self, ndigits: None) -> int:\n        ...", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__neg__", "line_number": 1058, "body": "def __neg__(self) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__pos__", "line_number": 1062, "body": "def __pos__(self) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__add__", "line_number": 1066, "body": "def __add__(self, other: \"Price\") -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__sub__", "line_number": 1070, "body": "def __sub__(self, other: \"Price\") -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__mul__", "line_number": 1074, "body": "def __mul__(self, other: Numeric) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__truediv__", "line_number": 1078, "body": "def __truediv__(self, other: Numeric) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__floordiv__", "line_number": 1082, "body": "def __floordiv__(self, other: Numeric) -> \"Price\":\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__lt__", "line_number": 1086, "body": "def __lt__(self, other: \"Price\") -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__le__", "line_number": 1090, "body": "def __le__(self, other: \"Price\") -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__gt__", "line_number": 1094, "body": "def __gt__(self, other: \"Price\") -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/monetary.py", "function": "__ge__", "line_number": 1098, "body": "def __ge__(self, other: \"Price\") -> bool:\n        pass", "is_method": true, "class_name": "Price", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/accounts.py", "function": "name", "line_number": 141, "body": "def name(self) -> str:\n        \"\"\"\n        Name of the account.\n        \"\"\"\n        ...", "is_method": true, "class_name": "Account", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/accounts.py", "function": "type", "line_number": 149, "body": "def type(self) -> AccountType:\n        \"\"\"\n        Type of the account.\n        \"\"\"\n        ...", "is_method": true, "class_name": "Account", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/accounts.py", "function": "coa", "line_number": 157, "body": "def coa(self) -> \"COA\":\n        \"\"\"\n        Chart of accounts of the account.\n        \"\"\"\n        ...", "is_method": true, "class_name": "Account", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/accounts.py", "function": "__call__", "line_number": 399, "body": "def __call__(self) -> COA:\n        pass", "is_method": true, "class_name": "ReadChartOfAccounts", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/ledger.py", "function": "__call__", "line_number": 194, "body": "def __call__(self, period: DateRange) -> InitialBalances:\n        pass", "is_method": true, "class_name": "ReadInitialBalances", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/ledger.py", "function": "__call__", "line_number": 203, "body": "def __call__(self, period: DateRange) -> GeneralLedger[_T]:\n        pass", "is_method": true, "class_name": "GeneralLedgerProgram", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pypara/pypara/accounting/journaling.py", "function": "__call__", "line_number": 179, "body": "def __call__(self, period: DateRange) -> Iterable[JournalEntry[_T]]:\n        pass", "is_method": true, "class_name": "ReadJournalEntries", "function_description": "Not Implemented"}]