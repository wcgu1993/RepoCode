[{"file": "./dataset/RepoExec/test-apps/youtube-dl/setup.py", "function": "initialize_options", "line_number": 90, "body": "def initialize_options(self):\n        pass", "is_method": true, "class_name": "build_lazy_extractors", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/setup.py", "function": "finalize_options", "line_number": 93, "body": "def finalize_options(self):\n        pass", "is_method": true, "class_name": "build_lazy_extractors", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/devscripts/buildserver.py", "function": "win_service_handler", "line_number": 141, "body": "def win_service_handler(stop_event, *args):\n    try:\n        raise ValueError('Handler called with args ' + repr(args))\n        TODO\n    except Exception as e:\n        tb = traceback.format_exc()\n        msg = str(e) + '\\n' + tb\n        win_service_report_event(service_name, msg, is_error=True)\n        raise", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/devscripts/buildserver.py", "function": "win_service_main", "line_number": 164, "body": "def win_service_main(service_name, real_main, argc, argv_raw):\n    try:\n        # args = [argv_raw[i].value for i in range(argc)]\n        stop_event = threading.Event()\n        handler = HandlerEx(functools.partial(stop_event, win_service_handler))\n        h = advapi32.RegisterServiceCtrlHandlerExW(service_name, handler, None)\n        if not h:\n            raise OSError('Handler registration failed: %s' %\n                          ctypes.FormatError())\n\n        TODO\n    except Exception as e:\n        tb = traceback.format_exc()\n        msg = str(e) + '\\n' + tb\n        win_service_report_event(service_name, msg, is_error=True)\n        raise", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/devscripts/buildserver.py", "function": "start", "line_number": 389, "body": "def start(self):\n        pass", "is_method": true, "class_name": "Null", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/devscripts/buildserver.py", "function": "close", "line_number": 392, "body": "def close(self):\n        pass", "is_method": true, "class_name": "Null", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/devscripts/buildserver.py", "function": "build", "line_number": 395, "body": "def build(self):\n        pass", "is_method": true, "class_name": "Null", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/compat.py", "function": "doctype", "line_number": 2527, "body": "def doctype(self, name, pubid, system):\n        pass", "is_method": true, "class_name": "_TreeBuilder", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/compat.py", "function": "_testfunc", "line_number": 2814, "body": "def _testfunc(x):\n        pass", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/YoutubeDL.py", "function": "__process_iterable_entry", "line_number": 1075, "body": "def __process_iterable_entry(self, entry, download, extra_info):\n        return self.process_ie_result(\n            entry, download=download, extra_info=extra_info)", "is_method": true, "class_name": "YoutubeDL", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/YoutubeDL.py", "function": "make_playlistitems_entries", "line_number": 991, "body": "def make_playlistitems_entries(list_ie_entries):\n            num_entries = len(list_ie_entries)\n            return [\n                list_ie_entries[i - 1] for i in playlistitems\n                if -num_entries <= i - 1 < num_entries]", "is_method": true, "class_name": "YoutubeDL", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/YoutubeDL.py", "function": "print_mandatory", "line_number": 1747, "body": "def print_mandatory(field):\n            if (self.params.get('force%s' % field, False)\n                    and (not incomplete or info_dict.get(field) is not None)):\n                self.to_stdout(info_dict[field])", "is_method": true, "class_name": "YoutubeDL", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/utils.py", "function": "_find_xpath", "line_number": 1888, "body": "def _find_xpath(xpath):\n        return node.find(compat_xpath(xpath))", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/utils.py", "function": "http_response", "line_number": 2862, "body": "def http_response(self, request, response):\n        # Python 2 will choke on next HTTP request in row if there are non-ASCII\n        # characters in Set-Cookie HTTP header of last response (see\n        # https://github.com/ytdl-org/youtube-dl/issues/6769).\n        # In order to at least prevent crashing we will percent encode Set-Cookie\n        # header before HTTPCookieProcessor starts processing it.\n        # if sys.version_info < (3, 0) and response.headers:\n        #     for set_cookie_header in ('Set-Cookie', 'Set-Cookie2'):\n        #         set_cookie = response.headers.get(set_cookie_header)\n        #         if set_cookie:\n        #             set_cookie_escaped = compat_urllib_parse.quote(set_cookie, b\"%/;:@&=+$,!~*'()?#[] \")\n        #             if set_cookie != set_cookie_escaped:\n        #                 del response.headers[set_cookie_header]\n        #                 response.headers[set_cookie_header] = set_cookie_escaped\n        return compat_urllib_request.HTTPCookieProcessor.http_response(self, request, response)", "is_method": true, "class_name": "YoutubeDLCookieProcessor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/utils.py", "function": "__len__", "line_number": 3809, "body": "def __len__(self):\n        # This is only useful for tests\n        return len(self.getslice())", "is_method": true, "class_name": "PagedList", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/utils.py", "function": "_lock_file", "line_number": 3318, "body": "def _lock_file(f, exclusive):\n            raise IOError(UNSUPPORTED_MSG)", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/utils.py", "function": "_unlock_file", "line_number": 3321, "body": "def _unlock_file(f):\n            raise IOError(UNSUPPORTED_MSG)", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/postprocessor/common.py", "function": "run", "line_number": 41, "body": "def run(self, information):\n        \"\"\"Run the PostProcessor.\n\n        The \"information\" argument is a dictionary like the ones\n        composed by InfoExtractors. The only difference is that this\n        one has an extra field called \"filepath\" that points to the\n        downloaded file.\n\n        This method returns a tuple, the first element is a list of the files\n        that can be deleted, and the second of which is the updated\n        information.\n\n        In addition, this method may raise a PostProcessingError\n        exception if post processing fails.\n        \"\"\"\n        return [], information", "is_method": true, "class_name": "PostProcessor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/downloader/common.py", "function": "trouble", "line_number": 158, "body": "def trouble(self, *args, **kargs):\n        self.ydl.trouble(*args, **kargs)", "is_method": true, "class_name": "FileDownloader", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/downloader/common.py", "function": "real_download", "line_number": 368, "body": "def real_download(self, filename, info_dict):\n        \"\"\"Real download process. Redefine in subclasses.\"\"\"\n        raise NotImplementedError('This method must be implemented by subclasses')", "is_method": true, "class_name": "FileDownloader", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/downloader/fragment.py", "function": "to_screen", "line_number": 18, "body": "def to_screen(self, *args, **kargs):\n        pass", "is_method": true, "class_name": "HttpQuietDownloader", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/metacafe.py", "function": "report_disclaimer", "line_number": 128, "body": "def report_disclaimer(self):\n        self.to_screen('Retrieving disclaimer')", "is_method": true, "class_name": "MetacafeIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/mixcloud.py", "function": "_get_cloudcast", "line_number": 210, "body": "def _get_cloudcast(self, node):\n        return node", "is_method": true, "class_name": "MixcloudPlaylistBaseIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/youtube.py", "function": "_real_extract", "line_number": 3215, "body": "def _real_extract(self, url):\n        raise ExtractorError(\n            'Did you forget to quote the URL? Remember that & is a meta '\n            'character in most shells, so you want to put the URL in quotes, '\n            'like  youtube-dl '\n            '\"https://www.youtube.com/watch?feature=foo&v=BaW_jenozKc\" '\n            ' or simply  youtube-dl BaW_jenozKc  .',\n            expected=True)", "is_method": true, "class_name": "YoutubeTruncatedURLIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/audioboom.py", "function": "from_clip", "line_number": 47, "body": "def from_clip(field):\n            if clip:\n                return clip.get(field)", "is_method": true, "class_name": "AudioBoomIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/cnn.py", "function": "_extract_timestamp", "line_number": 86, "body": "def _extract_timestamp(self, video_data):\n        # TODO: fix timestamp extraction\n        return None", "is_method": true, "class_name": "CNNIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/leeco.py", "function": "calc_time_key", "line_number": 90, "body": "def calc_time_key(self, param1):\n        _loc2_ = 185025305\n        return self.ror(param1, _loc2_ % 17) ^ _loc2_", "is_method": true, "class_name": "LeIE", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/aenetworks.py", "function": "_get_doc", "line_number": 273, "body": "def _get_doc(self, item):\n        return item", "is_method": true, "class_name": "AENetworksShowIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_real_initialize", "line_number": 568, "body": "def _real_initialize(self):\n        \"\"\"Real initialization process. Redefine in subclasses.\"\"\"\n        pass", "is_method": true, "class_name": "InfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_real_extract", "line_number": 572, "body": "def _real_extract(self, url):\n        \"\"\"Real extraction process. Redefine in subclasses.\"\"\"\n        pass", "is_method": true, "class_name": "InfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_get_subtitles", "line_number": 2971, "body": "def _get_subtitles(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')", "is_method": true, "class_name": "InfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_get_automatic_captions", "line_number": 2997, "body": "def _get_automatic_captions(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')", "is_method": true, "class_name": "InfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_mark_watched", "line_number": 3006, "body": "def _mark_watched(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')", "is_method": true, "class_name": "InfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/common.py", "function": "_get_n_results", "line_number": 3058, "body": "def _get_n_results(self, query, n):\n        \"\"\"Get a specified number of results for a query\"\"\"\n        raise NotImplementedError('This method must be implemented by subclasses')", "is_method": true, "class_name": "SearchInfoExtractor", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/nba.py", "function": "_extract_url_results", "line_number": 395, "body": "def _extract_url_results(self, team, content_id):\n        return self._embed_url_result(team, content_id)", "is_method": true, "class_name": "NBAIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/vier.py", "function": "_real_initialize", "line_number": 111, "body": "def _real_initialize(self):\n        self._logged_in = False", "is_method": true, "class_name": "VierIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/nextmedia.py", "function": "_fetch_timestamp", "line_number": 189, "body": "def _fetch_timestamp(self, page):\n        return None", "is_method": true, "class_name": "AppleDailyIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/periscope.py", "function": "add_width_and_height", "line_number": 112, "body": "def add_width_and_height(f):\n            for key, val in (('width', width), ('height', height)):\n                if not f.get(key):\n                    f[key] = val", "is_method": true, "class_name": "PeriscopeIE", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/iqiyi.py", "function": "mod", "line_number": 59, "body": "def mod(self, modulus):\n        chunks, ip = self.preprocess(32)\n        self.target = chunks[0] + ''.join(map(lambda p: compat_str(p % modulus), ip))", "is_method": true, "class_name": "IqiyiSDK", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/iqiyi.py", "function": "split_time_ip_sum", "line_number": 118, "body": "def split_time_ip_sum(self):\n        chunks, ip = self.preprocess(32)\n        self.target = self.digit_sum(self.timestamp) + chunks[0] + compat_str(sum(ip))", "is_method": true, "class_name": "IqiyiSDK", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/nrk.py", "function": "_extract_description", "line_number": 782, "body": "def _extract_description(self, webpage):\n        pass", "is_method": true, "class_name": "NRKPlaylistBaseIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/mlb.py", "function": "_get_feed", "line_number": 183, "body": "def _get_feed(video):\n        return video", "is_method": true, "class_name": "MLBIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/bbc.py", "function": "_get_playlist_data", "line_number": 1507, "body": "def _get_playlist_data(data):\n        return data", "is_method": true, "class_name": "BBCCoUkIPlayerEpisodesIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/bbc.py", "function": "_get_episode", "line_number": 1559, "body": "def _get_episode(element):\n        return element", "is_method": true, "class_name": "BBCCoUkIPlayerGroupIE", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/youtube-dl/youtube_dl/extractor/nexx.py", "function": "find_video", "line_number": 298, "body": "def find_video(result):\n            if isinstance(result, dict):\n                return result\n            elif isinstance(result, list):\n                vid = int(video_id)\n                for v in result:\n                    if try_get(v, lambda x: x['general']['ID'], int) == vid:\n                        return v\n            return None", "is_method": true, "class_name": "NexxIE", "function_description": "Not sure"}]