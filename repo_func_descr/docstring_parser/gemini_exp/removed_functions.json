[{"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/numpydoc.py", "function": "_parse_item", "line_number": 91, "body": "def _parse_item(self, key: str, value: str) -> DocstringMeta:\n        pass", "is_method": true, "class_name": "_KVSection", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_params", "line_number": 364, "body": "def test_params() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            name: description 1\n            priority (int): description 2\n            sender (str?): description 3\n            ratio (Optional[float], optional): description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            name: description 1\n                with multi-line text\n            priority (int): description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_attributes", "line_number": 418, "body": "def test_attributes() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes:\n            name: description 1\n            priority (int): description 2\n            sender (str?): description 3\n            ratio (Optional[float], optional): description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes:\n            name: description 1\n                with multi-line text\n            priority (int): description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_raises", "line_number": 551, "body": "def test_raises() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Raises:\n            ValueError: description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name == \"ValueError\"\n    assert docstring.raises[0].description == \"description\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_broken_meta", "line_number": 588, "body": "def test_broken_meta() -> None:\n    with pytest.raises(ParseError):\n        parse(\"Args:\")\n\n    with pytest.raises(ParseError):\n        parse(\"Args:\\n    herp derp\")", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_attributes", "line_number": 356, "body": "def test_attributes() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes\n        ----------\n        name\n            description 1\n        priority : int\n            description 2\n        sender : str, optional\n            description 3\n        ratio : Optional[float], optional\n            description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes\n        ----------\n        name\n            description 1\n            with multi-line text\n        priority : int\n            description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_other_params", "line_number": 418, "body": "def test_other_params() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        Other Parameters\n        ----------------\n        only_seldom_used_keywords : type, optional\n            Explanation\n        common_parameters_listed_above : type, optional\n            Explanation\n        \"\"\"\n    )\n    assert len(docstring.meta) == 2\n    assert docstring.meta[0].args == [\n        \"other_param\",\n        \"only_seldom_used_keywords\",\n    ]\n    assert docstring.meta[0].arg_name == \"only_seldom_used_keywords\"\n    assert docstring.meta[0].type_name == \"type\"\n    assert docstring.meta[0].is_optional\n    assert docstring.meta[0].description == \"Explanation\"\n\n    assert docstring.meta[1].args == [\n        \"other_param\",\n        \"common_parameters_listed_above\",\n    ]", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_yields", "line_number": 446, "body": "def test_yields() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        Yields\n        ------\n        int\n            description\n        \"\"\"\n    )\n    assert len(docstring.meta) == 1\n    assert docstring.meta[0].args == [\"yields\"]\n    assert docstring.meta[0].type_name == \"int\"\n    assert docstring.meta[0].description == \"description\"\n    assert docstring.meta[0].return_name is None\n    assert docstring.meta[0].is_generator", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_returns", "line_number": 464, "body": "def test_returns() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert docstring.returns is None\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Returns\n        -------\n        type\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name == \"type\"\n    assert docstring.returns.description is None\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Returns\n        -------\n        int\n            description\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name == \"int\"\n    assert docstring.returns.description == \"description\"\n\n    docstring = parse(\n        \"\"\"\n        Returns\n        -------\n        Optional[Mapping[str, List[int]]]\n            A description: with a colon\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name == \"Optional[Mapping[str, List[int]]]\"\n    assert docstring.returns.description == \"A description: with a colon\"\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Returns\n        -------\n        int\n            description\n            with much text\n\n            even some spacing\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name == \"int\"\n    assert docstring.returns.description == (\n        \"description\\n\" \"with much text\\n\\n\" \"even some spacing\"\n    )", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_raises", "line_number": 528, "body": "def test_raises() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Raises\n        ------\n        ValueError\n            description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name == \"ValueError\"\n    assert docstring.raises[0].description == \"description\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_simple_sections", "line_number": 565, "body": "def test_simple_sections() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        See Also\n        --------\n        something : some thing you can also see\n        actually, anything can go in this section\n\n        Warnings\n        --------\n        Here be dragons\n\n        Notes\n        -----\n        None of this is real\n\n        References\n        ----------\n        Cite the relevant literature, e.g. [1]_.  You may also cite these\n        references in the notes section above.\n\n        .. [1] O. McNoleg, \"The integration of GIS, remote sensing,\n           expert systems and adaptive co-kriging for environmental habitat\n           modelling of the Highland Haggis using object-oriented, fuzzy-logic\n           and neural-network techniques,\" Computers & Geosciences, vol. 22,\n           pp. 585-588, 1996.\n        \"\"\"\n    )\n    assert len(docstring.meta) == 4\n    assert docstring.meta[0].args == [\"see_also\"]\n    assert docstring.meta[0].description == (\n        \"something : some thing you can also see\\n\"\n        \"actually, anything can go in this section\"\n    )\n\n    assert docstring.meta[1].args == [\"warnings\"]\n    assert docstring.meta[1].description == \"Here be dragons\"\n\n    assert docstring.meta[2].args == [\"notes\"]\n    assert docstring.meta[2].description == \"None of this is real\"\n\n    assert docstring.meta[3].args == [\"references\"]", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_multiple_meta", "line_number": 208, "body": "def test_multiple_meta() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        :meta1: asd\n            1\n                2\n            3\n        :meta2: herp\n        :meta3: derp\n        \"\"\"\n    )\n    assert docstring.short_description == \"Short description\"\n    assert len(docstring.meta) == 3\n    assert docstring.meta[0].args == [\"meta1\"]\n    assert docstring.meta[0].description == \"asd\\n1\\n    2\\n3\"\n    assert docstring.meta[1].args == [\"meta2\"]\n    assert docstring.meta[1].description == \"herp\"\n    assert docstring.meta[2].args == [\"meta3\"]\n    assert docstring.meta[2].description == \"derp\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_params", "line_number": 245, "body": "def test_params() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        :param name: description 1\n        :param int priority: description 2\n        :param str? sender: description 3\n        :param str? message: description 4, defaults to 'hello'\n        :param str? multiline: long description 5,\n        defaults to 'bye'\n        \"\"\"\n    )\n    assert len(docstring.params) == 5\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert docstring.params[0].default is None\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[1].default is None\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[2].default is None\n    assert docstring.params[3].arg_name == \"message\"\n    assert docstring.params[3].type_name == \"str\"\n    assert (\n        docstring.params[3].description == \"description 4, defaults to 'hello'\"\n    )\n    assert docstring.params[3].is_optional\n    assert docstring.params[3].default == \"'hello'\"\n    assert docstring.params[4].arg_name == \"multiline\"\n    assert docstring.params[4].type_name == \"str\"\n    assert (\n        docstring.params[4].description\n        == \"long description 5,\\ndefaults to 'bye'\"\n    )\n    assert docstring.params[4].is_optional\n    assert docstring.params[4].default == \"'bye'\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_returns", "line_number": 294, "body": "def test_returns() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert docstring.returns is None\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :returns: description\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name is None\n    assert docstring.returns.description == \"description\"\n    assert not docstring.returns.is_generator\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :returns int: description\n        \"\"\"\n    )\n    assert docstring.returns is not None\n    assert docstring.returns.type_name == \"int\"\n    assert docstring.returns.description == \"description\"\n    assert not docstring.returns.is_generator", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_raises", "line_number": 356, "body": "def test_raises() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :raises: description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name is None\n    assert docstring.raises[0].description == \"description\"\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :raises ValueError: description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name == \"ValueError\"\n    assert docstring.raises[0].description == \"description\"", "is_method": false, "function_description": "Not Implemented"}]