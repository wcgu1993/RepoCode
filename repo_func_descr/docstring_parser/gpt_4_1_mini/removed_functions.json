[{"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/numpydoc.py", "function": "_parse_item", "line_number": 91, "body": "def _parse_item(self, key: str, value: str) -> DocstringMeta:\n        pass", "is_method": true, "class_name": "_KVSection", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_google_parser", "line_number": 8, "body": "def test_google_parser():\n    parser = GoogleParser()\n    docstring = parse(\n        \"\"\"\n        Unknown:\n            spam: a\n        \"\"\"\n    )\n    assert docstring.short_description == \"Unknown:\"\n    assert docstring.long_description == \"spam: a\"\n    assert len(docstring.meta) == 0\n\n    parser = GoogleParser(\n        [\n            Section(\"DESCRIPTION\", \"desc\", SectionType.SINGULAR),\n            Section(\"ARGUMENTS\", \"param\", SectionType.MULTIPLE),\n            Section(\"ATTRIBUTES\", \"attribute\", SectionType.MULTIPLE),\n            Section(\"EXAMPLES\", \"examples\", SectionType.SINGULAR),\n        ],\n        title_colon=False,\n    )\n    docstring = parser.parse(\n        \"\"\"\n        DESCRIPTION\n            This is the description.\n\n        ARGUMENTS\n            arg1: first arg\n            arg2: second arg\n\n        ATTRIBUTES\n            attr1: first attribute\n            attr2: second attribute\n\n        EXAMPLES\n            Many examples\n            More examples\n        \"\"\"\n    )\n\n    assert docstring.short_description is None\n    assert docstring.long_description is None\n    assert len(docstring.meta) == 6\n    assert docstring.meta[0].args == [\"desc\"]\n    assert docstring.meta[0].description == \"This is the description.\"\n    assert docstring.meta[1].args == [\"param\", \"arg1\"]\n    assert docstring.meta[1].description == \"first arg\"\n    assert docstring.meta[2].args == [\"param\", \"arg2\"]\n    assert docstring.meta[2].description == \"second arg\"\n    assert docstring.meta[3].args == [\"attribute\", \"attr1\"]\n    assert docstring.meta[3].description == \"first attribute\"\n    assert docstring.meta[4].args == [\"attribute\", \"attr2\"]\n    assert docstring.meta[4].description == \"second attribute\"\n    assert docstring.meta[5].args == [\"examples\"]\n    assert docstring.meta[5].description == \"Many examples\\nMore examples\"\n\n    parser.add_section(Section(\"Note\", \"note\", SectionType.SINGULAR))\n    docstring = parser.parse(\n        \"\"\"\n        short description\n\n        Note:\n            a note\n        \"\"\"\n    )\n    assert docstring.short_description == \"short description\"\n    assert docstring.long_description == \"Note:\\n    a note\"\n\n    docstring = parser.parse(\n        \"\"\"\n        short description\n\n        Note a note\n        \"\"\"\n    )\n    assert docstring.short_description == \"short description\"\n    assert docstring.long_description == \"Note a note\"\n\n    docstring = parser.parse(\n        \"\"\"\n        short description\n\n        Note\n            a note\n        \"\"\"\n    )\n    assert len(docstring.meta) == 1\n    assert docstring.meta[0].args == [\"note\"]\n    assert docstring.meta[0].description == \"a note\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_meta_with_multiline_description", "line_number": 288, "body": "def test_meta_with_multiline_description() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            spam: asd\n                1\n                    2\n                3\n        \"\"\"\n    )\n    assert docstring.short_description == \"Short description\"\n    assert len(docstring.meta) == 1\n    assert docstring.meta[0].args == [\"param\", \"spam\"]\n    assert docstring.meta[0].arg_name == \"spam\"\n    assert docstring.meta[0].description == \"asd\\n1\\n    2\\n3\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_default_args", "line_number": 307, "body": "def test_default_args():\n    docstring = parse(\n        \"\"\"A sample function\n\n    A function the demonstrates docstrings\n    \n    Args:\n        arg1 (int): The firsty arg\n        arg2 (str): The second arg\n        arg3 (float, optional): The third arg. Defaults to 1.0.\n        arg4 (Optional[Dict[str, Any]], optional): The fourth arg. Defaults to None.\n        arg5 (str, optional): The fifth arg. Defaults to DEFAULT_ARG5.\n    \n    Returns:\n        Mapping[str, Any]: The args packed in a mapping\n    \"\"\"\n    )\n    assert docstring is not None\n    assert len(docstring.params) == 5\n\n    arg4 = docstring.params[3]\n    assert arg4.arg_name == \"arg4\"\n    assert arg4.is_optional\n    assert arg4.type_name == \"Optional[Dict[str, Any]]\"\n    assert arg4.default == \"None\"\n    assert arg4.description == \"The fourth arg. Defaults to None.\"", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_multiple_meta", "line_number": 335, "body": "def test_multiple_meta() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            spam: asd\n                1\n                    2\n                3\n\n        Raises:\n            bla: herp\n            yay: derp\n        \"\"\"\n    )\n    assert docstring.short_description == \"Short description\"\n    assert len(docstring.meta) == 3\n    assert docstring.meta[0].args == [\"param\", \"spam\"]\n    assert docstring.meta[0].arg_name == \"spam\"\n    assert docstring.meta[0].description == \"asd\\n1\\n    2\\n3\"\n    assert docstring.meta[1].args == [\"raises\", \"bla\"]\n    assert docstring.meta[1].type_name == \"bla\"\n    assert docstring.meta[1].description == \"herp\"\n    assert docstring.meta[2].args == [\"raises\", \"yay\"]\n    assert docstring.meta[2].type_name == \"yay\"\n    assert docstring.meta[2].description == \"derp\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_params", "line_number": 364, "body": "def test_params() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            name: description 1\n            priority (int): description 2\n            sender (str?): description 3\n            ratio (Optional[float], optional): description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Args:\n            name: description 1\n                with multi-line text\n            priority (int): description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_google.py", "function": "test_attributes", "line_number": 418, "body": "def test_attributes() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes:\n            name: description 1\n            priority (int): description 2\n            sender (str?): description 3\n            ratio (Optional[float], optional): description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes:\n            name: description 1\n                with multi-line text\n            priority (int): description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_multiple_meta", "line_number": 260, "body": "def test_multiple_meta() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Parameters\n        ----------\n        spam\n            asd\n            1\n                2\n            3\n\n        Raises\n        ------\n        bla\n            herp\n        yay\n            derp\n        \"\"\"\n    )\n    assert docstring.short_description == \"Short description\"\n    assert len(docstring.meta) == 3\n    assert docstring.meta[0].args == [\"param\", \"spam\"]\n    assert docstring.meta[0].arg_name == \"spam\"\n    assert docstring.meta[0].description == \"asd\\n1\\n    2\\n3\"\n    assert docstring.meta[1].args == [\"raises\", \"bla\"]\n    assert docstring.meta[1].type_name == \"bla\"\n    assert docstring.meta[1].description == \"herp\"\n    assert docstring.meta[2].args == [\"raises\", \"yay\"]\n    assert docstring.meta[2].type_name == \"yay\"\n    assert docstring.meta[2].description == \"derp\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_params", "line_number": 294, "body": "def test_params() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Parameters\n        ----------\n        name\n            description 1\n        priority : int\n            description 2\n        sender : str, optional\n            description 3\n        ratio : Optional[float], optional\n            description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Parameters\n        ----------\n        name\n            description 1\n            with multi-line text\n        priority : int\n            description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_attributes", "line_number": 356, "body": "def test_attributes() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes\n        ----------\n        name\n            description 1\n        priority : int\n            description 2\n        sender : str, optional\n            description 3\n        ratio : Optional[float], optional\n            description 4\n        \"\"\"\n    )\n    assert len(docstring.params) == 4\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[3].arg_name == \"ratio\"\n    assert docstring.params[3].type_name == \"Optional[float]\"\n    assert docstring.params[3].description == \"description 4\"\n    assert docstring.params[3].is_optional\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        Attributes\n        ----------\n        name\n            description 1\n            with multi-line text\n        priority : int\n            description 2\n        \"\"\"\n    )\n    assert len(docstring.params) == 2\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == (\n        \"description 1\\n\" \"with multi-line text\"\n    )\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_raises", "line_number": 528, "body": "def test_raises() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        Raises\n        ------\n        ValueError\n            description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name == \"ValueError\"\n    assert docstring.raises[0].description == \"description\"", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_numpydoc.py", "function": "test_simple_sections", "line_number": 565, "body": "def test_simple_sections() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        See Also\n        --------\n        something : some thing you can also see\n        actually, anything can go in this section\n\n        Warnings\n        --------\n        Here be dragons\n\n        Notes\n        -----\n        None of this is real\n\n        References\n        ----------\n        Cite the relevant literature, e.g. [1]_.  You may also cite these\n        references in the notes section above.\n\n        .. [1] O. McNoleg, \"The integration of GIS, remote sensing,\n           expert systems and adaptive co-kriging for environmental habitat\n           modelling of the Highland Haggis using object-oriented, fuzzy-logic\n           and neural-network techniques,\" Computers & Geosciences, vol. 22,\n           pp. 585-588, 1996.\n        \"\"\"\n    )\n    assert len(docstring.meta) == 4\n    assert docstring.meta[0].args == [\"see_also\"]\n    assert docstring.meta[0].description == (\n        \"something : some thing you can also see\\n\"\n        \"actually, anything can go in this section\"\n    )\n\n    assert docstring.meta[1].args == [\"warnings\"]\n    assert docstring.meta[1].description == \"Here be dragons\"\n\n    assert docstring.meta[2].args == [\"notes\"]\n    assert docstring.meta[2].description == \"None of this is real\"\n\n    assert docstring.meta[3].args == [\"references\"]", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_meta_with_args", "line_number": 231, "body": "def test_meta_with_args() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        :meta ene due rabe: asd\n        \"\"\"\n    )\n    assert docstring.short_description == \"Short description\"\n    assert len(docstring.meta) == 1\n    assert docstring.meta[0].args == [\"meta\", \"ene\", \"due\", \"rabe\"]\n    assert docstring.meta[0].description == \"asd\"", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_params", "line_number": 245, "body": "def test_params() -> None:\n    docstring = parse(\"Short description\")\n    assert len(docstring.params) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n\n        :param name: description 1\n        :param int priority: description 2\n        :param str? sender: description 3\n        :param str? message: description 4, defaults to 'hello'\n        :param str? multiline: long description 5,\n        defaults to 'bye'\n        \"\"\"\n    )\n    assert len(docstring.params) == 5\n    assert docstring.params[0].arg_name == \"name\"\n    assert docstring.params[0].type_name is None\n    assert docstring.params[0].description == \"description 1\"\n    assert docstring.params[0].default is None\n    assert not docstring.params[0].is_optional\n    assert docstring.params[1].arg_name == \"priority\"\n    assert docstring.params[1].type_name == \"int\"\n    assert docstring.params[1].description == \"description 2\"\n    assert not docstring.params[1].is_optional\n    assert docstring.params[1].default is None\n    assert docstring.params[2].arg_name == \"sender\"\n    assert docstring.params[2].type_name == \"str\"\n    assert docstring.params[2].description == \"description 3\"\n    assert docstring.params[2].is_optional\n    assert docstring.params[2].default is None\n    assert docstring.params[3].arg_name == \"message\"\n    assert docstring.params[3].type_name == \"str\"\n    assert (\n        docstring.params[3].description == \"description 4, defaults to 'hello'\"\n    )\n    assert docstring.params[3].is_optional\n    assert docstring.params[3].default == \"'hello'\"\n    assert docstring.params[4].arg_name == \"multiline\"\n    assert docstring.params[4].type_name == \"str\"\n    assert (\n        docstring.params[4].description\n        == \"long description 5,\\ndefaults to 'bye'\"\n    )\n    assert docstring.params[4].is_optional\n    assert docstring.params[4].default == \"'bye'\"", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/docstring_parser/docstring_parser/tests/test_rest.py", "function": "test_raises", "line_number": 356, "body": "def test_raises() -> None:\n    docstring = parse(\n        \"\"\"\n        Short description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 0\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :raises: description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name is None\n    assert docstring.raises[0].description == \"description\"\n\n    docstring = parse(\n        \"\"\"\n        Short description\n        :raises ValueError: description\n        \"\"\"\n    )\n    assert len(docstring.raises) == 1\n    assert docstring.raises[0].type_name == \"ValueError\"\n    assert docstring.raises[0].description == \"description\"", "is_method": false, "function_description": "Not Implemented"}]