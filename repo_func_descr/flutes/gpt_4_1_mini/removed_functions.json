[{"file": "./dataset/RepoExec/test-apps/flutes/flutes/fs.py", "function": "decorator", "line_number": 109, "body": "def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            if path is not None and os.path.exists(path):\n                with open(path, \"rb\") as f:\n                    ret = pickle.load(f)\n                if verbose:\n                    log(f\"{name} loaded from '{path}'\")\n            else:\n                ret = func(*args, **kwargs)\n                if path is not None:\n                    with open(path, \"wb\") as f:\n                        pickle.dump(ret, f)\n                    if verbose:\n                        log(f\"{name} saved to '{path}'\")\n            return ret\n\n        return wrapped", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/io.py", "function": "progress_open", "line_number": 100, "body": "def progress_open(path: PathType, mode: Literal['r'] = 'r', *, encoding: str = ...,\n                  verbose: bool = ..., buffer_size: int = ..., **kwargs) -> ProgressReader[str]: ...", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/io.py", "function": "progress_open", "line_number": 110, "body": "def progress_open(path: PathType, mode: str, *, encoding: str = ...,\n                  verbose: bool = ..., buffer_size: int = ..., **kwargs) -> ProgressReader[Any]: ...", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "safe_pool", "line_number": 644, "body": "def safe_pool(processes: int, *args, state_class: Literal[None] = None,\n              closing: Optional[List[Any]] = None, suppress_exceptions: bool = False, **kwargs) -> PoolType: ...", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "wait", "line_number": 48, "body": "def wait(self, timeout: Optional[float] = None) -> None:\n        pass", "is_method": true, "class_name": "DummyApplyResult", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "_no_op", "line_number": 115, "body": "def _no_op(self, *args, **kwargs):\n        pass", "is_method": true, "class_name": "DummyPool", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "starmap_async", "line_number": 526, "body": "def starmap_async(self,  # type: ignore[override]\n                      fn: Callable[..., R], iterable: Iterable[Iterable[Any]], chunksize: Optional[int] = None,\n                      callback: Optional[Callable[[T], None]] = None,\n                      error_callback: Optional[Callable[[BaseException], None]] = None,\n                      *, args: Iterable[Any] = (), kwds: Mapping[str, Any] = {}) -> 'mp.pool.ApplyResult[List[R]]':\n        r\"\"\"Non-blocking version of :meth:`starmap`.\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.starmap_async` for details.\n        \"\"\"", "is_method": true, "class_name": "PoolType", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "close_fn", "line_number": 698, "body": "def close_fn():\n        for fn in closing_fns:\n            fn()", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "wrapped_method", "line_number": 373, "body": "def wrapped_method(func, *args, **kwargs):\n            return pool_method(self._wrap_fn(func), *args, **kwargs)", "is_method": true, "class_name": "StatefulPool", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "new", "line_number": 874, "body": "def new(self, iterable: Iterable[T], update_frequency: Union[int, float] = 1, **kwargs) -> Iterator[T]:\n            ...", "is_method": true, "class_name": "Proxy", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "update", "line_number": 990, "body": "def update(self, n: int = 0, *, postfix: Optional[Dict[str, Any]] = None) -> None:\n            pass", "is_method": true, "class_name": "_DummyProxy", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "write", "line_number": 993, "body": "def write(self, message: str) -> None:\n            pass", "is_method": true, "class_name": "_DummyProxy", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "close", "line_number": 996, "body": "def close(self) -> None:\n            pass", "is_method": true, "class_name": "_DummyProxy", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/flutes/flutes/multiproc.py", "function": "run_initializer", "line_number": 66, "body": "def run_initializer():\n                initializer(*initargs)\n                return locals()", "is_method": true, "class_name": "DummyPool", "function_description": "Not Implemented"}]