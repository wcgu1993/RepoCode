[{"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/trees.py", "function": "get_tree_node", "line_number": 6, "body": "def get_tree_node(mapping, key, default=_sentinel, parent=False):\n    \"\"\"\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    \"\"\"\n    key = key.split(':')\n    if parent:\n        key = key[:-1]\n\n    # TODO Unlist my shit. Stop calling me please.\n\n    node = mapping\n    for node in key.split(':'):\n        try:\n            node = node[node]\n        except KeyError as exc:\n            node = default\n            break\n\n    if node is _sentinel:\n        raise exc\n    return node", "is_method": false, "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/mappings.py", "function": "__key_trans__", "line_number": 98, "body": "def __key_trans__(self, key, store=False, get=False, contains=False, delete=False):\n        return key", "is_method": true, "class_name": "HookableProxyMutableMapping", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/mappings.py", "function": "_wrap_as", "line_number": 310, "body": "def _wrap_as(cls):\n        return cls", "is_method": true, "class_name": "ProxyMutableAttrDict", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/mappings.py", "function": "__key_trans__", "line_number": 374, "body": "def __key_trans__(self, key, store=False, get=False, contains=False, delete=False):\n        self._handle_pid()\n        return key", "is_method": true, "class_name": "ProcessLocal", "function_description": "Not Implemented"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/props.py", "function": "_lazyclassprop", "line_number": 31, "body": "def _lazyclassprop(cls):\n        attr_name = '_%s_lazy_%s' % (cls.__name__, fn.__name__)\n        if not hasattr(cls, attr_name):\n            setattr(cls, attr_name, fn(cls))\n        return getattr(cls, attr_name)", "is_method": false, "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/python.py", "function": "__len__", "line_number": 31, "body": "def __len__(self):\n                    return 1 << 31", "is_method": true, "class_name": "X", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/ext/rwclassproperty.py", "function": "get_only", "line_number": 104, "body": "def get_only(cls):\n                get_only_cls(cls)\n                return sentinel.get_only", "is_method": true, "class_name": "Z", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/ext/rwclassproperty.py", "function": "get_set", "line_number": 109, "body": "def get_set(cls):\n                get_set_get_cls(cls)\n                return cls._get_set", "is_method": true, "class_name": "Z", "function_description": "Not sure"}, {"file": "./dataset/RepoExec/test-apps/pytutils/pytutils/ext/rwclassproperty.py", "function": "get_set", "line_number": 114, "body": "def get_set(cls, value):\n                get_set_set_cls(cls)\n                cls._get_set = value", "is_method": true, "class_name": "Z", "function_description": "Not sure"}]